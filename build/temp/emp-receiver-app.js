(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.empReceiverApp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _globalDocument = _dereq_('global/document');

var _globalDocument2 = _interopRequireDefault(_globalDocument);

var _empChromecastReceiver2Dev = _dereq_('emp-chromecast-receiver-2-dev');

var _empChromecastReceiver2Dev2 = _interopRequireDefault(_empChromecastReceiver2Dev);

var empPlayer = _empChromecastReceiver2Dev2['default'].empPlayer;

/**
* EMPReceiverApp - UIController that handle the ui-logic for the receiver.
* It instantiate the empReceiver and listen to events.
*  
* You make changes in this class to build your own Receiver, with your preferred look and feel.
*/

var EMPReceiverApp = (function () {
  function EMPReceiverApp() {
    var _this = this;

    _classCallCheck(this, EMPReceiverApp);

    var player = _globalDocument2['default'].getElementById('player');
    this.container_ = _globalDocument2['default'].getElementById('receiver');

    var options = {
      debug: false,
      statusText: 'EMP Receiver App',
      playerOptions: {
        empshaka: {
          abr: {
            // startBitrate 5Mbps
            defaultBandwidthEstimate: 5e6
          }
        }
      }
    };

    this.empReceiver_ = new _empChromecastReceiver2Dev2['default'](player, options, function () {
      _this.empReceiver_.player.on(empPlayer.Events.PLAYING, _this.onPlayStateChange.bind(_this));
      _this.empReceiver_.player.on(empPlayer.Events.PAUSE, _this.onPlayStateChange.bind(_this));
      _this.empReceiver_.player.on(empPlayer.Events.SEEKING, _this.onPlayStateChange.bind(_this));
      _this.empReceiver_.player.on(empPlayer.Events.WAITING, _this.onPlayStateChange.bind(_this));
      _this.empReceiver_.player.on(empPlayer.Events.ENDED, _this.onPlayStateChange.bind(_this));
      _this.empReceiver_.player.on(empPlayer.Events.ERROR, _this.onPlayStateChange.bind(_this));
    });

    this.empReceiver_.on(_empChromecastReceiver2Dev2['default'].Events.STATE_CHANGED, this.onStateChange.bind(this));
    this.empReceiver_.on(_empChromecastReceiver2Dev2['default'].Events.METADATA_UPDATED, this.onMetadataUpdate.bind(this));
    this.empReceiver_.on(_empChromecastReceiver2Dev2['default'].Events.RESOLUTION_CHANGED, this.onResolutionChanged.bind(this));
  }

  /**
  *  Initialize then receiver app
  */

  /**
  * Handle metadata changed, Update the mediaArt UI here
  *
  * @param {object} metadata {title:'', subtitle:'', images:[]}
  */

  EMPReceiverApp.prototype.onMetadataUpdate = function onMetadataUpdate(metadata) {
    this.onStateChange('update');
    var mediaArtworkImg = _globalDocument2['default'].getElementById('media-artwork-img');
    var mediaTitle = _globalDocument2['default'].getElementById('media-title');
    var mediaSubtitle = _globalDocument2['default'].getElementById('media-subtitle');
    if (mediaTitle) {
      mediaTitle.innerHTML = metadata.title || '';
    }
    if (mediaSubtitle) {
      mediaSubtitle.innerHTML = metadata.subtitle || '';
    }
    if (mediaArtworkImg && metadata.images && metadata.images.length > 0) {
      var image = this.imageSelector(metadata.images);
      mediaArtworkImg.src = image.url;
      mediaArtworkImg.height = image.height;
      mediaArtworkImg.width = image.width;
      mediaArtworkImg.style.display = 'block';
      mediaArtworkImg.style.position = 'absolute';
      mediaArtworkImg.style.bottom = '0px';
    } else {
      mediaArtworkImg.style.display = 'none';
    }
    //Show media info
    setTimeout((function () {
      this.onStateChange('playing');
    }).bind(this), 1000);
  };

  /**
  * Select the image to display for the asset
  * @param {Array} images image objects
  */

  EMPReceiverApp.prototype.imageSelector = function imageSelector(images) {
    var image = undefined;
    if (images.length > 0) {
      image = images[0];
    }
    for (var i = 0; i < images.length; i++) {
      if (images[i].url && images[i].type === 'chromecast') {
        return images[i];
      }
    }
    return image;
  };

  /**
  * Handle resolution changed, show/hide resolution text
  *
  * @param {string} resolution ['SD','HD','2K','4K']
  */

  EMPReceiverApp.prototype.onResolutionChanged = function onResolutionChanged(resolution) {
    var mediaResolutionHtml = _globalDocument2['default'].getElementById('media-resolution');
    if (!mediaResolutionHtml) {
      return;
    }
    if (resolution) {
      mediaResolutionHtml.innerHTML = resolution;
      mediaResolutionHtml.style.display = 'inline';
    } else {
      mediaResolutionHtml.style.display = 'none';
    }
  };

  /**
  *  Handle play state change,
  *
  * @param {Event} event the play state event that triggered this function
  * @param {object} data the data that was sent with the event
  */

  EMPReceiverApp.prototype.onPlayStateChange = function onPlayStateChange(event, data) {
    empPlayer.log('playStateChanged', event, data);
    if ('ended' === event.type) {
      // You can now load the next asset...
    } else if ('playing' === event.type) {
        var els = _globalDocument2['default'].getElementsByClassName('vjs-current-time');
        if (els && els.length > 0) {
          var timeDisplay = els[0];
          if (this.empReceiver_.player.isLive() && !this.empReceiver_.player.timeShiftEnabled()) {
            timeDisplay.style.display = 'none';
          } else {
            timeDisplay.style.display = 'block';
          }
        }
      } else if ('error' === event.type) {
        var error = this.empReceiver_.player.getError();
        this.showError(error ? error.message : data);
      }
  };

  /**
  *  Handle empReceiver state change,
  *
  * @param {string} state empReceiver.ReceiverStates ['launching', 'loading','buffering', 'seeking', 'playing', 'paused', 'done', 'idle']
  */

  EMPReceiverApp.prototype.onStateChange = function onStateChange(state) {
    this.container_.setAttribute('state', state);
    if (state === 'loading') {
      this.hideError();
    }
  };

  /**
  * show error message on screen
  *
  * @param {string} message
  */

  EMPReceiverApp.prototype.showError = function showError(message) {
    var errorDisplay = _globalDocument2['default'].getElementById('emp-error-display');
    if (errorDisplay) {
      errorDisplay.innerHTML = '[ERROR] ' + (message ? message : '');
      errorDisplay.style.display = 'block';
    }
  };

  /**
  * Hide error message on screen
  *
  */

  EMPReceiverApp.prototype.hideError = function hideError() {
    var errorDisplay = _globalDocument2['default'].getElementById('emp-error-display');
    if (errorDisplay) {
      errorDisplay.style.display = 'none';
    }
  };

  return EMPReceiverApp;
})();

function receiverAppInit() {
  empPlayer.log.setLogToBrowserConsole(true);
  _globalWindow2['default'].receiverApp = new EMPReceiverApp();
}

if (_globalDocument2['default'].readyState === 'loading' || _globalDocument2['default'].readyState === 'interactive') {
  _globalWindow2['default'].addEventListener('load', receiverAppInit);
} else {
  receiverAppInit();
}

},{"emp-chromecast-receiver-2-dev":2,"global/document":3,"global/window":4}],2:[function(_dereq_,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.empReceiver = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
/**
 * @license
 * EMP-Player 2.0.79-32 
 * Copyright Ericsson, Inc. <https://www.ericsson.com/>
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.empPlayer = factory());
}(this, (function () {

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof commonjsGlobal !== "undefined") {
    win = commonjsGlobal;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

var window_1 = win;

//TODO Remove this maybe not good for treeshaking
var videojsTmp = window_1.videojs;
var videojs$1 = videojsTmp;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};











var taggedTemplateLiteralLoose = function (strings, raw) {
  strings.raw = raw;
  return strings;
};

/**
 * EmpPlayerEvents - Holds all available player events
 *
 * @class EmpPlayerEvents
 */
var EmpPlayerEvents = function EmpPlayerEvents() {
  classCallCheck(this, EmpPlayerEvents);

  /**
  * Fired when video playback ends
  * @event ENDED
  */
  this.ENDED = 'ended';

  /**
  * Fired when an error occurs
  * @event ERROR
  */
  this.ERROR = 'error';

  /**
  * Fired when the player has downloaded data at the current playback position
  * @event LOADED_DATA
  */
  this.LOADED_DATA = 'loadeddata';

  /**
  * Fired when the timeshift changes
  * @event TIMESHIFT_CHANGE
  */
  this.TIMESHIFT_CHANGE = 'timeshiftchange';

  /**
  * Fired when the video duration changes
  * @event DURATION_CHANGE
  */
  this.DURATION_CHANGE = 'durationchange';

  /**
  * Fired when the player has initial duration and dimension information
  * @event LOADED_METADATA
  */
  this.LOADED_METADATA = 'loadedmetadata';

  /**
  * Fired when the player started seeking
  * @event SEEKING
  */
  this.SEEKING = 'seeking';

  /**
  * Fired when the current playback position has changed
  * @event TIME_UPDATE
  */
  this.TIME_UPDATE = 'timeupdate';

  /**
  * Fired when the user is active
  * @event USER_ACTIVE
  */
  this.USER_ACTIVE = 'useractive';

  /**
  * Fired when the user is inactive
  * @event USERIN_ACTIVE
  */
  this.USERIN_ACTIVE = 'userinactive';

  /**
  * Fired when the volume changes
  * @event VOLUME_CHANGE
  */
  this.VOLUME_CHANGE = 'volumechange';

  /**
  * Fired when the video is starting to load
  * @event LOAD_START
  */
  this.LOAD_START = 'loadstart';

  /**
  * Fired when the player can start playback
  * @event CAN_PLAY
  */
  this.CAN_PLAY = 'canplay';

  /**
  * Fired when the player has starting playback
  * @event PLAYING
  */
  this.PLAYING = 'playing';

  /**
  * Fired when the player starts buffering
  * @event WAITING
  */
  this.WAITING = 'waiting';

  /**
  * Fired when the player seeked to a different point in time
  * @event SEEKED
  */
  this.SEEKED = 'seeked';

  /**
  * Fired when playback is aborted
  * @event ABORT
  */
  this.ABORT = 'abort';

  /**
  * Fired when the player will start playing
  * @event PLAY
  */
  this.PLAY = 'play';

  /**
  * Fired when the player is paused
  * @event PAUSE
  */
  this.PAUSE = 'pause';

  /**
  * Fired when the player is destroyed.
  * @event DISPOSE
  */
  this.DISPOSE = 'dispose';

  /**
  * Fired when an AudioTrack object changes its enabled value
  * @event MODE_CHANGE
  */
  this.MODE_CHANGE = 'modechange';

  /**
  * Fired when a state changes. Used for example when an AudioTrack changes its enabled value
  * @event CHANGE
  */
  this.CHANGE = 'change';

  /**
  * Fired when an AudioTrack object has been added to an AudioTrackList object.
  * @event ADD_TRACK
  */
  this.ADD_TRACK = 'addtrack';

  /**
  * Fired when an AudioTrack object has been removed from an AudioTrackList object.
  * @event REMOVE_TRACK
  */
  this.REMOVE_TRACK = 'removetrack';

  /**
  * Fired by Dash.js when a metric changes
  * @event METRIC_CHANGED
  */
  this.METRIC_CHANGED = 'metricchanged';

  /**
  * Fired when a recoverable asset error occurs
  * @event RECOVERABLE_ASSET_ERROR
  */
  this.RECOVERABLE_ASSET_ERROR = 'recoverableasseterror';

  /**
  * Fired when the video bitrate changes
  * @event BITRATE_CHANGED
  */
  this.BITRATE_CHANGED = 'bitratechanged';

  /**
  * Used when something closes. Fired by VideoJS when the CloseButton closes
  * @event CLOSE
  */
  this.CLOSE = 'close';

  /**
  * Used when something is ready. Fired when the tech is ready
  * @event READY
  */
  this.READY = 'ready';

  /**
  * Used when an html element resizes. Fired when the video element changes size
  * @event RESIZE
  */
  this.RESIZE = 'resize';

  /**
  * Used when an html element is tapped. Fired by VideoJS on components
  * @event TAP
  */
  this.TAP = 'tap';

  /**
  * Used when an html element is clicked. Fired by VideoJS on components
  * @event CLICK
  */
  this.CLICK = 'click';

  /**
  * Used when an html element gains focus. Fired by VideoJS on components
  * @event FOCUS
  */
  this.FOCUS = 'focus';

  /**
  * Used when an html element loses focus. Fired by VideoJS on components
  * @event BLUR
  */
  this.BLUR = 'blur';

  /**
  * Used when a modal html view is about to be opened. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_OPEN
  */
  this.BEFORE_MODAL_OPEN = 'beforemodalopen';

  /**
  * Used when a modal html view has been opened. Fired by VideoJS on the ModalDialog
  * @event MODAL_OPEN
  */
  this.MODAL_OPEN = 'modalopen';

  /**
  * Used when a modal html view will be closed. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_CLOSE
  */
  this.BEFORE_MODAL_CLOSE = 'beforemodalclose';

  /**
  * Used when a modal html view has been closed. Fired by VideoJS on the ModalDialog
  * @event MODAL_CLOSE
  */
  this.MODAL_CLOSE = 'modalclose';

  /**
  * Used when a modal html view will be populated with html content. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_FILL
  */
  this.BEFORE_MODAL_FILL = 'beforemodalfill';

  /**
  * Used when a modal html view has been populated with html content. Fired by VideoJS on the ModalDialog
  * @event MODAL_FILL
  */
  this.MODAL_FILL = 'modalfill';

  /**
  * Used when a modal html view will clear its content. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_EMPTY
  */
  this.BEFORE_MODAL_EMPTY = 'beforemodalempty';

  /**
  * Used when a modal html view has cleared its content. Fired by VideoJS on the ModalDialog
  * @event MODAL_EMPTY
  */
  this.MODAL_EMPTY = 'modalempty';

  /**
  * Enough data has been loaded to play the media up to its end
  * @event CAN_PLAY_THROUGH
  */
  this.CAN_PLAY_THROUGH = 'canplaythrough';

  /**
  * Video is played for the first time
  * @event FIRST_PLAY
  */
  this.FIRST_PLAY = 'firstplay';

  /**
  * When the user agent is downloading media data
  * @event PROGRESS
  */
  this.PROGRESS = 'progress';

  /**
  * When the player is suspended from downloading media data
  * @event SUSPEND
  */
  this.SUSPEND = 'suspend';

  /**
  * When the current playlist is empty
  * @event EMPTIED
  */
  this.EMPTIED = 'emptied';

  /**
  * When the player is trying to get media data, but data is not available
  * @event STALLED
  */
  this.STALLED = 'stalled';

  /**
  * When the playing speed of the audio/video is changed
  * @event RATE_CHANGE
  */
  this.RATE_CHANGE = 'ratechange';

  /**
  * When the text track has been changed
  * @event TEXT_TRACK_CHANGE
  */
  this.TEXT_TRACK_CHANGE = 'texttrackchange';

  /**
  * When the track has been changed
  * @event TRACK_CHANGE
  */
  this.TRACK_CHANGE = 'trackchanged';

  /**
  * When the video poster changes
  * @event POSTER_CHANGE
  */
  this.POSTER_CHANGE = 'posterchange';

  /**
  * When a key is down
  * @event KEY_DOWN
  */
  this.KEY_DOWN = 'keydown';

  /**
  * When a key is up
  * @event KEY_UP
  */
  this.KEY_UP = 'keyup';

  /**
  * When the mouse is down
  * @event MOUSE_DOWN
  */
  this.MOUSE_DOWN = 'mousedown';

  /**
  * When the mouse is moved
  * @event MOUSE_MOVE
  */
  this.MOUSE_MOVE = 'mousemove';

  /**
  * When the mouse is up
  * @event MOUSE_UP
  */
  this.MOUSE_UP = 'mouseup';

  /**
  * When touch started
  * @event TOUCH_START
  */
  this.TOUCH_START = 'touchstart';

  /**
  * When touch moved
  * @event TOUCH_MOVE
  */
  this.TOUCH_MOVE = 'touchmove';

  /**
  * When touch ended
  * @event TOUCH_END
  */
  this.TOUCH_END = 'touchend';

  /**
  * When a touch point is moved off the interactive area of an element
  * @event TOUCH_LEAVE
  */
  this.TOUCH_LEAVE = 'touchleave';

  /**
  * When a touch point has been disrupted
  * @event TOUCH_CANCEL
  */
  this.TOUCH_CANCEL = 'touchcancel';

  /**
  * When the fullscreen state changes
  * @event FULLSCREEN_CHANGE
  */
  this.FULLSCREEN_CHANGE = 'fullscreenchange';

  /**
  * When fullscreen isn't supported and the video will resize to the window
  * @event ENTER_FULL_WINDOW
  */
  this.ENTER_FULL_WINDOW = 'enterFullWindow';

  /**
  * When exiting full window
  * @event EXIT_FULL_WINDOW
  */
  this.EXIT_FULL_WINDOW = 'exitFullWindow';

  /**
  * When controls are enabled
  * @event CONTROLS_ENABLED
  */
  this.CONTROLS_ENABLED = 'controlsenabled';

  /**
  * When controls are disabled
  * @event CONTROLS_DISABLED
  */
  this.CONTROLS_DISABLED = 'controlsdisabled';

  /**
  * When native tech or device controls are being used
  * @event USING_NATIVE_CONTROLS
  */
  this.USING_NATIVE_CONTROLS = 'usingnativecontrols';

  /**
  * When custom controls are being used
  * @event USING_CUSTOM_CONTROLS
  */
  this.USING_CUSTOM_CONTROLS = 'usingcustomcontrols';

  /**
  * Fired when a VideoJS slider is active
  * @event SLIDER_ACTIVE
  */
  this.SLIDER_ACTIVE = 'slideractive';

  /**
  * Fired when a VideoJS slider is inactive
  * @event SLIDER_INACTIVE
  */
  this.SLIDER_INACTIVE = 'sliderinactive';

  /**
   * Fired when a new entitlement is used to start playback
   */
  this.ENTITLEMENT_CHANGE = 'entitlementchange';

  /**
   * Fired when the entitlement loading starts
   */
  this.ENTITLEMENT_LOAD_START = 'entitlementloadstart';

  /**
   * Fired when the player is initalized
   */
  this.PLAYER_CREATED = 'playercreated';

  /**
   * Fired when playback is restarted
   */
  this.RESTARTING = 'restarting';

  this.SEGMENTS_UPDATED = 'segmentsupdated';
  this.SEGMENT_CHANGED = 'segmentchanged';

  /**
   * Fired when chromecast begins casting
   */
  this.CHROMECAST_CASTING = 'chromecastcasting';

  /**
   * Fired when chromecast has stopped casting
   */
  this.CHROMECAST_STOPPED = 'chromecaststopped';

  /**
   * Fired when playback is stopped
   */
  this.STOPPED = 'stopped';

  /**
   * Fired when the video is ready to be played
   */
  this.READY_TO_PLAY = 'readytoplay';

  /**
   * Fired when program changes in a live or catchUp stream
    */
  this.PROGRAM_CHANGED = 'programchanged';

  /**
  * Fired when vod/asset changes
   */
  this.ASSET_CHANGED = 'assetchanged';

  /**
   * Fired when prefetch segment before seek in a vod/catchup stream
  */
  this.SEGMENT_MISSING = 'segmentmissing';

  /**
  * Fired when airplayStart
  */
  this.AIRPLAY_START = 'airplayStart';

  /**
  * Fired when replay
  */
  this.REPLAY = 'replay';
};

var empPlayerEvents = new EmpPlayerEvents();

/**
 * Get the keys of an Object
 *
 * @param {Object}
 *        The Object to get the keys from
 *
 * @return {string[]}
 *         An array of the keys from the object. Returns an empty array if the
 *         object passed in was invalid or had no keys.
 *
 * @private
 */
var keys = function keys(object) {
  return isObject(object) ? Object.keys(object) : [];
};

/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {obj:EachCallback} fn
 *        The callback function which is called for each key in the object.
 */
function each(object, fn) {
  keys(object).forEach(function (key) {
    return fn(object[key], key);
  });
}

/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {Mixed} [initial = 0]
 *        Starting value
 *
 * @return {Mixed}
 *         The final accumulated value.
 */
function reduce(object, fn) {
  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  return keys(object).reduce(function (accum, key) {
    return fn(accum, object[key], key);
  }, initial);
}

/**
 * Object.assign-style object shallow merge/extend.
 *
 * @param  {Object} target
 * @param  {Object} ...sources
 * @return {Object}
 */


/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value
 * @return {Boolean}
 */
function isObject(value) {
  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value
 * @return {Boolean}
 */

/*global
  document, atob
*/










function isString(val) {
  return typeof val === 'string' || !!val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && Object.prototype.toString.call(val) === '[object String]';
}

function parseSrc(src) {
  var asset = {
    assetId: undefined,
    programId: undefined,
    channelId: undefined
  };
  try {
    asset = JSON.parse(src);
  } catch (e) {
    asset.assetId = src;
  }
  if (asset.channelId) {
    asset.assetId = asset.channelId;
  }
  return asset;
}

/**
 * Filter out single bad source objects or multiple source objects in an
 * array.Also flattens nested source object arrays into a 1 dimensional
 * array of source objects.
 */
function filterSource(src) {
  // traverse array
  if (Array.isArray(src)) {
    var newsrc = [];

    src.forEach(function (srcobj) {
      srcobj = filterSource(srcobj);

      if (Array.isArray(srcobj)) {
        newsrc = newsrc.concat(srcobj);
      } else if (isObject(srcobj)) {
        newsrc.push(srcobj);
      }
    });

    src = newsrc;
  } else if (typeof src === 'string' && src.trim()) {
    // convert string into object
    src = [{ src: src }];
  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
    // src is already valid
    src = [src];
  } else {
    // invalid source, turn it into an empty array
    src = [];
  }

  return src;
}

function getParameterByName(name, url) {
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

/**
 * EmpPlayerErrorCodes - Holds all available error codes
 * EmpPlayerError - Emp custom Error object
 *
 * @class EmpPlayerError
 */

var EmpPlayerErrorCodes = {
  UNKNOWN: 100,

  LOAD_ASSET: 101,

  ENTITLEMENT: 102,

  SHAKA_TECH: 200,

  HLS_TECH: 300,

  FLASH_TECH: 400,

  CHROMECAST_TECH: 500
};

var EmpPlayerError = function (_Error) {
  inherits(EmpPlayerError, _Error);

  function EmpPlayerError(value) {
    var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmpPlayerErrorCodes.UNKNOWN;
    var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    classCallCheck(this, EmpPlayerError);

    var _this = possibleConstructorReturn(this, _Error.call(this));

    _this.code = code;
    if (isString(value)) {
      _this.message = value;
    } else if (value.message) {
      _this.message = value.message;
    }
    _this.status = status;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, EmpPlayerError);
    }
    return _this;
  }

  createClass(EmpPlayerError, [{
    key: 'codes',
    get: function get$$1() {
      return EmpPlayerErrorCodes;
    }
  }]);
  return EmpPlayerError;
}(Error);

var logToBrowserConsole = false;

var log_temp = function log_temp() {
  if (logToBrowserConsole) {
    _log(null, arguments);
  }
};

// Allway log if EMP_DEBUG_LOG and with correct stack trace
if (window_1.EMP_DEBUG_LOG) {
  log_temp = window_1.console && window_1.console.log && console.log.bind(console) || function () {};
}

/**
 * Log plain debug messages
 * @method log
 */
var log$1 = log_temp;

/**
 * Keep a history of log messages
 * @type {Array}
 */
log$1.history = [];

/**
 * Log error messages
 */
log$1.error = function () {
  _log('error', arguments);
};

/**
 * Log warning messages
 */
log$1.warn = function () {
  _log('warn', arguments);
};

/**
 * Log debug  messages
 */
log$1.debug = function () {
  _log('debug', arguments);
};

// Allway log if EMP_DEBUG_LOG and with correct stack trace
if (window_1.EMP_DEBUG_LOG) {
  var noop = function noop() {};
  log$1.debug = window_1.console && window_1.console.debug && console.debug.bind(console) || noop;
  log$1.warn = window_1.WARN = window_1.console && window_1.console.warn && console.warn.bind(console) || noop;
  log$1.error = window_1.ERROR = window_1.console && window_1.console.error && console.error.bind(console) || noop;
}

/**
 * setLogToBrowserConsole and debug mode
 */
log$1.setLogToBrowserConsole = function () {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  logToBrowserConsole = value;
};

/**
 * Log messages to the console and history based on the type of message
 *
 * @param {String} type The type of message, or 'null' for 'log'
 * @param {Object} args The arguments to be passed to the log
 * @private
 * @method _log
 */
function _log(type, args) {
  // converts args to an array to get array functions
  var argsArray = Array.prototype.slice.call(args);

  // if there's no console then don't try to output messages
  // they will be stored in the log.history
  var noop = function noop() {};

  var console = window_1['console'] || {
    'log': noop,
    'warn': noop,
    'error': noop,
    'trace': noop
  };

  if (type) {
    // add log type in front of message
    argsArray.unshift(type.toUpperCase() + ':');
  } else {
    type = 'log';
  }

  // add to history
  //log.history.push(argsArray);

  // add console prefix after adding to history
  argsArray.unshift('EMPPlayer:');

  // call the appropriate log function
  if (console[type].apply) {
    console[type].apply(console, argsArray);
  } else {
    console[type](argsArray.join(' '));
  }
}

/**
 * Unique ID for an element or function
 * @type {Number}
 * @private
 */
var _guid = 1;

/**
 * Get the next unique ID
 *
 * @return {String}
 * @function newGUID
 */
function newGUID() {
  return _guid++;
}

/**
 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
 * It also stores a unique id on the function so it can be easily removed from events.
 *
 * @param {Mixed} context
 *        The object to bind as scope.
 *
 * @param {Function} fn
 *        The function to be bound to a scope.
 *
 * @param {number} [uid]
 *        An optional unique ID for the function to be set
 *
 * @return {Function}
 *         The new function that will be bound into the context given
 */
var bind = function bind(context, fn, uid) {
  // Make sure the function has a unique ID
  if (!fn.guid) {
    fn.guid = newGUID();
  }

  // Create the new function that changes the context
  var bound = function bound() {
    return fn.apply(context, arguments);
  };

  // Allow for the ability to individualize this function
  // Needed in the case where multiple objects might share the same prototype
  // IF both items add an event listener with the same function, then you try to remove just one
  // it will remove both because they both have the same guid.
  // when using this, you need to use the bind method when you remove the listener as well.
  // currently used in text tracks
  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

  return bound;
};

/**
 * Wraps the given function, `fn`, with a new function that only invokes `fn`
 * at most once per every `wait` milliseconds.
 *
 * @param  {Function} fn
 *         The function to be throttled.
 *
 * @param  {Number}   wait
 *         The number of milliseconds by which to throttle.
 *
 * @return {Function}
 */
var throttle = function throttle(fn, wait) {
  var last = Date.now();

  var throttled = function throttled() {
    var now = Date.now();

    if (now - last >= wait) {
      fn.apply(undefined, arguments);
      last = now;
    }
  };

  return throttled;
};

var empty = {};


var empty$1 = (Object.freeze || Object)({
	'default': empty
});

var minDoc = ( empty$1 && empty ) || empty$1;

var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
    typeof window !== 'undefined' ? window : {};


var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

var document_1 = doccy;

var MenuItem = videojs$1.getComponent('MenuItem');
var Component$3 = videojs$1.getComponent('Component');

/**
 * The specific menu item type for selecting a bitrate
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @extends MenuItem
 * @class BitrateMenuItem
 */

var BitrateMenuItem = function (_MenuItem) {
  inherits(BitrateMenuItem, _MenuItem);

  function BitrateMenuItem(player, options) {
    classCallCheck(this, BitrateMenuItem);

    var bitrate = options['bitrate'];

    // Modify options for parent MenuItem class's init.
    options['label'] = bitrate === 0 ? 'auto' : Math.max(0, Math.round(bitrate / 1000)) + 'Kb/s';
    options['selected'] = player.bitrate() === bitrate;

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.bitrate = bitrate;

    _this.player_.on(empPlayerEvents.BITRATE_CHANGED, function (event, data) {
      if (_this.el()) {
        _this.selected(data.bitrate === _this.bitrate);
      }
    });
    return _this;
  }

  /**
   * Handle click on audio track
   */


  BitrateMenuItem.prototype.handleClick = function handleClick(event) {
    this.player_.bitrate(this.bitrate);
  };

  return BitrateMenuItem;
}(MenuItem);

Component$3.registerComponent('BitrateMenuItem', BitrateMenuItem);

var MenuButton = videojs$1.getComponent('MenuButton');
var Component$2 = videojs$1.getComponent('Component');

/**
 * The base class for buttons that toggle specific bitrate
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @extends MenuButton
 * @class BitrateButton
 */

var BitrateButton = function (_MenuButton) {
  inherits(BitrateButton, _MenuButton);

  function BitrateButton(player, options) {
    classCallCheck(this, BitrateButton);

    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

    _this.el_.setAttribute('aria-label', 'Bitrate menu');
    var bitrates = _this.player_.bitrates();

    if (_this.items.length <= 1) {
      _this.hide();
    }

    var updateHandler = bind(_this, _this.update);
    _this.player_.on(empPlayerEvents.LOADED_DATA, updateHandler);
    _this.player_.on(empPlayerEvents.CHROMECAST_CASTING, updateHandler);

    _this.player_.on(empPlayerEvents.ENDED, function () {
      return _this.hide();
    });
    _this.player_.on(empPlayerEvents.PLAYING, function () {
      if (_this.items.length > 1) {
        _this.show();
      }
    });

    _this.player_.on(empPlayerEvents.DISPOSE, function () {
      this.player_.on(empPlayerEvents.LOADED_DATA, updateHandler);
    });
    return _this;
  }

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  BitrateButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-bitrate-button ' + _MenuButton.prototype.buildCSSClass.call(this);
  };

  //buildWrapperCSSClass() {
  //  return `vjs-bitrate-button ${super.buildWrapperCSSClass()}`;
  //}

  /**
   * Create sub-menu items
   *
   * @param {Array=} items
   * @returns {Array} Array of BitrateMenuItems
   */


  BitrateButton.prototype.createItems = function createItems() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var bitrates = this.player_.bitrates();

    if (!bitrates) {
      return items;
    }

    if (bitrates.length > 0) {
      // add an AUTO menu item
      items.push(new BitrateMenuItem(this.player_, {
        'selectable': true,
        'bitrate': 0
      }));
    }

    for (var i = 0; i < bitrates.length; i++) {
      var bitrate = bitrates[i];

      items.push(new BitrateMenuItem(this.player_, {
        // MenuItem is selectable
        'selectable': true,
        'bitrate': bitrate
      }));
    }

    return items;
  };

  return BitrateButton;
}(MenuButton);

BitrateButton.prototype.controlText_ = 'Bitrate';

Component$2.registerComponent('BitrateButton', BitrateButton);

function clean (s) {
  return s.replace(/\n\r?\s*/g, '')
}


var tsml = function tsml (sa) {
  var s = ''
    , i = 0;

  for (; i < arguments.length; i++)
    s += clean(sa[i]) + (arguments[i + 1] || '');

  return s
};

/**
 * A safe getComputedStyle with an IE8 fallback.
 *
 * This is needed because in Firefox, if the player is loaded in an iframe with
 * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
 * make sure  that the player doesn't break in these cases.
 *
 * @param {Element} el
 *        The element you want the computed style of
 *
 * @param {string} prop
 *        The property name you want
 *
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 *
 * @static
 * @const
 */
function computedStyle(el, prop) {
  if (!el || !prop) {
    return '';
  }

  if (typeof window_1.getComputedStyle === 'function') {
    var cs = window_1.getComputedStyle(el);

    return cs ? cs[prop] : '';
  }

  return el.currentStyle[prop] || '';
}

var _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

/**
 * Whether the current DOM interface appears to be real.
 *
 * @return {Boolean}
 */
function isReal() {
  return (

    // Both document and window will never be undefined thanks to `global`.
    document_1 === window_1.document &&

    // In IE < 9, DOM methods return "object" as their type, so all we can
    // confidently check is that it exists.
    typeof document_1.createElement !== 'undefined'
  );
}

/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @param {Mixed} value
 *        The thing to check
 *
 * @return {boolean}
 *         - True if it is a DOM element
 *         - False otherwise
 */
function isEl(value) {
  return isObject(value) && value.nodeType === 1;
}

/**
 * Determines if the current DOM is embedded in an iframe.
 *
 * @return {boolean}
 *
 */


/**
 * Creates an element and applies properties.
 *
 * @param {string} [tagName='div']
 *         Name of tag to be created.
 *
 * @param {Object} [properties={}]
 *         Element properties to be applied.
 *
 * @param {Object} [attributes={}]
 *         Element attributes to be applied.
 *
 * @param {String|Element|TextNode|Array|Function} [content]
 *         Contents for the element (see: {@link dom:normalizeContent})
 *
 * @return {Element}
 *         The element that was created.
 */
function createEl() {
  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var content = arguments[3];

  var el = document_1.createElement(tagName);

  Object.getOwnPropertyNames(properties).forEach(function (propName) {
    var val = properties[propName];

    // See #2176
    // We originally were accepting both properties and attributes in the
    // same object, but that doesn't work so well.
    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
      log$1.warn(tsml(_templateObject, propName, val));
      el.setAttribute(propName, val);

      // Handle textContent since it's not supported everywhere and we have a
      // method for it.
    } else if (propName === 'textContent') {
      textContent(el, val);
    } else {
      el[propName] = val;
    }
  });

  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
    el.setAttribute(attrName, attributes[attrName]);
  });

  if (content) {
    appendContent(el, content);
  }

  return el;
}

/**
 * Injects text into an element, replacing any existing contents entirely.
 *
 * @param {Element} el
 *        The element to add text content into
 *
 * @param {string} text
 *        The text content to add.
 *
 * @return {Element}
 *         The element with added text content.
 */
function textContent(el, text) {
  if (typeof el.textContent === 'undefined') {
    el.innerText = text;
  } else {
    el.textContent = text;
  }
  return el;
}

/**
 * Insert an element as the first child node of another
 *
 * @param {Element} child
 *        Element to insert
 *
 * @param {Element} parent
 *        Element to insert child into
 */


/**
 * Check if an element has a CSS class
 *
 * @param {Element} element
 *        Element to check
 *
 * @param {string} classToCheck
 *        Class name to check for
 *
 * @return {boolean}
 *         - True if the element had the class
 *         - False otherwise.
 *
 * @throws {Error}
 *         Throws an error if `classToCheck` has white space.
 */


/**
 * Add a CSS class name to an element
 *
 * @param {Element} element
 *        Element to add class name to.
 *
 * @param {string} classToAdd
 *        Class name to add.
 *
 * @return {Element}
 *         The dom element with the added class name.
 */


/**
 * Remove a CSS class name from an element
 *
 * @param {Element} element
 *        Element to remove a class name from.
 *
 * @param {string} classToRemove
 *        Class name to remove
 *
 * @return {Element}
 *         The dom element with class name removed.
 */


/**
 * The callback definition for toggleElClass.
 *
 * @callback Dom~PredicateCallback
 * @param {Element} element
 *        The DOM element of the Component.
 *
 * @param {string} classToToggle
 *        The `className` that wants to be toggled
 *
 * @return {boolean|undefined}
 *         - If true the `classToToggle` will get added to `element`.
 *         - If false the `classToToggle` will get removed from `element`.
 *         - If undefined this callback will be ignored
 */

/**
 * Adds or removes a CSS class name on an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @param {Element} element
 *        The element to toggle a class name on.
 *
 * @param {string} classToToggle
 *        The class that should be toggled
 *
 * @param {boolean|PredicateCallback} [predicate]
 *        See the return value for {@link Dom~PredicateCallback}
 *
 * @return {Element}
 *         The element with a class that has been toggled.
 */


/**
 * Apply attributes to an HTML element.
 *
 * @param {Element} el
 *        Element to add attributes to.
 *
 * @param {Object} [attributes]
 *        Attributes to be applied.
 */


/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 *
 * @param {Element} tag
 *        Element from which to get tag attributes.
 *
 * @return {Object}
 *         All attributes of the element.
 */


/**
 * Get the value of an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to get the value of
 *
 * @return {string}
 *         value of the attribute
 */


/**
 * Set the value of an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to set
 *
 * @param {string} value
 *        Value to set the attribute to
 */


/**
 * Remove an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to remove
 */


/**
 * Attempt to block the ability to select text while dragging controls
 */


/**
 * Turn off text selection blocking
 */


/**
 * Identical to the native `getBoundingClientRect` function, but ensures that
 * the method is supported at all (it is in all browsers we claim to support)
 * and that the element is in the DOM before continuing.
 *
 * This wrapper function also shims properties which are not provided by some
 * older browsers (namely, IE8).
 *
 * Additionally, some browsers do not support adding properties to a
 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
 * properties (except `x` and `y` which are not widely supported). This helps
 * avoid implementations where keys are non-enumerable.
 *
 * @param  {Element} el
 *         Element whose `ClientRect` we want to calculate.
 *
 * @return {Object|undefined}
 *         Always returns a plain
 */
function getBoundingClientRect(el) {
  if (el && el.getBoundingClientRect && el.parentNode) {
    var rect = el.getBoundingClientRect();
    var result = {};

    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {
      if (rect[k] !== undefined) {
        result[k] = rect[k];
      }
    });

    if (!result.height) {
      result.height = parseFloat(computedStyle(el, 'height'));
    }

    if (!result.width) {
      result.width = parseFloat(computedStyle(el, 'width'));
    }

    return result;
  }
}

/**
 * The postion of a DOM element on the page.
 *
 * @typedef {Object} module:dom~Position
 *
 * @property {number} left
 *           Pixels to the left
 *
 * @property {number} top
 *           Pixels on top
 */

/**
 * Offset Left.
 * getBoundingClientRect technique from
 * John Resig
 *
 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
 *
 * @param {Element} el
 *        Element from which to get offset
 *
 * @return {module:dom~Position}
 *         The position of the element that was passed in.
 */


/**
 * x and y coordinates for a dom element or mouse pointer
 *
 * @typedef {Object} Dom~Coordinates
 *
 * @property {number} x
 *           x coordinate in pixels
 *
 * @property {number} y
 *           y coordinate in pixels
 */

/**
 * Get pointer position in element
 * Returns an object with x and y coordinates.
 * The base on the coordinates are the bottom left of the element.
 *
 * @param {Element} el
 *        Element on which to get the pointer position on
 *
 * @param {EventTarget~Event} event
 *        Event object
 *
 * @return {Dom~Coordinates}
 *         A Coordinates object corresponding to the mouse position.
 *
 */


/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @param {Mixed} value
 *        Check if this value is a text node.
 *
 * @return {boolean}
 *         - True if it is a text node
 *         - False otherwise
 */
function isTextNode(value) {
  return isObject(value) && value.nodeType === 3;
}

/**
 * Empties the contents of an element.
 *
 * @param {Element} el
 *        The element to empty children from
 *
 * @return {Element}
 *         The element with no children
 */


/**
 * Normalizes content for eventual insertion into the DOM.
 *
 * This allows a wide range of content definition methods, but protects
 * from falling into the trap of simply writing to `innerHTML`, which is
 * an XSS concern.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        - String: Normalized into a text node.
 *        - Element/TextNode: Passed through.
 *        - Array: A one-dimensional array of strings, elements, nodes, or functions
 *          (which return single strings, elements, or nodes).
 *        - Function: If the sole argument, is expected to produce a string, element,
 *          node, or array as defined above.
 *
 * @return {Array}
 *         All of the content that was passed in normalized.
 */
function normalizeContent(content) {

  // First, invoke content if it is a function. If it produces an array,
  // that needs to happen before normalization.
  if (typeof content === 'function') {
    content = content();
  }

  // Next up, normalize to an array, so one or many items can be normalized,
  // filtered, and returned.
  return (Array.isArray(content) ? content : [content]).map(function (value) {

    // First, invoke value if it is a function to produce a new value,
    // which will be subsequently normalized to a Node of some kind.
    if (typeof value === 'function') {
      value = value();
    }

    if (isEl(value) || isTextNode(value)) {
      return value;
    }

    if (typeof value === 'string' && /\S/.test(value)) {
      return document_1.createTextNode(value);
    }
  }).filter(function (value) {
    return value;
  });
}

/**
 * Normalizes and appends content to an element.
 *
 * @param {Element} el
 *        Element to append normalized content to.
 *
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        See the `content` argument of {@link dom:normalizeContent}
 *
 * @return {Element}
 *         The element with appended normalized content.
 */
function appendContent(el, content) {
  normalizeContent(content).forEach(function (node) {
    return el.appendChild(node);
  });
  return el;
}

/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * @param {Element} el
 *        Element to insert normalized content into.
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        See the `content` argument of {@link dom:normalizeContent}
 *
 * @return {Element}
 *         The element with inserted normalized content.
 *
 */


/**
 * Finds a single DOM element matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param {string} selector
 *        A valid CSS selector, which will be passed to `querySelector`.
 *
 * @param {Element|String} [context=document]
 *        A DOM element within which to query. Can also be a selector
 *        string in which case the first matching element will be used
 *        as context. If missing (or no element matches selector), falls
 *        back to `document`.
 *
 * @return {Element|null}
 *         The element that was found or null.
 */


/**
 * Finds a all DOM elements matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param {string} selector
 *           A valid CSS selector, which will be passed to `querySelectorAll`.
 *
 * @param {Element|String} [context=document]
 *           A DOM element within which to query. Can also be a selector
 *           string in which case the first matching element will be used
 *           as context. If missing (or no element matches selector), falls
 *           back to `document`.
 *
 * @return {NodeList}
 *         A element list of elements that were found. Will be empty if none were found.
 *
 */

var extplayer = {
  bitrates: function bitrates(player) {
    if (!player.tech_ || player.tech_['bitrates'] === undefined) return [];

    return player.techGet_('bitrates');
  },
  bitrate: function bitrate(player, value) {
    if (!player.tech_ || player.tech_['bitrate'] === undefined) return 0;

    if (value !== undefined) {
      player.techCall_('bitrate', value);
    }
    return player.techGet_('bitrate');
  },
  canRestart: function canRestart(player) {
    if (!player.tech_ || player.tech_['canRestart'] === undefined) return true;

    return player.techGet_('canRestart');
  },
  restart: function restart(player, useLastViewedOffset) {
    if (player.currentSource()) {
      player.options_.startTime = 0;
      player.options_.absoluteStartTime = undefined;
      player.previousAbsoluteStartTime = undefined;

      if (!player.options_.autoplay) {
        // User-action to restart, enforce autoplay
        player.options_.autoplay = true;
        player.one('play', function () {
          player.options_.autoplay = false;
        });
      }
      player.trigger(empPlayerEvents.RESTARTING);
      player.options_.useLastViewedOffset = useLastViewedOffset;
      player.trigger(empPlayerEvents.REPLAY);
    }
  },
  getSelectedAudioTrack: function getSelectedAudioTrack(player) {
    var audioTracks = player.audioTracks();
    var i = audioTracks.length;
    while (i--) {
      var track = audioTracks[i];
      if (track.enabled) {
        return track.language;
      }
    }
    return null;
  },
  getSelectedTextTrack: function getSelectedTextTrack(player) {
    var textTracks = player.textTracks();
    var i = textTracks.length;
    while (i--) {
      var track = textTracks[i];
      if (track.mode === 'showing') {
        return track.language;
      }
    }
    return null;
  },
  loadAsset: function loadAsset(player, assetId, programId, channelId) {
    var callback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};

    var asset = { 'assetId': assetId ? assetId : channelId, 'programId': programId, 'channelId': channelId };
    player.on(empPlayerEvents.LOADED_DATA, function () {
      //Clone of entitlement
      callback(player.entitlement);
    });
    player.src({ 'type': 'video/emp', 'src': JSON.stringify(asset) });
  },
  currentAsset: function currentAsset(player, assetId, programId, channelId) {
    if (!assetId && !programId && !channelId) {
      var srcObj = player.cache_.source;
      if (srcObj && srcObj.src && srcObj.type === 'video/emp') {
        var asset = parseSrc(srcObj.src);
        return asset;
      } else if (srcObj && srcObj.assetId) {
        return {
          assetId: srcObj.channelId ? srcObj.channelId : srcObj.assetId,
          programId: srcObj.programId,
          channelId: srcObj.channelId
        };
      }
      return null;
    }
    log$1('Update currentAsset', assetId, programId, channelId);
    if (player.cache_.source && player.cache_.source.type === 'video/emp') {
      player.cache_.source.src = JSON.stringify({ 'assetId': assetId, 'programId': programId, 'channelId': channelId });
    } else if (player.cache_.source && player.cache_.source.assetId) {
      player.cache_.source.assetId = assetId;
      player.cache_.source.programId = programId;
      player.cache_.source.channelId = channelId;
    } else {
      var _asset = { 'assetId': assetId, 'programId': programId, 'channelId': channelId };
      player.cache_.source = { 'type': 'video/emp', 'src': JSON.stringify(_asset) };
    }
    player.cache_.sources = [player.cache_.source];
  },
  getAbsoluteTime: function getAbsoluteTime(player) {
    if (!player.tech_ || player.tech_['getAbsoluteTime'] === undefined) return new Date(player.currentTime() * 1000);
    var nowDate = this.getServerTime(player);
    var value = player.tech_.getAbsoluteTime(nowDate);
    if (player.techName_ !== 'EmpCast') {
      var entitlement = this.getEntitlement(player);
      if (value && entitlement && entitlement.isStaticCachupAsLive) {
        value = new Date(value.getTime() + entitlement.streamInfo.start.getTime());
      } else if (entitlement && entitlement.isDynamicCachupAsLive && player.techName_ === 'EmpHLS') {
        value = new Date(player.tech_.baseCurrentTime() * 1000 + entitlement.streamInfo.start.getTime());
      }
    }
    return value;
  },
  getPlayheadTime: function getPlayheadTime(player) {
    var value = this.getAbsoluteTime(player);
    if (value) {
      return value.getTime();
    } else return 0;
  },
  timeBehindLive: function timeBehindLive(player) {
    if (!player.tech_ || player.tech_['timeBehindLive'] === undefined) return 0;
    var nowdate = this.getServerTime(player);
    var entitlement = this.getEntitlement(player);
    if (entitlement && entitlement.isStaticCachupAsLive) {
      return nowdate - this.getPlayheadTime(player);
    }
    var value = player.tech_.timeBehindLive(nowdate);
    return value === Infinity || !value ? 0 : value;
  },
  liveDelay: function liveDelay(player) {
    if (this.isLive(player)) {
      return (this.getServerTime(player) - this.getSeekTimerange(player).end) / 1000;
    }
    return 0;
  },
  stop: function stop(player, afterStopCallback) {
    if (player.stopProgramService) {
      player.stopProgramService();
    }
    player.cache_.sources = [];
    if (!player.tech_ || player.tech_['stop'] === undefined) {
      player.techCall_('stopTrackingCurrentTime');
      if (afterStopCallback) {
        afterStopCallback();
      }
    } else {
      player.techCall_('stop', afterStopCallback);
      player.techCall_('stopTrackingCurrentTime');
    }
  },
  timeShiftEnabled: function timeShiftEnabled(player) {
    if (!player.tech_ || player.tech_['timeShiftEnabled'] === undefined) return true;

    return player.techGet_('timeShiftEnabled');
  },
  baseCurrentTime: function baseCurrentTime(player) {
    if (!player.tech_ || player.tech_['baseCurrentTime'] === undefined) return player.currentTime();else return player.techGet_('baseCurrentTime');
  },
  baseDuration: function baseDuration(player) {
    if (!player.tech_ || player.tech_['duration'] === undefined) return 0;else return player.techGet_('duration');
  },
  startTimeLive: function startTimeLive(player) {
    if (!player.tech_ || player.tech_['startTimeLive'] === undefined) return 0;
    var nowdate = this.getServerTime(player);
    var value = player.tech_.startTimeLive(nowdate);
    var entitlement = this.getEntitlement(player);
    if (entitlement && entitlement.isDynamicCachupAsLive && player.techName_ === 'EmpHLS') {
      value = entitlement.streamInfo.referenceTime;
    }
    if (entitlement && entitlement.isStaticCachupAsLive && player.techName_ !== 'EmpCast') {
      value = entitlement.streamInfo.referenceTime;
    }
    return value;
  },
  isLive: function isLive(player) {
    if (!player.tech_ || player.tech_['live'] === undefined) return false;

    return player.techGet_('live');
  },
  isCatchupAsLive: function isCatchupAsLive(player) {
    var entitlement = this.getEntitlement(player);
    return !this.isLive(player) && entitlement && entitlement.live;
  },
  getBitrate: function getBitrate(player) {
    if (!player.tech_ || player.tech_['getBitrate'] === undefined) return 0;

    return player.techGet_('getBitrate');
  },
  duration: function duration(player, seconds) {
    if (!player.tech_ || player.tech_['duration'] === undefined) {
      return player.duration(seconds);
    } else {
      player.duration(seconds);
      return player.techGet_('duration');
    }
  },
  techVersion: function techVersion(player) {
    if (!player.tech_ || player.tech_['techVersion'] === undefined) return '2.x.x';

    return player.techGet_('techVersion');
  },
  canSeekTo: function canSeekTo(player, position) {
    if (this.timeShiftEnabled(player) === false) {
      return false;
    }
    var entitlement = this.getEntitlement(player);
    if (entitlement && player.cache_ && entitlement.ffEnabled === false) {
      if (player.cache_.currentTime <= position) return false;
    }
    if (entitlement && player.cache_ && entitlement.rwEnabled === false) {
      if (player.cache_.currentTime >= position) return false;
    }
    return true;
  },
  remainingTime: function remainingTime(player) {
    if (!player.tech_ || player.tech_['remainingTime'] === undefined) {
      var duration = player.duration();
      if (duration === Infinity || duration === 0) {
        return Infinity;
      } else {
        return duration - player.currentTime();
      }
    }
    return player.techGet_('remainingTime');
  },
  casting: function casting(player, sources) {
    if (player.castPlugin && player.castPlugin().canOverride('Cast')) {
      // intial sources
      player.cache_.sources = sources;
      // intial source
      player.cache_.source = sources[0];
      player.castPlugin().cast();
      return true;
    }
    return false;
  },
  setAbsoluteTime: function setAbsoluteTime(player, date) {
    if (!player.tech_ || player.tech_['setAbsoluteTime'] === undefined) {
      var seconds = (date.getTime() - new Date(0)) / 1000;
      player.currentTime(seconds);
      return;
    }
    var nowDate = this.getServerTime(player);
    if (player.techName_ !== 'EmpCast') {
      var entitlement = this.getEntitlement(player);
      if (entitlement && entitlement.isStaticCachupAsLive) {
        if (date.getTime() < entitlement.streamInfo.start.getTime()) {
          log$1('setAbsoluteTime', 'playPreviousProgram');
          this.playProgram(player, date);
          date = 0;
        } else if (date.getTime() >= entitlement.streamInfo.end.getTime()) {
          log$1('setAbsoluteTime', 'playNextProgram');
          this.playProgram(player, date);
          return;
        } else {
          date = date.getTime() - entitlement.streamInfo.start.getTime();
        }
        player.techCall_('setCurrentTime', date / 1000);
        return;
      } else if (entitlement && entitlement.isDynamicCachupAsLive) {
        if (date.getTime() < entitlement.streamInfo.start.getTime()) {
          log$1('setAbsoluteTime', 'playPreviousProgram');
          this.playProgram(player, date);
          //Go to start of stream as a fallback
          if (player.techName_ === 'EmpHLS') {
            player.techCall_('setCurrentTime', 0);
            return;
          } else {
            //EmpShaka
            date = new Date(entitlement.streamInfo.start.getTime());
          }
        } else if (player.techName_ === 'EmpHLS') {
          date = date - entitlement.streamInfo.start.getTime();
          player.techCall_('setCurrentTime', date / 1000);
          return;
        }
      }
    }
    player.techCall_('setAbsoluteTime', { 'date': date, 'nowDate': nowDate });
  },
  gotoLive: function gotoLive(player) {
    if (player.tech_['gotoLive']) {
      player.techCall_('gotoLive');
    } else {
      var entitlement = this.getEntitlement(player);
      if (entitlement && entitlement.isDynamicCachupAsLive) {
        this.setAbsoluteTime(player, new Date(player.getServerTime()));
      } else if (entitlement && entitlement.isStaticCachupAsLive) {
        var asset = this.currentAsset(player);
        if (asset && asset.channelId) {
          player.startPlayback(null, asset.channelId, null);
        }
      } else if (this.isLive(player)) {
        var duration = player.duration();
        player.currentTime(duration);
      } else {
        log$1.warn('Not suppoted for VOD');
      }
    }
  },
  setPlayheadTime: function setPlayheadTime(player, unixTime) {
    this.setAbsoluteTime(player, new Date(unixTime));
  },
  supportsEpgProgramChange: function supportsEpgProgramChange(player) {
    if (!player.tech_ || player.tech_['supportsEpgProgramChange'] === undefined) return;

    return player.techGet_('supportsEpgProgramChange');
  },
  program: function program(player) {
    if (!player.tech_ || player.tech_['program'] === undefined) return null;
    return player.techGet_('program');
  },
  playPreviousProgram: function playPreviousProgram(player, theEnd) {
    if (player.programService) {
      player.programService().getPreviousProgram(function (program, error) {
        if (error) {
          log$1.error('playPreviousProgram', error);
        } else {
          var playbackProperties = {};
          if (theEnd) {
            playbackProperties.playFrom = 'startTime';
            var dateTime = new Date(program.endTime);
            dateTime.setSeconds(dateTime.getSeconds() - 30);
            playbackProperties.startTime = dateTime;
          } else {
            playbackProperties.playFrom = 'beginning';
          }
          player.startPlayback(null, program.channelId, program.programId, playbackProperties);
        }
      });
    }
  },
  playNextProgram: function playNextProgram(player) {
    if (player.programService && player.programService().currentProgram) {
      if (this.getServerTime(player) > player.programService().currentProgram.end.getTime()) {
        player.programService().getNextProgram(function (program, error) {
          if (error) {
            log$1.error('playNextProgram', error);
          } else {
            var playbackProperties = {};
            playbackProperties.playFrom = 'beginning';
            player.startPlayback(null, program.channelId, program.programId, playbackProperties);
          }
        });
      }
    }
  },
  playProgram: function playProgram(player, startTime) {
    if (player.programService) {
      player.programService().getProgram(startTime, function (program, error) {
        if (error) {
          log$1.error('getProgram', error);
        } else {
          var playbackProperties = {};
          playbackProperties.playFrom = 'startTime';
          playbackProperties.startTime = startTime;
          player.startPlayback(null, program.channelId, program.programId, playbackProperties);
        }
      });
    }
  },
  getServerTime: function getServerTime(player) {
    if (player.programService && player.programService() && player.programService().exposure) {
      return player.programService().exposure.getCachedServerTime();
    }
    return Date.now();
  },
  getEntitlement: function getEntitlement(player) {
    if (player.programService) {
      return player.programService().entitlement();
    } else if (player.tech_) {
      var opt = player.tech_.options_;
      if (opt && opt.source && opt.source.playSessionId) {
        return opt.source;
      }
    }
    return null;
  },
  getSeekTimerange: function getSeekTimerange(player) {
    var result = { start: 0, end: 0 };
    if (!player.tech_ || player.tech_['seekable'] === undefined || player.seeking()) return result;

    seekable = player.techGet_('seekable');
    if (seekable && seekable.length > 0) {
      result.start = (seekable.start(seekable.length - 1) + this.startTimeLive(player) / 1000) * 1000;
      result.end = (seekable.end(seekable.length - 1) + this.startTimeLive(player) / 1000) * 1000;
    }
    return result;
  },
  getBufferedTimerange: function getBufferedTimerange(player) {
    var result = { start: 0, end: 0 };
    if (!player.tech_ || player.tech_['buffered'] === undefined || player.seeking()) return result;

    buffered = player.techGet_('buffered');
    if (buffered && buffered.length > 0) {
      result.start = (buffered.start(buffered.length - 1) + this.startTimeLive(player) / 1000) * 1000;
      result.end = (buffered.end(buffered.length - 1) + this.startTimeLive(player) / 1000) * 1000;
    }
    return result;
  },
  setTechProgram: function setTechProgram(player, program) {
    if (player.tech_ || player.tech_['program'] !== undefined) {
      player.techCall_('program', program);
    }
  }
};

var Button = videojs$1.getComponent('Button');
var Component$4 = videojs$1.getComponent('Component');

/**
 * Displays the live indicator
 *
 * @extends Button
 */

var EmpLiveDisplay = function (_Button) {
  inherits(EmpLiveDisplay, _Button);

  /**
   * Create a live button
   * @param {Player|Object} player
   * @param {Object=} options
   */
  function EmpLiveDisplay(player, options) {
    classCallCheck(this, EmpLiveDisplay);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.updateShowing();
    _this.on(_this.player(), empPlayerEvents.PLAYING, function () {
      return _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.DURATION_CHANGE, function () {
      return _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.TIME_UPDATE, function () {
      return _this.timeUpdate();
    });
    _this.on(_this.player(), empPlayerEvents.ENDED, function () {
      return _this.hide();
    });
    return _this;
  }

  /**
   * Create the component's DOM element
   *
   * @return {Element}
   * @method createEl
   */


  EmpLiveDisplay.prototype.createEl = function createEl$$1() {
    var el = _Button.prototype.createEl.call(this, 'button', {
      className: 'emp-live-control vjs-control'
    });

    this.contentEl_ = createEl('div', {
      className: 'emp-live-display',
      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
    }, {
      'aria-live': 'off'
    });

    el.appendChild(this.contentEl_);
    return el;
  };

  EmpLiveDisplay.prototype.updateShowing = function updateShowing() {
    if (this.player().isLive() || this.entitlement && this.entitlement.isStaticCachupAsLive) {
      this.show();
    } else {
      this.hide();
    }
  };

  EmpLiveDisplay.prototype.timeUpdate = function timeUpdate() {
    var currentTime = this.player().currentTime();
    var duration = this.player().duration();
    var edgeMargin = 5; // margin for what is considered the live edge
    var timeBehindLive = this.player().timeBehindLive();
    if (this.player().isLive() && timeBehindLive < edgeMargin) {
      this.addClass('emp-live-edge');
    } else {
      this.removeClass('emp-live-edge');
    }
  };

  EmpLiveDisplay.prototype.handleClick = function handleClick() {
    this.player().gotoLive();
  };

  createClass(EmpLiveDisplay, [{
    key: 'entitlement',
    get: function get$$1() {
      return extplayer.getEntitlement(this.player());
    }
  }]);
  return EmpLiveDisplay;
}(Button);

Component$4.registerComponent('EmpLiveDisplay', EmpLiveDisplay);

/**
 * @file format-time.js
 *
 * Format seconds as a time string, H:MM:SS or M:SS
 * Supplying a guide (in seconds) will force a number of leading zeros
 * to cover the length of the guide
 *
 * @param  {Number} seconds Number of seconds to be turned into a string
 * @param  {Number} guide   Number (in seconds) to model the string after
 * @return {String}         Time formatted as H:MM:SS or M:SS
 * @private
 * @function formatTime
 */
function formatTime(seconds) {
  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

  seconds = seconds < 0 ? 0 : seconds;
  var s = Math.floor(seconds % 60);
  var m = Math.floor(seconds / 60 % 60);
  var h = Math.floor(seconds / 3600);
  var gm = Math.floor(guide / 60 % 60);
  var gh = Math.floor(guide / 3600);

  // handle invalid times
  if (isNaN(seconds) || seconds === Infinity) {
    // '-' is false for all relational operators (e.g. <, >=) so this setting
    // will add the minimum number of fields specified by the guide
    h = m = s = '-';
  }

  // Check if we need to show hours
  h = h > 0 || gh > 0 ? h + ':' : '';

  // If hours are showing, we may need to add a leading zero.
  // Always show at least one digit of minutes.
  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

  // Check if leading zero is need for seconds
  s = s < 10 ? '0' + s : s;

  return h + m + s;
}

var Component$6 = videojs$1.getComponent('Component');
var MouseTimeDisplay = videojs$1.getComponent('MouseTimeDisplay');

/**
 * The Mouse Time Display component shows the time you will seek to
 * when hovering over the progress bar
 *
 * @extends MouseTimeDisplay
 */

var EmpMouseTimeDisplay = function (_MouseTimeDisplay) {
  inherits(EmpMouseTimeDisplay, _MouseTimeDisplay);

  /**
   * Create a time display component
   * @param {Player|Object} player
   * @param {Object=} options
   */
  function EmpMouseTimeDisplay(player, options) {
    classCallCheck(this, EmpMouseTimeDisplay);
    return possibleConstructorReturn(this, _MouseTimeDisplay.call(this, player, options));
  }

  /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */


  EmpMouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {
    var _this2 = this;

    // If there is an existing rAF ID, cancel it so we don't over-queue.
    if (this.rafId_) {
      this.cancelAnimationFrame(this.rafId_);
    }

    this.rafId_ = this.requestAnimationFrame(function () {
      var duration = _this2.player_.duration();
      var content = void 0;
      if (_this2.player().isLive()) {
        content = '-' + formatTime(duration - seekBarPoint * duration, duration);
      } else {
        content = formatTime(seekBarPoint * duration, duration);
      }

      _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';
      _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);
    });
  };

  return EmpMouseTimeDisplay;
}(MouseTimeDisplay);

Component$6.registerComponent('MouseTimeDisplay', EmpMouseTimeDisplay);

var USER_AGENT = window_1.navigator && window_1.navigator.userAgent || '';
var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
/*
 * Device is an iPhone
 *
 * @type {Boolean}
 * @constant
 * @private
 */
var IS_IPAD = /iPad/i.test(USER_AGENT);

// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
var IS_IPOD = /iPod/i.test(USER_AGENT);
var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

var IOS_VERSION = function () {
  var match = USER_AGENT.match(/OS (\d+)_/i);

  if (match && match[1]) {
    return match[1];
  }
  return null;
}();

var IS_ANDROID = /Android/i.test(USER_AGENT);
var ANDROID_VERSION = function () {
  // This matches Android Major.Minor.Patch versions
  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

  if (!match) {
    return null;
  }

  var major = match[1] && parseFloat(match[1]);
  var minor = match[2] && parseFloat(match[2]);

  if (major && minor) {
    return parseFloat(match[1] + '.' + match[2]);
  } else if (major) {
    return major;
  }
  return null;
}();

// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;


var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
var IS_EDGE = /Edge/i.test(USER_AGENT);
var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
var CHROME_VERSION = function () {
  var match = USER_AGENT.match(/Chrome\/(\d+)/);

  if (match && match[1]) {
    return parseFloat(match[1]);
  }
  return null;
}();
var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
var IE_VERSION = function () {
  var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
  var version = result && parseFloat(result[1]);

  if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
    // IE 11 has a different user agent string than other IE versions
    version = 11.0;
  }

  return version;
}();

var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;




var BACKGROUND_SIZE_SUPPORTED = isReal() && 'backgroundSize' in window_1.document.createElement('video').style;

/**
 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
 *
 * @param  {Object}  value
 *         An object that may or may not be `Promise`-like.
 *
 * @return {Boolean}
 *         Whether or not the object is `Promise`-like.
 */
function isPromise(value) {
  return value !== undefined && typeof value.then === 'function';
}

/**
 * Silence a Promise-like object.
 *
 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
 * play promise" rejection error messages.
 *
 * @param  {Object} value
 *         An object that may or may not be `Promise`-like.
 */
function silencePromise(value) {
  if (isPromise(value)) {
    value.then(null, function (e) {});
  }
}

var Component$5 = videojs$1.getComponent('Component');
var Slider = videojs$1.getComponent('Slider');
var LoadProgressBar = videojs$1.getComponent('LoadProgressBar');
var PlayProgressBar = videojs$1.getComponent('PlayProgressBar');
// The number of seconds the `step*` functions move the timeline.
var STEP_SECONDS = 5;

// The interval at which the bar should update as it progresses.
var UPDATE_REFRESH_INTERVAL = 30;

/**
 * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
 * as its `bar`.
 *
 * @extends Slider
 */

var SeekBar = function (_Slider) {
  inherits(SeekBar, _Slider);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function SeekBar(player, options) {
    classCallCheck(this, SeekBar);

    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

    _this.lastStep = 0;

    _this.update = throttle(bind(_this, _this.update), UPDATE_REFRESH_INTERVAL);

    _this.on(player, 'timeupdate', _this.update);
    _this.on(player, 'ended', _this.handleEnded);

    // when playing, let's ensure we smoothly update the play progress bar
    // via an interval
    _this.updateInterval = null;

    _this.on(player, ['playing'], function () {
      _this.clearInterval(_this.updateInterval);

      _this.updateInterval = _this.setInterval(function () {
        _this.requestAnimationFrame(function () {
          _this.update();
        });
      }, UPDATE_REFRESH_INTERVAL);
    });

    _this.on(player, ['ended', 'pause', 'waiting'], function () {
      _this.clearInterval(_this.updateInterval);
    });

    _this.on(player, ['timeupdate', 'ended'], _this.update);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  SeekBar.prototype.createEl = function createEl$$1() {
    return _Slider.prototype.createEl.call(this, 'div', {
      className: 'vjs-progress-holder'
    }, {
      'aria-label': this.localize('Progress Bar')
    });
  };

  /**
   * This function updates the play progress bar and accessiblity
   * attributes to whatever is passed in.
   *
   * @param {number} currentTime
   *        The currentTime value that should be used for accessiblity
   *
   * @param {number} percent
   *        The percentage as a decimal that the bar should be filled from 0-1.
   *
   * @private
   */


  SeekBar.prototype.update_ = function update_(currentTime, percent) {
    var duration = this.player_.duration();

    // machine readable value of progress bar (percentage complete)
    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));

    // human readable value of progress bar (time complete)
    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));

    // Update the `PlayProgressBar`.
    this.bar.update(getBoundingClientRect(this.el_), percent);
  };

  /**
   * Update the seek bar's UI.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#timeupdate
   *
   * @returns {number}
   *          The current percent at a number from 0-1
   */


  SeekBar.prototype.update = function update(event) {
    var percent = _Slider.prototype.update.call(this);

    this.update_(this.getCurrentTime_(), percent);
    return percent;
  };

  /**
   * Get the value of current time but allows for smooth scrubbing,
   * when player can't keep up.
   *
   * @return {number}
   *         The current time value to display
   *
   * @private
   */


  SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {
    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
  };

  /**
   * We want the seek bar to be full on ended
   * no matter what the actual internal values are. so we force it.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#ended
   */


  SeekBar.prototype.handleEnded = function handleEnded(event) {
    this.update_(this.player_.duration(), 1);
  };

  /**
   * Get the percentage of media played so far.
   *
   * @return {number}
   *         The percentage of media played so far (0 to 1).
   */


  SeekBar.prototype.getPercent = function getPercent() {
    var percent = this.getCurrentTime_() / this.player_.duration();

    return percent >= 1 ? 1 : percent;
  };

  /**
   * Handle mouse down on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */


  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
    this.player_.scrubbing(true);

    this.videoWasPlaying = !this.player_.paused();
    this.player_.pause();

    _Slider.prototype.handleMouseDown.call(this, event);
  };

  /**
   * Handle mouse move on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this to run.
   *
   * @listens mousemove
   */


  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
    var newTime = this.calculateDistance(event) * this.player_.duration();

    // Don't let video end while scrubbing.
    if (newTime === this.player_.duration()) {
      newTime = newTime - 0.1;
    }

    this.throttleSetCurrentTime(newTime);
  };

  /**
  * Throttle Set CurrentTime
  *
  *   @param {number} newTime
  *        The new currentTime value
  */


  SeekBar.prototype.throttleSetCurrentTime = function throttleSetCurrentTime(newTime) {
    if (this.seekTimeoutId_ != null) {
      window_1.clearTimeout(this.seekTimeoutId_);
    }
    this.seekTimeoutId_ = window_1.setTimeout(this.onSeekInputTimeout_.bind(this, newTime), 1000);
  };

  /**
  * on Seek Input Timeout
  *
  *
  */


  SeekBar.prototype.onSeekInputTimeout_ = function onSeekInputTimeout_(newTime) {
    this.lastStep = 0;
    this.seekTimeoutId_ = null;
    // Set new time (tell player to seek to new time)
    this.player_.currentTime(newTime);
  };

  SeekBar.prototype.enable = function enable() {
    _Slider.prototype.enable.call(this);
    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

    if (!mouseTimeDisplay) {
      return;
    }

    mouseTimeDisplay.show();
  };

  SeekBar.prototype.disable = function disable() {
    _Slider.prototype.disable.call(this);
    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

    if (!mouseTimeDisplay) {
      return;
    }

    mouseTimeDisplay.hide();
  };

  /**
   * Handle mouse up on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mouseup` event that caused this to run.
   *
   * @listens mouseup
   */


  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
    _Slider.prototype.handleMouseUp.call(this, event);

    if (this.videoWasPlaying) {
      silencePromise(this.player_.play());
    }
    this.player_.scrubbing(false);
  };

  /**
   * Move more quickly fast forward for keyboard-only users
   */


  SeekBar.prototype.stepForward = function stepForward() {
    this.lastStep += STEP_SECONDS;
    this.throttleSetCurrentTime(this.player_.currentTime() + this.lastStep);
  };

  /**
   * Move more quickly rewind for keyboard-only users
   */


  SeekBar.prototype.stepBack = function stepBack() {
    this.lastStep -= STEP_SECONDS;
    this.throttleSetCurrentTime(this.player_.currentTime() + this.lastStep);
  };

  /**
   * Toggles the playback state of the player
   * This gets called when enter or space is used on the seekbar
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called
   *
   */


  SeekBar.prototype.handleAction = function handleAction(event) {
    if (this.player_.paused()) {
      this.player_.play();
    } else {
      this.player_.pause();
    }
  };

  /**
   * Called when this SeekBar has focus and a key gets pressed down. By
   * default it will call `this.handleAction` when the key is space or enter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */


  SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {

    // Support Space (32) or Enter (13) key operation to fire a click event
    if (event.which === 32 || event.which === 13) {
      event.preventDefault();
      this.handleAction(event);
    } else if (_Slider.prototype.handleKeyPress) {

      // Pass keypress handling up for unsupported keys
      _Slider.prototype.handleKeyPress.call(this, event);
    }
  };

  return SeekBar;
}(Slider);

/**
 * Default options for the `SeekBar`
 *
 * @type {Object}
 * @private
 */


SeekBar.prototype.options_ = {
  children: ['loadProgressBar', 'playProgressBar'],
  barName: 'playProgressBar'
};

// MouseTimeDisplay tooltips should not be added to a player on mobile devices or IE8
if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
}

/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */
SeekBar.prototype.playerEvent = 'timeupdate';

Component$5.registerComponent('SeekBar', SeekBar);

var Button$1 = videojs$1.getComponent('Button');
var Component$7 = videojs$1.getComponent('Component');

/**
 * Displays a button to jump back to the beginning of the current asset / program
 *
 * @extends Button
 */

var EmpRestartButton = function (_Button) {
  inherits(EmpRestartButton, _Button);

  /**
   * Create a restart button
   * @param {Player|Object} player
   * @param {Object=} options
   */
  function EmpRestartButton(player, options) {
    classCallCheck(this, EmpRestartButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.shouldRestart_ = true;
    _this.updateShowing();
    _this.on(_this.player(), empPlayerEvents.LOADED_METADATA, _this.updateShowing);
    _this.on(_this.player(), empPlayerEvents.PLAYING, function () {
      _this.shouldRestart_ = false;
      _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.ERROR, function () {
      return _this.shouldRestart_ = true;
    });
    return _this;
  }

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpRestartButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-restart-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  EmpRestartButton.prototype.updateShowing = function updateShowing() {
    if (this.player().canRestart()) {
      this.show();
    } else {
      this.hide();
    }
  };

  // Jump to beginning


  EmpRestartButton.prototype.handleClick = function handleClick() {
    if (this.shouldRestart_ === true) {
      this.player_.restart();
      return;
    }
    this.player_.scrubbing(true);

    var videoWasPlaying = !this.player_.paused();
    this.player_.pause();

    this.player_.currentTime(0);

    this.player_.scrubbing(false);

    if (videoWasPlaying) {
      silencePromise(this.player_.play());
    }
  };

  return EmpRestartButton;
}(Button$1);

EmpRestartButton.prototype.controlText_ = 'Restart';

Component$7.registerComponent('EmpRestartButton', EmpRestartButton);

var Button$2 = videojs$1.getComponent('Button');
var Component$8 = videojs$1.getComponent('Component');

/**
 * Displays a button to jump forward a few seconds
 *
 * @extends Button
 */

var EmpForwardButton = function (_Button) {
  inherits(EmpForwardButton, _Button);

  /**
   * Create a fast-forward button
   * @param {Player} player
   * @param {Object} [options] - Object of option names and values
   * @param {integer} [options.seconds=30] - The number of seconds to jump forward.
   */
  function EmpForwardButton(player, options) {
    classCallCheck(this, EmpForwardButton);

    options = Object.assign({
      'seconds': 30
    }, options);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.controlText('Forward ' + options.seconds + 's');
    player.on(empPlayerEvents.TIMESHIFT_CHANGE, function () {
      return _this.onTimeshift();
    });
    player.on(empPlayerEvents.PROGRAM_CHANGED, function (event, data) {
      return _this.updateEnabled(data && data.program);
    });
    player.on(empPlayerEvents.DURATION_CHANGE, function () {
      return _this.updateEnabled();
    });
    _this.updateEnabled();
    return _this;
  }

  EmpForwardButton.prototype.updateEnabled = function updateEnabled(program) {
    if (this.entitlement && !this.entitlement.ffEnabled) {
      this.disable();
      this.controlText('Forward restricted');
    } else {
      this.enable();
      this.show();
      this.controlText('Forward ' + this.options_.seconds + 's');
    }
  };

  /**
   * Handle onTimeshift event
   */


  EmpForwardButton.prototype.onTimeshift = function onTimeshift() {
    if (!this.player()) {
      return;
    }
    if (!this.player().timeShiftEnabled()) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpForwardButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-forward-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  // Jump to beginning


  EmpForwardButton.prototype.handleClick = function handleClick() {
    if (this.player().ended()) {
      return;
    }

    this.player().scrubbing(true);

    var videoWasPlaying = !this.player().paused();
    this.player().pause();

    var newTime = this.player().currentTime() + this.options_.seconds;

    this.player().currentTime(newTime);

    this.player().scrubbing(false);

    if (videoWasPlaying) {
      silencePromise(this.player_.play());
    }
  };

  createClass(EmpForwardButton, [{
    key: 'entitlement',
    get: function get$$1() {
      return extplayer.getEntitlement(this.player());
    }
  }]);
  return EmpForwardButton;
}(Button$2);

EmpForwardButton.prototype.controlText_ = 'Forward';

Component$8.registerComponent('EmpForwardButton', EmpForwardButton);

var Button$3 = videojs$1.getComponent('Button');
var Component$9 = videojs$1.getComponent('Component');

/**
 * Displays a button to jump back a few seconds
 *
 * @extends Button
 */

var EmpRewindButton = function (_Button) {
  inherits(EmpRewindButton, _Button);

  /**
   * Create a rewind button
   * @param {Player|Object} player
   * @param {Object[]} [options] - Object of option names and values
   * @param {integer} [options[].seconds=30] - The number of seconds to jump back.
   */
  function EmpRewindButton(player, options) {
    classCallCheck(this, EmpRewindButton);

    options = Object.assign({
      'seconds': 30
    }, options);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.controlText('Rewind ' + options.seconds + 's');
    player.on(empPlayerEvents.TIMESHIFT_CHANGE, function () {
      return _this.onTimeshift();
    });
    player.on(empPlayerEvents.PROGRAM_CHANGED, function (event, data) {
      return _this.updateEnabled(data && data.program);
    });
    player.on(empPlayerEvents.DURATION_CHANGE, function () {
      return _this.updateEnabled();
    });
    _this.updateEnabled();
    return _this;
  }

  EmpRewindButton.prototype.updateEnabled = function updateEnabled(program) {
    if (this.entitlement && !this.entitlement.rwEnabled) {
      this.disable();
      this.controlText('Rewind restricted');
    } else {
      this.enable();
      this.show();
      this.controlText('Rewind ' + this.options_.seconds + 's');
    }
  };

  /**
  * Handle onTimeshift event
  */


  EmpRewindButton.prototype.onTimeshift = function onTimeshift() {
    if (!this.player()) {
      return;
    }
    if (!this.player().timeShiftEnabled()) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpRewindButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-rewind-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  // Jump backwards


  EmpRewindButton.prototype.handleClick = function handleClick() {
    if (this.player().ended()) {
      return;
    }

    this.player().scrubbing(true);

    var videoWasPlaying = !this.player().paused();
    this.player().pause();

    var newTime = this.player().currentTime() - this.options_.seconds;

    this.player().currentTime(newTime);

    this.player().scrubbing(false);

    if (videoWasPlaying) {
      silencePromise(this.player_.play());
    }
  };

  createClass(EmpRewindButton, [{
    key: 'entitlement',
    get: function get$$1() {
      return extplayer.getEntitlement(this.player());
    }
  }]);
  return EmpRewindButton;
}(Button$3);

EmpRewindButton.prototype.controlText_ = 'Rewind';

Component$9.registerComponent('EmpRewindButton', EmpRewindButton);

/**
 * Similar to restart, however this will always request a new entitlement.
 */
var Button$4 = videojs$1.getComponent('Button');
var Component$10 = videojs$1.getComponent('Component');

/**
 * Displays a button to jump back to the beginning of the current asset / program and request a new entitlement
 *
 * @extends Button
 */

var EmpReloadButton = function (_Button) {
  inherits(EmpReloadButton, _Button);

  /**
   * Create a rewind button
   * @param {Player|Object} player
   * @param {Object=} options
   */
  function EmpReloadButton(player, options) {
    classCallCheck(this, EmpReloadButton);
    return possibleConstructorReturn(this, _Button.call(this, player, options));
  }

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpReloadButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-reload-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  // Restart playback


  EmpReloadButton.prototype.handleClick = function handleClick() {
    this.player_.restart();
  };

  return EmpReloadButton;
}(Button$4);

EmpReloadButton.prototype.controlText_ = 'Reload';

Component$10.registerComponent('EmpReloadButton', EmpReloadButton);

var RemainingTimeDisplay = videojs$1.getComponent('RemainingTimeDisplay');
var Component$11 = videojs$1.getComponent('Component');

/**
 * Displays the time left or the current time in the video
 *
 * @extends Component
 */

var EmpTimeDisplay = function (_Component) {
  inherits(EmpTimeDisplay, _Component);

  /**
   * Create a fast-forward button
   * @param {Player} player
   * @param {Object} [options] - Object of option names and values
   * @param {string} [options.mode=remainingTime] - _remainingTime_ displays a countdown timer and _currentTime_ the current time of a live stream
   */
  function EmpTimeDisplay(player, options) {
    classCallCheck(this, EmpTimeDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.mode_ = options.mode || 'remainingTime';
    _this.on(player, empPlayerEvents.TIME_UPDATE, _this.updateContent);
    _this.on(player, empPlayerEvents.DURATION_CHANGE, _this.updateContent);
    player.on(empPlayerEvents.ENDED, function () {
      _this.hide();
    });
    player.on(empPlayerEvents.PLAYING, function () {
      _this.show();
    });

    return _this;
  }

  /**
   * Create the component's DOM element
   *
   * @return {Element}
   * @method createEl
   */


  EmpTimeDisplay.prototype.createEl = function createEl$$1() {
    var el = _Component.prototype.createEl.call(this, 'div', {
      className: 'emp-time vjs-time-control vjs-remaining-time vjs-control'
    });

    this.contentEl_ = createEl('div', {
      className: 'emp-time-display',
      // label the remaining time for screen reader users
      innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span>-0:00'
    }, {
      // tell screen readers not to automatically read the time as it changes
      'aria-live': 'off'
    });

    el.appendChild(this.contentEl_);
    return el;
  };

  /**
   * Update time display
   *
   * @method updateContent
   */


  EmpTimeDisplay.prototype.updateContent = function updateContent() {
    if (this.mode_ === 'currentTime') {
      var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      var localizedText = this.localize('Current Time');
      var formattedTime = formatTime(time, this.player_.duration());
      if (formattedTime !== this.formattedTime_) {
        this.formattedTime_ = formattedTime;
        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span>' + formattedTime;
      }
    } else {
      // remainingTime and default mode
      var duration = this.player_.duration();
      if (duration) {
        var _localizedText = this.localize('Remaining Time');
        var _formattedTime = void 0;
        if (duration > 0xFFFFFFFF) {
          _formattedTime = '';
          if (_formattedTime !== this.formattedTime_) {
            this.formattedTime_ = _formattedTime;
            this.contentEl_.innerHTML = '<span class="vjs-control-text">' + _localizedText + '</span>' + _formattedTime;
          }
        } else {
          var remainingTime = this.player_.remainingTime();
          if (remainingTime >= 0) {
            _formattedTime = formatTime(remainingTime);
          } else {
            _formattedTime = '';
          }
          if (_formattedTime !== this.formattedTime_) {
            this.formattedTime_ = _formattedTime;
            this.contentEl_.innerHTML = '<span class="vjs-control-text">' + _localizedText + '</span>-' + _formattedTime;
          }
        }
      }
    }
  };

  return EmpTimeDisplay;
}(Component$11);

Component$11.registerComponent('EmpTimeDisplay', EmpTimeDisplay);

var Button$5 = videojs$1.getComponent('Button');
var Component$12 = videojs$1.getComponent('Component');

/**
 * The button component for stopping playback
 *
 * @extends EmpStopButton
 */

var EmpStopButton = function (_Button) {
  inherits(EmpStopButton, _Button);

  /**
   * Create a button to stop playback
   * @param {Player|Object} player - Player object
   * @param {Object=} options - Object of option names and values
   * @param {Function=} ready - Ready callback function
   */
  function EmpStopButton(player, options, ready) {
    classCallCheck(this, EmpStopButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options, ready));

    _this.el_.setAttribute('aria-label', 'Stop Playback');
    player.on(empPlayerEvents.TIMESHIFT_CHANGE, function () {
      return _this.onTimeshift();
    });
    player.on(empPlayerEvents.PLAYING, function () {
      return _this.onTimeshift();
    });
    player.on(empPlayerEvents.ENDED, function () {
      return _this.hide();
    });
    return _this;
  }

  /**
   * Handle onTimeshift event
   */


  EmpStopButton.prototype.onTimeshift = function onTimeshift() {
    if (!this.player()) {
      return;
    }
    if (this.player().timeShiftEnabled()) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Handle click on audio track
   */


  EmpStopButton.prototype.handleClick = function handleClick(event) {
    if (this.player()) {
      this.player().stop();
    }
  };

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpStopButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-stop-control vjs-icon-square ' + _Button.prototype.buildCSSClass.call(this);
  };

  return EmpStopButton;
}(Button$5);

EmpStopButton.prototype.kind_ = 'stop';
EmpStopButton.prototype.controlText_ = 'stop';

Component$12.registerComponent('EmpStopButton', EmpStopButton);

var PlayToggle = videojs$1.getComponent('PlayToggle');
var Component$13 = videojs$1.getComponent('Component');

/**
 * The button component for the play toggle
 *
 * @extends EmpPlayToggle
 */

var EmpPlayToggle = function (_PlayToggle) {
  inherits(EmpPlayToggle, _PlayToggle);

  /**
   * Create a button to stop playback
   * @param {Player|Object} player - Player object
   * @param {Object=} options - Object of option names and values
   * @param {Function=} ready - Ready callback function
   */
  function EmpPlayToggle(player, options, ready) {
    classCallCheck(this, EmpPlayToggle);

    var _this = possibleConstructorReturn(this, _PlayToggle.call(this, player, options, ready));

    _this.el_.setAttribute('aria-label', 'Play Toggle');
    player.on(empPlayerEvents.TIMESHIFT_CHANGE, function () {
      return _this.onTimeshift();
    });
    player.on(empPlayerEvents.PLAYING, function () {
      return _this.onTimeshift();
    });
    return _this;
  }

  /**
   * Handle onTimeshift event
   */


  EmpPlayToggle.prototype.onTimeshift = function onTimeshift() {
    if (!this.player()) {
      return;
    }
    if (this.player().timeShiftEnabled()) {
      this.show();
    } else {
      this.hide();
    }
  };

  /**
   * Handle click on audio track
   */


  EmpPlayToggle.prototype.handleClick = function handleClick(event) {
    _PlayToggle.prototype.handleClick.call(this, event);
  };

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpPlayToggle.prototype.buildCSSClass = function buildCSSClass() {
    return '' + _PlayToggle.prototype.buildCSSClass.call(this);
  };

  return EmpPlayToggle;
}(PlayToggle);

EmpPlayToggle.prototype.kind_ = 'playToggle';
EmpPlayToggle.prototype.controlText_ = 'playToggle';

Component$13.registerComponent('EmpPlayToggle', EmpPlayToggle);

var Component$14 = videojs$1.getComponent('Component');
var Button$6 = videojs$1.getComponent('Button');

var AirplayToggle = function (_Button) {
  inherits(AirplayToggle, _Button);

  function AirplayToggle(player, options) {
    classCallCheck(this, AirplayToggle);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.addClass('vjs-hidden');
    player.ready(function () {
      _this.initAirPlay();
    });
    return _this;
  }

  AirplayToggle.prototype.initAirPlay = function initAirPlay() {
    var player = this.player();
    if (window.WebKitPlaybackTargetAvailabilityEvent) {
      var videoEl = player.el().getElementsByTagName('video')[0];

      videoEl.addEventListener('webkitplaybacktargetavailabilitychanged', function (event) {
        switch (event.availability) {
          case 'available':
            log$1('Airplay available');
            player.on('loadeddata', function () {
              if (player.controlBar.childNameIndex_.hasOwnProperty('AirplayToggle')) {
                if (this.entitlement && this.entitlement.airplayBlocked) {
                  player.controlBar.airplayToggle.hide();
                } else {
                  player.controlBar.airplayToggle.show();
                }
              }
            });
            break;
          case 'not-available':
            log$1('Airplay not-available');
            break;
        }
      });
    }
  };

  AirplayToggle.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-airplay-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  AirplayToggle.prototype.handleClick = function handleClick() {
    if (!this.entitlement || !this.entitlement.airplayBlocked) {
      this.player().el().getElementsByTagName('video')[0].webkitShowPlaybackTargetPicker();
      this.player().trigger(empPlayerEvents.AIRPLAY_START);
    } else {
      log$1('Airplay Blocked');
    }
  };

  createClass(AirplayToggle, [{
    key: 'entitlement',
    get: function get$$1() {
      return extplayer.getEntitlement(this.player());
    }
  }]);
  return AirplayToggle;
}(Button$6);

AirplayToggle.prototype.controlText_ = 'Airplay';
videojs$1.registerComponent('AirplayToggle', AirplayToggle);

var Button$7 = videojs$1.getComponent('Button');
var Component$15 = videojs$1.getComponent('Component');

/**
 * Displays a button to jump forward a few seconds
 *
 * @extends Button
 */

var EmpNextButton = function (_Button) {
  inherits(EmpNextButton, _Button);

  /**
   * Create a fast-forward button
   * @param {Player} player
   * @param {Object} [options] - Object of option names and values
   */
  function EmpNextButton(player, options) {
    classCallCheck(this, EmpNextButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.controlText('Next program');
    _this.updateShowing();
    _this.on(_this.player(), empPlayerEvents.PLAYING, function () {
      return _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.DURATION_CHANGE, function () {
      return _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.PROGRAM_CHANGED, function (event, data) {
      return _this.updateShowing(data && data.program);
    });
    return _this;
  }

  EmpNextButton.prototype.updateShowing = function updateShowing(program) {
    program = program ? program : this.player().getProgramDetails();
    if (!this.player().noEPG() && this.entitlement && program) {
      this.show();
      this.enable();
    } else {
      this.hide();
    }
    if (program && Date.now() < program.end.getTime()) {
      this.disable();
    }
    if (this.entitlement && (this.entitlement.isDynamicCachupAsLive || this.entitlement.isStaticCachupAsLive)) {
      //nothing
    } else {
      this.hide();
    }
  };

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpNextButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-next-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  EmpNextButton.prototype.handleClick = function handleClick() {
    if (this.player().ended()) {
      return;
    }
    this.player().playNextProgram();
  };

  createClass(EmpNextButton, [{
    key: 'entitlement',
    get: function get$$1() {
      return extplayer.getEntitlement(this.player());
    }
  }]);
  return EmpNextButton;
}(Button$7);

EmpNextButton.prototype.controlText_ = 'Next';

Component$15.registerComponent('EmpNextButton', EmpNextButton);

var Button$8 = videojs$1.getComponent('Button');
var Component$16 = videojs$1.getComponent('Component');

/**
 * Displays a button to jump back a few seconds
 *
 * @extends Button
 */

var EmpPreviousButton = function (_Button) {
  inherits(EmpPreviousButton, _Button);

  /**
   * Create a rewind button
   * @param {Player|Object} player
   * @param {Object[]} [options] - Object of option names and values
   */
  function EmpPreviousButton(player, options) {
    classCallCheck(this, EmpPreviousButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.controlText('Previous Program');
    _this.updateShowing();
    _this.on(_this.player(), empPlayerEvents.PLAYING, function () {
      return _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.DURATION_CHANGE, function () {
      return _this.updateShowing();
    });
    _this.on(_this.player(), empPlayerEvents.PROGRAM_CHANGED, function () {
      return _this.updateShowing();
    });
    return _this;
  }

  EmpPreviousButton.prototype.updateShowing = function updateShowing() {
    var program = this.player().getProgramDetails();
    if (!this.player().noEPG() && this.entitlement && program) {
      this.show();
    } else {
      this.hide();
    }
    if (this.entitlement && (this.entitlement.isDynamicCachupAsLive || this.entitlement.isStaticCachupAsLive)) {
      //nothing
    } else {
      this.hide();
    }
  };

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */


  EmpPreviousButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'emp-previous-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  // Jump backwards


  EmpPreviousButton.prototype.handleClick = function handleClick() {
    if (this.player().ended()) {
      return;
    }

    this.player().playPreviousProgram();
  };

  createClass(EmpPreviousButton, [{
    key: 'entitlement',
    get: function get$$1() {
      return extplayer.getEntitlement(this.player());
    }
  }]);
  return EmpPreviousButton;
}(Button$8);

EmpPreviousButton.prototype.controlText_ = 'Previous';

Component$16.registerComponent('EmpPreviousButton', EmpPreviousButton);

var ControlBar = videojs$1.getComponent('ControlBar');
var Component$1 = videojs$1.getComponent('Component');

/**
 * Container of main controls
 *
 * @extends ControlBar
 * @class ControlBar
 */

var EmpControlBar = function (_ControlBar) {
  inherits(EmpControlBar, _ControlBar);

  function EmpControlBar() {
    classCallCheck(this, EmpControlBar);
    return possibleConstructorReturn(this, _ControlBar.apply(this, arguments));
  }

  return EmpControlBar;
}(ControlBar);

EmpControlBar.prototype.options_ = {
  loadEvent: 'play',
  children: {
    'empPlayToggle': {},
    'empReloadButton': {},
    'empStopButton': {},
    'empPreviousButton': {},
    'empRewindButton': {},
    'empForwardButton': {},
    'empNextButton': {},
    'volumePanel': {
      'inline': false
    },
    'currentTimeDisplay': {},
    'timeDivider': {},
    'durationDisplay': {},
    'empLiveDisplay': {},
    'progressControl': {},
    'empTimeDisplay': {
      'mode': 'remainingTime'
    },
    'customControlSpacer': {},
    'empRestartButton': {},
    'playbackRateMenuButton': {},
    'chaptersButton': {},
    'bitrateButton': {},
    'audioTrackButton': {},
    'subsCapsButton': {},
    'airplayToggle': {},
    'fullscreenToggle': {}
  }
};

// loadProgressBar > seekBar > mouseTimeDisplay uses a reference to 'controlbar' so we need to override the name for compatibility with our own controlbar
Component$1.registerComponent('ControlBar', EmpControlBar);

/**
 * @file time-ranges.js
 *
 * Should create a fake TimeRange object
 * Mimics an HTML5 time range instance, which has functions that
 * return the start and end times for a range
 * TimeRanges are returned by the buffered() method
 *
 * @param  {(Number|Array)} Start of a single range or an array of ranges
 * @param  {Number} End of a single range
 * @private
 * @method createTimeRanges
 */
function createTimeRanges(start, end) {
  if (Array.isArray(start)) {
    return createTimeRangesObj(start);
  } else if (start === undefined || end === undefined) {
    return createTimeRangesObj();
  }
  return createTimeRangesObj([[start, end]]);
}

function createTimeRangesObj(ranges) {
  if (ranges === undefined || ranges.length === 0) {
    return {
      length: 0,
      start: function start() {
        throw new Error('This TimeRanges object is empty');
      },
      end: function end() {
        throw new Error('This TimeRanges object is empty');
      }
    };
  }
  return {
    length: ranges.length,
    start: getRange.bind(null, 'start', 0, ranges),
    end: getRange.bind(null, 'end', 1, ranges)
  };
}

function getRange(fnName, valueIndex, ranges, rangeIndex) {
  if (rangeIndex === undefined) {
    log.warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
    rangeIndex = 0;
  }
  rangeCheck(fnName, rangeIndex, ranges.length - 1);
  return ranges[rangeIndex][valueIndex];
}

function rangeCheck(fnName, index, maxIndex) {
  if (index < 0 || index > maxIndex) {
    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
  }
}

/**
 * @file text-track-display.js
 */
var Component$17 = videojs$1.getComponent('Component');

var darkGray = '#222';
var lightGray = '#ccc';
var fontMap = {
  monospace: 'monospace',
  sansSerif: 'sans-serif',
  serif: 'serif',
  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
  monospaceSerif: '"Courier New", monospace',
  proportionalSansSerif: 'sans-serif',
  proportionalSerif: 'serif',
  casual: '"Comic Sans MS", Impact, fantasy',
  script: '"Monotype Corsiva", cursive',
  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};

/**
 * Construct an rgba color from a given hex color code.
 *
 * @param {number} color
 *        Hex number for color, like #f0e.
 *
 * @param {number} opacity
 *        Value for opacity, 0.0 - 1.0.
 *
 * @return {string}
 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
 *
 * @private
 */
function constructColor(color, opacity) {
  return 'rgba(' +
  // color looks like "#f0e"
  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
}

/**
 * Try to update the style of a DOM element. Some style changes will throw an error,
 * particularly in IE8. Those should be noops.
 *
 * @param {Element} el
 *        The DOM element to be styled.
 *
 * @param {string} style
 *        The CSS property on the element that should be styled.
 *
 * @param {string} rule
 *        The style rule that should be applied to the property.
 *
 * @private
 */
function tryUpdateStyle(el, style, rule) {
  try {
    el.style[style] = rule;
  } catch (e) {

    // Satisfies linter.
    return;
  }
}

/**
 * The component for displaying text track cues.
 *
 * @extends Component
 */

var TextTrackDisplay = function (_Component) {
  inherits(TextTrackDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */
  function TextTrackDisplay(player, options, ready) {
    classCallCheck(this, TextTrackDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));

    player.on('loadstart', bind(_this, _this.toggleDisplay));
    player.on('texttrackchange', bind(_this, _this.updateDisplay));
    player.on('loadstart', bind(_this, _this.preselectTrack));

    // This used to be called during player init, but was causing an error
    // if a track should show by default and the display hadn't loaded yet.
    // Should probably be moved to an external track loader when we support
    // tracks that don't need a display.
    player.ready(bind(_this, function () {
      if (player.tech_ && player.tech_.featuresNativeTextTracks) {
        this.hide();
        return;
      }
      if (player.techName_ === 'EmpShaka' || player.techName_ === 'EmpHLS' || player.techName_ === 'EmpCast') {
        this.hide();
        return;
      }

      player.on('fullscreenchange', bind(this, this.updateDisplay));

      var tracks = this.options_.playerOptions.tracks || [];

      for (var i = 0; i < tracks.length; i++) {
        this.player_.addRemoteTextTrack(tracks[i], true);
      }

      this.preselectTrack();
    }));
    return _this;
  }

  /**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */


  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {
    var modes = { captions: 1, subtitles: 1 };
    var trackList = this.player_.textTracks();
    var userPref = this.player_.cache_.selectedLanguage;
    var firstDesc = void 0;
    var firstCaptions = void 0;
    var preferredTrack = void 0;

    for (var i = 0; i < trackList.length; i++) {
      var track = trackList[i];

      if (userPref && userPref.enabled && userPref.language === track.language) {
        // Always choose the track that matches both language and kind
        if (track.kind === userPref.kind) {
          preferredTrack = track;
          // or choose the first track that matches language
        } else if (!preferredTrack) {
          preferredTrack = track;
        }

        // clear everything if offTextTrackMenuItem was clicked
      } else if (userPref && !userPref.enabled) {
        preferredTrack = null;
        firstDesc = null;
        firstCaptions = null;
      } else if (track['default']) {
        if (track.kind === 'descriptions' && !firstDesc) {
          firstDesc = track;
        } else if (track.kind in modes && !firstCaptions) {
          firstCaptions = track;
        }
      }
    }

    // The preferredTrack matches the user preference and takes
    // precendence over all the other tracks.
    // So, display the preferredTrack before the first default track
    // and the subtitles/captions track before the descriptions track
    if (preferredTrack) {
      preferredTrack.mode = 'showing';
    } else if (firstCaptions) {
      firstCaptions.mode = 'showing';
    } else if (firstDesc) {
      firstDesc.mode = 'showing';
    }
  };

  /**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */


  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
    if (this.player_.techName_ === 'EmpShaka' || this.player_.techName_ === 'EmpHLS' || this.player_.techName_ === 'EmpCast') {
      this.hide();
      return;
    }
    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */


  TextTrackDisplay.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-text-track-display'
    }, {
      'aria-live': 'off',
      'aria-atomic': 'true'
    });
  };

  /**
   * Clear all displayed {@link TextTrack}s.
   */


  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
    if (typeof window_1.WebVTT === 'function') {
      window_1.WebVTT.processCues(window_1, [], this.el_);
    }
  };

  TextTrackDisplay.prototype.removeStyles = function removeStyles(styleName) {
    var styleElement = document_1.getElementById(styleName);
    if (styleElement) document_1.getElementsByTagName('head')[0].removeChild(styleElement);
    return styleElement;
  };

  TextTrackDisplay.prototype.writeStyles = function writeStyles(styleName, cssText) {
    var styleElement = this.removeStyles(styleName);
    styleElement = document_1.createElement('style');
    styleElement.type = 'text/css';
    styleElement.id = styleName;
    styleElement.innerHTML = cssText;
    document_1.getElementsByTagName('head')[0].appendChild(styleElement);
  };

  TextTrackDisplay.prototype.getStyle = function getStyle(overrides) {

    var color = void 0,
        backgroundColor = void 0,
        textShadow = void 0,
        fontSize = void 0,
        height = void 0,
        top = void 0,
        bottom = void 0,
        fontVariant = void 0,
        fontFamily = void 0,
        windowColor = void 0;
    if (overrides.color) {
      color = 'color: ' + overrides.color;
    }
    if (overrides.textOpacity) {
      color = 'color: ' + constructColor(overrides.color || '#fff', overrides.textOpacity);
    }
    if (overrides.backgroundColor) {
      backgroundColor = 'background-color: ' + overrides.backgroundColor;
    }
    if (overrides.backgroundOpacity) {
      backgroundColor = 'background-color: ' + constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity);
    }
    if (overrides.windowColor) {
      if (overrides.windowOpacity) {
        windowColor = 'outline: ' + constructColor(overrides.windowColor, overrides.windowOpacity) + ' solid 10px';
      } else {
        windowColor = 'outline: ' + overrides.windowColor + ' solid 10px';
      }
    }

    if (overrides.edgeStyle) {
      if (overrides.edgeStyle === 'dropshadow') {
        //textShadow = 'text-shadow: ' + `2px 2px 3px ${darkGray}, 2px 2px 4px ${darkGray}, 2px 2px 5px ${darkGray}`;
        textShadow = 'text-shadow: ' + '0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black, black 0.1em 0.1em 0.2em';
      } else if (overrides.edgeStyle === 'raised') {
        textShadow = 'text-shadow: ' + ('1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray);
      } else if (overrides.edgeStyle === 'depressed') {
        textShadow = 'text-shadow: ' + ('1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray);
      } else if (overrides.edgeStyle === 'uniform') {
        textShadow = 'text-shadow: ' + ('0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray);
      }
    }

    if (overrides.fontPercent && overrides.fontPercent !== 1) {
      //fontSize = 92;
      fontSize = 'font-size: ' + overrides.fontPercent + 'em';
      height = 'height: ' + 'auto';
      top = 'top: ' + 'auto';
      bottom = 'bottom: ' + '2px';
    }
    if (overrides.fontFamily && overrides.fontFamily !== 'default') {
      if (overrides.fontFamily === 'small-caps') {
        fontVariant = 'font-variant: ' + 'small-caps';
      } else {
        fontFamily = 'font-family: ' + fontMap[overrides.fontFamily];
      }
    }
    var style = (color ? color + '; ' : '') + (backgroundColor ? backgroundColor + '; ' : '') + (textShadow ? textShadow + '; ' : '') + (fontSize ? fontSize + '; ' : '') + (height ? height + '; ' : '') + (top ? top + '; ' : '') + (bottom ? bottom + '; ' : '') + (fontVariant ? fontVariant + '; ' : '') + (fontFamily ? fontFamily + '; ' : '') + (windowColor ? windowColor + '; ' : '');

    return style;
  };

  TextTrackDisplay.prototype.getSafariStyle = function getSafariStyle(overrides) {
    var backgroundColor = void 0;
    if (overrides.backgroundColor) {
      backgroundColor = 'background-color: ' + overrides.backgroundColor;
    }
    if (overrides.backgroundOpacity) {
      backgroundColor = 'background-color: ' + constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity);
    }
    if (backgroundColor) {
      return "video::-webkit-media-text-track-display-backdrop {" + backgroundColor + " !important;" + "overflow: visible !important;}";
    }
    return "";
  };

  /**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */


  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
    if (this.player_.textTrackSettings) {
      var overrides = void 0;
      if (this.player_.options_.textTrackStyle) {
        overrides = this.player_.options_.textTrackStyle;
      } else {
        overrides = this.player_.textTrackSettings.getValues();
      }
      var styleName = 'styles_cue';
      if (this.player_.techName_ === 'EmpShaka' || this.player_.techName_ === 'EmpHLS' || this.player_.techName_ === 'EmpCast') {
        var styleStr = this.getStyle(overrides);
        if (this.player_.techName_ === 'EmpHLS') {
          this.writeStyles(styleName, 'video::cue {' + styleStr + '}' + '\n' + this.getSafariStyle(overrides));
        } else {
          this.writeStyles(styleName, 'video::cue {' + styleStr + '}');
        }
        this.clearDisplay();
        return;
      } else {
        this.removeStyles(styleName);
      }
    }

    var tracks = this.player_.textTracks();

    this.clearDisplay();

    // Track display prioritization model: if multiple tracks are 'showing',
    //  display the first 'subtitles' or 'captions' track which is 'showing',
    //  otherwise display the first 'descriptions' track which is 'showing'

    var descriptionsTrack = null;
    var captionsSubtitlesTrack = null;
    var i = tracks.length;

    while (i--) {
      var track = tracks[i];

      if (track.mode === 'showing') {
        if (track.kind === 'descriptions') {
          descriptionsTrack = track;
        } else {
          captionsSubtitlesTrack = track;
        }
      }
    }

    if (captionsSubtitlesTrack) {
      if (this.getAttribute('aria-live') !== 'off') {
        this.setAttribute('aria-live', 'off');
      }
      this.updateForTrack(captionsSubtitlesTrack);
    } else if (descriptionsTrack) {
      if (this.getAttribute('aria-live') !== 'assertive') {
        this.setAttribute('aria-live', 'assertive');
      }
      this.updateForTrack(descriptionsTrack);
    }
  };

  /**
   * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack} track
   *        Text track object to be added to the list.
   */


  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
    if (typeof window_1.WebVTT !== 'function' || !track.activeCues) {
      return;
    }

    var overrides = void 0;
    if (this.player_.textTrackSettings) {
      overrides = this.player_.textTrackSettings.getValues();
    }
    var cues = [];

    for (var _i = 0; _i < track.activeCues.length; _i++) {
      cues.push(track.activeCues[_i]);
    }

    window_1.WebVTT.processCues(window_1, cues, this.el_);

    if (overrides) {
      return;
    }

    var i = cues.length;

    while (i--) {
      var cue = cues[i];

      if (!cue) {
        continue;
      }

      var cueDiv = cue.displayState;

      if (overrides.color) {
        cueDiv.firstChild.style.color = overrides.color;
      }
      if (overrides.textOpacity) {
        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
      }
      if (overrides.backgroundColor) {
        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
      }
      if (overrides.backgroundOpacity) {
        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
      }
      if (overrides.windowColor) {
        if (overrides.windowOpacity) {
          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
        } else {
          cueDiv.style.backgroundColor = overrides.windowColor;
        }
      }
      if (overrides.edgeStyle) {
        if (overrides.edgeStyle === 'dropshadow') {
          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
        } else if (overrides.edgeStyle === 'raised') {
          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
        } else if (overrides.edgeStyle === 'depressed') {
          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
        } else if (overrides.edgeStyle === 'uniform') {
          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
        }
      }
      if (overrides.fontPercent && overrides.fontPercent !== 1) {
        var fontSize = window_1.parseFloat(cueDiv.style.fontSize);

        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
        cueDiv.style.height = 'auto';
        cueDiv.style.top = 'auto';
        cueDiv.style.bottom = '2px';
      }
      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
        if (overrides.fontFamily === 'small-caps') {
          cueDiv.firstChild.style.fontVariant = 'small-caps';
        } else {
          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
        }
      }
    }
  };

  return TextTrackDisplay;
}(Component$17);

Component$17.registerComponent('TextTrackDisplay', TextTrackDisplay);

/**
 * @file text-track-settings.js
 */
var Component$18 = videojs$1.getComponent('Component');
var ModalDialog = videojs$1.getComponent('ModalDialog');

var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';

var COLOR_BLACK = ['#000', 'Black'];
var COLOR_BLUE = ['#00F', 'Blue'];
var COLOR_CYAN = ['#0FF', 'Cyan'];
var COLOR_GREEN = ['#0F0', 'Green'];
var COLOR_MAGENTA = ['#F0F', 'Magenta'];
var COLOR_RED = ['#F00', 'Red'];
var COLOR_WHITE = ['#FFF', 'White'];
var COLOR_YELLOW = ['#FF0', 'Yellow'];

var OPACITY_OPAQUE = ['1', 'Opaque'];
var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
var OPACITY_TRANS = ['0', 'Transparent'];

// Configuration for the various <select> elements in the DOM of this component.
//
// Possible keys include:
//
// `default`:
//   The default option index. Only needs to be provided if not zero.
// `parser`:
//   A function which is used to parse the value from the selected option in
//   a customized way.
// `selector`:
//   The selector used to find the associated <select> element.
var selectConfigs = {
  backgroundColor: {
    selector: '.vjs-bg-color > select',
    id: 'captions-background-color-%s',
    label: 'Color',
    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
  },

  backgroundOpacity: {
    selector: '.vjs-bg-opacity > select',
    id: 'captions-background-opacity-%s',
    label: 'Transparency',
    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
  },

  color: {
    selector: '.vjs-fg-color > select',
    id: 'captions-foreground-color-%s',
    label: 'Color',
    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
  },

  edgeStyle: {
    selector: '.vjs-edge-style > select',
    id: '%s',
    label: 'Text Edge Style',
    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']],
    'default': 4
  },

  fontFamily: {
    selector: '.vjs-font-family > select',
    id: 'captions-font-family-%s',
    label: 'Font Family',
    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
  },

  fontPercent: {
    selector: '.vjs-font-percent > select',
    id: 'captions-font-size-%s',
    label: 'Font Size',
    options: [['0.25', '25%'], ['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['2.50', '250%']],
    'default': 3,
    parser: function parser(v) {
      return v === '1.00' ? null : Number(v);
    }
  },

  textOpacity: {
    selector: '.vjs-text-opacity > select',
    id: 'captions-foreground-opacity-%s',
    label: 'Transparency',
    options: [OPACITY_OPAQUE, OPACITY_SEMI]
  },

  // Options for this object are defined below.
  windowColor: {
    selector: '.vjs-window-color > select',
    id: 'captions-window-color-%s',
    label: 'Color'
  },

  // Options for this object are defined below.
  windowOpacity: {
    selector: '.vjs-window-opacity > select',
    id: 'captions-window-opacity-%s',
    label: 'Transparency',
    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
  }
};

selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

/**
 * Get the actual value of an option.
 *
 * @param  {string} value
 *         The value to get
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */
function parseOptionValue(value, parser) {
  if (parser) {
    value = parser(value);
  }

  if (value && value !== 'none') {
    return value;
  }
}

/**
 * Gets the value of the selected <option> element within a <select> element.
 *
 * @param  {Element} el
 *         the element to look in
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */
function getSelectedOptionValue(el, parser) {
  var value = el.options[el.options.selectedIndex].value;

  return parseOptionValue(value, parser);
}

/**
 * Sets the selected <option> element within a <select> element based on a
 * given value.
 *
 * @param {Element} el
 *        The element to look in.
 *
 * @param {string} value
 *        the property to look on.
 *
 * @param {Function} [parser]
 *        Optional function to adjust the value before comparing.
 *
 * @private
 */
function setSelectedOption(el, value, parser) {
  if (!value) {
    return;
  }

  for (var i = 0; i < el.options.length; i++) {
    if (parseOptionValue(el.options[i].value, parser) === value) {
      el.selectedIndex = i;
      break;
    }
  }
}

/**
 * Manipulate Text Tracks settings.
 *
 * @extends ModalDialog
 */

var TextTrackSettings = function (_ModalDialog) {
  inherits(TextTrackSettings, _ModalDialog);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *         The key/value store of player options.
   */
  function TextTrackSettings(player, options) {
    classCallCheck(this, TextTrackSettings);

    options.temporary = false;

    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

    _this.updateDisplay = bind(_this, _this.updateDisplay);

    // fill the modal and pretend we have opened it
    _this.fill();
    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;

    _this.endDialog = createEl('p', {
      className: 'vjs-control-text',
      textContent: _this.localize('End of dialog window.')
    });
    _this.el().appendChild(_this.endDialog);

    _this.setDefaults();

    // Grab `persistTextTrackSettings` from the player options if not passed in child options
    if (options.persistTextTrackSettings === undefined) {
      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
    }

    _this.on(_this.$('.vjs-done-button'), 'click', function () {
      _this.saveSettings();
      _this.close();
    });

    _this.on(_this.$('.vjs-default-button'), 'click', function () {
      _this.setDefaults();
      _this.updateDisplay();
    });

    each(selectConfigs, function (config) {
      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
    });

    if (_this.options_.persistTextTrackSettings) {
      _this.restoreSettings();
    }
    return _this;
  }

  TextTrackSettings.prototype.dispose = function dispose() {
    this.endDialog = null;

    _ModalDialog.prototype.dispose.call(this);
  };

  /**
   * Create a <select> element with configured options.
   *
   * @param {string} key
   *        Configuration key to use during creation.
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
    var _this2 = this;

    var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';

    var config = selectConfigs[key];
    var id = config.id.replace('%s', this.id_);

    return ['<' + type + ' id="' + id + '" class="' + (type === 'label' ? 'vjs-label' : '') + '">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby="' + (legendId !== '' ? legendId + ' ' : '') + id + '">'].concat(config.options.map(function (o) {
      var optionId = id + '-' + o[1];

      return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + (legendId !== '' ? legendId + ' ' : '') + id + ' ' + optionId + '">', _this2.localize(o[1]), '</option>'].join('');
    })).concat('</select>').join('');
  };

  /**
   * Create foreground color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
    var legendId = 'captions-text-legend-' + this.id_;

    return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
  };

  /**
   * Create background color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
    var legendId = 'captions-background-' + this.id_;

    return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
  };

  /**
   * Create window color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
    var legendId = 'captions-window-' + this.id_;

    return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
  };

  /**
   * Create color elements for the component
   *
   * @return {Element}
   *         The element that was created
   *
   * @private
   */


  TextTrackSettings.prototype.createElColors_ = function createElColors_() {
    return createEl('div', {
      className: 'vjs-track-settings-colors',
      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
    });
  };

  /**
   * Create font elements for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */


  TextTrackSettings.prototype.createElFont_ = function createElFont_() {
    return createEl('div', {
      className: 'vjs-track-settings-font">',
      innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
    });
  };

  /**
   * Create controls for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */


  TextTrackSettings.prototype.createElControls_ = function createElControls_() {
    var defaultsDescription = this.localize('restore all settings to the default values');

    return createEl('div', {
      className: 'vjs-track-settings-controls',
      innerHTML: ['<button class="vjs-default-button" title="' + defaultsDescription + '">', this.localize('Reset'), '<span class="vjs-control-text"> ' + defaultsDescription + '</span>', '</button>', '<button class="vjs-done-button">' + this.localize('Done') + '</button>'].join('')
    });
  };

  TextTrackSettings.prototype.content = function content() {
    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
  };

  TextTrackSettings.prototype.label = function label() {
    return this.localize('Caption Settings Dialog');
  };

  TextTrackSettings.prototype.description = function description() {
    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
  };

  TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {
    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';
  };

  /**
   * Gets an object of text track settings (or null).
   *
   * @return {Object}
   *         An object with config values parsed from the DOM or localStorage.
   */


  TextTrackSettings.prototype.getValues = function getValues() {
    var _this3 = this;

    return reduce(selectConfigs, function (accum, config, key) {
      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

      if (value !== undefined) {
        accum[key] = value;
      }

      return accum;
    }, {});
  };

  /**
   * Sets text track settings from an object of values.
   *
   * @param {Object} values
   *        An object with config values parsed from the DOM or localStorage.
   */


  TextTrackSettings.prototype.setValues = function setValues(values) {
    var _this4 = this;

    each(selectConfigs, function (config, key) {
      setSelectedOption(_this4.$(config.selector), values[key], config.parser);
    });
  };

  /**
   * Sets all `<select>` elements to their default values.
   */


  TextTrackSettings.prototype.setDefaults = function setDefaults() {
    var _this5 = this;

    each(selectConfigs, function (config) {
      var index = config.hasOwnProperty('default') ? config['default'] : 0;

      _this5.$(config.selector).selectedIndex = index;
    });
  };

  /**
   * Restore texttrack settings from localStorage
   */


  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
    var values = void 0;

    try {
      values = JSON.parse(window_1.localStorage.getItem(LOCAL_STORAGE_KEY));
    } catch (err) {
      log$1.warn(err);
    }

    if (values) {
      this.setValues(values);
    }
  };

  /**
   * Save text track settings to localStorage
   */


  TextTrackSettings.prototype.saveSettings = function saveSettings() {
    var values = this.getValues();
    //override textTrackStyle with dialog values
    this.player_.options_.textTrackStyle = undefined;
    //send to CC if casting
    if (this.player_.techName_ === 'EmpCast') {
      this.player_.techCall_('sendTextTrackStyle', values);
    }

    if (!this.options_.persistTextTrackSettings) {
      return;
    }

    try {
      if (Object.keys(values).length) {
        window_1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
      } else {
        window_1.localStorage.removeItem(LOCAL_STORAGE_KEY);
      }
    } catch (err) {
      log$1.warn(err);
    }
  };

  /**
   * Update display of text track settings
   */


  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
    var ttDisplay = this.player_.getChild('textTrackDisplay');

    if (ttDisplay) {
      ttDisplay.updateDisplay();
    }
  };

  /**
   * conditionally blur the element and refocus the captions button
   *
   * @private
   */


  TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {
    this.previouslyActiveEl_ = null;
    this.off(document_1, 'keydown', this.handleKeyDown);

    var cb = this.player_.controlBar;
    var subsCapsBtn = cb && cb.subsCapsButton;
    var ccBtn = cb && cb.captionsButton;

    if (subsCapsBtn) {
      subsCapsBtn.focus();
    } else if (ccBtn) {
      ccBtn.focus();
    }
  };

  return TextTrackSettings;
}(ModalDialog);

Component$18.registerComponent('TextTrackSettings', TextTrackSettings);

var VjsPlayer = videojs$1.getComponent('Player');
var Tech = videojs$1.getComponent('Tech');
var CaptionSettingsMenuItem = videojs$1.getComponent('CaptionSettingsMenuItem');

/**
 * Player class, inherits from videojs Player class.
 *
 * @param {Element}   tag     The original video tag used for configuring options
 * @param {Object=}   options Player Options
 * @param {Function=} ready   Ready callback
 * @extends videojs.Player
 * @class Player
 */

var Player = function (_VjsPlayer) {
  inherits(Player, _VjsPlayer);

  function Player(tag) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ready = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
    classCallCheck(this, Player);


    //absoluteStartTime override startTime
    options.startTime = options.absoluteStartTime ? 0 : options.startTime;
    options = Object.assign({
      children: ['mediaLoader', 'PosterImage', 'textTrackDisplay', 'loadingSpinner', 'controlBar', 'errorDisplay', 'textTrackSettings', 'BigPlayButton']
    }, options);

    if (options.techOrder === 'auto' || Array.isArray(options.techOrder) && options.techOrder.length === 1 && options.techOrder[0] === 'auto') {
      options.techOrder = Player.AutoTechArray();
    }

    // Add default options for every player instance
    // default options are overidden by options set in the options parameter
    options = videojs$1.mergeOptions({
      'entitlement-engine': 'EricssonExposure',
      'techOrder': Player.AutoTechArray(),
      'maxBitrate': 0,
      'timeShiftDisabled': false,
      'useLastViewedOffset': false,
      'startTime': 0,
      'absoluteStartTime': undefined,
      'persistTextTrackSettings': true,
      'textTrackSettings': true
    }, options);

    var _this = possibleConstructorReturn(this, _VjsPlayer.call(this, tag, options, ready));

    _this.monkeyPatchingTextMenu_();

    if (window_1.empPlayer && log$1.islogToBrowserConsole) {
      window_1.empPlayer.setInstance(_this);
    }
    _this.previousAbsoluteStartTime_ = undefined;
    if (_this.castPlugin) {
      _this.castPlugin();
    }

    _this.on(empPlayerEvents.ENDED, function () {
      log$1('ENDED');
      _this.ended_ = true;
      _this.stopProgramService();
      if (_this.entitlementExpirationService) {
        _this.entitlementExpirationService().stop();
      }
      if (_this.techName_ !== 'EmpCast') {
        _this.loadNextSource();
      }
    });

    _this.on(empPlayerEvents.DISPOSE, function () {
      _this.stopProgramService();
      if (_this.entitlementExpirationService) {
        _this.entitlementExpirationService().stop();
      }
    });
    _this.on(empPlayerEvents.ERROR, function () {
      _this.stopProgramService();
      if (_this.entitlementExpirationService) {
        _this.entitlementExpirationService().stop();
      }
    });

    _this.on(empPlayerEvents.CAN_PLAY, function () {
      _this.disableTimeShift(_this.options_.timeShiftDisabled);
    });
    _this.on(empPlayerEvents.LOADED_DATA, function () {
      _this.addClass('vjs-has-started');
      _this.ended_ = false;
      if (_this.programService) {
        var entitlement = _this.programService().entitlement();
        if (entitlement) {
          entitlement.streamInfo.referenceTime = _this.startTimeLive();
        }
      }
    });
    _this.on(empPlayerEvents.REPLAY, function () {
      if (_this.cache_ && _this.cache_.source) {
        _this.src(_this.cache_.source);
      }
    });

    _this.on(empPlayerEvents.FIRST_PLAY, function () {
      log$1('firstplay');
      //TODO replace with .mp4#t=10,20
      if (_this.options_.startTime && _this.techName_ === 'Html5') {
        _this.currentTime(_this.options_.startTime);
      }
      _this.options_.startTime = 0;
    });

    _this.initialSeekToAbsoluteStartTimeBind = _this.initialSeekToAbsoluteStartTime_.bind(_this);

    _this.isCreated = true;
    _this.trigger(empPlayerEvents.PLAYER_CREATED);
    _this.ended_ = false;
    return _this;
  }

  /**
   * Monkey-Patching text track menu to add CaptionSettingsMenuItem for HLS
   * @private
   */


  Player.prototype.monkeyPatchingTextMenu_ = function monkeyPatchingTextMenu_() {
    if (this.controlBar && this.controlBar.subsCapsButton) {
      var originalCreateItems = this.controlBar.subsCapsButton.createItems;
      var self = this;
      this.controlBar.subsCapsButton.createItems = function () {
        var items = originalCreateItems.apply(this, arguments);
        if (items && items[0].name() !== "CaptionSettingsMenuItem" && self.techName_ === 'EmpHLS' && self.options_.textTrackSettings) {
          items.unshift(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));
          this.hideThreshold_ += 1;
        }
        return items;
      };
    }
    return null;
  };

  /**
  * Set/Get The player tech options
  *
  * @return {Object} options
  */


  Player.prototype.options = function options(obj) {
    if (!obj) {
      return this.options_;
    }

    if (obj.techOrder === 'auto' || Array.isArray(obj.techOrder) && obj.techOrder.length === 1 && obj.techOrder[0] === 'auto') {
      obj.techOrder = Player.AutoTechArray();
    }

    if (obj.startTime !== undefined) {
      obj.startTime = parseFloat(obj.startTime) || 0;
    }
    //absoluteStartTime override startTime
    if (obj.absoluteStartTime !== undefined) {
      obj.startTime = 0;
    }

    this.options_ = videojs$1.mergeOptions(this.options_, obj);
    return this.options_;
  };

  /**
   * get options to add to tech
   *
   * @returns {object}
   * @private
   */


  Player.prototype.getTechOptions_ = function getTechOptions_() {
    var playOptions = {
      'autoplay': this.options_.autoplay,
      'muted': this.options_.muted,
      'language': this.options_.language,
      'maxBitrate': this.options_.maxBitrate,
      'timeShiftDisabled': this.options_.timeShiftDisabled,
      'useLastViewedOffset': this.options_.useLastViewedOffset,
      'startTime': this.options_.startTime,
      'absoluteStartTime': this.options_.absoluteStartTime,
      'audioLanguage': this.options_.audioLanguage,
      'subtitleLanguage': this.options_.subtitleLanguage
    };
    return playOptions;
  };

  /**
   * loadTech_
   *
   * @param {string} techName
   * @param {object} source
   * @private
   */


  Player.prototype.loadTech_ = function loadTech_(techName, source) {
    var _this2 = this;

    _VjsPlayer.prototype.loadTech_.call(this, techName, source);

    this.on(this.tech_, empPlayerEvents.RECOVERABLE_ASSET_ERROR, this.handleRecoverableError);

    // If we receive normal error events from the techs, error them trough on the player.
    this.on(this.tech_, empPlayerEvents.ERROR, function (event, error) {
      _this2.player_.error(error);
    });

    this.on(this.tech_, empPlayerEvents.TRACK_CHANGE, function () {
      log$1('TRACK_CHANGE');
      _this2.player_.trigger(empPlayerEvents.TRACK_CHANGE);
    });

    this.on(this.tech_, empPlayerEvents.DURATION_CHANGE, function () {
      log$1('DURATION_CHANGE');
    });
  };

  /**
   * load and play next video/program in the playback queue
   *
   * @returns {boolean} True if there was something in the queue
   */


  Player.prototype.loadNextSource = function loadNextSource() {
    if (this.tech_ && this.tech_['loadNextSource'] !== undefined) {
      this.techCall_('loadNextSource');
      return true;
    } else if (this.cache_.sources && this.cache_.sources.length > 1) {
      this.cache_.sources.shift();
      this.src(this.cache_.sources);
      return true;
    }
    return false;
  };

  /**
   * set videojs TextTrackStyle or send to Chromecast
   * @param {object} style
   */


  Player.prototype.setTextTrackStyle = function setTextTrackStyle(style) {
    if (this.techName_ === 'EmpCast') {
      this.techCall_('sendTextTrackStyle', style);
    } else {
      this.options_.textTrackStyle = style;
      this.trigger('texttrackchange');
    }
  };

  /**
   * Add a asset/program to the playback queue
   *
   * @param {?string} assetId optional
   * @param {?string} channelId optional
   * @param {?String} programId optional
   * @param {?number} startTime optional startTime in unix time (ms)
   */


  Player.prototype.lineUpAsset = function lineUpAsset(assetId, channelId, programId, startTime) {
    var asset = { 'assetId': assetId, 'programId': programId, 'channelId': channelId };
    if (startTime) {
      this.options({ 'playFrom': 'beginning', 'absoluteStartTime': startTime });
    }
    this.lineupSource({ 'type': 'video/emp', 'src': JSON.stringify(asset) });
  };

  /**
   * Add video source to the playback queue
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, or a string referencing URL to a media source.
   */


  Player.prototype.lineupSource = function lineupSource(source) {
    if (this.tech_ && this.tech_['lineupSource'] !== undefined) {
      this.techCall_('lineupSource', source);
      return;
    }
    this.cache_.sources.push(source);
  };

  /**
   * unloadTech_
   */


  Player.prototype.unloadTech_ = function unloadTech_() {
    //TODO remove event
    _VjsPlayer.prototype.unloadTech_.call(this);
  };

  /**
   * stop playback Unload mediasource, It's resource and time consuming task
   * Try not to call this method
   *
   * @param {Function=} afterStopCallback
   */


  Player.prototype.stop = function stop(afterStopCallback) {
    extplayer.stop(this, afterStopCallback);
  };

  /**
   * handleRecoverableError
   *
   * @param {object} event
   * @param {object} data
   * @private
   */


  Player.prototype.handleRecoverableError = function handleRecoverableError(event, data) {
    //Fix reset for hls and add so we don't need gusse tech
    if (data.source) {
      if (data.code !== 6001) {
        log$1.error('handleRecoverableError', data.techName, data.message);
        this.analytics && this.analytics().onError({ code: data.code, message: data.message });
      }
      if (!this.options_.excludeTechs) {
        this.options_.excludeTechs = [];
      }
      this.options_.excludeTechs.push(data.techName);
      if (this.options_.techOrder.length > this.options_.excludeTechs.length) {
        this.error(null);
        this.resetWithoutReload_();
        this.options_.autoplay = this.options_.autoplay;
        if (this.hasStarted()) {
          this.options_.autoplay = true;
        }
        this.options_.absoluteStartTime = this.previousAbsoluteStartTime_;
        if (data.source.assetId) {
          var asset = { 'assetId': data.source.assetId, 'programId': data.source.programId };
          _VjsPlayer.prototype.src.call(this, { 'type': 'video/emp', 'src': JSON.stringify(asset) });
          return;
        }
      }
    }
    data.message = data.message || this.localize('Unknown error, can\'t recover');
    this.error(new EmpPlayerError(data.message, data.code));
    this.resetWithoutReload_();
  };

  /**
   * resetWithoutReload_
   * @private
   */


  Player.prototype.resetWithoutReload_ = function resetWithoutReload_() {
    if (this.tech_) {
      this.techCall_('reset');
      this.unloadTech_();
    }
  };

  /**
   * Returns a list of available bitrates
   *
   * @return {number[]}) Array of available bitrates
   */


  Player.prototype.bitrates = function bitrates() {
    return extplayer.bitrates(this);
  };

  /**
  * Get/Set bitrate
  *
  * Will always return a bitrate equal to the current video bitrate. However it may change due to dynamic switching.
  *
  * Setting this value disable dynamic switching, and fixes the bitrate as specified.
  * To set a ceiling, but allow it to dynamically switch quality when
  * able use setMaxBitrate instead
  *
  * @param {number} value Bitrate to set
  * @return {number} bitrate when getting
  */


  Player.prototype.bitrate = function bitrate(value) {
    return extplayer.bitrate(this, value);
  };

  /**
  * Get current bitrate
  *
  * Always returns the current bitrate, unlike bitrate() which returns 0 if ABR is enabled
  *
  * @return {number} bitrate when getting
  */


  Player.prototype.getBitrate = function getBitrate() {
    return extplayer.getBitrate(this);
  };

  /**
  * select audio track with languageCode (en, sv, de ...) and optional kind
  *
  * @param {String} languageCode
  * @param {String} kind or empty
  */


  Player.prototype.selectAudioTrack = function selectAudioTrack(languageCode, kind) {
    var audioTracks = this.audioTracks();
    var i = audioTracks.length;
    while (i--) {
      var track = audioTracks[i];
      // find the audio track and set it to enabled
      if (track.language === languageCode && !track.enabled) {
        if (!kind || track.kind === kind) {
          track.enabled = true;
        }
        return;
      }
    }
  };

  /**
   * get languageCode for current Audio Track (en, sv, de ...)
   *
   * @return {String} languageCode
   */


  Player.prototype.getSelectedAudioTrack = function getSelectedAudioTrack() {
    return extplayer.getSelectedAudioTrack(this);
  };

  /**
   * Get all Audio track language codes
   *
   * @returns {strings[]} Array of language codes
   */


  Player.prototype.getAudioTracksLanguages = function getAudioTracksLanguages() {
    var audioTracksLanguages = [];
    var audioTracks = this.audioTracks();

    for (var i = 0; i < audioTracks.length; i++) {
      audioTracksLanguages.push(audioTracks[i].language);
    }
    return audioTracksLanguages;
  };

  /**
  * select text track with languageCode (en, sv, de) and optional kind
  *
  * @param {?String} languageCode or null
  * @param {?String} kind or empty
  */


  Player.prototype.selectTextTrack = function selectTextTrack(languageCode, kind) {
    languageCode = languageCode && languageCode !== 'None' ? languageCode : null;
    var textTracks = this.textTracks();
    var i = textTracks.length;
    while (i--) {
      var track = textTracks[i];
      // find the text track and showing
      if (track.language === languageCode) {
        if (!kind || track.kind === kind) {
          track.mode = 'showing';
        }
      }
      // disable other tracks
      else if (track.mode !== 'disabled') {
          track.mode = 'disabled';
        }
    }
  };

  /**
  * get languageCode for current Text Track (null, en, sv, de ...)
  *
  * @return {?String} languageCode or null
  */


  Player.prototype.getSelectedTextTrack = function getSelectedTextTrack() {
    return extplayer.getSelectedTextTrack(this);
  };

  /**
   * Hide or Show Text tracks
   *
   * @param {boolean} visible
   */


  Player.prototype.textTrackVisible = function textTrackVisible(visible) {
    var textTracks = this.textTracks();
    var i = textTracks.length;
    while (i--) {
      var track = textTracks[i];
      if (visible) {
        if (track.mode === 'hidden') {
          track.mode = 'showing';
          return;
        }
      } else {
        if (track.mode === 'showing') {
          track.mode = 'hidden';
        } else if (track.mode !== 'disabled') {
          track.mode = 'disabled';
        }
      }
    }
  };

  /**
   * Is text track is visible
   *
   * @returns {boolean}
   */


  Player.prototype.isTextTrackVisible = function isTextTrackVisible() {
    var textTracks = this.textTracks();
    var i = textTracks.length;
    while (i--) {
      var track = textTracks[i];
      if (track.mode === 'showing') {
        return true;
      }
    }
    return false;
  };

  /**
   * Get all text track language codes
   *
   * @returns {string[]} Array of language codes
   */


  Player.prototype.getTextTracksLanguages = function getTextTracksLanguages() {
    var textTracksLanguages = [];
    var textTracks = this.textTracks();

    for (var i = 0; i < textTracks.length; i++) {
      textTracksLanguages.push(textTracks[i].language);
    }
    return textTracksLanguages;
  };

  /**
   * Can Seek To position
   * @param {number} position
   * @returns {boolean}
   */


  Player.prototype.canSeekTo = function canSeekTo(position) {
    return extplayer.canSeekTo(this, position);
  };

  /**
   * Get Contract Restrictions
   *
   * @returns {object}
   */


  Player.prototype.getRestrictions = function getRestrictions() {
    var restrictions = {};
    var entitlement = extplayer.getEntitlement(this);
    if (entitlement) {
      restrictions = {
        minBitrate: entitlement.minBitrate,
        maxBitrate: entitlement.maxBitrate,
        maxResWidth: entitlement.maxResWidth,
        maxResHeight: entitlement.maxResHeight,
        rwEnabled: entitlement.rwEnabled,
        ffEnabled: entitlement.ffEnabled
      };
    }
    return restrictions;
  };

  /**
   * Has the playback started
   *
   * * > **NOTE**: True if paused
   *
   * @returns {boolean}
   */


  Player.prototype.isPlaying = function isPlaying() {
    return this.hasStarted();
  };

  /**
   * Is playback a live stream
   *
   * @returns {boolean}
   */


  Player.prototype.isLive = function isLive() {
    return extplayer.isLive(this);
  };

  /**
   * Get the current tech verion
   *
   * @returns {string} the version number
   */


  Player.prototype.techVersion = function techVersion() {
    return extplayer.techVersion(this);
  };

  /**
  * Get or the raw current time (in seconds) from the video element
  *
  * > **NOTE**: It's the raw currentTime from the video element
  *
  * @return {number}
  *         - the current time in seconds when getting
  */


  Player.prototype.baseCurrentTime = function baseCurrentTime() {
    return extplayer.baseCurrentTime(this);
  };

  /**
   * Normally gets the length in time of the video in seconds;
   * in all but the rarest use cases an argument will NOT be passed to the method
   *
   * > **NOTE**: It's the raw duration from the video element
   *
   * > **NOTE**: The video must have started loading before the duration can be
   * known, and in the case of Flash, may not be known until the video starts
   * playing.
   *
   * @fires Player#durationchange
   *
   * @param {number} [seconds]
   *        The duration of the video to set in seconds
   *
   * @return {number}
   *         - The duration of the video in seconds when getting
   */


  Player.prototype.baseDuration = function baseDuration(seconds) {
    if (seconds === undefined) {
      return extplayer.baseDuration(this);
    } else {
      _VjsPlayer.prototype.duration.call(this, seconds);
    }
  };

  /**
   * Main method for start playback
   *
   * @param {string|object} source The Source element of a video element
   */


  Player.prototype.src = function src(source) {
    var _this3 = this;

    if (typeof source === 'undefined') {
      return this.cache_.src || '';
    }
    if (!this.isCreated) {
      this.one(empPlayerEvents.PLAYER_CREATED, function () {
        _this3.src(source);
      });
      return;
    }

    // filter out invalid sources and turn our source into
    // an array of source objects
    var sources = filterSource(source);

    // if a source was passed in then it is invalid because
    // it was filtered to a zero length Array. So we have to
    // show an error
    if (!sources.length) {
      this.setTimeout(function () {
        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
      }, 0);
      return;
    }
    if (!sources[0].type) {
      sources[0].type = 'video/emp';
    }

    this.options_.excludeTechs = [];
    if (!this.tech_) {
      this.reset();
    }

    this.error(null);

    //Will start casting if connected
    if (!extplayer.casting(this, sources)) {
      if (sources[0].options) {
        this.options(sources[0].options);
      }
      //for external dash streams copy options
      if (sources[0].type !== 'video/emp') {
        sources[0].options = this.getTechOptions_();
      }
      //Start playback
      this.off(empPlayerEvents.LOADED_DATA, this.initialSeekToAbsoluteStartTimeBind);
      this.one(empPlayerEvents.LOADED_DATA, this.initialSeekToAbsoluteStartTimeBind);

      return _VjsPlayer.prototype.src.call(this, sources);
    }
  };

  /**
   * initialSeekToAbsoluteStartTime_
   *
   * @private
   */


  Player.prototype.initialSeekToAbsoluteStartTime_ = function initialSeekToAbsoluteStartTime_() {
    var entitlement = extplayer.getEntitlement(this);
    //dash and hls/flash live streams have different stream startTime and different currentTime
    //absoluteStartTime is slower, use startTime in the most cases
    if (this.options_.absoluteStartTime && this.timeShiftEnabled()) {
      this.setAbsoluteTime(new Date(this.options_.absoluteStartTime));
      this.previousAbsoluteStartTime_ = this.options_.absoluteStartTime;
      this.options_.absoluteStartTime = undefined;
    }
    //Seek to lastViewedOffset, can't use startTime with Shaka if stream not dashed
    //TODO Use startTime when we have VOD in new A/V pipe
    else if (this.options_.useLastViewedOffset && entitlement && !this.isLive() && this.techName_ === 'EmpShaka' && entitlement.lastViewedOffset) {
        this.currentTime(entitlement.lastViewedOffset / 1000);
      }
  };

  /**
   * Set Max Bitrate
   *
   * @param {number} bitrate
   */


  Player.prototype.setMaxBitrate = function setMaxBitrate(bitrate) {
    this.options_.maxBitrate = bitrate;
    if (!this.tech_ || this.tech_['setMaxBitrate'] === undefined) return;

    this.techCall_('setMaxBitrate', bitrate);
  };

  /**
   * Get Max Bitrate
   *
   * @returns {number}
   */


  Player.prototype.getMaxBitrate = function getMaxBitrate() {
    if (!this.tech_ || this.tech_['getMaxBitrate'] === undefined) return 0;

    return this.techGet_('getMaxBitrate');
  };

  /**
   * Set / Get timeShift disable
   *
   *> **NOTE**: For backward compatibility, use timeShiftEnabled.
   *
   * @param {boolean} value true=disable false=enabled
   * @returns {boolean} true if timeShift is disable
   */


  Player.prototype.disableTimeShift = function disableTimeShift(value) {
    if (!this.tech_ || this.tech_['disableTimeShift'] === undefined) return false;

    if (value !== undefined) {
      if (value === false && !this.canEnableTimeshift()) {
        return !extplayer.timeShiftEnabled(this);
      }
      this.techCall_('disableTimeShift', value);
      //tech should decide if it can enable timeShift
      var isEnabled = extplayer.timeShiftEnabled(this);
      if (isEnabled === undefined) {
        this.options_.timeShiftDisabled = value;
      } else {
        this.options_.timeShiftDisabled = !isEnabled;
      }
      this.trigger(empPlayerEvents.TIMESHIFT_CHANGE, { timeShiftDisabled: this.options_.timeShiftDisabled });
      return this.options_.timeShiftDisabled;
    }
    return !extplayer.timeShiftEnabled(this);
  };

  /**
   * Can timeShift be enabled according to contract restriction
   *
   * @returns {boolean}
   */


  Player.prototype.canEnableTimeshift = function canEnableTimeshift() {
    var entitlement = extplayer.getEntitlement(this);
    if (entitlement && entitlement.timeshiftEnabled === false) {
      return false;
    }
    return true;
  };

  /**
   * Get or Set timeShiftEnabled
   *
   * @param {boolean} value
   * @returns {boolean}
   */


  Player.prototype.timeShiftEnabled = function timeShiftEnabled(value) {
    if (value !== undefined) {
      this.disableTimeShift(!value);
    } else {
      return extplayer.timeShiftEnabled(this);
    }
  };

  /**
   * No EPG for current program
   *
   * @returns {boolean}
   */


  Player.prototype.noEPG = function noEPG() {
    if (!this.getProgramDetails()) {
      var entitlement = extplayer.getEntitlement(this);
      return entitlement && (entitlement.isDynamicCachupAsLive || entitlement.isStaticCachupAsLive);
    }
    return false;
  };

  /**
   * Can video or program restart from begining
   *
   * @returns {boolean}
   */


  Player.prototype.canRestart = function canRestart() {
    if (this.noEPG()) {
      return false;
    }
    return extplayer.canRestart(this);
  };

  /**
   * Restart the program from beginning or with LastViewedOffset
   *
   * @param {boolean}  useLastViewedOffset Start from last viewed offset
   */


  Player.prototype.restart = function restart(useLastViewedOffset) {
    extplayer.restart(this, useLastViewedOffset);
  };

  /**
   * Set the player in error state or clear error with null
   *
   * @param {object | string} err The error or null for clear error
   * @returns {object | string} The current Error
   */


  Player.prototype.error = function error(err) {
    if (err === undefined) {
      return this.error_ || null;
    }
    if (err && isString(err)) {
      err = new EmpPlayerError(err);
    } else if (err && !err.code) {
      err['code'] = EmpPlayerErrorCodes.UNKNOWN;
    }
    if (err && this.cache_.sources && this.cache_.sources.length > 1) {
      log$1.error(err);
      this.loadNextSource();
      return err;
    } else {
      return _VjsPlayer.prototype.error.call(this, err);
    }
  };

  /**
   * Get current Error
   *
   * @returns {object} Error object
   */


  Player.prototype.getError = function getError() {
    return this.error_;
  };

  /**
   * Set the playheadTime as a Date
   *
   * @param {Date} date
   */


  Player.prototype.setAbsoluteTime = function setAbsoluteTime(date) {
    extplayer.setAbsoluteTime(this, date);
  };

  /**
   * Get the playheadTime as a Date
   *
   * @returns {Date} playheadTime
   */


  Player.prototype.getAbsoluteTime = function getAbsoluteTime() {
    return extplayer.getAbsoluteTime(this);
  };

  /**
   * Set / Get the play head time unix time (ms) 
   *
   * @param {number} unixTime
   * @returns {number} playheadTime
   */


  Player.prototype.playheadTime = function playheadTime(unixTime) {
    if (unixTime === undefined) {
      return extplayer.getPlayheadTime(this);
    } else {
      extplayer.setPlayheadTime(this, unixTime);
    }
  };

  /**
  * Sets analytics custom attributes
  *
  * @param {String}      key   Attribute name
  * @param {String=}     value Attribute value
  */


  Player.prototype.setAnalyticsCustomAttribute = function setAnalyticsCustomAttribute(key, value) {
    if (!this.options_.analytics) {
      this.options_.analytics = {};
    }
    if (!this.options_.analytics.customAttributes) {
      this.options_.analytics.customAttributes = [];
    }
    this.options_.analytics.customAttributes.push({
      'key': key,
      'value': value
    });
  };

  /**
    * Load an asset for playback
    *
    * @param {String}      assetId   Identifier of the asset or channel to load
    * @param {String=}     programId (optional) Identifier of the program to load
    * @param {Function=}   callback  Callback when entitlement request has completed
    * @deprecated since version 1, use startPlayback() or src() instead
    */


  Player.prototype.loadAsset = function loadAsset(assetId, programId) {
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    log$1.warn('loadAsset() has been deprecated with new USP a/v pipe use startPlayback() or src() instead');
    this.options({ 'playFrom': undefined });
    extplayer.loadAsset(this, assetId, programId, null, callback);
  };

  /**
   * Start The Play back is autoplay else load the stream
   *
   * @param {any} assetId   Identifier of the asset to load
   * @param {any} channelId Identifier of the channel to load
   * @param {any} programId (optional) Identifier of the program to load
   * @param {any} playbackProperties (optional) Playback properties
   */


  Player.prototype.startPlayback = function startPlayback(assetId, channelId, programId, playbackProperties) {
    if (!playbackProperties) {
      playbackProperties = {};
    }
    if (!assetId && !channelId) {
      log$1.error('assetId or channelId is undefined');
      return;
    }
    if (programId && !channelId) {
      log$1.error('channelId is undefined');
      return;
    }
    if (!playbackProperties.playFrom) {
      playbackProperties.playFrom = 'defaultBehaviour';
    }
    var options = { 'playFrom': playbackProperties.playFrom };

    if (playbackProperties.autoplay !== undefined) {
      options.autoplay = playbackProperties.autoplay;
    }
    if (playbackProperties.startTime && playbackProperties.playFrom === 'startTime') {
      options.absoluteStartTime = playbackProperties.startTime;
      this.options_.useLastViewedOffset = false;
    } else {
      options.absoluteStartTime = undefined;
    }
    if (playbackProperties.startOffset !== undefined) {
      options.startTime = playbackProperties.startOffset / 1000;
    } else {
      options.startTime = 0;
    }
    options.useLastViewedOffset = playbackProperties.playFrom === 'bookmark' || this.options_.useLastViewedOffset === true;
    this.options(options);

    extplayer.loadAsset(this, assetId, programId, channelId);
  };

  /**
  * Plays an entitlement
  *
  * Automatically select a playback tech based on the entitlement and prepares playback.
  *
  * @param {Object} entitlement Entitlement returned from entitlementengine
  */


  Player.prototype.playEntitlement = function playEntitlement(entitlement) {
    if (entitlement && isObject(entitlement)) {
      entitlement.type = 'video/emp';
      _VjsPlayer.prototype.src.call(this, entitlement);
    } else {
      log$1.error("Call playEntitlement without entitlement");
    }
  };

  /**
   * seconds behinde live edge
   * @returns {number} timeBehindLive
   */


  Player.prototype.timeBehindLive = function timeBehindLive() {
    return extplayer.timeBehindLive(this);
  };

  /**
   * get live delay, how many seconds player live edge differ fom server time
   * @returns {number} live delay in seconds
   */


  Player.prototype.liveDelay = function liveDelay() {
    return extplayer.liveDelay(this);
  };

  /**
   * The unix time (ms) when stream was started
   * @returns {number} Start Time Live
   */


  Player.prototype.startTimeLive = function startTimeLive() {
    return extplayer.startTimeLive(this);
  };

  /**
   * Get Current Tech Name
   * @returns {string} Current Tech Name
   */


  Player.prototype.getCurrentTechName = function getCurrentTechName() {
    return this.techName_;
  };

  /**
   * Get version
   * @returns {string} version number
   */


  /**
  * Stop the Program Service
  */
  Player.prototype.stopProgramService = function stopProgramService() {
    if (this.programService) {
      this.programService().stop();
    }
  };

  /**
   * Start the Program Service
   */


  Player.prototype.startProgramService = function startProgramService() {
    if (this.programService) {
      this.programService().start();
    }
  };

  /**
   * Supports Epg Program Change
   *
   * > **NOTE**: For backward compatibility only.
   *    
   * @returns {boolean} True if programService is available
   */


  Player.prototype.supportsEpgProgramChange = function supportsEpgProgramChange() {
    return this.programService !== undefined;
  };

  /**
   * Get Server Now Time
   *    
   * @returns {number}
   */


  Player.prototype.getServerTime = function getServerTime() {
    return extplayer.getServerTime(this);
  };

  /**
   * getProgram
   *
   * > **NOTE**: For backward compatibility only.
   *    
   * @param {Function=} callback Callback with the program
   * @deprecated since version 1 use getProgramDetails instead
   */


  Player.prototype.getProgram = function getProgram(callback) {
    if (this.programService) {
      var program = this.getProgramDetails();
      callback(program, program ? null : 'No EPG for program');
    }
  };

  /**
   * Get Program Details
   *    
   * @returns {object} Program Details
   */


  Player.prototype.getProgramDetails = function getProgramDetails() {
    if (extplayer.supportsEpgProgramChange(this)) {
      return extplayer.program(this);
    } else {
      if (this.programService) {
        return this.programService().currentProgram;
      }
    }
  };

  /**
   * Get Asset/VOD Details
   *    
   * @returns {object} Asset/VOD Details
   */


  Player.prototype.getAssetDetails = function getAssetDetails() {
    if (this.tech_ && this.tech_['VOD']) {
      return this.techGet_('VOD');
    } else {
      if (this.programService) {
        return this.programService().currentVOD;
      }
    }
  };

  /**
  * Get a unix time (ms) `TimeRange` object for seekable range.
  *
  * @return {TimeRange} The time range object.
  */


  Player.prototype.getSeekTimerange = function getSeekTimerange() {
    return extplayer.getSeekTimerange(this);
  };

  /**
  * Get a unix time (ms) `TimeRange` object for buffering.
  *
  * @return {TimeRange} The time range object.
  */


  Player.prototype.getBufferedTimerange = function getBufferedTimerange() {
    return extplayer.getBufferedTimerange(this);
  };

  /**
  * Get or set the current time (in seconds) for the program or video
  *
  * @param {number|string} [seconds]
  *        The time to seek to in seconds
  *
  * @return {number}
  *         - the current time in seconds when getting
  */


  Player.prototype.currentTime = function currentTime(seconds) {
    var entitlement = extplayer.getEntitlement(this);
    if (entitlement && (entitlement.isDynamicCachupAsLive || entitlement.isStaticCachupAsLive) && this.techName_ !== 'EmpCast') {
      if (typeof seconds !== 'undefined') {
        var _program = this.getProgramDetails();
        if (_program) {
          if (seconds < 1 && seconds > -1) {
            seconds = 1;
          }
          var start = new Date(_program.startTime);
          if (entitlement.isStaticCachupAsLive || this.techName_ === 'EmpHLS') {
            var t = entitlement.streamInfo;
            seconds = seconds + (start.getTime() - t.start.getTime()) / 1000;
            if (seconds <= 0) {
              seconds = 0;
              log$1('currentTime', 'playPreviousProgram');
              extplayer.playPreviousProgram(this, true);
            }
          } else {
            seconds = seconds + start.getTime() / 1000;
            if (seconds * 1000 <= entitlement.streamInfo.start.getTime()) {
              seconds = entitlement.streamInfo.start.getTime() / 1000 + 1;
              log$1('currentTime', 'playPreviousProgram');
              extplayer.playPreviousProgram(this, true);
            }
          }
        }

        if (seconds < 0) {
          seconds = 0;
        }
        this.techCall_('setCurrentTime', seconds);
        return;
      }

      // cache last currentTime and return. default to 0 seconds
      //
      // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
      // currentTime when scrubbing, but may not provide much performance benefit afterall.
      // Should be tested. Also something has to read the actual current time or the cache will
      // never get updated.
      var currentTime = this.techGet_('currentTime') || 0;
      var program = this.getProgramDetails();
      if (program && currentTime) {
        var _start = new Date(program.startTime);
        if (entitlement.isStaticCachupAsLive || this.techName_ === 'EmpHLS') {
          var _t = entitlement.streamInfo;
          currentTime = currentTime - (_start.getTime() - _t.start.getTime()) / 1000;
        } else {
          currentTime = currentTime - _start.getTime() / 1000;
        }
      }
      this.cache_.currentTime = currentTime;
      return this.cache_.currentTime;
    } else {
      if (typeof seconds !== 'undefined') {
        this.techCall_('setCurrentTime', seconds);
        return;
      } else {
        this.cache_.currentTime = this.techGet_('currentTime') || 0;
        return this.cache_.currentTime;
      }
    }
  };

  /**
  * Gets the length in time of the video or program in seconds;
  * in all but the rarest use cases an argument will NOT be passed to the method
  *
  * > **NOTE**: The video must have started loading before the duration can be
  * known.
  *
  * @fires Player#durationchange
  *
  * @param {number} [seconds]
  *        The duration of the video to set in seconds
  *
  * @return {number}
  *         - The duration of the video in seconds when getting
  */


  Player.prototype.duration = function duration(seconds) {
    var entitlement = extplayer.getEntitlement(this);
    if (entitlement && (entitlement.isDynamicCachupAsLive || entitlement.isStaticCachupAsLive) && this.techName_ !== 'EmpCast') {
      if (seconds !== undefined) {
        var _program2 = this.getProgramDetails();
        if (_program2 && seconds !== Infinity) {
          var start = new Date(_program2.startTime);
          if (entitlement.isStaticCachupAsLive || this.techName_ === 'EmpHLS') {
            var t = entitlement.streamInfo;
            seconds = seconds - (start.getTime() - t.start.getTime()) / 1000;
          } else {
            seconds = seconds - start.getTime() / 1000;
          }
        }
        if (this.noEPG()) {
          seconds = Infinity;
          this.addClass('vjs-live');
        }
        log$1('set duration', seconds);
        _VjsPlayer.prototype.duration.call(this, seconds);
        return;
      }

      var duration = this.techGet_('duration');
      var program = this.getProgramDetails();
      if (program && duration !== Infinity) {
        var nowDate = this.getServerTime();
        var end = new Date(program.endTime);
        if (nowDate < end) {
          //live
          var _t2 = entitlement.streamInfo;
          if (this.techName_ === 'EmpHLS') {
            duration = (_t2.start.getTime() + duration * 1000 - program.start.getTime()) / 1000;
          } else {
            duration = (duration * 1000 - program.start.getTime()) / 1000;
          }
        } else {
          duration = program.duration / 1000;
        }
      }
      if (this.noEPG()) {
        duration = Infinity;
        this.addClass('vjs-live');
      }
      this.cache_.duration = duration;
      return duration;
    } else {
      _VjsPlayer.prototype.duration.call(this, seconds);
      return this.techGet_('duration');
    }
  };

  /**
   * Get a program related `TimeRange` object for seekable range.
   *
   * @return {TimeRange} The time range object.
   */


  Player.prototype.seekable = function seekable() {
    var range = _VjsPlayer.prototype.seekable.call(this);
    if (this.techName_ !== 'EmpCast') {
      return this.getRange_(range);
    }
    return range;
  };

  /**
    * Get a program related `TimeRange` object for buffering.
    *
    * @return {TimeRange} The time range object.
    */


  Player.prototype.buffered = function buffered() {
    var range = _VjsPlayer.prototype.buffered.call(this);
    if (this.techName_ !== 'EmpCast') {
      return this.getRange_(range);
    }
    return range;
  };

  /**
   * getRange_
   * @param {object} range
   * @returns {object} TimeRanges
   * @private
   */


  Player.prototype.getRange_ = function getRange_(range) {
    var entitlement = extplayer.getEntitlement(this);
    if (this.seeking() || !range) {
      return createTimeRanges(0, 0);
    }
    if (range.length > 0) {
      if (entitlement && (entitlement.isDynamicCachupAsLive || entitlement.isStaticCachupAsLive)) {
        var program = this.getProgramDetails();
        if (program) {
          var programStart = new Date(program.startTime);
          var t = entitlement.streamInfo;
          var startRange = range.start(range.length - 1);
          var endRange = range.end(range.length - 1);
          if (endRange) {
            if (entitlement.isStaticCachupAsLive || this.techName_ === 'EmpHLS') {
              startRange = startRange - (programStart.getTime() - t.start.getTime()) / 1000;
              endRange = endRange - (programStart.getTime() - t.start.getTime()) / 1000;
              range = createTimeRanges(startRange > 0 ? startRange : 0, endRange > this.duration() ? this.duration() : endRange);
            } else if (entitlement.isDynamicCachupAsLive) {
              startRange = startRange - programStart.getTime() / 1000;
              endRange = endRange - programStart.getTime() / 1000;
              range = createTimeRanges(startRange > 0 ? startRange : 0, endRange > this.duration() ? this.duration() : endRange);
            }
          }
        }
      }
    }
    return range;
  };

  /**
   * Get remaining time of the program/vod
   * @returns {number}
   */


  Player.prototype.remainingTime = function remainingTime() {
    var entitlement = extplayer.getEntitlement(this);
    if (entitlement && (entitlement.isDynamicCachupAsLive || entitlement.isStaticCachupAsLive) && this.techName_ !== 'EmpCast') {
      var duration = this.duration();
      if (duration === Infinity || duration === 0) {
        return Infinity;
      } else {
        return duration - this.currentTime();
      }
    } else {
      return extplayer.remainingTime(this);
    }
  };

  /**
   * Jump to the live edge
   */


  Player.prototype.gotoLive = function gotoLive() {
    extplayer.gotoLive(this);
  };

  /**
   * Play Previous Program
   * @param {boolean} end If it should play 30 sec from the end
   */


  Player.prototype.playPreviousProgram = function playPreviousProgram(end) {
    var _this4 = this;

    if (this.tech_['playPreviousProgram']) {
      this.techCall_('playPreviousProgram', end);
    } else {
      var entitlement = extplayer.getEntitlement(this);
      if (this.programService && (entitlement.isStaticCachupAsLive || entitlement.isDynamicCachupAsLive) && entitlement.rwEnabled) {
        this.programService().getPreviousProgram(function (program, error) {
          if (error) {
            log$1.error('playPreviousProgram', error);
          } else {
            var dateTime = new Date(program.startTime);
            if (end) {
              _this4.playheadTime(program.end.getTime() - 30000);
            } else {
              _this4.playheadTime(program.start.getTime() + 1000);
            }
          }
        });
      } else {
        extplayer.playPreviousProgram(this);
      }
    }
  };

  /**
   * Play Next Program
  */


  Player.prototype.playNextProgram = function playNextProgram() {
    if (this.tech_['playNextProgram']) {
      this.techCall_('playNextProgram');
    } else {
      var entitlement = extplayer.getEntitlement(this);
      var program = this.getProgramDetails();
      if (program && (entitlement.isStaticCachupAsLive || entitlement.isDynamicCachupAsLive) && entitlement.ffEnabled) {
        this.playheadTime(program.end.getTime() + 1000);
      } else {
        extplayer.playNextProgram(this);
      }
    }
  };

  /**
   * Is the playing program live
   * @returns {boolean}
   */


  Player.prototype.isProgramLive = function isProgramLive() {
    var program = this.getProgramDetails();
    if (program) {
      return program.end.getTime() > this.getServerTime();
    }
    return this.isLive();
  };

  /**
   * Is the playing program a Catchup
   * @returns {boolean}
   */


  Player.prototype.isProgramCatchup = function isProgramCatchup() {
    var entitlement = extplayer.getEntitlement(this);
    if (entitlement) {
      return entitlement.isStaticCachupAsLive || !this.isProgramLive() && entitlement.isDynamicCachupAsLive;
    } else {
      return !this.isLive();
    }
  };

  Player.prototype.currentAsset = function currentAsset() {
    return extplayer.currentAsset(this);
  };

  Player.prototype.ended = function ended() {
    return this.ended_;
  };

  createClass(Player, [{
    key: 'version',
    get: function get$$1() {
      return '2.0.79-32';
    }

    /**
     * Get entitlement
     *
    * @returns {Entitlement} current entitlement
    */

  }, {
    key: 'entitlement',
    get: function get$$1() {
      var entitlement = extplayer.getEntitlement(this);
      //Clone entitlement
      entitlement = Object.assign({}, entitlement);
      entitlement.options = undefined;
      return entitlement;
    }

    /**
     * Get the Registered entitlementEngine
     *
    * @returns {EntitlementEngine} Registered entitlement engine
    */

  }, {
    key: 'entitlementEngine',
    get: function get$$1() {
      //for backward compatibility
      if (this.programService) {
        return this.programService().exposure;
      }
      return null;
    }
  }]);
  return Player;
}(VjsPlayer);



/**
 * Get AutoTechArray
 * @returns {String[]} AutoTechArray
 * @static
 */
Player.AutoTechArray = function () {
  var autoTechOrder = ['EmpShaka', 'EmpHLS', 'EmpFlash', 'Html5'];
  if (Player.SupportFairplay_()) {
    autoTechOrder = ['EmpHLS', 'EmpShaka', 'EmpFlash', 'Html5'];
  }
  var validAutoTechOrder = [];
  for (var i = 0; i < autoTechOrder.length; i++) {
    if (Tech.techs_.hasOwnProperty(autoTechOrder[i])) {
      validAutoTechOrder.push(autoTechOrder[i]);
    }
  }
  return validAutoTechOrder;
};

Player.SupportFairplay_ = function () {
  var hlsTech = videojs$1.getTech('EmpHLS');
  if (undefined !== hlsTech && hlsTech.isSupported() && window_1.WebKitMediaKeys && hlsTech.getKeySystem && window_1.WebKitMediaKeys.isTypeSupported(hlsTech.getKeySystem(), 'video/mp4')) {
    return true;
  }
  return false;
};

// Override default 'Player' component
var Component = videojs$1.getComponent('Component');
Component.registerComponent('player', Player);

/**
 * Detects if the current browser has the required technology to play an unencrypted stream provided by EMP.
 *
 * @returns {Promise} that is always fulfilled with a boolean value
 */
function canPlayUnencrypted() {
  // test if DASH is supported
  var shakaTech = videojs$1.getTech('EmpShaka');
  if (undefined !== shakaTech && shakaTech.isSupported()) {
    return Promise.resolve(true);
  }

  // test if HLS is supported
  var hlsTech = videojs$1.getTech('EmpHLS');
  if (undefined !== hlsTech && hlsTech.isSupported()) {
    return Promise.resolve(true);
  }

  // test if Flash is supported
  var flashTech = videojs$1.getTech('EmpFlash');
  if (undefined !== flashTech && flashTech.isSupported()) {
    return Promise.resolve(true);
  }

  return Promise.resolve(false);
}

/**
 * Detects if the current browser has the required technology to play an encrypted stream provided by EMP.
 *
 * @returns {Promise} that is always fulfilled with a boolean value
 */
function canPlayEncrypted() {
  var ptable = [];

  if (typeof window_1.navigator.requestMediaKeySystemAccess === 'function') {
    var isAndroid = window_1.navigator.userAgent.indexOf('Android') !== -1;
    var config = [{
      initDataTypes: ['cenc'],
      audioCapabilities: [{ contentType: 'audio/mp4; codecs="mp4a.40.5"', robustness: 'SW_SECURE_CRYPTO' }],
      videoCapabilities: [{ contentType: 'video/mp4; codecs="avc1.4d401f"', robustness: isAndroid === true ? 'SW_SECURE_DECODE' : 'SW_SECURE_CRYPTO' }],
      distinctiveIdentifier: 'optional',
      persistentState: 'optional',
      sessionTypes: ['temporary']
    }];

    // test if DASH + Widevine or Playready is supported
    var shakaTech = videojs$1.getTech('EmpShaka');
    if (undefined !== shakaTech && shakaTech.isSupported()) {
      ptable.push(new Promise(function (resolve, reject) {
        window_1.navigator.requestMediaKeySystemAccess('com.microsoft.playready', config).then(function () {
          resolve(true);
        }, function () {
          resolve(false);
        });
      }));

      ptable.push(new Promise(function (resolve, reject) {
        window_1.navigator.requestMediaKeySystemAccess('com.widevine.alpha', config).then(function () {
          resolve(true);
        }, function () {
          resolve(false);
        });
      }));
    }
  }

  // test if HLS + Fairplay is supported
  var hlsTech = videojs$1.getTech('EmpHLS');
  if (undefined !== hlsTech && hlsTech.isSupported() && window_1.WebKitMediaKeys && hlsTech.getKeySystem && window_1.WebKitMediaKeys.isTypeSupported(hlsTech.getKeySystem(), 'video/mp4')) {
    ptable.push(true);
  }

  // test if Flash + EDRM is supported
  var flashTech = videojs$1.getTech('EmpFlash');
  if (undefined !== flashTech && flashTech.isSupported()) {
    ptable.push(true);
  }

  // If no playback technology is available, resolve to false
  if (0 === ptable.length) {
    ptable.push(false);
  }

  return Promise.all(ptable).then(function (values) {
    return values.indexOf(true) === -1 ? false : true;
  }, function (reason) {
    return false;
  });
}

/**
 * Entitlement Base Class
 *
 * @class Entitlement
 * @param {Object}  [options]              - Object of option names and values
 * @param {string}  [options.assetId=0]    - asset identifier
 * @param {string}  [options.playToken=''] - play token string to be used to authenticate the DRM license requests
 * @param {string}  [options.mediaLocator=''] - stream locator to be used by the underlying playback technology
 * @param {Object}  [options.edrmConfig=null] - EDRM configuration object as provided by EMP Exposure API
 * @param {boolean} [options.live=false]   - set to true if the Entitlement represents a Live stream
 * @param {integer} [options.minBitrate=0] - set to any value >0 to limit the minimum playback bitrate
 * @param {integer} [options.maxBitrate=0] - set to any value >0 to limit the maximum playback bitrate
 * @param {integer} [options.maxResWidth=0] - set to any value >0 to limit the maximum playback resolution width
 * @param {integer} [options.maxResHeight=0] - set to any value >0 to limit the maximum playback resolution height
 * @param {boolean} [options.rwEnabled=true] - set to false to disable rewind option
 * @param {boolean} [options.ffEnabled=true] - set to false to disable fast forward option
 * @param {boolean} [options.airplayBlocked=false] - set to true to disable airplay option
 * @param {boolean} [options.timeshiftEnabled=undefined] - set to false to disable timeshift option
 * @param {Object}  [options.protection] - certificateUrl and licenseAcquisitionUrl for fairplay
 * @param {string}  [options.mdnRequestRouterUrl= ''] - MDN request router URL
 * @param {Array}   [options.baseUris= ''] -  baseUris from MDN request router
 * @param {Object}  [options.analyticsConfig=null] - analytics props to override on analytics object
 * @param {string}  [options.lastViewedOffset=null] - Last viewed offset
 * @param {string}  [options.lastViewedTime=null] - Last viewed offset absolute time
 * @param {string}  [options.liveTime=null] - Last viewed offset liveTime
 * @param {Object}  [options.licenseServers] - licenseServers for dash


 */

var Entitlement = function () {
  function Entitlement(options) {
    classCallCheck(this, Entitlement);

    this.assetId = options.assetId || 0;
    this.playToken = options.playToken || '';
    this.playTokenExpiration = options.playTokenExpiration || '';
    this.productId = options.productId || '';
    this.edrmConfig = options.edrmConfig || null;
    this.mediaLocator = options.mediaLocator || '';
    if (this.mediaLocator) {
      this.src = this.mediaLocator.replace(/^(http:)/, '').replace(/^(https:)/, '');
    }
    if (options.streamInfo) {
      this.streamInfo = options.streamInfo;
    } else {
      this.setupStreamInfo(options.mediaLocator || '');
    }
    this.mimeType = options.mimeType || '';
    this.entitlementType = options.entitlementType || '';
    this.live = options.live || false;
    this.playSessionId = options.playSessionId || '';
    this.analyticsConfig = options.analyticsConfig || null;
    this.lastViewedOffset = options.lastViewedOffset || null;
    this.lastViewedTime = options.lastViewedTime || null;
    this.liveTime = options.liveTime || null;

    var licenseExpirationTimestamp = Date.parse(options.licenseExpiration || null);
    if (isNaN(licenseExpirationTimestamp) === false) {
      this.licenseExpiration = new Date(licenseExpirationTimestamp);
    }
    this.licenseExpirationReason = options.licenseExpirationReason || '';
    this.playRequest = options.playRequest || null;
    this.minBitrate = options.minBitrate || 0;
    this.maxBitrate = options.maxBitrate || 0;
    this.maxResWidth = options.maxResWidth || 0;
    this.maxResHeight = options.maxResHeight || 0;
    this.rwEnabled = options.rwEnabled === undefined ? true : options.rwEnabled;
    this.ffEnabled = options.ffEnabled === undefined ? true : options.ffEnabled;
    this.airplayBlocked = options.airplayBlocked === undefined ? false : options.airplayBlocked;
    if (options.fairplayConfig) {
      this.protection = {};
      this.protection.certificateUrl = options.fairplayConfig.certificateUrl || '';
      this.protection.licenseUrl = options.fairplayConfig.licenseAcquisitionUrl || '';
    }
    this.mdnRequestRouterUrl = options.mdnRequestRouterUrl || '';
    this.timeshiftEnabled = options.timeshiftEnabled;
    if (options.cencConfig) {
      this.licenseServers = options.cencConfig;
    }
  }

  Entitlement.prototype.setupStreamInfo = function setupStreamInfo() {
    this.streamInfo = { referenceTime: 0 };
    this.isDynamicCachupAsLive = false;
    this.isStaticCachupAsLive = false;
    if (this.mediaLocator) {
      var t = getParameterByName('t', this.mediaLocator);
      if (t) {
        try {
          if (t && t.length === 47) {
            this.streamInfo.start = new Date(t.slice(0, 23) + 'Z');
            this.streamInfo.startTime = this.streamInfo.start.getTime();
            this.streamInfo.end = new Date(t.slice(24) + 'Z');
            this.streamInfo.endTime = this.streamInfo.end.getTime();
          } else if (t && t.length === 23) {
            this.streamInfo.start = new Date(t + 'Z');
            this.streamInfo.startTime = this.streamInfo.start.getTime();
          }
          this.isDynamicCachupAsLive = this.streamInfo.start !== undefined && this.streamInfo.end === undefined;
          this.isStaticCachupAsLive = this.streamInfo.start !== undefined && this.streamInfo.end !== undefined;
        } catch (e) {
          log$1.warn('timeParams', e);
        }
      }
    }
  };

  createClass(Entitlement, null, [{
    key: 'Type',
    get: function get$$1() {
      return {
        DASH: 'DASH',
        FLASH: 'FLASH',
        HLS: 'HLS'
      };
    }
  }]);
  return Entitlement;
}();

var dist = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExtendableError = (function (_Error) {
  _inherits(ExtendableError, _Error);

  function ExtendableError() {
    var message = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    _classCallCheck(this, ExtendableError);

    _get(Object.getPrototypeOf(ExtendableError.prototype), 'constructor', this).call(this, message);

    // extending Error is weird and does not propagate `message`
    Object.defineProperty(this, 'message', {
      enumerable: false,
      value: message,
      writable: true
    });

    Object.defineProperty(this, 'name', {
      enumerable: false,
      value: this.constructor.name,
      writable: true
    });

    if (Error.hasOwnProperty('captureStackTrace')) {
      Error.captureStackTrace(this, this.constructor);
      return;
    }

    Object.defineProperty(this, 'stack', {
      enumerable: false,
      value: new Error(message).stack,
      writable: true
    });
  }

  return ExtendableError;
})(Error);

exports['default'] = ExtendableError;
module.exports = exports['default'];
});

var ExtendableError = unwrapExports(dist);

var EntitlementError = function (_ExtendableError) {
  inherits(EntitlementError, _ExtendableError);

  /**
   * Constructor
   * @param {String=|Object=} Object or string describing error
   */
  function EntitlementError() {
    var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, EntitlementError);

    // Error can be either string with error message. or Object with more information.
    // Parse whatever we get
    var message = void 0;
    var fatal = true;
    if (typeof error === 'string') {
      message = error;
    } else if (error instanceof Object) {
      message = error.message;

      if (error.fatal === false) {
        fatal = error.fatal;
      }
    }

    var _this = possibleConstructorReturn(this, _ExtendableError.call(this, message));

    _this.fatal = fatal;
    return _this;
  }

  createClass(EntitlementError, [{
    key: 'fatal',
    get: function get$$1() {
      return !!this.fatal_;
    },
    set: function set$$1(fatal) {
      this.fatal_ = fatal;
    }
  }]);
  return EntitlementError;
}(ExtendableError);

/**
 * EntitlementEngine base class. Used to retrieve entitlements for VODs or LIVE videos
 * To use a custom implementation of an EntitlementEngine extend this class,
 * implement getVodEntitlement and getLiveEntitlement and register is using EntitlementEngine.registerEntitlementEngine(name, class);
 */
/**
 * EntitlementEngine Base Class
 *
 * @param {Object=} options Object of option names and values
 * @class EntitlementEngine
 */

var EntitlementEngine = function () {
  function EntitlementEngine() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, EntitlementEngine);

    this.options_ = options;
  }

  /**
   * Get Entitlement
   *
   * Called by the player to get an entitlement. Entitlement requests contain an assetId and an optional programId.
   * If the programId exists, the assetId is the channelId. if the programId doesn't exist the assetId is the assetId.
   *
   * The callback should be called when the requests completes, if it fails it should contain an EntitlementError
   * Exception object as it's second parameter.
   *
   * if it succeeds it should return the Entitlement as the first parameter.
   *
   * The Entitlement should contain the following parameters:
   *
   * playToken - Playtoken required for drm
   * mediaLocator - URL of playlist file (for example for dash or hls playback) or mediaId for flash playback.
   *
   * @param {EntitlementRequest}     entitlementRequest  Entitlement request to execute
   * @param {Object}                 playRequest         Playrequest object containing information about the required
   *                                                     attributes of the entitlement
   * @param {EntitlementEngine~getEntitlementCallback} callback            Callback when entitlement is fetched or an error occurs
   * @throws {EntitlementError}
   */


  EntitlementEngine.prototype.getEntitlement = function getEntitlement(entitlementRequest, playRequest, callback) {
    throw new EntitlementError('EntitlementEngine: getEntitlement should be implemented in subclass.');
  };

  /**
   * This callback is called whenever a new Entitlement object is fetched from the backend
   * @callback EntitlementEngine~getEntitlementCallback
   * @param {Entitlement} entitlement Entitlement object
   */

  /**
   * Returns the exact servertime
   * @param {EntitlementEngine~getServerTimeCallback}  callback  Callback when server time is fetched or an error occurs
   */


  EntitlementEngine.prototype.getServerTime = function getServerTime(callback) {
    throw new EntitlementError('EntitlementEngine: getServerTime should be implemented in subclass.');
  };

  EntitlementEngine.prototype.getCachedServerTime = function getCachedServerTime() {
    return EntitlementEngine.ServerTimeDiff_ !== undefined ? Date.now() + EntitlementEngine.ServerTimeDiff_ : Date.now();
  };

  /**
   * This callback is called by getServerTime when current time is fetched from the server or an error occured
   * @callback EntitlementEngine~getServerTimeCallback
   * @param {Date} date Current server time
   * @param {string} error Error description
   */

  /**
   * Get the program based on EPG
   * @param channelId
   * @param date
   * @param callback
   * @param programId
   */


  EntitlementEngine.prototype.getProgramInfo = function getProgramInfo(channelId, date, callback, programId) {
    throw new EntitlementError('EntitlementEngine: getProgramInfo should be implemented in subclass.');
  };

  /**    
  * Get EPG
  * @param channelId
  * @param from
  * @param to
  * @param callback
  * @returns {*}
  */


  EntitlementEngine.prototype.getEPG = function getEPG(channelId, from, to, callback) {
    throw new EntitlementError('EntitlementEngine: getEPG should be implemented in subclass.');
  };

  /**
  * Get the Asset Info
  * @param assetId
  * @param callback
  */


  EntitlementEngine.prototype.getAssetInfo = function getAssetInfo(assetId, callback) {
    throw new EntitlementError('EntitlementEngine: getAssetInfo should be implemented in subclass.');
  };

  /**
   * Verifies if sessionToken is still valid
   * @param okFn - callback if session is ok
   * @param nokFn - callback if session is not ok
   */


  EntitlementEngine.prototype.verifySession = function verifySession(okFn, nokFn) {
    throw new EntitlementError('EntitlementEngine: verifySession should be implemented in subclass.');
  };

  /**
  * Login
  * @param username 
  * @param password
  * @param mfacode 
  * @param callback 
  */


  EntitlementEngine.prototype.login = function login(username, password, callback, mfacode) {
    throw new EntitlementError('EntitlementEngine: login should be implemented in subclass.');
  };

  /**
   * logout
   * @param callBack
   */


  EntitlementEngine.prototype.logout = function logout(callBack) {
    throw new EntitlementError('EntitlementEngine: logout should be implemented in subclass.');
  };

  /**
    * Fetch user Preferences
    * @param {any} callback
   */


  EntitlementEngine.prototype.fetchPreferences = function fetchPreferences(callback) {
    throw new EntitlementError('EntitlementEngine: fetchPreferences should be implemented in subclass.');
  };

  /**
  * Save user preferences
  * @param {any} preferences
  * @param {any} callback
  */


  EntitlementEngine.prototype.savePreferences = function savePreferences(preferences, callback) {
    throw new EntitlementError('EntitlementEngine: savePreferences should be implemented in subclass.');
  };

  /**
   * Return whether the past argument is an entitlement engine or not
   *
   * @param {Object} object An item to check
   * @return {Boolean}      Wheter it is a entitlement engine or not
   */


  EntitlementEngine.isEntitlementEngine = function isEntitlementEngine(object) {
    return object.prototype instanceof EntitlementEngine || object instanceof EntitlementEngine || object === EntitlementEngine;
  };

  /**
   * Register an entitlement engine
   *
   * @param {String} name     Name of the entitlement engine
   * @param entitlementEngine The entitlement engine to register
   * @throws Error
   * @static
   */


  EntitlementEngine.registerEntitlementEngine = function registerEntitlementEngine(name, entitlementEngine) {
    if (!EntitlementEngine.engines_) {
      EntitlementEngine.engines_ = {};
    }

    if (!EntitlementEngine.isEntitlementEngine(entitlementEngine)) {
      throw new EntitlementError('EntitlementEngine ' + name + ' must be a EntitlementEngine');
    }

    EntitlementEngine.engines_[name] = entitlementEngine;
    return entitlementEngine;
  };

  /**
   * Get an entitlement engine by name
   *
   * @param {String} name Name of the entitlement engine
   * @static
   * @returns {EntitlementEngine}
   */


  EntitlementEngine.getEntitlementEngine = function getEntitlementEngine(name) {
    if (EntitlementEngine.engines_ && EntitlementEngine.engines_[name]) {
      return EntitlementEngine.engines_[name];
    }
  };

  return EntitlementEngine;
}();

EntitlementEngine.ServerTimeDiff_ = undefined;

// Register ourselves
EntitlementEngine.registerEntitlementEngine('EntitlementEngine', EntitlementEngine);

var isFunction_1 = isFunction;

var toString$1 = Object.prototype.toString;

function isFunction (fn) {
  var string = toString$1.call(fn);
  return string === '[object Function]' ||
    (typeof fn === 'function' && string !== '[object RegExp]') ||
    (typeof window !== 'undefined' &&
     // IE8 and below
     (fn === window.setTimeout ||
      fn === window.alert ||
      fn === window.confirm ||
      fn === window.prompt))
}

var trim_1 = createCommonjsModule(function (module, exports) {
exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};
});

var forEach_1 = forEach;

var toString$2 = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function forEach(list, iterator, context) {
    if (!isFunction_1(iterator)) {
        throw new TypeError('iterator must be a function')
    }

    if (arguments.length < 3) {
        context = this;
    }
    
    if (toString$2.call(list) === '[object Array]')
        forEachArray$1(list, iterator, context);
    else if (typeof list === 'string')
        forEachString(list, iterator, context);
    else
        forEachObject(list, iterator, context);
}

function forEachArray$1(array, iterator, context) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            iterator.call(context, array[i], i, array);
        }
    }
}

function forEachString(string, iterator, context) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string);
    }
}

function forEachObject(object, iterator, context) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            iterator.call(context, object[k], k, object);
        }
    }
}

var isArray = function(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    };

var parseHeaders = function (headers) {
  if (!headers)
    return {}

  var result = {};

  forEach_1(
      trim_1(headers).split('\n')
    , function (row) {
        var index = row.indexOf(':')
          , key = trim_1(row.slice(0, index)).toLowerCase()
          , value = trim_1(row.slice(index + 1));

        if (typeof(result[key]) === 'undefined') {
          result[key] = value;
        } else if (isArray(result[key])) {
          result[key].push(value);
        } else {
          result[key] = [ result[key], value ];
        }
      }
  );

  return result
};

var immutable = extend;

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty$1.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target
}

var xhr = createXHR;
createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop$1;
createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window_1.XDomainRequest;

forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
        options = initParams(uri, options, callback);
        options.method = method.toUpperCase();
        return _createXHR(options)
    };
});

function forEachArray(array, iterator) {
    for (var i = 0; i < array.length; i++) {
        iterator(array[i]);
    }
}

function isEmpty(obj){
    for(var i in obj){
        if(obj.hasOwnProperty(i)) return false
    }
    return true
}

function initParams(uri, options, callback) {
    var params = uri;

    if (isFunction_1(options)) {
        callback = options;
        if (typeof uri === "string") {
            params = {uri:uri};
        }
    } else {
        params = immutable(options, {uri: uri});
    }

    params.callback = callback;
    return params
}

function createXHR(uri, options, callback) {
    options = initParams(uri, options, callback);
    return _createXHR(options)
}

function _createXHR(options) {
    if(typeof options.callback === "undefined"){
        throw new Error("callback argument missing")
    }

    var called = false;
    var callback = function cbOnce(err, response, body){
        if(!called){
            called = true;
            options.callback(err, response, body);
        }
    };

    function readystatechange() {
        if (xhr.readyState === 4) {
            setTimeout(loadFunc, 0);
        }
    }

    function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = undefined;

        if (xhr.response) {
            body = xhr.response;
        } else {
            body = xhr.responseText || getXml(xhr);
        }

        if (isJson) {
            try {
                body = JSON.parse(body);
            } catch (e) {}
        }

        return body
    }

    function errorFunc(evt) {
        clearTimeout(timeoutTimer);
        if(!(evt instanceof Error)){
            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") );
        }
        evt.statusCode = 0;
        return callback(evt, failureResponse)
    }

    // will load the data & process the response in a special response object
    function loadFunc() {
        if (aborted) return
        var status;
        clearTimeout(timeoutTimer);
        if(options.useXDR && xhr.status===undefined) {
            //IE8 CORS GET successful response doesn't have a status field, but body is fine
            status = 200;
        } else {
            status = (xhr.status === 1223 ? 204 : xhr.status);
        }
        var response = failureResponse;
        var err = null;

        if (status !== 0){
            response = {
                body: getBody(),
                statusCode: status,
                method: method,
                headers: {},
                url: uri,
                rawRequest: xhr
            };
            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                response.headers = parseHeaders(xhr.getAllResponseHeaders());
            }
        } else {
            err = new Error("Internal XMLHttpRequest Error");
        }
        return callback(err, response, response.body)
    }

    var xhr = options.xhr || null;

    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new createXHR.XDomainRequest();
        }else{
            xhr = new createXHR.XMLHttpRequest();
        }
    }

    var key;
    var aborted;
    var uri = xhr.url = options.uri || options.url;
    var method = xhr.method = options.method || "GET";
    var body = options.body || options.data;
    var headers = xhr.headers = options.headers || {};
    var sync = !!options.sync;
    var isJson = false;
    var timeoutTimer;
    var failureResponse = {
        body: undefined,
        headers: {},
        statusCode: 0,
        method: method,
        url: uri,
        rawRequest: xhr
    };

    if ("json" in options && options.json !== false) {
        isJson = true;
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
        if (method !== "GET" && method !== "HEAD") {
            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
            body = JSON.stringify(options.json === true ? body : options.json);
        }
    }

    xhr.onreadystatechange = readystatechange;
    xhr.onload = loadFunc;
    xhr.onerror = errorFunc;
    // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function () {
        // IE must die
    };
    xhr.onabort = function(){
        aborted = true;
    };
    xhr.ontimeout = errorFunc;
    xhr.open(method, uri, !sync, options.username, options.password);
    //has to be after open
    if(!sync) {
        xhr.withCredentials = !!options.withCredentials;
    }
    // Cannot set timeout with sync request
    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
    if (!sync && options.timeout > 0 ) {
        timeoutTimer = setTimeout(function(){
            if (aborted) return
            aborted = true;//IE9 may still call readystatechange
            xhr.abort("timeout");
            var e = new Error("XMLHttpRequest timeout");
            e.code = "ETIMEDOUT";
            errorFunc(e);
        }, options.timeout );
    }

    if (xhr.setRequestHeader) {
        for(key in headers){
            if(headers.hasOwnProperty(key)){
                xhr.setRequestHeader(key, headers[key]);
            }
        }
    } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object")
    }

    if ("responseType" in options) {
        xhr.responseType = options.responseType;
    }

    if ("beforeSend" in options &&
        typeof options.beforeSend === "function"
    ) {
        options.beforeSend(xhr);
    }

    // Microsoft Edge browser sends "undefined" when send is called with undefined value.
    // XMLHttpRequest spec says to pass null as body to indicate no body
    // See https://github.com/naugtur/xhr/issues/100.
    xhr.send(body || null);

    return xhr


}

function getXml(xhr) {
    if (xhr.responseType === "document") {
        return xhr.responseXML
    }
    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
        return xhr.responseXML
    }

    return null
}

function noop$1() {}

/*global
  XMLHttpRequest
*/

/**
 * EricssonMDN 
 *
 * @class EricssonMDN
 */

var EricssonMDN = function () {
  function EricssonMDN() {
    classCallCheck(this, EricssonMDN);
  }

  /**
  * Register an entitlement engine
  *
  * @param {String} mdnRequestRouterUrl  MDN request router URL
  * @param {Object} callback 
  * @static
  */
  EricssonMDN.getBaseUrl = function getBaseUrl(entitlement, callback) {
    var oXHR = new XMLHttpRequest();
    oXHR.open('GET', entitlement.mdnRequestRouterUrl);
    oXHR.onreadystatechange = function (oEvent) {
      if (oXHR.readyState === 4) {
        if (oXHR.status === 200) {
          log$1('getBaseUrl OK');
          var xmlDoc = oXHR.responseXML;
          try {
            var baseURL = xmlDoc.firstChild.getElementsByTagName('baseURL')[0].textContent;
            if (baseURL) {
              entitlement.baseUrl = baseURL;
            } else {
              log$1.error('getBaseUrl Error can not find baseURL');
            }
            callback(entitlement);
          } catch (err) {
            log$1.error('getBaseUrl Error', err);
            callback(entitlement);
          }
        } else {
          log$1.error('getBaseUrl Error', oXHR.statusText);
          callback(entitlement);
        }
      }
    };
    oXHR.send(null);
  };

  return EricssonMDN;
}();

/**
 * EricssonExposure EntitlementEngine
 *
 * @extends EntitlementEngine
 * @param {Object=} options Object of option names and values
 * @class EricssonExposure
 */

var EricssonExposure = function (_EntitlementEngine) {
  inherits(EricssonExposure, _EntitlementEngine);

  function EricssonExposure() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, EricssonExposure);

    options = Object.assign({
      'exposureApiURL': 'https://exposure.emps.ebsd.ericsson.net',
      'exposureApiVersion': 'v1'
    }, options);

    var _this = possibleConstructorReturn(this, _EntitlementEngine.call(this, options));

    _this.errorMap = {
      400: {
        'INVALID_JSON': {
          message: 'Invalid json.',
          fatal: false
        }
      },
      401: {
        'NO_SESSION_TOKEN': {
          message: 'The session token is missing.',
          fatal: true
        },
        'INVALID_SESSION_TOKEN': {
          message: 'The session token is not valid.',
          fatal: true
        }
      },
      403: {
        'FORBIDDEN': {
          message: 'The business unit has been configured to require server to server authentication, but it is not valid.',
          fatal: true
        },
        'NOT_ENTITLED': {
          message: 'The user is not entitled.',
          fatal: true
        },
        'DEVICE_BLOCKED': {
          message: 'The device is not allowed to play the asset.',
          fatal: true
        },
        'GEO_BLOCKED': {
          message: 'Not allowed from this region.',
          fatal: true
        },
        'LICENSE_EXPIRED': {
          message: 'Asset has been expired.',
          fatal: true
        },
        'NOT_AVAILABLE_IN_FORMAT': {
          message: 'The media is not available in the requested format.',
          fatal: false
        },
        'NOT_ENABLED': {
          message: 'The media is not enabled.',
          fatal: true
        },
        'CONCURRENT_STREAMS_LIMIT_REACHED': {
          message: 'You have reached the maximum number of concurrent streams you are allowed to watch.',
          fatal: true
        },
        'NO_MEDIA_ON_CHANNEL': {
          message: 'The media is not available on the channel.',
          fatal: false
        },
        'NO_MEDIA_FOR_PROGRAM': {
          message: 'No media available for this program.',
          fatal: false
        }
      },
      404: {
        'UNKNOWN_BUSINESS_UNIT': {
          message: 'The business unit cannot be found.',
          fatal: true
        },
        'UNKNOWN_ASSET': {
          message: 'The asset cannot be found.',
          fatal: false
        }
      },
      0: {
        'NETWORK_ERROR': {
          message: 'Network error.',
          fatal: false
        }
      }
    };

    if (EntitlementEngine.ServerTimeDiff_ === undefined) {
      _this.getServerTime(function (date, error) {
        if (error) {
          log$1.error('getServerTime', error);
          date = new Date();
        }
        EntitlementEngine.ServerTimeDiff_ = new Date() - date;
        log$1('serverDiff', EntitlementEngine.ServerTimeDiff_);
      });
    }

    return _this;
  }

  /**
   * exposureLogin
   * @param {string} username username
   * @param {string} password password
   * @param {function} callback callback
   * @param {string} mfacode mfacode
   */


  EricssonExposure.prototype.login = function login(username, password, callback, mfacode) {
    var _this2 = this;

    if (!callback) {
      throw 'callback is mandantory for login';
    }

    var is2factor = false;
    if (mfacode) {
      is2factor = true;
    }
    var isAnonymous = username === '';
    var expiration = new Date(this.getCachedServerTime());
    var expirationSeconds = 24 * 60 * 60; // 24h expiration
    expiration.setTime(expiration.getTime() + expirationSeconds * 1000); //24h

    if (this.options_['apiKey']) {
      var requestHeaders = { 'EMP-Auth': this.options_['apiKey'] };
      var loginUrl = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + this.customer + '/businessunit/' + this.businessUnit + '/auth/session';
      var requestData = {
        accountId: username,
        userId: username,
        deviceId: "WEB_" + username,
        device: {
          "height": screen.height,
          "width": screen.width,
          "model": navigator.appName,
          "name": navigator.product,
          "os": navigator.platform,
          "osVersion": navigator.appVersion,
          "manufacturer": navigator.vendor,
          "type": "WEB"
        },
        expiration: expiration.toISOString(),
        anonymous: false
      };

      xhr.post(loginUrl, { json: requestData, headers: requestHeaders }, function (error, response, data) {
        // Check and handles error
        if (_this2.checkForError(error, response, function (nothing, error) {
          callback({
            success: false,
            expiration: 0,
            message: error.message
          });
        })) {
          return;
        }
        _this2.sessionToken = data.sessionToken;
        callback({
          success: true,
          expiration: expirationSeconds * 1000,
          session: data
        });
      });
    } else {
      var _loginUrl = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + this.customer + '/businessunit/' + this.businessUnit;
      if (isAnonymous === true) {
        _loginUrl += '/auth/anonymous';
      } else if (is2factor === true) {
        _loginUrl += '/auth/twofactorlogin';
      } else {
        _loginUrl += '/auth/login';
      }
      var _requestData = {
        deviceId: "WEB_" + username,
        device: {
          "height": screen.height,
          "width": screen.width,
          "model": navigator.appName,
          "name": navigator.product,
          "os": navigator.platform,
          "osVersion": navigator.appVersion,
          "manufacturer": navigator.vendor,
          "type": "WEB"
        },
        rememberMe: false,
        username: username,
        password: password,
        totp: is2factor === true ? mfacode : undefined
      };

      xhr.post(_loginUrl, { json: _requestData }, function (error, response, data) {
        // Check and handles error
        if (_this2.checkForError(error, response, function (nothing, error) {
          callback({
            success: false,
            expiration: 0,
            message: error.message
          });
        })) {
          return;
        }
        _this2.sessionToken = data.sessionToken;
        callback({
          success: true,
          expiration: data.expirationDateTime ? new Date(data.expirationDateTime) - new Date(_this2.getCachedServerTime()) : expirationSeconds * 1000, // assume local clock is in sync with server clock
          session: data
        });
      });
    }
  };

  EricssonExposure.prototype.logout = function logout() {
    var _this3 = this;

    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
    var sessionToken = arguments[1];

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!customer) {
      throw new EntitlementError('Customer was not provided.');
    }
    if (!businessUnit) {
      throw new EntitlementError('Business unit was not provided.');
    }

    var requestHeaders = this.requestHeaders;
    if (sessionToken) {
      requestHeaders = { Authorization: 'Bearer ' + sessionToken };
    }

    var queryUrl = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/auth/session';
    return xhr.del(queryUrl, { headers: requestHeaders }, function (error, response, data) {
      // Check and handles error
      if (_this3.checkForError(error, response, callback)) {
        return;
      }
      _this3.sessionToken = null;
      if ((typeof callback === 'undefined' ? 'undefined' : _typeof(callback)) !== undefined) {
        callback(true);
      }
    });
  };

  /**
   * Get Entitlement
   *
   * Called by the player to get an entitlement. Entitlement requests contain an assetId and an optional programId.
   * If the programId exists, the assetId is the channelId. if the programId doesn't exist the assetId is the assetId.
   *
   * The callback should be called when the requests completes, if it fails it should contain an EntitlementError
   * Exception object as it's second parameter.
   *
   * if it succeeds it should return the Entitlement as the first parameter.
   *
   * The Entitlement should contain the following parameters:
   *
   * playToken - Playtoken required for drm
   * mediaLocator - URL of playlist file (for example for dash or hls playback) or mediaId for flash playback.
   *
   * @param {EntitlementRequest}    entitlementRequest  Entitlement request to execute
   * @param {Object}                playRequest         Playrequest object containing information about the required
   *                                                    attributes of the entitlement (e.g. { drm: 'EDRM', 'format': 'HLS' }
   * @param {function}             callback            Callback when entitlement is fetched or an error occurs
   */


  EricssonExposure.prototype.getEntitlement = function getEntitlement(entitlementRequest, playRequest, callback) {
    if (typeof entitlementRequest === 'undefined') {
      throw new EntitlementError('No request specified.');
    }

    if (typeof entitlementRequest.assetId === 'undefined') {
      throw new EntitlementError('No assetId specified.');
    }

    if (typeof playRequest === 'undefined') {
      throw new EntitlementError('Media not found.');
    }

    if (!playRequest.drm || !playRequest.format) {
      throw new EntitlementError('Invalid playrequest specified.');
    }

    if (entitlementRequest.programId !== null || entitlementRequest.channelId) {
      this.getProgram_(entitlementRequest.assetId, entitlementRequest.programId, playRequest, callback);
    } else {
      this.getAsset_(entitlementRequest.assetId, playRequest, callback);
    }
  };

  /**
   * Get error for response
   *
   * @param {Object} response xhr response object
   *
   * @private
   */

  /**
     * 
     * @param {Object} response xhr response object
     * @returns {EntitlementError} EntitlementError
     * @private
     */


  EricssonExposure.prototype.getErrorForResponse = function getErrorForResponse(response) {
    if (!response) {
      return null;
    }

    var statusCode = response.statusCode;
    var message = '';
    if (response.body) {
      message = response.body.message;
    }

    // Try to match known errors
    var error = this.errorMap[statusCode];

    // Known error code
    if (error) {
      // Default error message
      var errorMessage = statusCode + ' ' + message;

      // Add our own message if we have it
      var matchedError = error[message];
      if (matchedError) {
        errorMessage += ': ' + matchedError.message;
      }

      // If it's a known error check for fatal
      if (matchedError) {
        return new EntitlementError({ message: errorMessage, fatal: !!matchedError.fatal });
      }

      return new EntitlementError(errorMessage);
      // HTTP no success code, can ben an error or something else we don't expect
    } else if (!(statusCode >= 200 && statusCode <= 299)) {
      var _errorMessage = statusCode + ' ' + message;
      return new EntitlementError(_errorMessage);
    }

    // No error
    return null;
  };

  /**
   * Check for errors and returns it to the callback
   * 
   * @param {Object} xhrError xhr Error object
   * @param {Object} xhrResponse xhr response
   * @param {Function=} callback Callback after xhr finished the request
   * @returns {boolean} true if there is an error
   * @private
   */


  EricssonExposure.prototype.checkForError = function checkForError(xhrError, xhrResponse, callback) {
    // If CORS is not setup correctly, xhr will return an 'Internal XMLHttpRequest Error' error
    var error = xhrError;

    // No internal xhr error
    if (!xhrError) {
      // Check xhrResponse for error
      error = this.getErrorForResponse(xhrResponse);
    }

    if (error) {
      if (callback) {
        callback(null, error);
      }
      return error;
    }

    // No error
    return null;
  };

  /**
   * Get VOD entitlement
   *
   * @param {String}    assetId     Asset to fetch
   * @param {Object}    playRequest Playrequest payload
   * @param {Function=} callback    Callback when entitlement is fetched
   * @returns {*}  The asset
   * @private
   */


  EricssonExposure.prototype.getAsset_ = function getAsset_(assetId, playRequest) {
    var _this4 = this;

    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!customer) {
      throw new EntitlementError('Customer was not provided.');
    }

    if (!businessUnit) {
      throw new EntitlementError('Business unit was not provided.');
    }

    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/entitlement/' + assetId + '/play';
    return xhr.post(requestURL, { json: playRequest, headers: this.requestHeaders }, function (error, response, body) {
      // Check and handles error
      if (_this4.checkForError(error, response, callback)) {
        return;
      }

      var entitlement = new Entitlement(body);
      entitlement.assetId = assetId;
      entitlement.playRequest = playRequest;
      entitlement.mimeType = playRequest.type;
      if (entitlement.mdnRequestRouterUrl) {
        EricssonMDN.getBaseUrl(entitlement, callback);
      } else {
        callback(entitlement);
      }
    });
  };

  EricssonExposure.prototype.setStreamReferenceTime = function setStreamReferenceTime(entitlement) {
    if (entitlement.isDynamicCachupAsLive || entitlement.isStaticCachupAsLive) {
      if (entitlement.mimeType === 'application/dash+xml') {
        if (entitlement.isStaticCachupAsLive) {
          entitlement.streamInfo.referenceTime = entitlement.streamInfo.startTime;
        } else {
          entitlement.streamInfo.referenceTime = 0;
        }
      } else if (entitlement.mimeType === 'application/x-mpegurl') {
        entitlement.streamInfo.referenceTime = entitlement.streamInfo.startTime;
      }
    }
  };

  /**
   * Get asset metadata
   *
   * @param {String}    assetId     Asset to fetch metadata for
   * @param {Function}  callback    Callback when fetching has completed
   * @returns {object} Asset Metadata
   * @private
   */


  EricssonExposure.prototype.getAssetMetadata_ = function getAssetMetadata_(assetId, callback) {
    var _this5 = this;

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!customer) {
      throw new EntitlementError('Customer was not provided.');
    }

    if (!businessUnit) {
      throw new EntitlementError('Business unit was not provided.');
    }

    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/content/asset/' + assetId;
    return xhr.get(requestURL, null, function (error, response, body) {
      // Check and handles error
      if (_this5.checkForError(error, response, callback)) {
        return;
      }

      var metadata = JSON.parse(body);
      callback(metadata);
    });
  };

  /**
   * Get program entitlement
   *
   * @param {String}    channelId Channel to fetch from
   * @param {String}    programId Program to fetch
   * @param {Object}    playRequest Playrequest payload
   * @param {function} callback Callback when entitlement is fetched
   * @returns {object}   The program
   * @private
   */


  EricssonExposure.prototype.getProgram_ = function getProgram_(channelId, programId, playRequest) {
    var _this6 = this;

    var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!customer) {
      throw new EntitlementError('Customer was not provided.');
    }

    if (!businessUnit) {
      throw new EntitlementError('Business unit was not provided.');
    }

    var programUrl = '';
    if (programId) {
      programUrl = '/program/' + programId;
    }

    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/entitlement/channel/' + channelId + programUrl + '/play';
    return xhr.post(requestURL, { json: playRequest, headers: this.requestHeaders }, function (error, response, body) {
      // Check and handles error
      if (_this6.checkForError(error, response, callback)) {
        return;
      }

      var entitlement = new Entitlement(body);
      entitlement.assetId = channelId;
      if (programId) {
        entitlement.programId = programId;
      }
      entitlement.playRequest = playRequest;
      entitlement.mimeType = playRequest.type;
      _this6.setStreamReferenceTime(entitlement);
      if (entitlement.mdnRequestRouterUrl) {
        EricssonMDN.getBaseUrl(entitlement, callback);
      } else {
        callback(entitlement);
      }
    });
  };

  /**
   * Get server time
   *
   * Should return the exact servertime
   *
   * @param {function}  callback  Callback when server time is fetched or an error occurs
   * @returns {Date}   ServerTime
   */


  EricssonExposure.prototype.getServerTime = function getServerTime(callback) {
    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!customer || !businessUnit) {
      log$1.warn('getServerTime no customer or businessUnit');
      callback(new Date());
      return;
    }

    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/time';
    return xhr.get(requestURL, null, function (error, response, body) {
      if (error) {
        callback(null, error);
        return;
      }

      var json = JSON.parse(body);
      var date = new Date(json.iso8601);
      callback(date);
    });
  };

  /**
   * Get user Preferences
   * @param {function} callback
   * @returns {*}
   */


  EricssonExposure.prototype.getPreferences = function getPreferences(callback) {
    var _this7 = this;

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/preferences';
    return xhr.get(requestURL, { headers: this.requestHeaders }, function (error, response, body) {
      if (_this7.checkForError(error, response, callback)) {
        return;
      }
      var json = JSON.parse(body);
      callback(json);
    });
  };

  /**
   * Save user preferences
   * @param {any} preferences
   * @param {any} callback
   */


  EricssonExposure.prototype.savePreferences = function savePreferences(preferences, callback) {
    var _this8 = this;

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!preferences) {
      log$1.error('Preferences was not provided.');
      return;
    }
    var data = {
      'preferences': preferences
    };
    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/preferences';
    return xhr.post(requestURL, { json: data, headers: this.requestHeaders }, function (error, response, body) {
      // Check and handles error
      if (_this8.checkForError(error, response, callback)) {
        return;
      }
      callback(true);
    });
  };

  /**    
    * Get EPG
    * @param channelId
    * @param from
    * @param to
    * @param callback
    * @returns {*}
    */


  EricssonExposure.prototype.getEPG = function getEPG(channelId, from, to, callback) {
    var _this9 = this;

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    var params = null;
    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/epg/' + channelId;

    requestURL += '?from=' + from + '&to=' + to;

    return xhr.get(requestURL, null, function (error, response, body) {
      if (_this9.checkForError(error, response, callback)) {
        return;
      }
      var json = JSON.parse(body);
      callback(json);
    });
  };

  /**
   * Get the program based on EPG
   * @param channelId
   * @param date
   * @param callback
   */


  EricssonExposure.prototype.getProgramInfo = function getProgramInfo(channelId, date, callback, programId) {

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    var params = null;
    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/epg/' + channelId;
    if (programId) {
      requestURL = requestURL + '/program/' + programId;
    } else {
      params = {
        from: date.getTime(),
        to: date.getTime()
      };

      requestURL += '?from=' + params.from + '&to=' + params.to;
    }

    return xhr.get(requestURL, null, function (error, response, body) {
      if (error) {
        callback(null, error);
        return;
      }

      var json = JSON.parse(body);
      var program = void 0;
      if (json.programs && json.programs.length > 0) {
        program = json.programs[0];
      } else if (json.programId) {
        program = json;
      } else {
        callback(null, 'Invalid response from EPG. No programs found.');
        return;
      }
      program.start = new Date(program.startTime);
      program.end = new Date(program.endTime);
      program.duration = new Date(program.endTime) - new Date(program.startTime);
      callback(program);
    });
  };

  /**
   * Get the Asset Info
   * @param assetId
   * @param callback
   */


  EricssonExposure.prototype.getAssetInfo = function getAssetInfo(assetId, callback) {
    var customer = this.customer;
    var businessUnit = this.businessUnit;
    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/content/asset/' + assetId;

    return xhr.get(requestURL, null, function (error, response, body) {
      if (error) {
        callback(null, error);
        return;
      }

      var asset = JSON.parse(body);
      callback(asset);
    });
  };

  /**
   * verifyEntitlement
   * @param {any} playRequest
   * @param {any} callback
   */


  EricssonExposure.prototype.verifyEntitlement = function verifyEntitlement(assetId, playRequest) {
    var _this10 = this;

    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    var customer = this.customer;
    var businessUnit = this.businessUnit;
    if (!customer) {
      throw new EntitlementError('Customer was not provided.');
    }
    if (!businessUnit) {
      throw new EntitlementError('Business unit was not provided.');
    }
    if (!assetId) {
      throw new EntitlementError('assetId was not provided.');
    }
    if (!playRequest) {
      throw new EntitlementError('playRequest was not provided.');
    }

    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/entitlement/' + assetId + '?drm=' + playRequest.drm + '&format=' + playRequest.format;
    return xhr.get(requestURL, { headers: this.requestHeaders }, function (error, response, body) {
      // Check and handles error
      if (_this10.checkForError(error, response, callback)) {
        return;
      }
      if ((typeof callback === 'undefined' ? 'undefined' : _typeof(callback)) !== undefined) {
        callback(JSON.parse(body));
      }
    });
  };

  /**
   * Verifies if sessionToken is still valid
   * @param okFn - callback if session is ok
   * @param nokFn - callback if session is not ok
   */


  EricssonExposure.prototype.verifySession = function verifySession(okFn, nokFn) {
    var _this11 = this;

    var customer = this.customer;
    var businessUnit = this.businessUnit;

    var requestURL = this.options_['exposureApiURL'] + '/' + this.options_['exposureApiVersion'] + '/customer/' + customer + '/businessunit/' + businessUnit + '/auth/session';

    return xhr.get(requestURL, { headers: this.requestHeaders }, function (error, response, body) {
      // Check and handles error
      if (_this11.checkForError(error, response)) {
        if (nokFn) {
          nokFn();
        }
        return;
      }
      if (okFn) {
        okFn();
      }
    });
  };

  /**
   * Get Play request headers. Including apiKey if set
   * @return {Object}
   */


  createClass(EricssonExposure, [{
    key: 'requestHeaders',
    get: function get$$1() {
      var headers = { Authorization: 'Bearer ' + this.sessionToken };
      if (this.options_['apiKey']) {
        headers = Object.assign({
          'EMP-Auth': this.options_['apiKey']
        }, headers);
      }
      return headers;
    }

    /**
     * Get customer. Defaults to value set in options if available
     * @returns {String}
     */

  }, {
    key: 'customer',
    get: function get$$1() {
      return this.customer_ || this.options_['customer'] || null;
    }

    /**
     * Set customer.
     * @param {String}  customer
     */
    ,
    set: function set$$1(customer) {
      this.customer_ = customer;
    }

    /**
     * Get business unit. Defaults to value set in options if available
     * @returns {String}
     */

  }, {
    key: 'businessUnit',
    get: function get$$1() {
      return this.businessUnit_ || this.options_['businessUnit'] || null;
    }

    /**
     * Set business unit
     * @param {String}  businessUnit
     */
    ,
    set: function set$$1(businessUnit) {
      this.businessUnit_ = businessUnit;
    }

    /**
     * Get session token. Defaults to value set in options if available
     * @returns {String}
     */

  }, {
    key: 'sessionToken',
    get: function get$$1() {
      return this.options_['sessionToken'] || null;
    }

    /**
     * Set session token
     * @param {String}  sessionToken
     */
    ,
    set: function set$$1(sessionToken) {
      this.options_['sessionToken'] = sessionToken;
    }
  }]);
  return EricssonExposure;
}(EntitlementEngine);

EntitlementEngine.registerEntitlementEngine('EricssonExposure', EricssonExposure);

var EntitlementRequest = function () {
  function EntitlementRequest(options) {
    classCallCheck(this, EntitlementRequest);

    this.assetId = options.assetId || null;
    this.programId = options.programId || null;
    this.channelId = options.channelId || null;
  }

  createClass(EntitlementRequest, [{
    key: "assetId",
    get: function get$$1() {
      return this.assetId_;
    },
    set: function set$$1(assetId) {
      this.assetId_ = assetId;
    }
  }, {
    key: "programId",
    get: function get$$1() {
      return this.programId_;
    },
    set: function set$$1(programId) {
      this.programId_ = programId;
    }
  }, {
    key: "channelId",
    get: function get$$1() {
      return this.channelId_;
    },
    set: function set$$1(channelId) {
      this.channelId_ = channelId;
    }
  }]);
  return EntitlementRequest;
}();

var Plugin = videojs.getPlugin('plugin');

/**
 *  ProgramService
 * @param player
 * @param options
 */

var ProgramService = function (_Plugin) {
  inherits(ProgramService, _Plugin);

  function ProgramService(player, options) {
    classCallCheck(this, ProgramService);

    var _this = possibleConstructorReturn(this, _Plugin.call(this, player, options));

    log$1('ProgramService', 'create');
    _this.MIN_PROGRAM_CHECK_TIMEOUT = 1000;
    _this.checkForProgramChangeBind = _this.checkForProgramChange_.bind(_this);
    _this.onEntitlementChangeBind = _this.onEntitlementChange.bind(_this);
    _this.clearProgramChangeTimeoutBind = _this.clearProgramChangeTimeout_.bind(_this);
    _this.options_ = options ? options : {};
    _this.programChangeTimeout_ = null;
    _this.programChangeCheckTimestamp_ = 0;
    _this.player.on(empPlayerEvents.ENTITLEMENT_CHANGE, _this.onEntitlementChangeBind);
    return _this;
  }

  /**
  * @returns {Exposure} current exposure
  */


  /**
   * set / get entitlement
   * @param value
   * @returns {Entitlement}
   */
  ProgramService.prototype.entitlement = function entitlement(value) {
    if (typeof value === 'undefined') {
      return this.entitlement_;
    }
    this.entitlement_ = value;
    return value;
  };

  /**
   * Set / Get options
   * @param obj
   * @returns {object}
   */


  ProgramService.prototype.options = function options(obj) {
    if (!obj) {
      return this.options_;
    }
    this.options_ = obj;
  };

  /**
   * onEntitlementChange
   * @param event
   * @param data
   */


  ProgramService.prototype.onEntitlementChange = function onEntitlementChange(event, data) {
    this.currentProgram_ = null;
    this.currentVOD_ = null;
    var entitlement = data && data.entitlement;
    if (entitlement) {
      if (!(entitlement instanceof Entitlement)) {
        //From entitlement CC establish Entitlement object
        this.stop();
        entitlement = Object.assign(new Entitlement({}), entitlement);
      }
      this.entitlement(entitlement);
    }
    // Only manually update if tech doesn't natively support program changes.
    if (!extplayer.supportsEpgProgramChange(this.player)) {
      // Only check for program change when player is playing.
      this.player.off(empPlayerEvents.PLAYING, this.checkForProgramChangeBind);
      this.player.one(empPlayerEvents.PLAYING, this.checkForProgramChangeBind);
    }
  };

  /**
   * start program service
   * @param entitlement
   */


  ProgramService.prototype.start = function start() {
    log$1('ProgramService', 'start');
    if (this.entitlement()) {
      this.checkForProgramChange_({ type: 'startplayback' });
    }
  };

  /**
   * stop program service
   */


  ProgramService.prototype.stop = function (_stop) {
    function stop() {
      return _stop.apply(this, arguments);
    }

    stop.toString = function () {
      return _stop.toString();
    };

    return stop;
  }(function () {
    stop('ProgramService stop');
    this.clearProgramChangeTimeout_();
    this.currentProgram_ = null;
    this.currentVOD_ = null;
    if (this.player) {
      this.player.off(empPlayerEvents.SEEKED, this.checkForProgramChangeBind);
      this.player.off(empPlayerEvents.PLAYING, this.checkForProgramChangeBind);
      this.player.off(empPlayerEvents.PAUSE, this.clearProgramChangeTimeoutBind);
      this.player.off(empPlayerEvents.PLAY, this.checkForProgramChangeBind);
    }
  });

  ProgramService.prototype.clearProgramChangeTimeout_ = function clearProgramChangeTimeout_(event, data) {
    if (this.programChangeTimeout_) {
      if (event) {
        log$1('clearProgramChangeTimeout', event.type);
      }
      clearTimeout(this.programChangeTimeout_);
      this.programChangeTimeout_ = null;
    }
  };

  /**
   *  Check if ProgramService is running
   * @returns {boolean}
  */


  ProgramService.prototype.running = function running() {
    if (this.programChangeTimeout_) {
      log$1('ProgramService:running', this.programChangeCheckTimestamp_ ? new Date(this.programChangeCheckTimestamp_) : 0);
      return true;
    }
    return false;
  };

  /**
   * dispose
   */


  ProgramService.prototype.dispose = function dispose() {
    log$1('ProgramService', 'dispose');
    this.player.off(empPlayerEvents.ENTITLEMENT_CHANGE, this.onEntitlementChangeBind);
    this.stop();
    _Plugin.prototype.dispose.call(this);
  };

  /**
   * currentProgram
   * @returns {object}
   */


  /**
   * Check if program changed
   * @param event
   * @param data
   * @private
   */
  ProgramService.prototype.checkForProgramChange_ = function checkForProgramChange_(event, data) {
    var _this2 = this;

    if (!event) {
      log$1.error('checkForProgramChange', 'event was not provided.');
      return;
    }
    log$1('checkForProgramChange', event.type);
    //Not need update a program or real VOD
    if (!this.entitlement().live && !this.entitlement().isStaticCachupAsLive && !this.entitlement().isDynamicCachupAsLive && event.type === empPlayerEvents.SEEKED) {
      return;
    }
    if (this.player.options_.absoluteStartTime && event.type === empPlayerEvents.SEEKED) {
      log$1('checkForProgramChange', 'ignore livepoint');
      return;
    }

    // If called, due to SEEK or other events, clear previous timer that could cause this method to be called.
    this.clearProgramChangeTimeout_();
    //For Flash and Cast
    if (extplayer.supportsEpgProgramChange(this.player)) {
      var program = extplayer.program(this.player);
      if (program) {
        log$1('updateCurrentProgram from player');
        //TODO fetch epg for flash
        return;
      }
    }

    var assetId = this.entitlement().assetId;
    var isLive = this.entitlement().live;
    var programId = this.entitlement().programId;

    //VOD
    if (!isLive && !programId) {
      this.updateVOD_(assetId);
      return;
    }

    var dateTime = void 0;
    //Reagula Live
    if (isLive && !programId) {
      var serverDate = new Date(this.exposure.getCachedServerTime());
      //Margin to live edge
      var secondsBehind = event.type === 'startplayback' ? 15 : extplayer.timeBehindLive(this.player);
      serverDate.setSeconds(serverDate.getSeconds() - secondsBehind);
      dateTime = serverDate;
      log$1('checkForProgramChange', 'Live', secondsBehind);
      if (this.currentProgram && dateTime.getTime() < this.currentProgram.end.getTime() && dateTime.getTime() >= this.currentProgram.start.getTime()) {
        log$1('checkForProgramChange', 'Same');
        dateTime = null;
        this.updateCurrentProgram_(this.currentProgram, false);
        return;
      }
    }
    //CachupAsLive
    else if (event.type !== 'startplayback' && (this.entitlement().isDynamicCachupAsLive || this.entitlement().isStaticCachupAsLive)) {
        var playHeadTime = extplayer.getPlayheadTime(this.player);
        if (playHeadTime) {
          dateTime = new Date(playHeadTime);
          // Load next stream
          var _serverDate = new Date(this.exposure.getCachedServerTime());
          if (this.currentProgram && this.entitlement().isStaticCachupAsLive && dateTime.getTime() + 2000 >= this.entitlement().streamInfo.end.getTime()) {
            log$1('checkForProgramChange', 'Load next stream', dateTime);
            if (this.player.lineUpAsset) {
              this.player.lineUpAsset(null, this.currentProgram.channelId, this.currentProgram.programId, dateTime.getTime());
            }
            return;
          }
          //Next Program
          else if (this.currentProgram && dateTime.getTime() + 2000 >= this.currentProgram.end.getTime()) {
              //play request if outside stream boundery
              log$1('checkForProgramChange', 'Next', dateTime);
              dateTime.setSeconds(dateTime.getSeconds() + 2); // Margin to next program
            } else if (this.currentProgram && dateTime.getTime() < this.currentProgram.end.getTime() && dateTime.getTime() >= this.currentProgram.start.getTime()) {
              log$1('checkForProgramChange', 'Same', dateTime);
              dateTime = null;
              this.updateCurrentProgram_(this.currentProgram, false);
              return;
            } else {
              log$1('checkForProgramChange', 'Prev', dateTime);
              //dateTime.setSeconds(dateTime.getSeconds() - 2); // Margin to prev program
            }
        }
      }

    this.exposure.getProgramInfo(assetId, dateTime, function (program, error) {
      if (error) {
        log$1.warn('getProgramInfo', 'No EPG found.', error);
        _this2.pollingForEPG();
        return;
      }
      _this2.updateCurrentProgram_(program, event.type === 'startplayback');
    }, dateTime ? null : programId);
  };

  /**
   * updateVOD
   * @param assetId
   * @private
   */


  ProgramService.prototype.updateVOD_ = function updateVOD_(assetId) {
    var _this3 = this;

    this.exposure.getAssetInfo(assetId, function (asset, error) {
      if (error) {
        log$1.warn('No AssetInfo found.', error);
        return;
      }

      if (!_this3.currentVOD_ || _this3.currentVOD_.assetId !== asset.assetId) {
        _this3.currentVOD_ = asset;
        _this3.currentProgram_ = null;
        log$1('ASSET_CHANGED');
        _this3.player.trigger(empPlayerEvents.ASSET_CHANGED, { 'asset': asset });
      }
    });
  };

  /**
   * updateCurrentProgram_
   * @param program
   * @param startplayback
   * @private
   */


  ProgramService.prototype.updateCurrentProgram_ = function updateCurrentProgram_(program, startplayback) {
    var _this4 = this;

    log$1('updateCurrentProgram', program, startplayback);
    this.clearProgramChangeTimeout_();

    // Program changed due to seek or other event
    if (!this.currentProgram_ || this.currentProgram_.programId !== program.programId) {
      this.currentVOD_ = null;
      extplayer.setTechProgram(this.player, program);
      this.player.trigger(empPlayerEvents.PROGRAM_CHANGED, { 'program': program });
      this.player.trigger(empPlayerEvents.DURATION_CHANGE); //Update progressbar
      this.currentProgram_ = program;
      if (!startplayback) {
        this.verifyEntitlement();
      }
    }

    if (startplayback) {
      log$1('updateCurrentProgram', 'startplayback');
      return;
    }

    if (this.entitlement().isDynamicCachupAsLive || this.entitlement().live || this.entitlement().isStaticCachupAsLive) {
      var date = void 0;
      if (this.entitlement().isStaticCachupAsLive || this.entitlement().isDynamicCachupAsLive) {
        var playHeadTime = extplayer.getPlayheadTime(this.player);
        if (!playHeadTime) {
          log$1.error('updateCurrentProgram', 'no playHeadTime');
          return;
        }
        date = new Date(playHeadTime);
      } else {
        // calculate live time from user position for old MMR Streams
        var secondsBehind = extplayer.timeBehindLive(this.player);
        date = new Date(this.exposure.getCachedServerTime());
        date.setSeconds(date.getSeconds() - secondsBehind);
      }

      // Set a timer that fires after X seconds. where X is the amount of seconds it takes from NOW to get to program boundary
      var expiryDate = new Date(program.start.getTime() + program.duration);
      var timediff = expiryDate.getTime() - date.getTime();

      if (!timediff || timediff < this.MIN_PROGRAM_CHECK_TIMEOUT) {
        log$1('updateCurrentProgram', 'timediff is below minimum', timediff);
        timediff = this.MIN_PROGRAM_CHECK_TIMEOUT;
      }
      this.programChangeCheckTimestamp_ = Date.now() + timediff;
      log$1('updateCurrentProgram', 'programChangeTimeout', new Date(this.programChangeCheckTimestamp_));
      this.programChangeTimeout_ = setTimeout(function () {
        _this4.checkForProgramChange_({ type: 'programend' });
        _this4.programChangeTimeout_ = null;
      }, timediff);
    }

    this.player.off(empPlayerEvents.SEEKED, this.checkForProgramChangeBind);
    this.player.one(empPlayerEvents.SEEKED, this.checkForProgramChangeBind);
    this.player.off(empPlayerEvents.PLAY, this.checkForProgramChangeBind);
    this.player.one(empPlayerEvents.PLAY, this.checkForProgramChangeBind);
    this.player.off(empPlayerEvents.PAUSE, this.clearProgramChangeTimeoutBind);
    this.player.one(empPlayerEvents.PAUSE, this.clearProgramChangeTimeoutBind);
  };

  ProgramService.prototype.pollingForEPG = function pollingForEPG() {
    var _this5 = this;

    var previousProgram = this.currentProgram_;
    this.currentProgram_ = null;
    this.player.trigger(empPlayerEvents.PROGRAM_CHANGED, { 'program': null });
    this.player.trigger(empPlayerEvents.DURATION_CHANGE); //Update progressbar

    var pollingRate = 5 * 60 * 1000;
    this.programChangeCheckTimestamp_ = Date.now() + pollingRate;
    this.programChangeTimeout_ = setTimeout(function () {
      _this5.checkForProgramChange_({ type: 'pollingforepg' });
      _this5.programChangeTimeout_ = null;
    }, pollingRate);
  };

  /**
   * get Next Program
   * @param callback
   */


  ProgramService.prototype.getNextProgram = function getNextProgram(callback) {
    if (!this.currentProgram) {
      if (callback) {
        callback(null, { message: 'getNextProgram No Current Program' });
      }
    }
    if (this.exposure.getCachedServerTime() < this.currentProgram.end.getTime()) {
      callback(this.currentProgram);
      return;
    }
    var dateTime = new Date(this.currentProgram.endTime);
    dateTime.setSeconds(dateTime.getSeconds() + 15);
    this.exposure.getProgramInfo(this.currentProgram.channelId, dateTime, function (program, error) {
      if (error) {
        callback(null, error);
      } else {
        callback(program);
      }
    }, null);
  };

  /**
   * get Previous Program
   * @param callback
   */


  ProgramService.prototype.getPreviousProgram = function getPreviousProgram(callback) {
    if (!this.currentProgram) {
      if (callback) {
        callback(null, { message: 'getPreviousProgram No Current Program' });
      }
    }
    var dateTime = new Date(this.currentProgram.startTime);
    dateTime.setSeconds(dateTime.getSeconds() - 15);
    this.exposure.getProgramInfo(this.currentProgram.channelId, dateTime, function (program, error) {
      if (error) {
        callback(null, error);
      } else {
        callback(program);
      }
    }, null);
  };

  /**
   * get Program
   * @param date
   * @param callback
   */


  ProgramService.prototype.getProgram = function getProgram(dateTime, callback) {
    if (!this.currentProgram) {
      if (callback) {
        callback(null, { message: 'getProgram No Current Program' });
      }
    }
    this.exposure.getProgramInfo(this.currentProgram.channelId, dateTime, function (program, error) {
      if (error) {
        callback(null, error);
      } else {
        callback(program);
      }
    }, null);
  };

  /**
   * verifyEntitlement
   */


  ProgramService.prototype.verifyEntitlement = function verifyEntitlement() {
    var _this6 = this;

    if (!this.currentProgram) {
      return;
    }

    this.exposure.verifyEntitlement(this.currentProgram.assetId, this.entitlement().playRequest, function (data, error) {
      if (error) {
        _this6.player.error('verifyEntitlement ' + error.message);
        extplayer.stop(_this6.player);
        return;
      }
      if (!data || data.status !== 'SUCCESS') {
        _this6.player.error(data ? data.status : 'verifyEntitlement no status');
        extplayer.stop(_this6.player);
        return;
      }
      log$1('verifyEntitlement', data.status);
    });
  };

  ProgramService.prototype.getAssetMetadata = function getAssetMetadata(assetId, callback) {
    var _this7 = this;

    var asset = this.currentProgram ? this.currentProgram.asset : this.currentVOD;
    if (!asset) {
      this.exposure.getAssetMetadata_(assetId, function (asset, error) {
        if (error) {
          log$1.warn('getAssetMetadata', 'No data found.', error);
          callback(null, error);
          return;
        } else {
          callback(_this7.extractMetadata_(asset));
          return;
        }
      });
    }
    callback(this.extractMetadata_(asset));
    return;
  };

  ProgramService.prototype.extractMetadata_ = function extractMetadata_(asset) {
    var title = null;
    var subtitle = null;
    var images = null;
    //TODO take correct localized
    if (asset && asset.localized && asset.localized.length > 0) {
      if (asset.localized[0].title) {
        title = asset.localized[0].title;
      }
      if (asset.localized[0].shortDescription) {
        subtitle = asset.localized[0].shortDescription;
      }
      if (asset.localized[0].images && asset.localized[0].images.length > 0 && asset.localized[0].images[0].url) {
        images = asset.localized[0].images;
      }
    }
    return {
      'title': title ? title : '',
      'subtitle': subtitle ? subtitle : '',
      'images': images ? images : []
    };
  };

  createClass(ProgramService, [{
    key: 'exposure',
    get: function get$$1() {
      if (!this.options_.exposure) {
        var exposureServiceName = this.player.options_['entitlement-engine'];
        if (!exposureServiceName) {
          exposureServiceName = this.player.options_['exposure-service'] ? this.player.options_['exposure-service'] : 'EricssonExposure';
        }
        var entitlementOptions = this.player.options_[exposureServiceName.toLowerCase()];
        if (!entitlementOptions) {
          log$1.warn('Missing entitlementOptions in player options');
          var error = new EmpPlayerError('Missing entitlementOptions in player options', EmpPlayerErrorCodes.ENTITLEMENT);
          return null;
        }
        var Exposure = EntitlementEngine.getEntitlementEngine(exposureServiceName);
        this.options_.exposure = new Exposure(entitlementOptions);
      }
      return this.options_.exposure;
    }
  }, {
    key: 'currentProgram',
    get: function get$$1() {
      if (extplayer.supportsEpgProgramChange(this.player)) {
        var program = extplayer.program(this.player);
        return program;
      } else {
        return this.currentProgram_;
      }
    }

    /**
     * currentVOD
     * @returns {object}
     */

  }, {
    key: 'currentVOD',
    get: function get$$1() {
      //FOR CC currentVOD comming from tech
      return this.currentVOD_;
    }
  }]);
  return ProgramService;
}(Plugin);

ProgramService.VERSION = '2.0.79-32';

if (videojs.getPlugin('programService')) {
  videojs.log.warn('A plugin named "programService" already exists.');
} else {
  videojs.registerPlugin('programService', ProgramService);
}

var Plugin$1 = videojs.getPlugin('plugin');

/**
 * ExpirationService
 *
 * Checks if entitlements are still valid according to their expiration and handles refreshing of expired entitlements
 */

var EntitlementExpirationService = function (_Plugin) {
  inherits(EntitlementExpirationService, _Plugin);

  function EntitlementExpirationService(player, options) {
    classCallCheck(this, EntitlementExpirationService);

    var _this = possibleConstructorReturn(this, _Plugin.call(this, player, options));

    log$1('EntitlementExpirationService', 'create');
    _this.options_ = options;
    _this.onEntitlementChangeBind = _this.onEntitlementChange.bind(_this);
    return _this;
  }

  /**
  * @returns {Exposure} current exposure
  */


  EntitlementExpirationService.prototype.dispose = function dispose() {
    log$1('EntitlementExpirationService', 'dispose');
    this.stop();
    _Plugin.prototype.dispose.call(this);
  };

  EntitlementExpirationService.prototype.stop = function stop() {
    log$1('EntitlementExpirationService', 'stop');
    this.player.off(empPlayerEvents.ENTITLEMENT_CHANGE, this.onEntitlementChangeBind);
    if (this.expirationTimeout_) {
      clearTimeout(this.expirationTimeout_);
      this.expirationTimeout_ = null;
    }
  };

  EntitlementExpirationService.prototype.start = function start() {
    log$1('EntitlementExpirationService', 'start');
    if (this.expirationTimeout_) {
      clearTimeout(this.expirationTimeout_);
      this.expirationTimeout_ = null;
    }
    this.player.off(empPlayerEvents.ENTITLEMENT_CHANGE, this.onEntitlementChangeBind);
    this.player.on(empPlayerEvents.ENTITLEMENT_CHANGE, this.onEntitlementChangeBind);
  };

  EntitlementExpirationService.prototype.entitlement = function entitlement(value) {
    if (typeof value === 'undefined') {
      return this.entitlement_;
    }
    this.entitlement_ = value;
    return value;
  };

  EntitlementExpirationService.prototype.onEntitlementChange = function onEntitlementChange(event, data) {
    this.entitlement(data && data.entitlement);
    if (this.expirationTimeout_) {
      clearTimeout(this.expirationTimeout_);
      this.expirationTimeout_ = null;
    }
    this.checkForExpiration();
  };

  EntitlementExpirationService.prototype.options = function options(obj) {
    if (!obj) {
      return this.options_;
    }
    this.options_ = obj;
  };

  EntitlementExpirationService.prototype.checkForExpiration = function checkForExpiration() {
    var _this2 = this;

    var entitlement = this.entitlement();
    log$1('EntitlementExpirationService', 'checkForExpiration', entitlement.licenseExpiration);
    if (!this.hasLicenseExpiration(entitlement)) {
      // If no license expiration is present.
      return;
    }

    var timediff = entitlement.licenseExpiration.getTime() - this.exposure.getCachedServerTime();
    if (timediff <= 0) {
      // license expired
      this.player.error(this.errorForReason(entitlement.licenseExpirationReason));
      extplayer.stop(this.player);
      return;
    }

    // Set timeout to refresh entitlement
    // Check to make sure the timeDiff is not bigger than the maximum allowed value in setTimeout.
    if (timediff < 0x7FFFFFFF) {
      this.expirationTimeout_ = setTimeout(function () {
        _this2.expirationTimeout_ = null;
        log$1('EntitlementExpirationService', 'license expired');
        _this2.refreshEntitlement();
      }, timediff);
    } else {
      setTimeout(function () {
        return _this2.checkForExpiration();
      }, 0x3FFFFFFF);
    }
  };

  /**
   * Refresh entitlement
   *
   * Asks the entitlement engine to re-request the entitlement using the previously used data.
   *
   */


  EntitlementExpirationService.prototype.refreshEntitlement = function refreshEntitlement() {
    extplayer.restart(this.player, true);
  };

  /**
   * Error for reason
   *
   * Returns a human readable string for expiration error
   *
   * @param {String} error
   * @return {String} Human readable error string
   */


  EntitlementExpirationService.prototype.errorForReason = function errorForReason(reason) {
    switch (reason) {
      case 'GEO_BLOCKED':
        return this.player.localize('Not allowed from this region.');
      case 'NOT_ENTITLED':
        return this.player.localize('The user is not entitled.');
      case 'GAP_IN_EPG':
        return this.player.localize('Asset temporarily not available');
      case 'EPG_PLAY_MAX_HOURS':
      /* falls through */
      default:
        return this.player.localize('Asset exceeded maximum playback time');
    }
  };

  /**
   * Checks if the current entitlement has a license expiration
   *
   * @param {Entitlement} entitlement
   *
   * @return Bool Does entitlement have an expiration?
   */


  EntitlementExpirationService.prototype.hasLicenseExpiration = function hasLicenseExpiration(entitlement) {
    return !!entitlement.licenseExpiration;
  };

  createClass(EntitlementExpirationService, [{
    key: 'exposure',
    get: function get$$1() {
      return this.options_ && this.options_.exposure;
    }
  }]);
  return EntitlementExpirationService;
}(Plugin$1);

EntitlementExpirationService.VERSION = '2.0.79-32';

if (videojs.getPlugin('entitlementExpirationService')) {
  videojs.log.warn('A plugin named "entitlementExpirationService" already exists.');
} else {
  videojs.registerPlugin('entitlementExpirationService', EntitlementExpirationService);
}

/**
 * Loop method to do a loop while executing async requests inside of it
 *
 * example:
 *
 * asyncLoop(2, function(loop) {
 *  console.log(loop.iterations();
 *  // do something asyncy
 *  loop.next();
 * }, function() {
 *  console.log('all done');
 * });
 *
 * would output: 1, 2, all done
 *
 * You have to manually call .next on the loop for it to continue execution
 *
 * @param  {Number}   iterations - Number of times to iterate
 * @param  {Function} func - Function to execute when iterating
 * @param  {Function} callback - Callback function when all iterations have been complete
 * @private
 */
function asyncLoop(iterations, func, callback) {
  var index = 0;
  var done = false;
  var loop = {
    next: function next() {
      if (done) {
        return;
      }

      if (index < iterations) {
        index++;
        func(loop);
      } else {
        done = true;
        callback();
      }
    },

    iteration: function iteration() {
      return index - 1;
    },

    "break": function _break() {
      done = true;
      callback();
    }
  };
  loop.next();
  return loop;
}

/**
* @file entitlement-middleware.js
* @module empEntitlement
*/
var Tech$1 = videojs$1.getComponent('Tech');
/**
 * Inject a Source handler for EMP streams
 * @param player
 */
var EntitlementMiddleware = function EntitlementMiddleware(player) {
  return {
    setSource: function setSource(srcObj, next) {
      var options = player.options();
      var srcEntitlement = null;
      var entitlementRequest = null;
      if (player.programService) {
        player.programService().stop();
      }
      //playEntitlement was called by the player
      if (isEntitlement_(player.currentSource())) {
        srcEntitlement = player.currentSource();
      } else {
        var asset = parseSrc(srcObj.src);
        entitlementRequest = new EntitlementRequest(asset);
        player.trigger(empPlayerEvents.ENTITLEMENT_LOAD_START, entitlementRequest);
      }

      var exposureServiceName = options['entitlement-engine'];
      if (!exposureServiceName) {
        exposureServiceName = options['exposure-service'] ? options['exposure-service'] : 'EricssonExposure';
      }
      var entitlementOptions = options[exposureServiceName.toLowerCase()];
      if (!entitlementOptions) {
        var error = new EmpPlayerError('Missing entitlementOptions in player options', EmpPlayerErrorCodes.ENTITLEMENT);
        player.error(error);
        next(error);
        return;
      }

      var exposure = EntitlementMiddleware.getExposure(entitlementOptions, exposureServiceName);
      if (!options.analytics || !options.analytics.disable) {
        startAnalytics_(player, options, entitlementOptions, exposure);
      }

      player.entitlementExpirationService().options({ 'exposure': exposure });

      //Get avalible techs
      var techs = options.techOrder.map(function (techName) {
        return techName.charAt(0).toUpperCase() + techName.slice(1);
      }).map(function (techName) {
        return [techName, Tech$1.getTech(techName)];
      }).filter(function (_ref) {
        var techName = _ref[0],
            tech = _ref[1];

        if (tech && techName !== "Html5" && techName !== "EmpCast") {
          return tech.isSupported();
        }
      });
      if (techs.length === 0) {
        var error = new EmpPlayerError('Unable to load asset: None of the playback technologies are supported', EmpPlayerErrorCodes.ENTITLEMENT);
        player.error(error);
        next(error);
        return;
      }

      //Start the tech selecting loop
      asyncLoop(techs.length, function (loop) {
        var i = loop.iteration();
        if (options.excludeTechs && options.excludeTechs.indexOf(techs[i][0]) !== -1) {
          loop.next();
          return;
        }
        var tech = techs[i][1]; // Get reference to the tech object
        if (player.tech_ && player.techName_ !== techs[i][0]) {
          player.techCall_('reset');
          player.unloadTech_();
          //player.reset(); crash without emp-player for hls
        }
        try {
          if (srcEntitlement) {
            //playEntitlement was called by the player
            srcEntitlement = setupEntitlement(srcEntitlement, tech);
            startProgramService_(player, options, exposure, srcEntitlement, function () {
              next(null, srcEntitlement);
            });
            loop['break']();
            return;
          } else {
            exposure.getEntitlement(entitlementRequest, tech.entitlementPlayRequest, function (entitlement, error) {
              // If we have an fatal error during playcall break out of the loop else try next tech
              if (error) {
                if (error.fatal) {
                  var error = new EmpPlayerError(error, EmpPlayerErrorCodes.ENTITLEMENT);
                  player.error(error);
                  extplayer.stop(player);
                  next(error);
                  return;
                }
                loop.next();
              } else {
                // Set the entitlement to use, and break out of the loop. No need to get other entitlements.
                srcEntitlement = setupEntitlement(entitlement, tech);
                startProgramService_(player, options, exposure, srcEntitlement, function () {
                  next(null, srcEntitlement);
                });
                loop['break']();
              }
            });
          }
        }
        //If we get other error try next tech
        catch (error) {
          log$1.warn('error try next tech', new EmpPlayerError(error, EmpPlayerErrorCodes.ENTITLEMENT));
          loop.next();
          return;
        }
      }, function () {
        if (srcEntitlement === null) {
          var error = new EmpPlayerError('No valid entitlement found for asset', EmpPlayerErrorCodes.ENTITLEMENT);
          player.error(error);
          extplayer.stop(player);
          next(error);
          return;
        }
      });

      /**
       * Start up analytics
       * @param player
       * @param options
       * @param entitlementOptions
       * @param exposure
       */
      function startAnalytics_(player, options, entitlementOptions, exposure) {
        //backward compatibility with 1.x
        var analyticsDeviceInfo = options.analyticsDeviceInfo;
        if (analyticsDeviceInfo) {
          log$1.warn("options.analyticsDeviceInfo is deprecated. Use options.analytics.deviceInfo.");
          if (!options.analytics) {
            options.analytics = {};
          }
          options.analytics.deviceInfo = analyticsDeviceInfo;
        }
        if (player.analytics) {
          player.analytics().options({ 'exposure': exposure, 'analytics': options.analytics });
          player.analytics().newAnalytics({
            'exposureApiURL': entitlementOptions.exposureApiURL,
            'customer': entitlementOptions.customer,
            'businessUnit': entitlementOptions.businessUnit,
            'sessionToken': entitlementOptions.sessionToken
          });
          player.analytics().onEntitlementLoadStart();
        }
      }

      /**
       * Start the Program Service
       * @param player
       * @param options
       * @param exposure
       * @param srcEntitlement
       * @param callback
       */
      function startProgramService_(player, options, exposure, srcEntitlement, callback) {
        //Don't play behind the live egde
        if (player.options_.absoluteStartTime && player.options_.absoluteStartTime > exposure.getCachedServerTime()) {
          player.options_.absoluteStartTime = exposure.getCachedServerTime() - 10000;
        } else if (player.options_.startTime && player.options_.startTime > exposure.getCachedServerTime() / 1000) {
          player.options_.startTime = (exposure.getCachedServerTime() - 10000) / 1000;
        }

        var seekToProgramStart = false;
        if (player.programService && (!options.programService || !options.programService.disable)) {
          player.programService().options({ 'exposure': exposure });

          if (srcEntitlement.isDynamicCachupAsLive && options.playFrom) {
            var seekToProgramStart = options.playFrom === 'beginning' || !srcEntitlement.live && !player.options_.absoluteStartTime && !player.options_.startTime; //it's set by useLastViewedOffset or options.playFrom === 'startTime'
            if (seekToProgramStart) {
              //Use timeParams.start as startTime
              var startTime = srcEntitlement.streamInfo.start.getTime() + 100;
              log$1('SET startTime', startTime);
              if (player.techName_ === 'EmpShaka') {
                player.options({
                  startTime: startTime / 1000
                });
                srcEntitlement.options.startTime = startTime / 1000;
              } else {
                //EmpHLS
                player.options({
                  startTime: 0.1
                });
                srcEntitlement.options.startTime = 0.1;
              }
              // Get startTime from program
              //player.one(empPlayer.Events.PROGRAM_CHANGED, (event, data) => {
              //  var program = data.program;
              //  log('PROGRAM_CHANGED SET startTime', program.start)
              //  if (player.techName_ === 'EmpShaka') {
              //    player.options({
              //      startTime: program.start.getTime() / 1000
              //    });
              //    srcEntitlement.options.startTime = program.start.getTime() / 1000;
              //  }
              //  else {
              //    player.options({
              //      startTime: 0.1
              //    });
              //    srcEntitlement.options.startTime = 0.1;
              //  }
              //  callback();
              //});
            } else if (player.options_.absoluteStartTime) {
              //Don't play before program start
              if (player.options_.absoluteStartTime < srcEntitlement.streamInfo.start.getTime()) {
                player.options_.absoluteStartTime = srcEntitlement.streamInfo.start.getTime();
              }
              var _startTime = player.options_.absoluteStartTime;
              if (player.techName_ === 'EmpHLS') {
                _startTime = player.options_.absoluteStartTime - srcEntitlement.streamInfo.start.getTime();
              }

              log$1('absoluteStartTime SET startTime', _startTime);
              player.options({
                startTime: _startTime / 1000
              });
              srcEntitlement.options.startTime = _startTime / 1000;
              player.options_.absoluteStartTime = undefined;
              srcEntitlement.options.absoluteStartTime = undefined;
            } else if (player.options_.startTime) {
              srcEntitlement.options.startTime = player.options_.startTime;
              player.options_.absoluteStartTime = undefined;
              srcEntitlement.options.absoluteStartTime = undefined;
            }
          } else if (srcEntitlement.isStaticCachupAsLive && player.options_.absoluteStartTime) {
            //Don't play before program start
            if (player.options_.absoluteStartTime < srcEntitlement.streamInfo.start.getTime()) {
              player.options_.absoluteStartTime = srcEntitlement.streamInfo.start.getTime();
            }

            var _startTime2 = player.options_.absoluteStartTime - srcEntitlement.streamInfo.start.getTime();
            log$1('absoluteStartTime SET startTime', _startTime2);
            player.options({
              startTime: _startTime2 / 1000
            });
            srcEntitlement.options.startTime = _startTime2 / 1000;
            player.options_.absoluteStartTime = undefined;
            srcEntitlement.options.absoluteStartTime = undefined;
          } else if (srcEntitlement.isStaticCachupAsLive && player.options_.startTime) {
            srcEntitlement.options.startTime = player.options_.startTime;
            player.options_.absoluteStartTime = undefined;
            srcEntitlement.options.absoluteStartTime = undefined;
          }
          player.programService().start();
        }
        //if (!seekToProgramStart) {
        callback();
        //}
      }

      /**
       * Test if it's an entitlement
       * @param entitlement
       * @returns  {Boolean}
       */
      function isEntitlement_(entitlement) {
        return entitlement && entitlement.playSessionId && entitlement.playToken && entitlement.mediaLocator;
      }

      /**
       * Setup Entitlement
       * @param entitlement
       * @param tech
       */
      function setupEntitlement(entitlement, tech) {
        if (!entitlement) {
          log$1.error('setupEntitlement no entitlement');
          return;
        }
        if (options.useLastViewedOffset === true) {
          if ((entitlement.isStaticCachupAsLive || entitlement.isDynamicCachupAsLive || entitlement.live) && (entitlement.lastViewedTime || entitlement.liveTime)) {
            if (entitlement.liveTime) {
              log$1('liveTime', new Date(entitlement.liveTime), entitlement.liveTime);
              player.options({ 'absoluteStartTime': entitlement.liveTime });
            } else {
              log$1('lastViewedTime', new Date(entitlement.lastViewedTime), entitlement.lastViewedTime);
              player.options({ 'absoluteStartTime': entitlement.lastViewedTime });
            }
          } else if (entitlement.lastViewedOffset) {
            log$1('lastViewedOffset', entitlement.lastViewedOffset / 1000);
            //TODO Use startTime when we have VOD in new A/V pipe
            if (player.techName_ !== 'EmpShaka') {
              player.options({ 'startTime': entitlement.lastViewedOffset / 1000 });
            }
          }
        }

        if (entitlement.timeshiftEnabled === false) {
          player.options({ 'timeShiftDisabled': true });
        }
        player.trigger(empPlayerEvents.ENTITLEMENT_CHANGE, { 'entitlement': entitlement });

        entitlement = Object.assign(new Entitlement({}), entitlement);
        entitlement.type = entitlement.mimeType;
        // Grab tech-specific options from player options and add source.
        // Will be send to handleSource
        var playOptions = {
          'autoplay': player.options_.autoplay,
          'muted': player.options_.muted,
          'language': player.options_.language,
          'maxBitrate': player.options_.maxBitrate,
          'timeShiftDisabled': player.options_.timeShiftDisabled,
          'useLastViewedOffset': player.options_.useLastViewedOffset,
          'startTime': player.options_.startTime,
          'absoluteStartTime': player.options_.absoluteStartTime,
          'audioLanguage': player.options_.audioLanguage,
          'subtitleLanguage': player.options_.subtitleLanguage
        };
        entitlement.options = playOptions;
        // Change to new entitlement EMP-10229
        entitlement.options.source = entitlement;
        player.entitlementExpirationService().start();

        return entitlement;
      }
    }
  };
};

/**
* Return whether the past argument is an Exposure Service or not
*
* @param {Object} object An item to check
* @static
* @return {Boolean}      Wheter it is a entitlement engine or not
*/
EntitlementMiddleware.isExposure = function (object) {
  return EntitlementEngine.isEntitlementEngine(object);
};

EntitlementMiddleware.EntitlementClass = Entitlement;

/**
* Get an Exposure Service by name
*
* @param {String} name Name of the entitlement engine
* @static
* @returns {EntitlementEngine}
*/
EntitlementMiddleware.getExposure = function (options, name) {
  if (options) {
    var Exposure = EntitlementEngine.getEntitlementEngine(name ? name : 'EricssonExposure');
    return new Exposure(options);
  } else {
    throw new EmpPlayerError('Missing exposureOptions', EmpPlayerErrorCodes.ENTITLEMENT);
  }
};

/**
* Register an Exposure Service
*
* @param {String} name     Name of the entitlement engine
* @param entitlementEngine The entitlement engine to register
* @throws Error
* @static
*/
EntitlementMiddleware.registerExposure = function (name, entitlementEngine) {
  return EntitlementEngine.registerEntitlementEngine(name, entitlementEngine);
};

/**
* get the EMP log object
* @static
* @returns {*|log}
*/
EntitlementMiddleware.getLog = function () {
  return log$1;
};

EntitlementMiddleware.VERSION = '2.0.79-32';

// Register the plugin with video.js.
videojs$1.use('video/emp', EntitlementMiddleware);

var EMPAnalyticsConnector = function () {
  function EMPAnalyticsConnector(player, analytics, analyticsConfig) {
    classCallCheck(this, EMPAnalyticsConnector);

    this.INITIAL_REFERENCE_TIME = 1;
    this.player_ = player;
    this.analytics_ = analytics;
    this.sessionId_ = null;
    this.customAttributes = analyticsConfig.analytics && analyticsConfig.analytics.customAttributes;
    this.exposure = analyticsConfig.exposure;
    this.currentTimeTimer = null;
    this.onPlayBind = this.onPlay.bind(this);
    this.onResumedBind = this.onResume.bind(this);
    this.onPlayingBind = this.onPlaying.bind(this);
    this.onPauseBind = this.onPause.bind(this);
    this.onEndedBind = this.onEnded.bind(this);
    this.onErrorBind = this.onError.bind(this);
    this.onEntitlementLoadStartBind = this.onEntitlementLoadStart.bind(this);
    this.onBitrateChangeBind = this.onBitrateChange.bind(this);
    this.onDisposeBind = this.onDispose.bind(this);
    this.onLoadStartBind = this.onLoadStart.bind(this);
    this.onSeekedBind = this.onSeeked.bind(this);
    this.onWaitingBind = this.onWaiting.bind(this);
    this.onChromeCastingStartBind = this.onChromeCastingStart.bind(this);
    this.onChromeCastingStopBind = this.onChromeCastingStop.bind(this);
    this.onProgramChangeBind = this.onProgramChange.bind(this);
    this.onWaitingEndedBind = this.onWaitingEnded.bind(this);
    this.onErrorBeforeAssetBind = this.onErrorBeforeAsset.bind(this);
    this.onEntitlementChangeBind = this.onEntitlementChange.bind(this);
    this.onWindowUnloadBind = this.onWindowUnload.bind(this);
    this.onPlayingAfterStartBind = this.onPlayingAfterStart.bind(this);
    this.allEvents_ = Object.keys(empPlayerEvents).map(function (key) {
      return empPlayerEvents[key];
    });
    this.init();
    this.createdSessions = {};
    this.mem = {};
  }

  /**
   * Retrieves ongoing playback session id
   *
   */


  EMPAnalyticsConnector.prototype.SessionId = function SessionId(playSessionId) {
    if (!playSessionId) {
      if (!this.entitlement() || !this.entitlementLoaded_) {
        return 'error-' + Math.random().toString().split('.')[1];
      }
    }

    var sId = playSessionId ? playSessionId : this.entitlement().playSessionId;
    if (!this.mem[sId]) {
      this.mem[sId] = {
        'pause': {},
        'resume': {}
      };
    }
    return sId;
  };

  EMPAnalyticsConnector.prototype.hasSessionId = function hasSessionId() {
    if (!this.entitlement() || !this.entitlementLoaded_) {
      return false;
    }
    return true;
  };

  /**
   * Sends current playback time to analytics
   *
   */


  EMPAnalyticsConnector.prototype.sendCurrentTime = function sendCurrentTime() {
    var sessionId = this.SessionId();
    if (sessionId && this.player_ && this.analytics_.getSessionState && this.analytics_.getSessionState(sessionId) === 'PLAYING') {
      this.analytics_.setCurrentTime(sessionId, this.OffsetTime());
    }
  };

  /**
   * Registers a new timer
   *
   */


  EMPAnalyticsConnector.prototype.registerCurrentTimeTimer = function registerCurrentTimeTimer() {
    var _this = this;

    this.clearTimers();
    this.currentTimeTimer = setInterval(function () {
      _this.sendCurrentTime();
      var sessionId = _this.SessionId();
      if (sessionId && _this.analytics_ && _this.analytics_.ok && _this.analytics_.ok(sessionId) === false) {
        if (_this.exposure) {
          _this.exposure.verifySession(null, function () {
            if (_this.player_.el_) {
              _this.player_.trigger(empPlayerEvents.ERROR, '401 INVALID_SESSION_TOKEN: The session token is no longer valid.');
              extplayer.stop(_this.player_);
            }
            _this.clearTimers();
          });
        } else {
          log$1.error('registerCurrentTimeTimer Exposure is undefined');
        }
      }
    }, 1000);
  };

  /**
   * Method to unregister and clear timers
   *
   */


  EMPAnalyticsConnector.prototype.clearTimers = function clearTimers() {
    if (this.currentTimeTimer) {
      clearInterval(this.currentTimeTimer);
    }
    this.currentTimeTimer = null;
  };

  /**
   * Initialization method
   *
   */


  EMPAnalyticsConnector.prototype.init = function init() {
    if (!this.player_ || !this.analytics_) {
      log$1.warn('Warning: init failed . Possible causes: either player or analytics were not set.');
      return;
    }

    this.disabled_ = false;
    this.entitlementLoaded_ = false;
    log$1('Initialization EmpAnalytics');
    this.analytics_.init();
    window_1.addEventListener('beforeunload', this.onWindowUnloadBind);
    this.player_.on(empPlayerEvents.ENTITLEMENT_LOAD_START, this.onEntitlementLoadStartBind);
    this.player_.on(empPlayerEvents.PAUSE, this.onPauseBind);
    this.player_.on(empPlayerEvents.SEEKED, this.onSeekedBind);
    this.player_.on(empPlayerEvents.ENDED, this.onEndedBind);
    this.player_.on(empPlayerEvents.ERROR, this.onErrorBind);
    this.player_.on(empPlayerEvents.DISPOSE, this.onDisposeBind);
    this.player_.on(empPlayerEvents.STOPPED, this.onDisposeBind);
    this.player_.on(empPlayerEvents.BITRATE_CHANGED, this.onBitrateChangeBind);
    this.player_.on(empPlayerEvents.WAITING, this.onWaitingBind);
    this.player_.on(empPlayerEvents.CHROMECAST_CASTING, this.onChromeCastingStartBind);
    this.player_.on(empPlayerEvents.CHROMECAST_STOPPED, this.onChromeCastingStopBind);
    this.player_.on(empPlayerEvents.PROGRAM_CHANGED, this.onProgramChangeBind);
  };

  /**
   * Callback when user closes browser tab or refreshes the page
   *
   */


  EMPAnalyticsConnector.prototype.onWindowUnload = function onWindowUnload() {
    var _this2 = this;

    this.onGeneric('WindowClose', this.analytics_.dispose, function () {
      if (_this2.hasSessionId() === true) {
        _this2.analytics_.dispose(_this2.SessionId(), _this2.getCachedCurrentTime());
      }
      _this2.analytics_.dispatchNow(false);
      _this2.clearTimers();
    }, true);
  };

  /**
   * Callback when chromecast starts casting
   *
   */


  EMPAnalyticsConnector.prototype.onChromeCastingStart = function onChromeCastingStart() {
    var _this3 = this;

    this.onGeneric('StartCasting', this.analytics_.startCasting, function () {
      if (_this3.hasSessionId() === false) {
        return;
      }
      var sId = _this3.SessionId();
      if (sId) {
        _this3.analytics_.startCasting(_this3.SessionId(), _this3.OffsetTime());
      }
      _this3.clearTimers();
    }, false);
    this.disabled_ = true;
  };

  /**
   * Callback when chromecast stops casting and sender takes back playback session
   *
   */


  EMPAnalyticsConnector.prototype.onChromeCastingStop = function onChromeCastingStop() {
    var _this4 = this;

    this.disabled_ = false;
    this.onGeneric('StopCasting', this.analytics_.stopCasting, function () {
      if (_this4.hasSessionId() === false) {
        return;
      }
      _this4.analytics_.stopCasting(_this4.SessionId(), _this4.OffsetTime());
    }, false);
  };

  /**
   * Callback when Program Change
   *
   */


  EMPAnalyticsConnector.prototype.onProgramChange = function onProgramChange(event, data) {
    var _this5 = this;

    var program = data ? data.program : null;
    log$1('analytics', 'onProgramChange', program);
    if (program && this.analytics_.programChanged) {
      //Don't send ProgramChange if it's a new session
      if (this.player_.hasStarted()) {
        this.onGeneric('ProgramChange', this.analytics_.programChanged, function () {
          _this5.analytics_.programChanged(_this5.SessionId(), _this5.OffsetTime(), { 'programId': program.programId });
        }, true);
      }
    }
  };

  /**
   * Callback when there is an event to change entitlement
   *
   */


  EMPAnalyticsConnector.prototype.onEntitlementChange = function onEntitlementChange(event, data, errorId) {
    var _this6 = this;

    this.entitlementLoaded_ = true;
    this.player_.off(empPlayerEvents.ERROR, this.onErrorBeforeAssetBind);
    //entitlement method will cache entitlement
    var entitlement = this.entitlement(data && data.entitlement);
    this.onGeneric('HandShake', this.analytics_.handshake, function () {
      var params = {};
      if (entitlement && entitlement.assetId) {
        params.assetId = entitlement.assetId;
      }
      if (entitlement && entitlement.programId) {
        params.programId = entitlement.programId;
      }
      //Use this new playSessionId
      var playSessionId = entitlement ? entitlement.playSessionId : errorId;
      _this6.analytics_.handshake(_this6.SessionId(playSessionId), params);
      _this6.onLoadStart(playSessionId);
    }, false);
  };

  /**
   * Callback when starting to load an entitlement
   *
   */


  EMPAnalyticsConnector.prototype.onEntitlementLoadStart = function onEntitlementLoadStart() {
    var _this7 = this;

    this.entitlementLoaded_ = false;
    this.onGeneric('ExitOngoingSession', this.analytics_.exitOngoingSession, function () {
      return _this7.analytics_.exitOngoingSession(_this7.getCachedCurrentTime());
    });
    this.player_.one(empPlayerEvents.ERROR, this.onErrorBeforeAssetBind);
    this.player_.one(empPlayerEvents.ENTITLEMENT_CHANGE, this.onEntitlementChangeBind);
  };

  /**
   * Callback when starting to load new media chunks
   *
   */


  EMPAnalyticsConnector.prototype.onLoadStart = function onLoadStart(playSessionId) {
    var _this8 = this;

    var currentSessionId = playSessionId ? playSessionId : this.SessionId();
    if (!currentSessionId) {
      log$1('onLoadStart called but not session available.');
      return;
    }
    if (!this.sessionCreated(currentSessionId)) {
      this.createdSessions[currentSessionId] = true;
      this.onGeneric('Created', this.analytics_.created, function () {
        var options = _this8.player_.options();
        var params = {
          'version': _this8.playerVersion
        };
        if (options && options.autoplay) {
          params.autoplay = options.autoplay;
        }
        _this8.analytics_.created(currentSessionId, params);
      }, false);
      this.player_.off(empPlayerEvents.PLAYING, this.onResumedBind);
      this.player_.off(empPlayerEvents.PLAYING, this.onPlayingAfterStartBind);
      this.player_.one(empPlayerEvents.PLAYING, this.onPlayingAfterStartBind);
    }
  };

  /**
   * Callback when there is a playing event after load started
   *
   */


  EMPAnalyticsConnector.prototype.onPlayingAfterStart = function onPlayingAfterStart() {
    this.onPlayBind();
    this.onPlayingBind();
    this.player_.on(empPlayerEvents.PLAYING, this.onResumedBind);
  };

  /**
   * Callback when there is a bitrate change in the playback
   *
   */


  EMPAnalyticsConnector.prototype.onBitrateChange = function onBitrateChange() {
    var _this9 = this;

    this.onGeneric('BitrateChange', this.analytics_.bitrateChanged, function () {
      var params = {
        'bitrate': Math.max(0, Math.round(_this9.getBitrate() / 1024))
      };
      _this9.analytics_.bitrateChanged(_this9.SessionId(), _this9.OffsetTime(), params);
    }, true);
  };

  /**
   * Callback when playback enters a waiting state
   *
   */


  EMPAnalyticsConnector.prototype.onWaiting = function onWaiting() {
    var _this10 = this;

    this.onGeneric('StartWaiting', this.analytics_.waiting, function () {
      if (_this10.player_.hasStarted()) {
        _this10.analytics_.waiting(_this10.SessionId(), _this10.OffsetTime());
      }
      _this10.allEvents_.map(function (eventName) {
        if (eventName === empPlayerEvents.PLAY || eventName === empPlayerEvents.PLAYING || eventName === empPlayerEvents.ENDED || eventName === empPlayerEvents.ERROR || eventName === empPlayerEvents.DISPOSE || eventName === empPlayerEvents.SEEKED || eventName === empPlayerEvents.CHROMECAST_CASTING || eventName === empPlayerEvents.CHROMECAST_STOPPED) {
          _this10.player_.one(eventName, _this10.onWaitingEndedBind);
        }
      });
    }, true);
  };

  EMPAnalyticsConnector.prototype.OffsetTime = function OffsetTime() {
    if (this.entitlement() && (this.entitlement().isStaticCachupAsLive || this.entitlement().isDynamicCachupAsLive)) {
      return extplayer.getPlayheadTime(this.player_) / 1000;
    }
    return extplayer.baseCurrentTime(this.player_);
  };

  EMPAnalyticsConnector.prototype.startTimeLive = function startTimeLive() {
    return extplayer.startTimeLive(this.player_);
  };

  EMPAnalyticsConnector.prototype.isLive = function isLive() {
    return extplayer.isLive(this.player_);
  };

  EMPAnalyticsConnector.prototype.getBitrate = function getBitrate() {
    return extplayer.getBitrate(this.player_);
  };

  EMPAnalyticsConnector.prototype.duration = function duration() {
    if (this.entitlement() && (this.entitlement().isStaticCachupAsLive || this.entitlement().isDynamicCachupAsLive)) {
      if (this.player_.getProgramDetails && this.player_.getProgramDetails()) {
        return this.player_.getProgramDetails().duration / 1000;
      }
    }
    return extplayer.duration(this.player_);
  };

  EMPAnalyticsConnector.prototype.entitlement = function entitlement(value) {
    if (typeof value === 'undefined') {
      return extplayer.getEntitlement(this.player_) || this.entitlement_;
    }
    this.entitlement_ = value;
    return value;
  };

  /**
   * Callback when playback leaves a waiting state
   *
   */


  EMPAnalyticsConnector.prototype.onWaitingEnded = function onWaitingEnded() {
    var _this11 = this;

    this.allEvents_.map(function (eventNameOff) {
      _this11.player_.off(eventNameOff, _this11.onWaitingEndedBind);
    });
    this.onGeneric('WaitingEnded', this.analytics_.waitingEnded, function () {
      _this11.analytics_.waitingEnded(_this11.SessionId(), _this11.OffsetTime());
    }, true);
  };

  /**
   * Callback when playback exists
   *
   */


  EMPAnalyticsConnector.prototype.onDispose = function onDispose() {
    var _this12 = this;

    this.onGeneric('Dispose', this.analytics_.dispose, function () {
      if (_this12.hasSessionId() === false) {
        return;
      }
      _this12.analytics_.dispose(_this12.SessionId(), _this12.getCachedCurrentTime());
      _this12.clearTimers();
    }, true, true);
  };

  EMPAnalyticsConnector.prototype.getCachedCurrentTime = function getCachedCurrentTime() {
    if (this.player_) {
      var cachedcurrentTime = this.player_.getCache().currentTime;
      var currentTime = this.OffsetTime();
      return currentTime ? currentTime : cachedcurrentTime;
    }
    return undefined;
  };

  /**
   * Callback when playback is finished
   *
   */


  EMPAnalyticsConnector.prototype.onEnded = function onEnded() {
    var _this13 = this;

    this.onGeneric('End of Stream', this.analytics_.endOfStream, function () {
      _this13.analytics_.endOfStream(_this13.SessionId());
      _this13.clearTimers();
    }, true, true);
  };

  /**
   * Callback when play command is triggered
   *
   */


  EMPAnalyticsConnector.prototype.onPlay = function onPlay() {
    var _this14 = this;

    this.onGeneric('Play', this.analytics_.play, function () {
      var tech = _this14.player_.techName_;
      var techName = 'Unknown';
      switch (tech) {
        case 'EmpShaka':
          techName = 'Shaka';
          break;
        case 'EmpDash':
          techName = 'DashJS';
          break;
        case 'EmpFlash':
          techName = 'Flash';
          break;
        case 'EmpHLS':
          techName = 'NativeHLS';
          break;
      }
      var params = {
        'techName': techName,
        'version': _this14.playerVersion,
        'techVersion': _this14.techVersion
      };
      _this14.analytics_.play(_this14.SessionId(), _this14.OffsetTime(), params);
      _this14.registerCurrentTimeTimer();
    }, false);
  };

  /**
   * Callback when media is playing
   *
   */


  EMPAnalyticsConnector.prototype.onPlaying = function onPlaying() {
    var _this15 = this;

    this.onGeneric('Playing', this.analytics_.playing, function () {
      var params = {};
      params.bitrate = Math.max(0, Math.round(_this15.getBitrate() / 1024));
      if (_this15.isLive() === true) {
        params.referenceTime = _this15.startTimeLive();
      } else {
        params.duration = _this15.duration();
      }
      if (_this15.entitlement() && _this15.entitlement().mediaLocator) {
        params.mediaLocator = _this15.entitlement().mediaLocator;
      }

      if (params.mediaLocator && params.mediaLocator.indexOf('.isml') >= 0) {
        params.referenceTime = _this15.INITIAL_REFERENCE_TIME;
      }

      _this15.analytics_.clearCustomAttributes();
      (_this15.customAttributes || []).map(function (item) {
        _this15.analytics_.setCustomAttribute(item.key, item.value);
      });

      _this15.analytics_.playing(_this15.SessionId(), _this15.OffsetTime(), params);
    }, false);
  };

  /**
   * Callback when media is seeked
   *
   */


  EMPAnalyticsConnector.prototype.onSeeked = function onSeeked() {
    var _this16 = this;

    this.onGeneric('Seeked', this.analytics_.seek, function () {
      _this16.analytics_.seek(_this16.SessionId(), _this16.OffsetTime());
    }, true);
  };

  /**
   * Callback when playback is paused
   *
   */


  EMPAnalyticsConnector.prototype.onPause = function onPause() {
    var _this17 = this;

    this.onGeneric('Pause', this.analytics_.paused, function () {
      if (_this17.player_.hasStarted() === false) {
        return;
      }
      var sId = _this17.SessionId();
      var refTim = parseInt((new Date() - 0) / 25);
      if (_this17.mem[sId]['pause'][refTim]) {
        return;
      }
      _this17.mem[sId]['pause'][refTim] = true;
      _this17.analytics_.paused(sId, _this17.OffsetTime());
    }, true);
  };

  /**
   * Callback when playback is resumed
   *
   */


  EMPAnalyticsConnector.prototype.onResume = function onResume() {
    var _this18 = this;

    this.onGeneric('Resume', this.analytics_.resume, function () {
      var sId = _this18.SessionId();
      var refTim = parseInt((new Date() - 0) / 25);
      if (_this18.mem[sId]['resume'][refTim]) {
        return;
      }
      _this18.mem[sId]['resume'][refTim] = true;
      _this18.analytics_.resume(sId, _this18.OffsetTime());
    }, true);
  };

  /**
   * Callback when error occurs before loading the asset
   *
   */


  EMPAnalyticsConnector.prototype.onErrorBeforeAsset = function onErrorBeforeAsset() {
    this.entitlementLoaded_ = false;
    var errorId = 'error-' + Math.random().toString().split('.')[1];
    this.onEntitlementChange(null, null, errorId);
    this.onError(null, errorId);
    this.clearTimers();
    //this.entitlementLoaded_ = true;
  };

  /**
   * Callback when error occurs
   *
   */


  EMPAnalyticsConnector.prototype.onError = function onError() {
    var _this19 = this;

    var errorEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var fallbackSessionId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!fallbackSessionId && !this.entitlementLoaded_) {
      return;
    }
    this.onGeneric('Error', this.analytics_.error, function () {
      var err = _this19.player_.error();
      var params = {};
      if (err && err.code) {
        params.errorCode = err.code;
      }
      if (err && err.message) {
        params.errorMessage = err.message;
      }
      if (!err && errorEvent) {
        params.errorCode = errorEvent.code;
        params.errorMessage = errorEvent.message ? errorEvent.message : 'Unknown Error';
      }
      var currentSessId = _this19.SessionId();
      if (currentSessId || fallbackSessionId) {
        _this19.analytics_.error(currentSessId || fallbackSessionId, _this19.OffsetTime(), params);
      }
      _this19.clearTimers();
    }, false);
  };

  /**
   * Generic analytics function
   *
   */


  EMPAnalyticsConnector.prototype.onGeneric = function onGeneric(eventName, eventFnc, callback, checkSessionCreation) {
    var ignoreDisabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    if (this.disabled_ && !ignoreDisabled) {
      log$1(eventName + ' not delivered: analytics disabled.');
      return;
    }
    if (checkSessionCreation && !this.sessionCreated(this.SessionId())) {
      log$1(eventName + ' was discarded.');
    } else if (eventFnc && callback) {
      callback();
    }
  };

  /**
   * Check if a session with given sessionId was already created
   *
   */


  EMPAnalyticsConnector.prototype.sessionCreated = function sessionCreated(sessionId) {
    return sessionId && this.createdSessions[sessionId];
  };

  /**
   * Cleanup and unregister events to send to analytics
   *
   */


  EMPAnalyticsConnector.prototype.dispose = function dispose() {
    this.clearTimers();
    if (this.analytics_) {
      this.analytics_.exitOngoingSession(this.getCachedCurrentTime());
      this.analytics_.dispatchNow(false);
    }
    window_1.removeEventListener('beforeunload', this.onWindowUnloadBind);
    this.player_.off(empPlayerEvents.PLAY, this.onPlayBind);
    this.player_.off(empPlayerEvents.PLAYING, this.onPlayingBind);
    this.player_.off(empPlayerEvents.PLAYING, this.onResumedBind);
    this.player_.off(empPlayerEvents.PAUSE, this.onPauseBind);
    this.player_.off(empPlayerEvents.SEEKED, this.onSeekedBind);
    this.player_.off(empPlayerEvents.ENTITLEMENT_LOAD_START, this.onEntitlementLoadStartBind);
    this.player_.off(empPlayerEvents.ENTITLEMENT_CHANGE, this.onEntitlementChangeBind);
    this.player_.off(empPlayerEvents.BITRATE_CHANGED, this.onBitrateChangeBind);
    this.player_.off(empPlayerEvents.ENDED, this.onEndedBind);
    this.player_.off(empPlayerEvents.DISPOSE, this.onDisposeBind);
    this.player_.off(empPlayerEvents.STOPPED, this.onDisposeBind);
    this.player_.off(empPlayerEvents.ERROR, this.onErrorBind);
    this.player_.off(empPlayerEvents.ERROR, this.onErrorBeforeAssetBind);
    this.player_.off(empPlayerEvents.WAITING, this.onWaitingBind);
    this.player_.off(empPlayerEvents.CHROMECAST_CASTING, this.onChromeCastingStartBind);
    this.player_.off(empPlayerEvents.CHROMECAST_STOPPED, this.onChromeCastingStopBind);
    this.player_.off(empPlayerEvents.PROGRAM_CHANGED, this.onProgramChangeBind);
    this.player_.off(empPlayerEvents.PLAYING, this.onPlayingAfterStartBind);
  };

  createClass(EMPAnalyticsConnector, [{
    key: 'techVersion',
    get: function get$$1() {
      return extplayer.techVersion(this.player_);
    }
  }, {
    key: 'playerVersion',
    get: function get$$1() {
      if (!this.player_.version) return window_1.videojs ? window_1.videojs.VERSION : '2.x.x';

      return this.player_.version;
    }
  }]);
  return EMPAnalyticsConnector;
}();

var empAnalytics_min = createCommonjsModule(function (module, exports) {
!function(a){module.exports=a();}(function(){var a;return function b(a,c,d){function e(g,h){if(!c[g]){if(!a[g]){var i="function"==typeof commonjsRequire&&commonjsRequire;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module '"+g+"'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};a[g][0].call(k.exports,function(b){var c=a[g][1][b];return e(c?c:b)},k,k.exports,b,a,c,d);}return c[g].exports}for(var f="function"==typeof commonjsRequire&&commonjsRequire,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(b,c,d){!function(b,e){"object"==typeof d&&"undefined"!=typeof c?e(d):"function"==typeof a&&a.amd?a(["exports"],e):e(b.fastUniqueNumbers={});}(this,function(a){"use strict";var b=new WeakMap,c=Number.MAX_SAFE_INTEGER||9007199254740991,d=function(a){var d=b.get(a),e=void 0===d||d>2147483648?0:d+1;if(a.size<1073741824){for(;a.has(e);)e=Math.floor(2147483648*Math.random());return b.set(a,e),e}if(a.size>c)throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");for(;a.has(e);)e=Math.floor(Math.random()*c);return b.set(a,e),e},e=function(a){var b=d(a);return a.add(b),b};a.addUniqueNumber=e,a.generateUniqueNumber=d,Object.defineProperty(a,"__esModule",{value:!0});});},{}],2:[function(a,b,c){(function(a){var c;c="undefined"!=typeof window?window:"undefined"!=typeof a?a:"undefined"!=typeof self?self:{},b.exports=c;}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],3:[function(b,c,d){!function(e,f){"object"==typeof d&&"undefined"!=typeof c?f(d,b("fast-unique-numbers")):"function"==typeof a&&a.amd?a(["exports","fast-unique-numbers"],f):f(e.workerTimersBroker={},e.fastUniqueNumbers);}(this,function(a,b){"use strict";var c=function(a){return void 0!==a.method&&"call"===a.method},d=function(a){return null===a.error&&"number"==typeof a.id},e=function(a){var e=new Map,f=new Map,g=new Map,h=new Worker(a);h.addEventListener("message",function(a){var b=a.data;if(c(b)){var h=b.params,i=h.timerId,j=h.timerType;if("interval"===j){var k=e.get(i);if("number"==typeof k){var l=g.get(k);if(void 0===l||l.timerId!==i||l.timerType!==j)throw new Error("The timer is in an undefined state.")}else{if("undefined"==typeof k)throw new Error("The timer is in an undefined state.");k();}}else if("timeout"===j){var m=f.get(i);if("number"==typeof m){var n=g.get(m);if(void 0===n||n.timerId!==i||n.timerType!==j)throw new Error("The timer is in an undefined state.")}else{if("undefined"==typeof m)throw new Error("The timer is in an undefined state.");m(),f["delete"](i);}}}else{if(!d(b)){var o=b.error.message;throw new Error(o)}var p=b.id,q=g.get(p);if(void 0===q)throw new Error("The timer is in an undefined state.");var r=q.timerId,s=q.timerType;g["delete"](p),"interval"===s?e["delete"](r):f["delete"](r);}});var i=function(a){var c=b.generateUniqueNumber(g);g.set(c,{timerId:a,timerType:"interval"}),e.set(a,c),h.postMessage({id:c,method:"clear",params:{timerId:a,timerType:"interval"}});},j=function(a){var c=b.generateUniqueNumber(g);g.set(c,{timerId:a,timerType:"timeout"}),f.set(a,c),h.postMessage({id:c,method:"clear",params:{timerId:a,timerType:"timeout"}});},k=function(a,c){var d=b.generateUniqueNumber(e);return e.set(d,function(){a(),"function"==typeof e.get(d)&&h.postMessage({id:null,method:"set",params:{delay:c,now:performance.now(),timerId:d,timerType:"interval"}});}),h.postMessage({id:null,method:"set",params:{delay:c,now:performance.now(),timerId:d,timerType:"interval"}}),d},l=function(a,c){var d=b.generateUniqueNumber(f);return f.set(d,a),h.postMessage({id:null,method:"set",params:{delay:c,now:performance.now(),timerId:d,timerType:"timeout"}}),d};return{clearInterval:i,clearTimeout:j,setInterval:k,setTimeout:l}};a.load=e,Object.defineProperty(a,"__esModule",{value:!0});});},{"fast-unique-numbers":1}],4:[function(b,c,d){!function(e,f){"object"==typeof d&&"undefined"!=typeof c?f(d,b("worker-timers-broker")):"function"==typeof a&&a.amd?a(["exports","worker-timers-broker"],f):f(e.workerTimers={},e.workerTimersBroker);}(this,function(a,b){"use strict";var c='!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n=new Map,i=new Map,o=function(e,t){var r=void 0,n=void 0;if("performance"in self){var i=performance.now();r=i,n=e-Math.max(0,i-t)}else r=Date.now(),n=e;return{expected:r+n,remainingDelay:n}},a=function e(t,r,n,i){var o="performance"in self?performance.now():Date.now();o>n?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,n-o,t,r,n,i))};addEventListener("message",function(e){var t=e.data;try{if("clear"===t.method){var r=t.id,s=t.params,u=s.timerId,l=s.timerType;if("interval"===l)!function(e){var t=n.get(e);if(void 0===t)throw new Error(\'There is no interval scheduled with the given id "\'+e+\'".\');clearTimeout(t),n.delete(e)}(u),postMessage({error:null,id:r});else{if("timeout"!==l)throw new Error(\'The given type "\'+l+\'" is not supported\');!function(e){var t=i.get(e);if(void 0===t)throw new Error(\'There is no timeout scheduled with the given id "\'+e+\'".\');clearTimeout(t),i.delete(e)}(u),postMessage({error:null,id:r})}}else{if("set"!==t.method)throw new Error(\'The given method "\'+t.method+\'" is not supported\');var d=t.params,c=d.delay,p=d.now,f=d.timerId,m=d.timerType;if("interval"===m)!function(e,t,r){var i=o(e,r),s=i.expected,u=i.remainingDelay;n.set(t,setTimeout(a,u,n,t,s,"interval"))}(c,f,p);else{if("timeout"!==m)throw new Error(\'The given type "\'+m+\'" is not supported\');!function(e,t,r){var n=o(e,r),s=n.expected,u=n.remainingDelay;i.set(t,setTimeout(a,u,i,t,s,"timeout"))}(c,f,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}})}]);',d=new Blob([c],{type:"application/javascript; charset=utf-8"}),e=URL.createObjectURL(d),f=b.load(e),g=f.clearInterval,h=f.clearTimeout,i=f.setInterval,j=f.setTimeout;a.clearInterval=g,a.clearTimeout=h,a.setInterval=i,a.setTimeout=j,Object.defineProperty(a,"__esModule",{value:!0});});},{"worker-timers-broker":3}],5:[function(a,b,c){"use strict";function d(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b["default"]=a,b}function e(a){return a&&a.__esModule?a:{"default":a}}function f(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}c.__esModule=!0;var g=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d);}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),h=a("global/window"),i=e(h),j=a("./platform"),k=e(j),l=a("worker-timers"),m=d(l),n=function(){function a(b,c,d,e,g){var h=arguments.length<=5||void 0===arguments[5]?{}:arguments[5],i=arguments.length<=6||void 0===arguments[6]?{}:arguments[6];f(this,a),this.CYCLE_TIME=1e3,this.EVENT_PURGE_TIME_DEFAULT=3*this.CYCLE_TIME,this.TIME_WITHOUT_BEAT_DEFAULT=60*this.CYCLE_TIME,this.SERVER_URL_DEFAULT="",this.CUSTOMER_DEFAULT="",this.BUSINESS_UNIT_DEFAULT="",this.INCLUDE_DEVICE_METRICS_DEFAULT=!0,this.SESSION_TOKEN_DEFAULT="",this.SESSION_ID_DEFAULT="",this.DEBUG_DEFAULT=!1,this.MAX_RETRIES=20,this.DEVICE_CLOCK_CHECK_THRESHOLD=3e5,this.eventsSkeleton=this.initEventSkeleton(),this.customer_=c,this.businessUnit_=d,this.sessionToken_=e,this.serverURL_=b,this.includeDeviceMetrics_=!1,this.userId_=g,this.deviceInfoData_=h,this.props_=i||{},this.pendingRequest_=!1;}return a.prototype.init=function(){var a=this;this.cycleTimer&&("undefined"!=typeof Worker&&this.props_.disableWebWorkers!==!0?m.clearInterval(this.cycleTimer):clearInterval(this.cycleTimer)),"undefined"!=typeof Worker&&this.props_.disableWebWorkers!==!0?this.cycleTimer=m.setInterval(function(){return a.cycle()},this.CYCLE_TIME):this.cycleTimer=setInterval(function(){return a.cycle()},this.CYCLE_TIME),this.communicationCurrentTime=0,this.lastCommunicationTime=0,this.eventPool={};},a.prototype.clear=function(){this.eventPool={};},a.prototype.ok=function(a){var b=this.eventPool[a];return!!b&&(b.forbidden===!1&&b.retries<this.MAX_RETRIES)},a.prototype.created=function(a){var b=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],c={type:"Created"};this.addEventToPool(a,c,b);},a.prototype.play=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"PlayerReady",currentTime:b};this.deviceAppInfo&&(c.deviceAppInfo=this.deviceAppInfo),this.addEventToPool(a,d,c);},a.prototype.playing=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"Started",currentTime:b};if(this.customAttributes){var e=Object.keys(this.customAttributes);e.length&&e.length>0&&(c.attributes=this.customAttributes);}this.addEventToPool(a,d,c),this.changeSessionState(a,"PLAYING");},a.prototype.paused=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"Paused",currentTime:b};this.addEventToPool(a,d,c,!0);},a.prototype.seek=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"ScrubbedTo",currentTime:b};this.addEventToPool(a,d,c,!0);},a.prototype.programChanged=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"ProgramChanged",currentTime:b};this.addEventToPool(a,d,c,!0);},a.prototype.startCasting=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"StartCasting",currentTime:b};this.addEventToPool(a,d,c,!0),this.changeSessionState(a,"DIRTY");},a.prototype.stopCasting=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"StopCasting",currentTime:b};this.addEventToPool(a,d,c,!0);},a.prototype.setCurrentTime=function(a,b){this.eventPool[a]&&(this.eventPool[a].currentTime=b);},a.prototype.handshake=function(a){var b=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],c={type:"HandshakeStarted"};this.addEventToPool(a,c,b);},a.prototype.resume=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"Resumed",currentTime:b};this.addEventToPool(a,d,c,!0);},a.prototype.bitrateChanged=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"BitrateChanged",currentTime:b};this.addEventToPool(a,d,c,!0);},a.prototype.endOfStream=function(a){var b=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],c={type:"Completed"};this.addEventToPool(a,c,b,!0),this.changeSessionState(a,"FINISHED");},a.prototype.error=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"Error",currentTime:b};this.changeSessionState(a,"DIRTY"),this.addEventToPool(a,d,c);},a.prototype.dispose=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"Aborted"};b&&(d.currentTime=b),this.addEventToPool(a,d,c,!0),this.changeSessionState(a,"FINISHED");},a.prototype.waiting=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"BufferingStarted",currentTime:b};this.addEventToPool(a,d,c);},a.prototype.waitingEnded=function(a,b){var c=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],d={type:"BufferingEnded",currentTime:b};this.addEventToPool(a,d,c);},a.prototype.getSessionState=function(a){return this.eventPool[a]?this.eventPool[a].currentState||"IDLE":"IDLE"},a.prototype.dispatchNow=function(){var a=arguments.length<=0||void 0===arguments[0]||arguments[0];this.cycle(a,!0);},a.prototype.exitOngoingSession=function(a){var b=this,c=Object.keys(this.eventPool);c.map(function(c){b.eventPool[c]&&b.dispose(c,a);});},a.prototype.setCustomAttribute=function(a,b){this.customAttributes||this.resetAnalyticsCustomAttributes(),this.customAttributes[a]=b;},a.prototype.clearCustomAttributes=function(){this.customAttributes={};},a.prototype.removeSession=function(a){var b=!(arguments.length<=1||void 0===arguments[1])&&arguments[1];if(b===!0)delete this.eventPool[a];else{var c=this.eventPool[a];c&&(c.currentState="REMOVED");}},a.prototype.hasDataToSend=function(){for(var a=Object.keys(this.eventPool),b=0;b<a.length;++b)if(this.eventPool[a[b]].events.length>0)return!0;return!1},a.prototype.sendData=function(){var a=this,b=arguments.length<=0||void 0===arguments[0]||arguments[0],c=!(arguments.length<=1||void 0===arguments[1])&&arguments[1];if(!this.pendingRequest_){var d=!1;this.pendingRequest_=!0;var e=void 0;e="undefined"!=typeof Worker&&this.props_.disableWebWorkers!==!0?m.setTimeout(function(){a.pendingRequest_=!1,e=void 0;},2*this.EVENT_PURGE_TIME_DEFAULT):setTimeout(function(){a.pendingRequest_=!1,e=void 0;},2*this.EVENT_PURGE_TIME_DEFAULT);var f=Object.keys(this.eventPool);f.map(function(f){var g=a.eventPool[f];if(g){if(!f)return g.events=[],void a.removeSession(f,!0);if("PLAYING"===g.currentState&&0===g.events.length&&c&&g.events.push({EventType:"Playback.Heartbeat",Timestamp:(new Date).getTime(),OffsetTime:Math.floor(1e3*g.currentTime)}),"IDLE"!==g.currentState&&"REMOVED"!==g.currentState){if(0===g.events.length)return void("FINISHED"===g.currentState&&a.removeSession(f));var h={DispatchTime:(new Date).getTime(),Customer:a.customer_,BusinessUnit:a.businessUnit_,Payload:g.events,SessionId:f,ClockOffset:g.clockOffset};if(a.debugLog("Sending analytics - sessionId: "+f+" and params: ",h),g.retries>a.MAX_RETRIES||g.forbidden===!0)return void(g.events=[]);Math.abs(a.communicationCurrentDate-a.lastCommunicationDate)>a.DEVICE_CLOCK_CHECK_THRESHOLD&&a.initRequest(f),d=!0,a.sendRequest(b,h,function(b,c){if(e)try{"undefined"!=typeof Worker&&a.props_.disableWebWorkers!==!0?(m.clearTimeout(e),e=void 0):(clearTimeout(e),e=void 0);}catch(d){}a.pendingRequest_=!1;var h=b&&b.httpCode?b.httpCode:200;"undefined"!=typeof c||200!==h?(401===h&&(g.forbidden=!0),a.debugLog("Error sending request to backend",c),g.retries++):(g.events=[],g.retries=0,"FINISHED"===g.currentState&&a.removeSession(f));});}}}),d||(this.pendingRequest_=!1);}},a.prototype.cycle=function(){var a=arguments.length<=0||void 0===arguments[0]||arguments[0],b=!(arguments.length<=1||void 0===arguments[1])&&arguments[1];this.communicationCurrentDate=new Date,this.communicationCurrentTime+=this.CYCLE_TIME,this.hasDataToSend()?(b||this.lastCommunicationTime+this.EVENT_PURGE_TIME_DEFAULT<this.communicationCurrentTime)&&(this.sendData(a),this.lastCommunicationTime=this.communicationCurrentTime,this.lastCommunicationDate=this.communicationCurrentDate):(b||this.lastCommunicationTime+this.TIME_WITHOUT_BEAT_DEFAULT<this.communicationCurrentTime)&&(this.sendData(a,!0),this.lastCommunicationTime=this.communicationCurrentTime,this.lastCommunicationDate=this.communicationCurrentDate);},a.prototype.sendRequest=function(a,b,c){var d=new XMLHttpRequest;d.open("POST",this.serverURL_+"/eventsink/send",a),d.setRequestHeader("Content-type","application/json"),d.setRequestHeader("Authorization","Bearer "+this.sessionToken_),d.onload=function(){var a=JSON.parse(this.responseText);c(a);},d.onerror=function(a){c(null,a);},d.send(JSON.stringify(b));},a.prototype.initRequest=function(a,b,c){var d=this,e=(new Date).getTime(),f=new XMLHttpRequest;f.open("POST",this.serverURL_+"/eventsink/init",!0),f.setRequestHeader("Content-type","application/json"),f.setRequestHeader("Authorization","Bearer "+this.sessionToken_),f.onload=function(){var c=(new Date).getTime(),g=JSON.parse(f.responseText);if(d.determineClockOffset(a,g,e,c),g&&g.settings){g.settings;g.settings.includeDeviceMetrics&&(d.includeDeviceMetrics_=!!g.settings.includeDeviceMetrics);}b&&b();},f.onerror=function(a){d.debugLog("Unable to init. Aborting."),c&&c();};var g={Customer:this.customer_,BusinessUnit:this.businessUnit_,SessionId:a};f.send(JSON.stringify(g));},a.prototype.debugLog=function(a,b){b=b||"",this.debug_;},a.prototype.addDeviceInfoEvent=function(a){var b=this.eventPool[a];if(this.includeDeviceMetrics_&&b&&b.events&&b.events.length){var c={Timestamp:(new Date).getTime(),EventType:"Device.Info",DeviceModel:this.deviceInfoData_.deviceModel||"Desktop",UserAgent:this.deviceInfoData_.userAgent||i["default"].navigator.userAgent,Height:this.deviceInfoData_.screenHeight||i["default"].screen.height,Width:this.deviceInfoData_.screenWidth||i["default"].screen.width,Model:this.deviceInfoData_.model||i["default"].navigator.appName,Name:this.deviceInfoData_.deviceName||i["default"].navigator.product,OS:this.deviceInfoData_.deviceOS||k["default"].os.family,OSVersion:this.deviceInfoData_.deviceOSVersion||k["default"].os.version,Type:this.deviceInfoData_.type||"WEB"};(this.deviceInfoData_.deviceManufacturer||k["default"].manufacturer)&&(c.Manufacturer=this.deviceInfoData_.deviceManufacturer||k["default"].manufacturer),this.deviceInfoData_.deviceId&&(c.DeviceId=this.deviceInfoData_.deviceId),b.events.push(c);}},a.prototype.determineClockOffset=function(a,b,c,d){var e=this.eventPool[a];e&&(e.clockOffset=Math.floor((d-b.repliedTime+c-b.receivedTime)/2));},a.prototype.createPool=function(a){var b=this;this.eventPool[a]={currentState:"IDLE",currentTime:0,clockOffset:0,events:[],retries:0,forbidden:!1},this.initRequest(a,function(){return b.addDeviceInfoEvent(a)});},a.prototype.addEventToPool=function(a,b,c){var d=!(arguments.length<=3||void 0===arguments[3])&&arguments[3];if(!d||!this.eventPool[a]||"FINISHED"!==this.eventPool[a].currentState&&"REMOVED"!==this.eventPool[a].currentState){this.eventPool[a]||this.createPool(a);var e=this.eventsSkeleton[b.type];if(!e)return void this.debugLog("Unknown playback event: ",b);var f={Timestamp:(new Date).getTime(),EventType:"Playback."+e.event};e.includeOffset&&(f.OffsetTime=Math.floor(1e3*b.currentTime)),e.attributes&&"function"==typeof e.attributes&&(f=this.objectAssign(f,e.attributes(c))),this.eventPool[a].events.push(f),this.debugLog("added "+e.event+" to queue");}},a.prototype.changeSessionState=function(a,b){this.eventPool[a]||this.createPool(a),this.eventPool[a].currentState=b;},a.prototype.initEventSkeleton=function(){var a={};return a.Completed={event:"Completed",autoListener:!1},a.PlayerReady={event:"PlayerReady",autoListener:!1,attributes:function(a){var b={Technology:a.techName,PlayerVersion:a.version};return a.techVersion&&(b.TechVersion=a.techVersion),a.deviceAppInfo&&(b.DeviceAppInfo=a.deviceAppInfo),a.playMode&&(b.PlayMode=a.playMode),b}},a.Resumed={event:"Resumed",autoListener:!1,includeOffset:!0},a.BufferingStarted={event:"BufferingStarted",includeOffset:!0},a.BufferingEnded={event:"BufferingEnded",includeOffset:!0},a.ScrubbedTo={event:"ScrubbedTo",includeOffset:!0},a.Created={event:"Created",attributes:function(a){var b={};return"undefined"!=typeof a.autoplay&&(b.AutoPlay=a.autoplay),a.techName&&(b.Technology=a.techName),a.player&&(b.Player=a.player),a.version&&(b.Version=a.version),a.techVersion&&(b.TechVersion=a.techVersion),a.deviceAppInfo&&(b.DeviceAppInfo=a.deviceAppInfo),a.playMode&&(b.PlayMode=a.playMode),b}},a.StartCasting={event:"StartCasting",includeOffset:!0},a.StopCasting={event:"StopCasting",includeOffset:!0},a.Paused={event:"Paused",includeOffset:!0},a.BitrateChanged={event:"BitrateChanged",includeOffset:!0,attributes:function(a){return{Bitrate:a.bitrate}}},a.Error={event:"Error",includeOffset:!0,attributes:function b(a){var b={};return a.errorCode&&(b.Code=a.errorCode),a.errorMessage?b.Message=a.errorMessage:b.Message="Unknown Error",b}},a.HandshakeStarted={event:"HandshakeStarted",autoListener:!1,attributes:function c(a){if(!a.assetId)return{};var c={AssetId:a.assetId};return a.programId&&(c.ProgramId=a.programId),c}},a.ProgramChanged={event:"ProgramChanged",includeOffset:!0,autoListener:!1,attributes:function(a){return a.programId?{ProgramId:a.programId}:{}}},a.Aborted={event:"Aborted",autoListener:!1,includeOffset:!0},a.Started={event:"Started",autoListener:!1,includeOffset:!0,attributes:function d(a){var d={};if(a.bitrate&&(d.Bitrate=a.bitrate),a.duration&&(d.VideoLength=1e3*a.duration),a.mediaLocator){var b=a.mediaLocator.split("?");d.MediaLocator=b[0];}return a.attributes&&(d.Attributes=a.attributes),a.referenceTime&&(d.ReferenceTime=a.referenceTime),a.playMode&&(d.PlayMode=a.playMode),d}},a},a.prototype.objectAssign=function(a,b){for(var c,d,e=1;e<arguments.length;++e){d=arguments[e];for(c in d)Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}return a},g(a,[{key:"debug",get:function(){return this.debug_},set:function(a){this.debug_=a;}},{key:"deviceAppInfo",get:function(){return this.deviceInfoData_?this.deviceInfoData_.deviceAppInfo:null}}]),a}();c["default"]=n,b.exports=c["default"];},{"./platform":6,"global/window":2,"worker-timers":4}],6:[function(b,c,d){(function(b){"use strict";(function(){function e(a){return a=String(a),a.charAt(0).toUpperCase()+a.slice(1)}function f(a,b,c){var d={"10.0":"10",6.4:"10 Technical Preview",6.3:"8.1",6.2:"8",6.1:"7 / Server 2008 R2","6.0":"Vista / Server 2008",5.2:"XP 64-bit / Server 2003",5.1:"XP",5.01:"2000 SP1","5.0":"2000","4.0":"NT","4.90":"ME"};return b&&c&&/^Win/i.test(a)&&!/^Windows Phone /i.test(a)&&(d=d[/[\d.]+$/.exec(a)])&&(a="Windows "+d),a=String(a),b&&c&&(a=a.replace(RegExp(b,"i"),c)),a=h(a.replace(/ ce$/i," CE").replace(/\bhpw/i,"web").replace(/\bMacintosh\b/,"Mac OS").replace(/_PowerPC\b/i," OS").replace(/\b(OS X) [^ \d]+/i,"$1").replace(/\bMac (OS X)\b/,"$1").replace(/\/(\d)/," $1").replace(/_/g,".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i,"").replace(/\bx86\.64\b/gi,"x86_64").replace(/\b(Windows Phone) OS\b/,"$1").replace(/\b(Chrome OS \w+) [\d.]+\b/,"$1").split(" on ")[0])}function g(a,b){var c=-1,d=a?a.length:0;if("number"==typeof d&&d>-1&&d<=v)for(;++c<d;)b(a[c],c,a);else i(a,b);}function h(a){return a=n(a),/^(?:webOS|i(?:OS|P))/.test(a)?a:e(a)}function i(a,b){for(var c in a)z.call(a,c)&&b(a[c],c,a);}function j(a){return null==a?e(a):A.call(a).slice(8,-1)}function k(a,b){var c=null!=a?typeof a[b]:"number";return!(/^(?:boolean|number|string|undefined)$/.test(c)||"object"==c&&!a[b])}function l(a){return String(a).replace(/([ -])(?!$)/g,"$1?")}function m(a,b){var c=null;return g(a,function(d,e){c=b(c,d,e,a);}),c}function n(a){return String(a).replace(/^ +| +$/g,"")}function o(a){function b(b){return m(b,function(b,c){return b||RegExp("\\b"+(c.pattern||l(c))+"\\b","i").exec(a)&&(c.label||c)})}function c(b){return m(b,function(b,c,d){return b||(c[X]||c[/^[a-z]+(?: +[a-z]+\b)*/i.exec(X)]||RegExp("\\b"+l(d)+"(?:\\b|\\w*\\d)","i").exec(a))&&d})}function d(b){return m(b,function(b,c){return b||RegExp("\\b"+(c.pattern||l(c))+"\\b","i").exec(a)&&(c.label||c)})}function e(b){return m(b,function(b,c){var d=c.pattern||l(c);return!b&&(b=RegExp("\\b"+d+"(?:/[\\d.]+|[ \\w.]*)","i").exec(a))&&(b=f(b,d,c.label||c)),b})}function g(b){return m(b,function(b,c){var d=c.pattern||l(c);return!b&&(b=RegExp("\\b"+d+" *\\d+[.\\w_]*","i").exec(a)||RegExp("\\b"+d+"(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)","i").exec(a))&&((b=String(c.label&&!RegExp(d,"i").test(c.label)?c.label:b).split("/"))[1]&&!/[\d.]+/.test(b[0])&&(b[0]+=" "+b[1]),c=c.label||c,b=h(b[0].replace(RegExp(d,"i"),c).replace(RegExp("; *(?:"+c+"[_-])?","i")," ").replace(RegExp("("+c+")[-_.]?(\\w)","i"),"$1 $2"))),b})}function p(b){return m(b,function(b,c){return b||(RegExp(c+"(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)","i").exec(a)||0)[1]||null})}function s(){return this.description||""}var t=q,u=a&&"object"==typeof a&&"String"!=j(a);u&&(t=a,a=null);var v=t.navigator||{},y=v.userAgent||"";a||(a=y);var z,B,C=u||x==r,D=u?!!v.likeChrome:/\bChrome\b/.test(a)&&!/internal|\n/i.test(A.toString()),E="Object",F=u?E:"ScriptBridgingProxyObject",G=u?E:"Environment",H=u&&t.java?"JavaPackage":j(t.java),I=u?E:"RuntimeObject",J=/\bJava/.test(H)&&t.java,K=J&&j(t.environment)==G,L=J?"a":"α",M=J?"b":"β",N=t.document||{},O=t.operamini||t.opera,P=w.test(P=u&&O?O["[[Class]]"]:j(O))?P:O=null,Q=a,R=[],S=null,T=a==y,U=T&&O&&"function"==typeof O.version&&O.version(),V=b([{label:"EdgeHTML",pattern:"Edge"},"Trident",{label:"WebKit",pattern:"AppleWebKit"},"iCab","Presto","NetFront","Tasman","KHTML","Gecko"]),W=d(["Adobe AIR","Arora","Avant Browser","Breach","Camino","Epiphany","Fennec","Flock","Galeon","GreenBrowser","iCab","Iceweasel","K-Meleon","Konqueror","Lunascape","Maxthon",{label:"Microsoft Edge",pattern:"Edge"},"Midori","Nook Browser","PaleMoon","PhantomJS","Raven","Rekonq","RockMelt","SeaMonkey",{label:"Silk",pattern:"(?:Cloud9|Silk-Accelerated)"},"Sleipnir","SlimBrowser",{label:"SRWare Iron",pattern:"Iron"},"Sunrise","Swiftfox","WebPositive","Opera Mini",{label:"Opera Mini",pattern:"OPiOS"},"Opera",{label:"Opera",pattern:"OPR"},"Chrome",{label:"Chrome Mobile",pattern:"(?:CriOS|CrMo)"},{label:"Firefox",pattern:"(?:Firefox|Minefield)"},{label:"Firefox Mobile",pattern:"FxiOS"},{label:"IE",pattern:"IEMobile"},{label:"IE",pattern:"MSIE"},"Safari"]),X=g([{label:"BlackBerry",pattern:"BB10"},"BlackBerry",{label:"Galaxy S",pattern:"GT-I9000"},{label:"Galaxy S2",pattern:"GT-I9100"},{label:"Galaxy S3",pattern:"GT-I9300"},{label:"Galaxy S4",pattern:"GT-I9500"},"Google TV","Lumia","iPad","iPod","iPhone","Kindle",{label:"Kindle Fire",pattern:"(?:Cloud9|Silk-Accelerated)"},"Nexus","Nook","PlayBook","PlayStation 3","PlayStation 4","PlayStation Vita","TouchPad","Transformer",{label:"Wii U",pattern:"WiiU"},"Wii","Xbox One",{label:"Xbox 360",pattern:"Xbox"},"Xoom"]),Y=c({Apple:{iPad:1,iPhone:1,iPod:1},Amazon:{Kindle:1,"Kindle Fire":1},Asus:{Transformer:1},"Barnes & Noble":{Nook:1},BlackBerry:{PlayBook:1},Google:{"Google TV":1,Nexus:1},HP:{TouchPad:1},HTC:{},LG:{},Microsoft:{Xbox:1,"Xbox One":1},Motorola:{Xoom:1},Nintendo:{"Wii U":1,Wii:1},Nokia:{Lumia:1},Samsung:{"Galaxy S":1,"Galaxy S2":1,"Galaxy S3":1,"Galaxy S4":1},Sony:{"PlayStation 4":1,"PlayStation 3":1,"PlayStation Vita":1}}),Z=e(["Windows Phone ","Android","CentOS",{label:"Chrome OS",pattern:"CrOS"},"Debian","Fedora","FreeBSD","Gentoo","Haiku","Kubuntu","Linux Mint","OpenBSD","Red Hat","SuSE","Ubuntu","Xubuntu","Cygwin","Symbian OS","hpwOS","webOS ","webOS","Tablet OS","Linux","Mac OS X","Macintosh","Mac","Windows 98;","Windows "]);if(V&&(V=[V]),Y&&!X&&(X=g([Y])),(z=/\bGoogle TV\b/.exec(X))&&(X=z[0]),/\bSimulator\b/i.test(a)&&(X=(X?X+" ":"")+"Simulator"),"Opera Mini"==W&&/\bOPiOS\b/.test(a)&&R.push("running in Turbo/Uncompressed mode"),/^iP/.test(X)?(W||(W="Safari"),Z="iOS"+((z=/ OS ([\d_]+)/i.exec(a))?" "+z[1].replace(/_/g,"."):"")):"Konqueror"!=W||/buntu/i.test(Z)?Y&&"Google"!=Y&&(/Chrome/.test(W)&&!/\bMobile Safari\b/i.test(a)||/\bVita\b/.test(X))?(W="Android Browser",Z=/\bAndroid\b/.test(Z)?Z:"Android"):"Silk"==W?(/\bMobi/i.test(a)||(Z="Android",R.unshift("desktop mode")),/Accelerated *= *true/i.test(a)&&R.unshift("accelerated")):"PaleMoon"==W&&(z=/\bFirefox\/([\d.]+)\b/.exec(a))?R.push("identifying as Firefox "+z[1]):"Firefox"==W&&(z=/\b(Mobile|Tablet|TV)\b/i.exec(a))?(Z||(Z="Firefox OS"),X||(X=z[1])):W&&!(z=!/\bMinefield\b/i.test(a)&&/\b(?:Firefox|Safari)\b/.exec(W))||(W&&!X&&/[\/,]|^[^(]+?\)/.test(a.slice(a.indexOf(z+"/")+8))&&(W=null),(z=X||Y||Z)&&(X||Y||/\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(Z))&&(W=/[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(Z)?Z:z)+" Browser")):Z="Kubuntu",U||(U=p(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\d.]+$))","Version",l(W),"(?:Firefox|Minefield|NetFront)"])),(z="iCab"==V&&parseFloat(U)>3&&"WebKit"||/\bOpera\b/.test(W)&&(/\bOPR\b/.test(a)?"Blink":"Presto")||/\b(?:Midori|Nook|Safari)\b/i.test(a)&&!/^(?:Trident|EdgeHTML)$/.test(V)&&"WebKit"||!V&&/\bMSIE\b/i.test(a)&&("Mac OS"==Z?"Tasman":"Trident")||"WebKit"==V&&/\bPlayStation\b(?! Vita\b)/i.test(W)&&"NetFront")&&(V=[z]),"IE"==W&&(z=(/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(a)||0)[1])?(W+=" Mobile",Z="Windows Phone "+(/\+$/.test(z)?z:z+".x"),R.unshift("desktop mode")):/\bWPDesktop\b/i.test(a)?(W="IE Mobile",Z="Windows Phone 8.x",R.unshift("desktop mode"),U||(U=(/\brv:([\d.]+)/.exec(a)||0)[1])):"IE"!=W&&"Trident"==V&&(z=/\brv:([\d.]+)/.exec(a))&&(W&&R.push("identifying as "+W+(U?" "+U:"")),W="IE",U=z[1]),T){if(k(t,"global"))if(J&&(z=J.lang.System,Q=z.getProperty("os.arch"),Z=Z||z.getProperty("os.name")+" "+z.getProperty("os.version")),C&&k(t,"system")&&(z=[t.system])[0]){Z||(Z=z[0].os||null);try{z[1]=t.require("ringo/engine").version,U=z[1].join("."),W="RingoJS";}catch($){z[0].global.system==t.system&&(W="Narwhal");}}else"object"==typeof t.process&&(z=t.process)?(W="Node.js",Q=z.arch,Z=z.platform,U=/[\d.]+/.exec(z.version)[0]):K&&(W="Rhino");else j(z=t.runtime)==F?(W="Adobe AIR",Z=z.flash.system.Capabilities.os):j(z=t.phantom)==I?(W="PhantomJS",U=(z=z.version||null)&&z.major+"."+z.minor+"."+z.patch):"number"==typeof N.documentMode&&(z=/\bTrident\/(\d+)/i.exec(a))&&(U=[U,N.documentMode],(z=+z[1]+4)!=U[1]&&(R.push("IE "+U[1]+" mode"),V&&(V[1]=""),U[1]=z),U="IE"==W?String(U[1].toFixed(1)):U[0]);Z=Z&&h(Z);}U&&(z=/(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(U)||/(?:alpha|beta)(?: ?\d)?/i.exec(a+";"+(T&&v.appMinorVersion))||/\bMinefield\b/i.test(a)&&"a")&&(S=/b/i.test(z)?"beta":"alpha",U=U.replace(RegExp(z+"\\+?$"),"")+("beta"==S?M:L)+(/\d+\+?/.exec(z)||"")),"Fennec"==W||"Firefox"==W&&/\b(?:Android|Firefox OS)\b/.test(Z)?W="Firefox Mobile":"Maxthon"==W&&U?U=U.replace(/\.[\d.]+/,".x"):/\bXbox\b/i.test(X)?(Z=null,"Xbox 360"==X&&/\bIEMobile\b/.test(a)&&R.unshift("mobile mode")):!/^(?:Chrome|IE|Opera)$/.test(W)&&(!W||X||/Browser|Mobi/.test(W))||"Windows CE"!=Z&&!/Mobi/i.test(a)?"IE"==W&&T&&null===t.external?R.unshift("platform preview"):(/\bBlackBerry\b/.test(X)||/\bBB10\b/.test(a))&&(z=(RegExp(X.replace(/ +/g," *")+"/([.\\d]+)","i").exec(a)||0)[1]||U)?(z=[z,/BB10/.test(a)],Z=(z[1]?(X=null,Y="BlackBerry"):"Device Software")+" "+z[0],U=null):this!=i&&"Wii"!=X&&(T&&O||/Opera/.test(W)&&/\b(?:MSIE|Firefox)\b/i.test(a)||"Firefox"==W&&/\bOS X (?:\d+\.){2,}/.test(Z)||"IE"==W&&(Z&&!/^Win/.test(Z)&&U>5.5||/\bWindows XP\b/.test(Z)&&U>8||8==U&&!/\bTrident\b/.test(a)))&&!w.test(z=o.call(i,a.replace(w,"")+";"))&&z.name&&(z="ing as "+z.name+((z=z.version)?" "+z:""),w.test(W)?(/\bIE\b/.test(z)&&"Mac OS"==Z&&(Z=null),z="identify"+z):(z="mask"+z,W=P?h(P.replace(/([a-z])([A-Z])/g,"$1 $2")):"Opera",/\bIE\b/.test(z)&&(Z=null),T||(U=null)),V=["Presto"],R.push(z)):W+=" Mobile",(z=(/\bAppleWebKit\/([\d.]+\+?)/i.exec(a)||0)[1])&&(z=[parseFloat(z.replace(/\.(\d)$/,".0$1")),z],"Safari"==W&&"+"==z[1].slice(-1)?(W="WebKit Nightly",S="alpha",U=z[1].slice(0,-1)):U!=z[1]&&U!=(z[2]=(/\bSafari\/([\d.]+\+?)/i.exec(a)||0)[1])||(U=null),z[1]=(/\bChrome\/([\d.]+)/i.exec(a)||0)[1],537.36==z[0]&&537.36==z[2]&&parseFloat(z[1])>=28&&"WebKit"==V&&(V=["Blink"]),T&&(D||z[1])?(V&&(V[1]="like Chrome"),z=z[1]||(z=z[0],z<530?1:z<532?2:z<532.05?3:z<533?4:z<534.03?5:z<534.07?6:z<534.1?7:z<534.13?8:z<534.16?9:z<534.24?10:z<534.3?11:z<535.01?12:z<535.02?"13+":z<535.07?15:z<535.11?16:z<535.19?17:z<536.05?18:z<536.1?19:z<537.01?20:z<537.11?"21+":z<537.13?23:z<537.18?24:z<537.24?25:z<537.36?26:"Blink"!=V?"27":"28")):(V&&(V[1]="like Safari"),z=z[0],z=z<400?1:z<500?2:z<526?3:z<533?4:z<534?"4+":z<535?5:z<537?6:z<538?7:z<601?8:"8"),V&&(V[1]+=" "+(z+="number"==typeof z?".x":/[.+]/.test(z)?"":"+")),"Safari"==W&&(!U||parseInt(U)>45)&&(U=z)),"Opera"==W&&(z=/\bzbov|zvav$/.exec(Z))?(W+=" ",R.unshift("desktop mode"),"zvav"==z?(W+="Mini",U=null):W+="Mobile",Z=Z.replace(RegExp(" *"+z+"$"),"")):"Safari"==W&&/\bChrome\b/.exec(V&&V[1])&&(R.unshift("desktop mode"),W="Chrome Mobile",U=null,/\bOS X\b/.test(Z)?(Y="Apple",Z="iOS 4.3+"):Z=null),
U&&0==U.indexOf(z=/[\d.]+$/.exec(Z))&&a.indexOf("/"+z+"-")>-1&&(Z=n(Z.replace(z,""))),V&&!/\b(?:Avant|Nook)\b/.test(W)&&(/Browser|Lunascape|Maxthon/.test(W)||"Safari"!=W&&/^iOS/.test(Z)&&/\bSafari\b/.test(V[1])||/^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(W)&&V[1])&&(z=V[V.length-1])&&R.push(z),R.length&&(R=["("+R.join("; ")+")"]),Y&&X&&X.indexOf(Y)<0&&R.push("on "+Y),X&&R.push((/^on /.test(R[R.length-1])?"":"on ")+X),Z&&(z=/ ([\d.+]+)$/.exec(Z)||(B=/^[a-z]+ ([\d.+]+) \//i.exec(Z)),Z={architecture:32,family:z&&!B?Z.replace(z[0],""):Z,version:z?z[1]:null,toString:function(){var a=this.version;return this.family+(a&&!B?" "+a:"")+(64==this.architecture?" 64-bit":"")}}),(z=/\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(Q))&&!/\bi686\b/i.test(Q)&&(Z&&(Z.architecture=64,Z.family=Z.family.replace(RegExp(" *"+z),"")),W&&(/\bWOW64\b/i.test(a)||T&&/\w(?:86|32)$/.test(v.cpuClass||v.platform)&&!/\bWin64; x64\b/i.test(a))&&R.unshift("32-bit")),a||(a=null);var _={};return _.description=a,_.layout=V&&V[0],_.manufacturer=Y,_.name=W,_.prerelease=S,_.product=X,_.ua=a,_.version=W&&U,_.os=Z||{architecture:null,family:null,version:null,toString:function(){return"null"}},_.parse=o,_.toString=s,_.version&&R.unshift(U),_.name&&R.unshift(W),Z&&W&&(Z!=String(Z).split(" ")[0]||Z!=W.split(" ")[0]&&!X)&&R.push(X?"("+Z+")":"on "+Z),R.length&&(_.description=R.join(" ")),_}var p={"function":!0,object:!0},q=p[typeof window]&&window||this,r=q,s=p[typeof d]&&d,t=p[typeof c]&&c&&!c.nodeType&&c,u=s&&t&&"object"==typeof b&&b;!u||u.global!==u&&u.window!==u&&u.self!==u||(q=u);var v=Math.pow(2,53)-1,w=/\bOpera/,x=this,y=Object.prototype,z=y.hasOwnProperty,A=y.toString;"function"==typeof a&&"object"==typeof a.amd&&a.amd?a(function(){return o()}):s&&t?i(o(),function(a,b){s[b]=a;}):q.platform=o();}).call(void 0);}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[5])(5)});
});

var empAnalyticsTmp = unwrapExports(empAnalytics_min);

/**
* @file emp-analytics.js
* @module EmpAnalytics
*/
//Override if external defined for debug
var EMPAnalytics = window_1.empAnalytics ? window_1.empAnalytics : empAnalyticsTmp;
var Plugin$2 = videojs$1.getPlugin('plugin');

var AnalyticsPlugin = function (_Plugin) {
  inherits(AnalyticsPlugin, _Plugin);

  function AnalyticsPlugin(player, options) {
    classCallCheck(this, AnalyticsPlugin);

    var _this = possibleConstructorReturn(this, _Plugin.call(this, player, options));

    log$1('AnalyticsPlugin', 'create');
    _this.analyticsConnector_ = null;
    _this.options_ = options;
    _this.onLoadStartBind = _this.onLoadStart_.bind(_this);
    _this.player.on(empPlayerEvents.LOAD_START, _this.onLoadStartBind);
    return _this;
  }

  AnalyticsPlugin.prototype.stop = function stop() {
    if (this.analyticsConnector_ && this.analyticsConnector_.dispose) {
      this.analyticsConnector_.dispose();
      this.analyticsConnector_ = null;
    }
  };

  AnalyticsPlugin.prototype.dispose = function dispose() {
    log$1('AnalyticsPlugin', 'dispose');
    this.player.off(empPlayerEvents.LOAD_START, this.onLoadStartBind);
    this.stop();
    _Plugin.prototype.dispose.call(this);
  };

  AnalyticsPlugin.prototype.options = function options(obj) {
    if (!obj) {
      return this.options_;
    }
    this.options_ = obj;
  };

  AnalyticsPlugin.prototype.newAnalytics = function newAnalytics(opt) {
    log$1('new EMPAnalytics');
    //exposureApiURL, customer, businessUnit, sessionToken, userId, deviceInfoData = {}, props = {}
    var analytics = new EMPAnalytics(opt.exposureApiURL, opt.customer, opt.businessUnit, opt.sessionToken, opt.userId, this.options_.analytics && this.options_.analytics.deviceInfo);
    this.stop();
    log$1('new EMPAnalyticsConnector');
    this.analyticsConnector_ = new EMPAnalyticsConnector(this.player, analytics, this.options_);
  };

  /**
   * Getter for analyticsConnector
   *
   */


  AnalyticsPlugin.prototype.onEntitlementLoadStart = function onEntitlementLoadStart() {
    this.analyticsConnector_ && this.analyticsConnector_.onEntitlementLoadStart();
  };

  AnalyticsPlugin.prototype.onError = function onError(e) {
    this.analyticsConnector_ && this.analyticsConnector_.onError(e);
  };

  AnalyticsPlugin.prototype.onLoadStart_ = function onLoadStart_(event) {
    //if no entitlement stop analytics
    if (!extplayer.getEntitlement(this.player)) {
      this.stop();
    }
  };

  createClass(AnalyticsPlugin, [{
    key: 'connector',
    get: function get$$1() {
      return this.analyticsConnector_;
    }
  }]);
  return AnalyticsPlugin;
}(Plugin$2);

AnalyticsPlugin.VERSION = '2.0.79-32';

if (videojs$1.getPlugin('analytics')) {
  videojs$1.log.warn('A plugin named "analytics" already exists.');
} else {
  videojs$1.registerPlugin('analytics', AnalyticsPlugin);
}

/**
 * @file emp-player.js
 * @module empPlayer
 */
var empPlayer = videojs$1;

/**
 * Detects if the current browser has the required technology to play an unencrypted stream provided by EMP.
 *
 * @returns {Promise} that is always fulfilled with a boolean value
 * @static
 */
empPlayer.canPlayUnencrypted = canPlayUnencrypted;

/**
 * Detects if the current browser has the required technology to play an encrypted stream provided by EMP.
 *
 * @returns {Promise} that is always fulfilled with a boolean value
 * @static
 */
empPlayer.canPlayEncrypted = canPlayEncrypted;

/**
 * Get an entitlement engine by name
 *
 * @param {String} name Name of the entitlement engine
 * @static
 * @returns {EntitlementEngine}
 */
empPlayer.getEntitlementEngine = EntitlementMiddleware.getEntitlementEngine;
empPlayer.registerEntitlementEngine = EntitlementMiddleware.registerEntitlementEngine;
empPlayer.isEntitlementEngine = EntitlementMiddleware.isEntitlementEngine;
empPlayer.EntitlementClass = EntitlementMiddleware.EntitlementClass;

empPlayer.log = log$1;

empPlayer.plugin = videojs$1.plugin;

empPlayer.videojs = videojs$1;

empPlayer.EntitlementMiddleware = EntitlementMiddleware;

/**
 * Extend function for non ES6 classes - Wrapper around videojs extend method
 * @param {String} superClass       class to extend
 * @param {String} subClassMethods  methods to extend
 * @returns {Function}              Newly created subclass
 */
empPlayer.extend = videojs$1.extend;

/**
 * Returns EmpPlayerEvents which holds all player events
 *
 * @returns {EmpPlayerEvents}
 * @method Events
 * @memberOf EMPPlayer
 */
empPlayer.Events = empPlayerEvents;

empPlayer.VERSION = '2.0.79-32';

/*
 * Universal Module Definition (UMD)
 *
 */
if (typeof define === 'function' && define['amd']) {
  define('empPlayer', [], function () {
    return empPlayer;
  });
  // checking that module is an object too because of umdjs/umd#35
} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
  module['exports'] = empPlayer;
}

return empPlayer;

})));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(_dereq_,module,exports){
(function (global){
/**
 * @license
 * EMP-Player 2.0.79-32 
 * Copyright Ericsson, Inc. <https://www.ericsson.com/>
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.empShaka = factory());
}(this, (function () {

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof commonjsGlobal !== "undefined") {
    win = commonjsGlobal;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

var window_1 = win;

var empty = {};


var empty$1 = (Object.freeze || Object)({
	'default': empty
});

var minDoc = ( empty$1 && empty ) || empty$1;

var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
    typeof window !== 'undefined' ? window : {};


var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

var document_1 = doccy;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/**
 * EmpPlayerEvents - Holds all available player events
 *
 * @class EmpPlayerEvents
 */
var EmpPlayerEvents = function EmpPlayerEvents() {
  classCallCheck(this, EmpPlayerEvents);

  /**
  * Fired when video playback ends
  * @event ENDED
  */
  this.ENDED = 'ended';

  /**
  * Fired when an error occurs
  * @event ERROR
  */
  this.ERROR = 'error';

  /**
  * Fired when the player has downloaded data at the current playback position
  * @event LOADED_DATA
  */
  this.LOADED_DATA = 'loadeddata';

  /**
  * Fired when the timeshift changes
  * @event TIMESHIFT_CHANGE
  */
  this.TIMESHIFT_CHANGE = 'timeshiftchange';

  /**
  * Fired when the video duration changes
  * @event DURATION_CHANGE
  */
  this.DURATION_CHANGE = 'durationchange';

  /**
  * Fired when the player has initial duration and dimension information
  * @event LOADED_METADATA
  */
  this.LOADED_METADATA = 'loadedmetadata';

  /**
  * Fired when the player started seeking
  * @event SEEKING
  */
  this.SEEKING = 'seeking';

  /**
  * Fired when the current playback position has changed
  * @event TIME_UPDATE
  */
  this.TIME_UPDATE = 'timeupdate';

  /**
  * Fired when the user is active
  * @event USER_ACTIVE
  */
  this.USER_ACTIVE = 'useractive';

  /**
  * Fired when the user is inactive
  * @event USERIN_ACTIVE
  */
  this.USERIN_ACTIVE = 'userinactive';

  /**
  * Fired when the volume changes
  * @event VOLUME_CHANGE
  */
  this.VOLUME_CHANGE = 'volumechange';

  /**
  * Fired when the video is starting to load
  * @event LOAD_START
  */
  this.LOAD_START = 'loadstart';

  /**
  * Fired when the player can start playback
  * @event CAN_PLAY
  */
  this.CAN_PLAY = 'canplay';

  /**
  * Fired when the player has starting playback
  * @event PLAYING
  */
  this.PLAYING = 'playing';

  /**
  * Fired when the player starts buffering
  * @event WAITING
  */
  this.WAITING = 'waiting';

  /**
  * Fired when the player seeked to a different point in time
  * @event SEEKED
  */
  this.SEEKED = 'seeked';

  /**
  * Fired when playback is aborted
  * @event ABORT
  */
  this.ABORT = 'abort';

  /**
  * Fired when the player will start playing
  * @event PLAY
  */
  this.PLAY = 'play';

  /**
  * Fired when the player is paused
  * @event PAUSE
  */
  this.PAUSE = 'pause';

  /**
  * Fired when the player is destroyed.
  * @event DISPOSE
  */
  this.DISPOSE = 'dispose';

  /**
  * Fired when an AudioTrack object changes its enabled value
  * @event MODE_CHANGE
  */
  this.MODE_CHANGE = 'modechange';

  /**
  * Fired when a state changes. Used for example when an AudioTrack changes its enabled value
  * @event CHANGE
  */
  this.CHANGE = 'change';

  /**
  * Fired when an AudioTrack object has been added to an AudioTrackList object.
  * @event ADD_TRACK
  */
  this.ADD_TRACK = 'addtrack';

  /**
  * Fired when an AudioTrack object has been removed from an AudioTrackList object.
  * @event REMOVE_TRACK
  */
  this.REMOVE_TRACK = 'removetrack';

  /**
  * Fired by Dash.js when a metric changes
  * @event METRIC_CHANGED
  */
  this.METRIC_CHANGED = 'metricchanged';

  /**
  * Fired when a recoverable asset error occurs
  * @event RECOVERABLE_ASSET_ERROR
  */
  this.RECOVERABLE_ASSET_ERROR = 'recoverableasseterror';

  /**
  * Fired when the video bitrate changes
  * @event BITRATE_CHANGED
  */
  this.BITRATE_CHANGED = 'bitratechanged';

  /**
  * Used when something closes. Fired by VideoJS when the CloseButton closes
  * @event CLOSE
  */
  this.CLOSE = 'close';

  /**
  * Used when something is ready. Fired when the tech is ready
  * @event READY
  */
  this.READY = 'ready';

  /**
  * Used when an html element resizes. Fired when the video element changes size
  * @event RESIZE
  */
  this.RESIZE = 'resize';

  /**
  * Used when an html element is tapped. Fired by VideoJS on components
  * @event TAP
  */
  this.TAP = 'tap';

  /**
  * Used when an html element is clicked. Fired by VideoJS on components
  * @event CLICK
  */
  this.CLICK = 'click';

  /**
  * Used when an html element gains focus. Fired by VideoJS on components
  * @event FOCUS
  */
  this.FOCUS = 'focus';

  /**
  * Used when an html element loses focus. Fired by VideoJS on components
  * @event BLUR
  */
  this.BLUR = 'blur';

  /**
  * Used when a modal html view is about to be opened. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_OPEN
  */
  this.BEFORE_MODAL_OPEN = 'beforemodalopen';

  /**
  * Used when a modal html view has been opened. Fired by VideoJS on the ModalDialog
  * @event MODAL_OPEN
  */
  this.MODAL_OPEN = 'modalopen';

  /**
  * Used when a modal html view will be closed. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_CLOSE
  */
  this.BEFORE_MODAL_CLOSE = 'beforemodalclose';

  /**
  * Used when a modal html view has been closed. Fired by VideoJS on the ModalDialog
  * @event MODAL_CLOSE
  */
  this.MODAL_CLOSE = 'modalclose';

  /**
  * Used when a modal html view will be populated with html content. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_FILL
  */
  this.BEFORE_MODAL_FILL = 'beforemodalfill';

  /**
  * Used when a modal html view has been populated with html content. Fired by VideoJS on the ModalDialog
  * @event MODAL_FILL
  */
  this.MODAL_FILL = 'modalfill';

  /**
  * Used when a modal html view will clear its content. Fired by VideoJS on the ModalDialog
  * @event BEFORE_MODAL_EMPTY
  */
  this.BEFORE_MODAL_EMPTY = 'beforemodalempty';

  /**
  * Used when a modal html view has cleared its content. Fired by VideoJS on the ModalDialog
  * @event MODAL_EMPTY
  */
  this.MODAL_EMPTY = 'modalempty';

  /**
  * Enough data has been loaded to play the media up to its end
  * @event CAN_PLAY_THROUGH
  */
  this.CAN_PLAY_THROUGH = 'canplaythrough';

  /**
  * Video is played for the first time
  * @event FIRST_PLAY
  */
  this.FIRST_PLAY = 'firstplay';

  /**
  * When the user agent is downloading media data
  * @event PROGRESS
  */
  this.PROGRESS = 'progress';

  /**
  * When the player is suspended from downloading media data
  * @event SUSPEND
  */
  this.SUSPEND = 'suspend';

  /**
  * When the current playlist is empty
  * @event EMPTIED
  */
  this.EMPTIED = 'emptied';

  /**
  * When the player is trying to get media data, but data is not available
  * @event STALLED
  */
  this.STALLED = 'stalled';

  /**
  * When the playing speed of the audio/video is changed
  * @event RATE_CHANGE
  */
  this.RATE_CHANGE = 'ratechange';

  /**
  * When the text track has been changed
  * @event TEXT_TRACK_CHANGE
  */
  this.TEXT_TRACK_CHANGE = 'texttrackchange';

  /**
  * When the track has been changed
  * @event TRACK_CHANGE
  */
  this.TRACK_CHANGE = 'trackchanged';

  /**
  * When the video poster changes
  * @event POSTER_CHANGE
  */
  this.POSTER_CHANGE = 'posterchange';

  /**
  * When a key is down
  * @event KEY_DOWN
  */
  this.KEY_DOWN = 'keydown';

  /**
  * When a key is up
  * @event KEY_UP
  */
  this.KEY_UP = 'keyup';

  /**
  * When the mouse is down
  * @event MOUSE_DOWN
  */
  this.MOUSE_DOWN = 'mousedown';

  /**
  * When the mouse is moved
  * @event MOUSE_MOVE
  */
  this.MOUSE_MOVE = 'mousemove';

  /**
  * When the mouse is up
  * @event MOUSE_UP
  */
  this.MOUSE_UP = 'mouseup';

  /**
  * When touch started
  * @event TOUCH_START
  */
  this.TOUCH_START = 'touchstart';

  /**
  * When touch moved
  * @event TOUCH_MOVE
  */
  this.TOUCH_MOVE = 'touchmove';

  /**
  * When touch ended
  * @event TOUCH_END
  */
  this.TOUCH_END = 'touchend';

  /**
  * When a touch point is moved off the interactive area of an element
  * @event TOUCH_LEAVE
  */
  this.TOUCH_LEAVE = 'touchleave';

  /**
  * When a touch point has been disrupted
  * @event TOUCH_CANCEL
  */
  this.TOUCH_CANCEL = 'touchcancel';

  /**
  * When the fullscreen state changes
  * @event FULLSCREEN_CHANGE
  */
  this.FULLSCREEN_CHANGE = 'fullscreenchange';

  /**
  * When fullscreen isn't supported and the video will resize to the window
  * @event ENTER_FULL_WINDOW
  */
  this.ENTER_FULL_WINDOW = 'enterFullWindow';

  /**
  * When exiting full window
  * @event EXIT_FULL_WINDOW
  */
  this.EXIT_FULL_WINDOW = 'exitFullWindow';

  /**
  * When controls are enabled
  * @event CONTROLS_ENABLED
  */
  this.CONTROLS_ENABLED = 'controlsenabled';

  /**
  * When controls are disabled
  * @event CONTROLS_DISABLED
  */
  this.CONTROLS_DISABLED = 'controlsdisabled';

  /**
  * When native tech or device controls are being used
  * @event USING_NATIVE_CONTROLS
  */
  this.USING_NATIVE_CONTROLS = 'usingnativecontrols';

  /**
  * When custom controls are being used
  * @event USING_CUSTOM_CONTROLS
  */
  this.USING_CUSTOM_CONTROLS = 'usingcustomcontrols';

  /**
  * Fired when a VideoJS slider is active
  * @event SLIDER_ACTIVE
  */
  this.SLIDER_ACTIVE = 'slideractive';

  /**
  * Fired when a VideoJS slider is inactive
  * @event SLIDER_INACTIVE
  */
  this.SLIDER_INACTIVE = 'sliderinactive';

  /**
   * Fired when a new entitlement is used to start playback
   */
  this.ENTITLEMENT_CHANGE = 'entitlementchange';

  /**
   * Fired when the entitlement loading starts
   */
  this.ENTITLEMENT_LOAD_START = 'entitlementloadstart';

  /**
   * Fired when the player is initalized
   */
  this.PLAYER_CREATED = 'playercreated';

  /**
   * Fired when playback is restarted
   */
  this.RESTARTING = 'restarting';

  this.SEGMENTS_UPDATED = 'segmentsupdated';
  this.SEGMENT_CHANGED = 'segmentchanged';

  /**
   * Fired when chromecast begins casting
   */
  this.CHROMECAST_CASTING = 'chromecastcasting';

  /**
   * Fired when chromecast has stopped casting
   */
  this.CHROMECAST_STOPPED = 'chromecaststopped';

  /**
   * Fired when playback is stopped
   */
  this.STOPPED = 'stopped';

  /**
   * Fired when the video is ready to be played
   */
  this.READY_TO_PLAY = 'readytoplay';

  /**
   * Fired when program changes in a live or catchUp stream
    */
  this.PROGRAM_CHANGED = 'programchanged';

  /**
  * Fired when vod/asset changes
   */
  this.ASSET_CHANGED = 'assetchanged';

  /**
   * Fired when prefetch segment before seek in a vod/catchup stream
  */
  this.SEGMENT_MISSING = 'segmentmissing';

  /**
  * Fired when airplayStart
  */
  this.AIRPLAY_START = 'airplayStart';

  /**
  * Fired when replay
  */
  this.REPLAY = 'replay';
};

var empPlayerEvents = new EmpPlayerEvents();

//TODO Remove this maybe not good for treeshaking
var videojsTmp = window_1.videojs;
var videojs = videojsTmp;

var logToBrowserConsole = false;

var log_temp = function log_temp() {
  if (logToBrowserConsole) {
    _log(null, arguments);
  }
};

// Allway log if EMP_DEBUG_LOG and with correct stack trace
if (window_1.EMP_DEBUG_LOG) {
  log_temp = window_1.console && window_1.console.log && console.log.bind(console) || function () {};
}

/**
 * Log plain debug messages
 * @method log
 */
var log$1 = log_temp;

/**
 * Keep a history of log messages
 * @type {Array}
 */
log$1.history = [];

/**
 * Log error messages
 */
log$1.error = function () {
  _log('error', arguments);
};

/**
 * Log warning messages
 */
log$1.warn = function () {
  _log('warn', arguments);
};

/**
 * Log debug  messages
 */
log$1.debug = function () {
  _log('debug', arguments);
};

// Allway log if EMP_DEBUG_LOG and with correct stack trace
if (window_1.EMP_DEBUG_LOG) {
  var noop = function noop() {};
  log$1.debug = window_1.console && window_1.console.debug && console.debug.bind(console) || noop;
  log$1.warn = window_1.WARN = window_1.console && window_1.console.warn && console.warn.bind(console) || noop;
  log$1.error = window_1.ERROR = window_1.console && window_1.console.error && console.error.bind(console) || noop;
}

/**
 * setLogToBrowserConsole and debug mode
 */
log$1.setLogToBrowserConsole = function () {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  logToBrowserConsole = value;
};

/**
 * Log messages to the console and history based on the type of message
 *
 * @param {String} type The type of message, or 'null' for 'log'
 * @param {Object} args The arguments to be passed to the log
 * @private
 * @method _log
 */
function _log(type, args) {
  // converts args to an array to get array functions
  var argsArray = Array.prototype.slice.call(args);

  // if there's no console then don't try to output messages
  // they will be stored in the log.history
  var noop = function noop() {};

  var console = window_1['console'] || {
    'log': noop,
    'warn': noop,
    'error': noop,
    'trace': noop
  };

  if (type) {
    // add log type in front of message
    argsArray.unshift(type.toUpperCase() + ':');
  } else {
    type = 'log';
  }

  // add to history
  //log.history.push(argsArray);

  // add console prefix after adding to history
  argsArray.unshift('EMPPlayer:');

  // call the appropriate log function
  if (console[type].apply) {
    console[type].apply(console, argsArray);
  } else {
    console[type](argsArray.join(' '));
  }
}

/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {obj:EachCallback} fn
 *        The callback function which is called for each key in the object.
 */


/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {Mixed} [initial = 0]
 *        Starting value
 *
 * @return {Mixed}
 *         The final accumulated value.
 */


/**
 * Object.assign-style object shallow merge/extend.
 *
 * @param  {Object} target
 * @param  {Object} ...sources
 * @return {Object}
 */


/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value
 * @return {Boolean}
 */


/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value
 * @return {Boolean}
 */

/*global
  document, atob
*/










function isString(val) {
  return typeof val === 'string' || !!val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && Object.prototype.toString.call(val) === '[object String]';
}



/**
 * Filter out single bad source objects or multiple source objects in an
 * array.Also flattens nested source object arrays into a 1 dimensional
 * array of source objects.
 */

/**
 * EmpPlayerErrorCodes - Holds all available error codes
 * EmpPlayerError - Emp custom Error object
 *
 * @class EmpPlayerError
 */

var EmpPlayerErrorCodes = {
  UNKNOWN: 100,

  LOAD_ASSET: 101,

  ENTITLEMENT: 102,

  SHAKA_TECH: 200,

  HLS_TECH: 300,

  FLASH_TECH: 400,

  CHROMECAST_TECH: 500
};

var EmpPlayerError = function (_Error) {
  inherits(EmpPlayerError, _Error);

  function EmpPlayerError(value) {
    var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmpPlayerErrorCodes.UNKNOWN;
    var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    classCallCheck(this, EmpPlayerError);

    var _this = possibleConstructorReturn(this, _Error.call(this));

    _this.code = code;
    if (isString(value)) {
      _this.message = value;
    } else if (value.message) {
      _this.message = value.message;
    }
    _this.status = status;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, EmpPlayerError);
    }
    return _this;
  }

  createClass(EmpPlayerError, [{
    key: 'codes',
    get: function get$$1() {
      return EmpPlayerErrorCodes;
    }
  }]);
  return EmpPlayerError;
}(Error);

/**
 * EmpTech - General tech implementation, not specific to a certain tech
 *
 * @class EmpTech
 */

var EmpTech = function () {
  function EmpTech() {
    classCallCheck(this, EmpTech);
  }

  EmpTech.prototype.addAudioTrack = function addAudioTrack(kind, label, language) {
    var enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    // Add the track to the player's audio track list.
    var track = new videojs.AudioTrack({
      enabled: enabled,
      kind: kind || 'main',
      label: label,
      language: language
    });
    this.audioTracks().addTrack(track);
    return track;
  };

  /**
   * Returns the language code of a language string: 'en-English' to 'en' or returns the original string if '-' can't be found
   * @returns {String} language code
   */


  EmpTech.prototype.languageCode = function languageCode(language) {
    return language ? language.split('-')[0] : null;
  };

  EmpTech.prototype.remainingTime = function remainingTime() {
    var duration = this.duration();
    if (duration === Infinity || duration === 0) {
      return Infinity;
    } else {
      return duration - this.currentTime();
    }
  };

  EmpTech.prototype.supportsEpgProgramChange = function supportsEpgProgramChange() {
    return this.supportsEpgProgramChange_ || false;
  };

  EmpTech.prototype.base = function base() {}
  // noop


  /**
  * Trigger a recoverable error
  * allows the player to fallback to another tech
  *
  * @param {Object} error
  * @private
  */
  ;

  EmpTech.prototype.triggerRecoverableTechError = function triggerRecoverableTechError(error, techName) {
    log$1('RecoverableTechError', techName, error);
    var category = error.category || '';
    var code = error.code || '';
    var msg = error.message || '';
    var message = 'Tech: ' + techName + '  Can\'t load video: error category: ' + category + ' code: ' + code + ' message: ' + msg;
    if (category !== 6 && code !== 6001) {
      //Hide DRM error for Safari with Shaka-Dash
      log$1.error(message);
    }
    this.trigger(empPlayerEvents.RECOVERABLE_ASSET_ERROR, { source: this.options_.source, techName: techName, message: message, code: error.code });
  };

  /**
    * Tracking Duration
    *
    */


  EmpTech.prototype.trackDuration = function trackDuration() {
    if (this.durationInterval) {
      this.stopTrackingDuration();
    }
    this.preDuration_ = 0;
    this.durationInterval = this.setInterval(function () {
      if (this.isReady_) {
        this.onDurationUpdate();
      }
    }, 1000);
  };

  /**
    * stop Tracking Duration
    *
    */


  EmpTech.prototype.stopTrackingDuration = function stopTrackingDuration() {
    if (this.durationInterval) {
      this.clearInterval(this.durationInterval);
      this.durationInterval = null;
      this.preDuration_ = 0;
    }
    this.trigger(empPlayerEvents.DURATION_CHANGE);
  };

  /**
  * Trigger durationchange event
  *
  */


  EmpTech.prototype.onDurationUpdate = function onDurationUpdate() {
    var duration = this.duration();
    if (this.preDuration_ !== duration) {
      //only trigger DURATION_CHANGE if change bigger than 1 sec.
      if (duration - this.preDuration_ >= 1.0 || duration - this.preDuration_ <= -1.0 || duration === 0) {
        this.preDuration_ = this.duration();
        this.trigger(empPlayerEvents.DURATION_CHANGE);
      }
    }
  };

  return EmpTech;
}();

var shakaPlayer_compiled = createCommonjsModule(function (module) {
(function(){var g={};
(function(window){var l,aa=this;aa.Ve=!0;function n(a,b){var c=a.split("."),d=aa;c[0]in d||!d.execScript||d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)c.length||void 0===b?d[e]?d=d[e]:d=d[e]={}:d[e]=b;}function ba(a){var b=ca;function c(){}c.prototype=b.prototype;a.af=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Ze=function(a,c,f){return b.prototype[c].apply(a,Array.prototype.slice.call(arguments,2))};}/*

 Copyright 2016 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
function da(a){this.c=Math.exp(Math.log(.5)/a);this.b=this.a=0;}function ea(a,b,c){var d=Math.pow(a.c,b);c=c*(1-d)+d*a.a;isNaN(c)||(a.a=c,a.b+=b);}function fa(a){return a.a/(1-Math.pow(a.c,a.b))}function ga(){this.b=new da(2);this.c=new da(5);this.a=0;}ga.prototype.getBandwidthEstimate=function(a){return 128E3>this.a?a:Math.min(fa(this.b),fa(this.c))};function ha(){}function ia(){}window.console&&window.console.log.bind&&(ha=console.warn.bind(console));function p(a,b,c,d){this.severity=a;this.category=b;this.code=c;this.data=Array.prototype.slice.call(arguments,3);this.handled=!1;}n("shaka.util.Error",p);p.prototype.toString=function(){return"shaka.util.Error "+JSON.stringify(this,null,"  ")};p.Severity={RECOVERABLE:1,CRITICAL:2};p.Category={NETWORK:1,TEXT:2,MEDIA:3,MANIFEST:4,STREAMING:5,DRM:6,PLAYER:7,CAST:8,STORAGE:9};
p.Code={UNSUPPORTED_SCHEME:1E3,BAD_HTTP_STATUS:1001,HTTP_ERROR:1002,TIMEOUT:1003,MALFORMED_DATA_URI:1004,UNKNOWN_DATA_URI_ENCODING:1005,REQUEST_FILTER_ERROR:1006,RESPONSE_FILTER_ERROR:1007,INVALID_TEXT_HEADER:2E3,INVALID_TEXT_CUE:2001,UNABLE_TO_DETECT_ENCODING:2003,BAD_ENCODING:2004,INVALID_XML:2005,INVALID_MP4_TTML:2007,INVALID_MP4_VTT:2008,UNABLE_TO_EXTRACT_CUE_START_TIME:2009,BUFFER_READ_OUT_OF_BOUNDS:3E3,JS_INTEGER_OVERFLOW:3001,EBML_OVERFLOW:3002,EBML_BAD_FLOATING_POINT_SIZE:3003,MP4_SIDX_WRONG_BOX_TYPE:3004,
MP4_SIDX_INVALID_TIMESCALE:3005,MP4_SIDX_TYPE_NOT_SUPPORTED:3006,WEBM_CUES_ELEMENT_MISSING:3007,WEBM_EBML_HEADER_ELEMENT_MISSING:3008,WEBM_SEGMENT_ELEMENT_MISSING:3009,WEBM_INFO_ELEMENT_MISSING:3010,WEBM_DURATION_ELEMENT_MISSING:3011,WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING:3012,WEBM_CUE_TIME_ELEMENT_MISSING:3013,MEDIA_SOURCE_OPERATION_FAILED:3014,MEDIA_SOURCE_OPERATION_THREW:3015,VIDEO_ERROR:3016,QUOTA_EXCEEDED_ERROR:3017,UNABLE_TO_GUESS_MANIFEST_TYPE:4E3,DASH_INVALID_XML:4001,DASH_NO_SEGMENT_INFO:4002,
DASH_EMPTY_ADAPTATION_SET:4003,DASH_EMPTY_PERIOD:4004,DASH_WEBM_MISSING_INIT:4005,DASH_UNSUPPORTED_CONTAINER:4006,DASH_PSSH_BAD_ENCODING:4007,DASH_NO_COMMON_KEY_SYSTEM:4008,DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED:4009,DASH_CONFLICTING_KEY_IDS:4010,UNPLAYABLE_PERIOD:4011,RESTRICTIONS_CANNOT_BE_MET:4012,NO_PERIODS:4014,HLS_PLAYLIST_HEADER_MISSING:4015,INVALID_HLS_TAG:4016,HLS_INVALID_PLAYLIST_HIERARCHY:4017,DASH_DUPLICATE_REPRESENTATION_ID:4018,HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND:4020,HLS_COULD_NOT_GUESS_MIME_TYPE:4021,
HLS_MASTER_PLAYLIST_NOT_PROVIDED:4022,HLS_REQUIRED_ATTRIBUTE_MISSING:4023,HLS_REQUIRED_TAG_MISSING:4024,HLS_COULD_NOT_GUESS_CODECS:4025,HLS_KEYFORMATS_NOT_SUPPORTED:4026,DASH_UNSUPPORTED_XLINK_ACTUATE:4027,DASH_XLINK_DEPTH_LIMIT:4028,HLS_COULD_NOT_PARSE_SEGMENT_START_TIME:4030,HLS_MEDIA_SEQUENCE_REQUIRED_IN_LIVE_STREAMS:4031,INVALID_STREAMS_CHOSEN:5005,NO_RECOGNIZED_KEY_SYSTEMS:6E3,REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE:6001,FAILED_TO_CREATE_CDM:6002,FAILED_TO_ATTACH_TO_VIDEO:6003,INVALID_SERVER_CERTIFICATE:6004,
FAILED_TO_CREATE_SESSION:6005,FAILED_TO_GENERATE_LICENSE_REQUEST:6006,LICENSE_REQUEST_FAILED:6007,LICENSE_RESPONSE_REJECTED:6008,ENCRYPTED_CONTENT_WITHOUT_DRM_INFO:6010,NO_LICENSE_SERVER_GIVEN:6012,OFFLINE_SESSION_REMOVED:6013,EXPIRED:6014,LOAD_INTERRUPTED:7E3,CAST_API_UNAVAILABLE:8E3,NO_CAST_RECEIVERS:8001,ALREADY_CASTING:8002,UNEXPECTED_CAST_ERROR:8003,CAST_CANCELED_BY_USER:8004,CAST_CONNECTION_TIMED_OUT:8005,CAST_RECEIVER_APP_UNAVAILABLE:8006,STORAGE_NOT_SUPPORTED:9E3,INDEXED_DB_ERROR:9001,OPERATION_ABORTED:9002,
REQUESTED_ITEM_NOT_FOUND:9003,MALFORMED_OFFLINE_URI:9004,CANNOT_STORE_LIVE_OFFLINE:9005,STORE_ALREADY_IN_PROGRESS:9006,NO_INIT_DATA_FOR_OFFLINE:9007,LOCAL_PLAYER_INSTANCE_REQUIRED:9008,CONTENT_UNSUPPORTED_BY_BROWSER:9009};var ja=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#(.*))?$/;function ka(a){var b;a instanceof ka?(la(this,a.ea),this.Ca=a.Ca,this.ja=a.ja,ma(this,a.Ka),this.V=a.V,na(this,oa(a.a)),this.wa=a.wa):a&&(b=String(a).match(ja))?(la(this,b[1]||"",!0),this.Ca=pa(b[2]||""),this.ja=pa(b[3]||"",!0),ma(this,b[4]),this.V=pa(b[5]||"",!0),na(this,b[6]||"",!0),this.wa=pa(b[7]||"")):this.a=new qa(null);}l=ka.prototype;l.ea="";l.Ca="";l.ja="";l.Ka=null;l.V="";l.wa="";
l.toString=function(){var a=[],b=this.ea;b&&a.push(ra(b,sa,!0),":");if(b=this.ja){a.push("//");var c=this.Ca;c&&a.push(ra(c,sa,!0),"@");a.push(encodeURIComponent(b).replace(/%25([0-9a-fA-F]{2})/g,"%$1"));b=this.Ka;null!=b&&a.push(":",String(b));}if(b=this.V)this.ja&&"/"!=b.charAt(0)&&a.push("/"),a.push(ra(b,"/"==b.charAt(0)?ta:ua,!0));(b=this.a.toString())&&a.push("?",b);(b=this.wa)&&a.push("#",ra(b,va));return a.join("")};
l.resolve=function(a){var b=new ka(this);"data"===b.ea&&(b=new ka);var c=!!a.ea;c?la(b,a.ea):c=!!a.Ca;c?b.Ca=a.Ca:c=!!a.ja;c?b.ja=a.ja:c=null!=a.Ka;var d=a.V;if(c)ma(b,a.Ka);else if(c=!!a.V){if("/"!=d.charAt(0))if(this.ja&&!this.V)d="/"+d;else{var e=b.V.lastIndexOf("/");-1!=e&&(d=b.V.substr(0,e+1)+d);}if(".."==d||"."==d)d="";else if(-1!=d.indexOf("./")||-1!=d.indexOf("/.")){for(var e=!d.lastIndexOf("/",0),d=d.split("/"),f=[],g=0;g<d.length;){var h=d[g++];"."==h?e&&g==d.length&&f.push(""):".."==h?((1<
f.length||1==f.length&&""!=f[0])&&f.pop(),e&&g==d.length&&f.push("")):(f.push(h),e=!0);}d=f.join("/");}}c?b.V=d:c=""!==a.a.toString();c?na(b,oa(a.a)):c=!!a.wa;c&&(b.wa=a.wa);return b};function la(a,b,c){a.ea=c?pa(b,!0):b;a.ea&&(a.ea=a.ea.replace(/:$/,""));}function ma(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.Ka=b;}else a.Ka=null;}function na(a,b,c){b instanceof qa?a.a=b:(c||(b=ra(b,wa)),a.a=new qa(b));}
function pa(a,b){return a?b?decodeURI(a):decodeURIComponent(a):""}function ra(a,b,c){return"string"==typeof a?(a=encodeURI(a).replace(b,xa),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function xa(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var sa=/[#\/\?@]/g,ua=/[\#\?:]/g,ta=/[\#\?]/g,wa=/[\#\?@]/g,va=/#/g;function qa(a){this.b=a||null;}qa.prototype.a=null;qa.prototype.c=null;
qa.prototype.toString=function(){if(this.b)return this.b;if(!this.a)return"";var a=[],b;for(b in this.a)for(var c=encodeURIComponent(b),d=this.a[b],e=0;e<d.length;e++){var f=c;""!==d[e]&&(f+="="+encodeURIComponent(d[e]));a.push(f);}return this.b=a.join("&")};function oa(a){var b=new qa;b.b=a.b;if(a.a){var c={},d;for(d in a.a)c[d]=a.a[d].concat();b.a=c;b.c=a.c;}return b}function u(){var a,b,c=new Promise(function(c,e){a=c;b=e;});c.resolve=a;c.reject=b;return c}function ya(a,b,c){var d=za();this.j=null==a.maxAttempts?d.maxAttempts:a.maxAttempts;this.f=null==a.baseDelay?d.baseDelay:a.baseDelay;this.i=null==a.fuzzFactor?d.fuzzFactor:a.fuzzFactor;this.h=null==a.backoffFactor?d.backoffFactor:a.backoffFactor;this.a=0;this.b=this.f;this.c=b||!1;this.g=c||null;this.c&&(this.a=1);}function Aa(a){if(a.a>=a.j)if(a.c)a.a=1,a.b=a.f;else return Promise.reject();var b=new u;a.a?(Ba(a,b.resolve,a.b*(1+(2*Math.random()-1)*a.i)),a.b*=a.h):b.resolve();a.a++;return b}
function za(){return{maxAttempts:2,baseDelay:1E3,backoffFactor:2,fuzzFactor:.5,timeout:0}}function Ba(a,b,c){if(a.g)if(a.g()||!c)b();else{var d=Math.min(200,c);Ca(function(){Ba(this,b,c-d);}.bind(a),d);}else Ca(b,c);}function Ca(a,b){window.setTimeout(a,b);}function Da(a,b,c,d,e){var f=e in d,g;for(g in b){var h=e+"."+g,k=f?d[e]:c[g];if(f||g in a)void 0===b[g]?void 0===k||f?delete a[g]:a[g]=k:k.constructor==Object&&b[g]&&b[g].constructor==Object?(a[g]||(a[g]=k),Da(a[g],b[g],k,d,h)):typeof b[g]==typeof k&&null!=b[g]&&b[g].constructor==k.constructor&&(a[g]=b[g]);}}
function Ea(a){function b(a){switch(typeof a){case "undefined":case "boolean":case "number":case "string":case "symbol":case "function":return a;default:if(!a)return a;if(0<=c.indexOf(a))return null;var d=a.constructor==Array;if(a.constructor!=Object&&!d)return null;c.push(a);var f=d?[]:{},g;for(g in a)f[g]=b(a[g]);d&&(f.length=a.length);return f}}var c=[];return b(a)}function Fa(a,b){return a.reduce(function(a,b,e){return b["catch"](a.bind(null,e))}.bind(null,b),Promise.reject())}function x(a,b){return a.concat(b)}function Ga(){}function Ha(a){return null!=a}function Ia(a,b,c){return c.indexOf(a)==b}function z(a){this.f=!1;this.a=[];this.b=[];this.c=[];this.g=a||null;}n("shaka.net.NetworkingEngine",z);z.RequestType={MANIFEST:0,SEGMENT:1,LICENSE:2,APP:3};z.PluginPriority={We:1,Ye:2,Te:3};var Ja={};function Ka(a,b,c){c=c||3;var d=Ja[a];if(!d||c>=d.ee)Ja[a]={ee:c,ce:b};}z.registerScheme=Ka;z.unregisterScheme=function(a){delete Ja[a];};z.prototype.ge=function(a){this.b.push(a);};z.prototype.registerRequestFilter=z.prototype.ge;z.prototype.Me=function(a){var b=this.b;a=b.indexOf(a);0<=a&&b.splice(a,1);};
z.prototype.unregisterRequestFilter=z.prototype.Me;z.prototype.Xc=function(){this.b=[];};z.prototype.clearAllRequestFilters=z.prototype.Xc;z.prototype.he=function(a){this.c.push(a);};z.prototype.registerResponseFilter=z.prototype.he;z.prototype.Ne=function(a){var b=this.c;a=b.indexOf(a);0<=a&&b.splice(a,1);};z.prototype.unregisterResponseFilter=z.prototype.Ne;z.prototype.Yc=function(){this.c=[];};z.prototype.clearAllResponseFilters=z.prototype.Yc;
function A(a,b){return{uris:a,method:"GET",body:null,headers:{},allowCrossSiteCredentials:!1,retryParameters:b}}z.prototype.o=function(){this.f=!0;this.b=[];this.c=[];for(var a=[],b=0;b<this.a.length;++b)a.push(this.a[b]["catch"](Ga));return Promise.all(a)};z.prototype.destroy=z.prototype.o;
z.prototype.request=function(a,b,c){var d=c||function(){return!1};if(this.f)return Promise.reject();b.method=b.method||"GET";b.headers=b.headers||{};b.retryParameters=b.retryParameters?Ea(b.retryParameters):za();b.uris=Ea(b.uris);var e=Date.now(),f=Promise.resolve();this.b.forEach(function(c){f=f.then(c.bind(null,a,b));});f=f["catch"](function(a){throw new p(2,1,1006,a);});f=f.then(function(){var f=Date.now()-e,h=new ya(b.retryParameters,!1,c);return Aa(h).then(function(){return La(this,a,b,h,0,f,
d)}.bind(this))}.bind(this));this.a.push(f);return f.then(function(b){0<=this.a.indexOf(f)&&this.a.splice(this.a.indexOf(f),1);this.g&&!b.fromCache&&1==a&&this.g(b.timeMs,b.data.byteLength);return b}.bind(this))["catch"](function(a){a&&(a.severity=2);0<=this.a.indexOf(f)&&this.a.splice(this.a.indexOf(f),1);return Promise.reject(a)}.bind(this))};z.prototype.request=z.prototype.request;
function La(a,b,c,d,e,f,g){if(a.f||g())return Promise.reject();var h=new ka(c.uris[e]),k=h.ea;k||(k=location.protocol,k=k.slice(0,-1),la(h,k),c.uris[e]=h.toString());k=(k=Ja[k])?k.ce:null;if(!k)return Promise.reject(new p(2,1,1E3,h));var m=Date.now();return k(c.uris[e],c,b).then(function(a){void 0==a.timeMs&&(a.timeMs=Date.now()-m);var c=Date.now(),d=Promise.resolve();this.c.forEach(function(c){d=d.then(function(){return Promise.resolve(c(b,a))}.bind(this));}.bind(this));d=d["catch"](function(a){var b=
2;a instanceof p&&(b=a.severity);throw new p(b,1,1007,a);});return d.then(function(){a.timeMs+=Date.now()-c;a.timeMs+=f;return a})}.bind(a))["catch"](function(a){if(a&&1==a.severity)return e=(e+1)%c.uris.length,g()?Promise.reject():Aa(d).then(function(){return La(this,b,c,d,e,f,g)}.bind(this),function(){throw a;});throw a;}.bind(a))}function Ma(a,b){for(var c=[],d=0;d<a.length;++d){for(var e=!1,f=0;f<c.length&&!(e=b?b(a[d],c[f]):a[d]===c[f]);++f);e||c.push(a[d]);}return c}function Na(a,b,c){for(var d=0;d<a.length;++d)if(c(a[d],b))return d;return-1}function Oa(a,b){var c=a.indexOf(b);-1<c&&a.splice(c,1);}function Pa(a,b){var c=0;a.forEach(function(a){c+=b(a)?1:0;});return c}function Qa(){this.a={};}Qa.prototype.push=function(a,b){this.a.hasOwnProperty(a)?this.a[a].push(b):this.a[a]=[b];};Qa.prototype.get=function(a){return(a=this.a[a])?a.slice():null};Qa.prototype.remove=function(a,b){var c=this.a[a];if(c)for(var d=0;d<c.length;++d)c[d]==b&&(c.splice(d,1),--d);};function Ra(){this.a=new Qa;}Ra.prototype.o=function(){Sa(this);this.a=null;return Promise.resolve()};function B(a,b,c,d){a.a&&(b=new Ta(b,c,d),a.a.push(c,b));}function Ua(a,b,c,d){B(a,b,c,function(a){this.na(b,c);d(a);}.bind(a));}Ra.prototype.na=function(a,b){if(this.a)for(var c=this.a.get(b)||[],d=0;d<c.length;++d){var e=c[d];e.target==a&&(e.na(),this.a.remove(b,e));}};function Sa(a){if(a.a){var b=a.a,c=[],d;for(d in b.a)c.push.apply(c,b.a[d]);for(b=0;b<c.length;++b)c[b].na();a.a.a={};}}
function Ta(a,b,c){this.target=a;this.type=b;this.a=c;this.target.addEventListener(b,c,!1);}Ta.prototype.na=function(){this.target.removeEventListener(this.type,this.a,!1);this.a=this.target=null;};function C(a,b){var c=b||{},d;for(d in c)this[d]=c[d];this.defaultPrevented=this.cancelable=this.bubbles=!1;this.timeStamp=window.performance&&window.performance.now?window.performance.now():Date.now();this.type=a;this.isTrusted=!1;this.target=this.currentTarget=null;this.a=!1;}C.prototype.preventDefault=function(){this.cancelable&&(this.defaultPrevented=!0);};C.prototype.stopImmediatePropagation=function(){this.a=!0;};C.prototype.stopPropagation=function(){};function D(a,b){if(!b.length)return a;var c=b.map(function(a){return new ka(a)});return a.map(function(a){return new ka(a)}).map(function(a){return c.map(a.resolve.bind(a))}).reduce(x,[]).map(function(a){return a.toString()})}function Va(a,b){return{keySystem:a,licenseServerUri:"",distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:"",videoRobustness:"",serverCertificate:null,initData:b||[],keyIds:[]}}var Wa=1/15;function Xa(a){return!a||!Object.keys(a).length}function Ya(a){return Object.keys(a).map(function(b){return a[b]})}function Za(a,b){return Object.keys(a).every(function(c){return b(c,a[c])})}function $a(a,b){Object.keys(a).forEach(function(c){b(c,a[c]);});}function ab(a,b){var c=a;b&&(c+='; codecs="'+b+'"');return c}var bb={codecs:"codecs",frameRate:"framerate",bandwidth:"bitrate",width:"width",height:"height",channelsCount:"channels"};function E(a){if(!a)return"";a=new Uint8Array(a);239==a[0]&&187==a[1]&&191==a[2]&&(a=a.subarray(3));a=escape(cb(a));try{return decodeURIComponent(a)}catch(b){throw new p(2,2,2004);}}n("shaka.util.StringUtils.fromUTF8",E);
function db(a,b,c){if(!a)return"";if(!c&&a.byteLength%2)throw new p(2,2,2004);if(a instanceof ArrayBuffer)var d=a;else c=new Uint8Array(a.byteLength),c.set(new Uint8Array(a)),d=c.buffer;a=Math.floor(a.byteLength/2);c=new Uint16Array(a);d=new DataView(d);for(var e=0;e<a;e++)c[e]=d.getUint16(2*e,b);return cb(c)}n("shaka.util.StringUtils.fromUTF16",db);
function eb(a){var b=new Uint8Array(a);if(239==b[0]&&187==b[1]&&191==b[2])return E(b);if(254==b[0]&&255==b[1])return db(b.subarray(2),!1);if(255==b[0]&&254==b[1])return db(b.subarray(2),!0);var c=function(a,b){return a.byteLength<=b||32<=a[b]&&126>=a[b]}.bind(null,b);if(b[0]||b[2]){if(!b[1]&&!b[3])return db(a,!0);if(c(0)&&c(1)&&c(2)&&c(3))return E(a)}else return db(a,!1);throw new p(2,2,2003);}n("shaka.util.StringUtils.fromBytesAutoDetect",eb);
function fb(a){a=unescape(encodeURIComponent(a));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b.buffer}n("shaka.util.StringUtils.toUTF8",fb);function cb(a){for(var b="",c=0;c<a.length;c+=16E3)b+=String.fromCharCode.apply(null,a.subarray(c,c+16E3));return b}function gb(a){this.a=null;this.b=function(){this.a=null;a();}.bind(this);}gb.prototype.cancel=function(){null!=this.a&&(clearTimeout(this.a),this.a=null);};function hb(a){a.cancel();a.a=setTimeout(a.b,500);}function ib(a,b){a.cancel();var c=function(){this.b();this.a=setTimeout(c,1E3*b);}.bind(a);a.a=setTimeout(c,1E3*b);}function jb(a,b){var c=void 0==b?!0:b,d=window.btoa(String.fromCharCode.apply(null,a)).replace(/\+/g,"-").replace(/\//g,"_");return c?d:d.replace(/=*$/,"")}n("shaka.util.Uint8ArrayUtils.toBase64",jb);function kb(a){a=window.atob(a.replace(/-/g,"+").replace(/_/g,"/"));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b}n("shaka.util.Uint8ArrayUtils.fromBase64",kb);
function lb(a){for(var b=new Uint8Array(a.length/2),c=0;c<a.length;c+=2)b[c/2]=window.parseInt(a.substr(c,2),16);return b}n("shaka.util.Uint8ArrayUtils.fromHex",lb);function mb(a){for(var b="",c=0;c<a.length;++c){var d=a[c].toString(16);1==d.length&&(d="0"+d);b+=d;}return b}n("shaka.util.Uint8ArrayUtils.toHex",mb);function nb(a,b){if(!a&&!b)return!0;if(!a||!b||a.length!=b.length)return!1;for(var c=0;c<a.length;++c)if(a[c]!=b[c])return!1;return!0}n("shaka.util.Uint8ArrayUtils.equal",nb);
function ob(a){for(var b=0,c=0;c<arguments.length;++c)b+=arguments[c].length;for(var b=new Uint8Array(b),d=0,c=0;c<arguments.length;++c)b.set(arguments[c],d),d+=arguments[c].length;return b}n("shaka.util.Uint8ArrayUtils.concat",ob);function pb(a){this.v=a;this.l=this.j=this.w=null;this.M=!1;this.b=null;this.f=new Ra;this.a=[];this.m=[];this.i=new u;this.h=null;this.g=function(b){this.i.reject(b);a.onError(b);}.bind(this);this.C={};this.H=new gb(this.fe.bind(this));this.ia=this.c=!1;this.L=[];this.ha=!1;this.B=new gb(this.de.bind(this));ib(this.B,1);this.i["catch"](function(){});}l=pb.prototype;
l.o=function(){this.c=!0;var a=this.a.map(function(a){return(a.fa.close()||Promise.resolve())["catch"](Ga)});this.i.reject();this.f&&a.push(this.f.o());this.l&&a.push(this.l.setMediaKeys(null)["catch"](Ga));this.B&&(this.B.cancel(),this.B=null);this.H&&(this.H.cancel(),this.H=null);this.f=this.l=this.j=this.w=this.b=null;this.a=[];this.m=[];this.v=this.g=this.h=null;return Promise.all(a)};l.configure=function(a){this.h=a;};
l.init=function(a,b){var c={},d=[];this.ia=b;this.m=a.offlineSessionIds;qb(this,a,b||0<a.offlineSessionIds.length,c,d);return d.length?rb(this,c,d):(this.M=!0,Promise.resolve())};
function sb(a,b){if(!a.j)return Ua(a.f,b,"encrypted",function(){this.g(new p(2,6,6010));}.bind(a)),Promise.resolve();a.l=b;Ua(a.f,a.l,"play",a.Kd.bind(a));var c=a.l.setMediaKeys(a.j),c=c["catch"](function(a){return Promise.reject(new p(2,6,6003,a.message))}),d=null;a.b.serverCertificate&&a.b.serverCertificate.length&&(d=a.j.setServerCertificate(a.b.serverCertificate).then(function(){})["catch"](function(a){return Promise.reject(new p(2,6,6004,a.message))}));return Promise.all([c,d]).then(function(){if(this.c)return Promise.reject();
tb(this);this.b.initData.length||this.m.length||B(this.f,this.l,"encrypted",this.zd.bind(this));}.bind(a))["catch"](function(a){return this.c?Promise.resolve():Promise.reject(a)}.bind(a))}function ub(a,b){return Promise.all(b.map(function(a){return vb(this,a).then(function(a){if(a){for(var b=new u,c=0;c<this.a.length;c++)if(this.a[c].fa==a){this.a[c].oa=b;break}return Promise.all([a.remove(),b])}}.bind(this))}.bind(a)))}
function tb(a){var b=a.b?a.b.initData:[];b.forEach(function(a){wb(this,a.initDataType,a.initData);}.bind(a));a.m.forEach(function(a){vb(this,a);}.bind(a));b.length||a.m.length||a.i.resolve();return a.i}l.keySystem=function(){return this.b?this.b.keySystem:""};function xb(a){return a.a.map(function(a){return a.fa.sessionId})}l.pb=function(){var a=this.a.map(function(a){a=a.fa.expiration;return isNaN(a)?Infinity:a});return Math.min.apply(Math,a)};
function qb(a,b,c,d,e){var f=yb(a);b.periods.forEach(function(a){a.variants.forEach(function(a){f&&(a.drmInfos=[f]);a.drmInfos.forEach(function(b){zb(this,b);var f=d[b.keySystem];f||(f={audioCapabilities:[],videoCapabilities:[],distinctiveIdentifier:"optional",persistentState:c?"required":"optional",sessionTypes:[c?"persistent-license":"temporary"],label:b.keySystem,drmInfos:[]},d[b.keySystem]=f,e.push(b.keySystem));f.drmInfos.push(b);b.distinctiveIdentifierRequired&&(f.distinctiveIdentifier="required");
b.persistentStateRequired&&(f.persistentState="required");var g=[];a.video&&g.push(a.video);a.audio&&g.push(a.audio);g.forEach(function(a){("video"==a.type?f.videoCapabilities:f.audioCapabilities).push({robustness:("video"==a.type?b.videoRobustness:b.audioRobustness)||"",contentType:ab(a.mimeType,a.codecs)});}.bind(this));}.bind(this));}.bind(this));}.bind(a));}
function rb(a,b,c){if(1==c.length&&""==c[0])return Promise.reject(new p(2,6,6E3));var d=new u,e=d;[!0,!1].forEach(function(a){c.forEach(function(c){var d=b[c];d.drmInfos.some(function(a){return!!a.licenseServerUri})==a&&(d.audioCapabilities.length||delete d.audioCapabilities,d.videoCapabilities.length||delete d.videoCapabilities,e=e["catch"](function(){return this.c?Promise.reject():navigator.requestMediaKeySystemAccess(c,[d])}.bind(this)));}.bind(this));}.bind(a));e=e["catch"](function(){return Promise.reject(new p(2,
6,6001))});e=e.then(function(a){if(this.c)return Promise.reject();var c=0<=navigator.userAgent.indexOf("Edge/"),d=a.getConfiguration();this.w=(d.audioCapabilities||[]).concat(d.videoCapabilities||[]).map(function(a){return a.contentType});c&&(this.w=null);c=b[a.keySystem];Ab(this,a.keySystem,c,c.drmInfos);return this.b.licenseServerUri?a.createMediaKeys():Promise.reject(new p(2,6,6012))}.bind(a)).then(function(a){if(this.c)return Promise.reject();this.j=a;this.M=!0;}.bind(a))["catch"](function(a){if(this.c)return Promise.resolve();
this.w=this.b=null;return a instanceof p?Promise.reject(a):Promise.reject(new p(2,6,6002,a.message))}.bind(a));d.reject();return e}
function zb(a,b){var c=b.keySystem;if(c){if(!b.licenseServerUri){var d=a.h.servers[c];d&&(b.licenseServerUri=d);}b.keyIds||(b.keyIds=[]);if(c=a.h.advanced[c])b.distinctiveIdentifierRequired||(b.distinctiveIdentifierRequired=c.distinctiveIdentifierRequired),b.persistentStateRequired||(b.persistentStateRequired=c.persistentStateRequired),b.videoRobustness||(b.videoRobustness=c.videoRobustness),b.audioRobustness||(b.audioRobustness=c.audioRobustness),b.serverCertificate||(b.serverCertificate=c.serverCertificate);}}
function yb(a){if(Xa(a.h.clearKeys))return null;var b=[],c=[],d;for(d in a.h.clearKeys){var e=a.h.clearKeys[d],f=lb(d),e=lb(e),f={kty:"oct",kid:jb(f,!1),k:jb(e,!1)};b.push(f);c.push(f.kid);}a=JSON.stringify({keys:b});c=JSON.stringify({kids:c});c=[{initData:new Uint8Array(fb(c)),initDataType:"keyids"}];return{keySystem:"org.w3.clearkey",licenseServerUri:"data:application/json;base64,"+window.btoa(a),distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:"",videoRobustness:"",serverCertificate:null,
initData:c,keyIds:[]}}function Ab(a,b,c,d){var e=[],f=[],g=[],h=[];Bb(d,e,f,g,h);a.b={keySystem:b,licenseServerUri:e[0],distinctiveIdentifierRequired:"required"==c.distinctiveIdentifier,persistentStateRequired:"required"==c.persistentState,audioRobustness:c.audioCapabilities?c.audioCapabilities[0].robustness:"",videoRobustness:c.videoCapabilities?c.videoCapabilities[0].robustness:"",serverCertificate:f[0],initData:g,keyIds:h};}
function Bb(a,b,c,d,e){function f(a,b){return a.keyId&&a.keyId==b.keyId?!0:a.initDataType==b.initDataType&&nb(a.initData,b.initData)}a.forEach(function(a){-1==b.indexOf(a.licenseServerUri)&&b.push(a.licenseServerUri);a.serverCertificate&&-1==Na(c,a.serverCertificate,nb)&&c.push(a.serverCertificate);a.initData&&a.initData.forEach(function(a){-1==Na(d,a,f)&&d.push(a);});if(a.keyIds)for(var g=0;g<a.keyIds.length;++g)-1==e.indexOf(a.keyIds[g])&&e.push(a.keyIds[g]);});}
l.zd=function(a){for(var b=new Uint8Array(a.initData),c=0;c<this.a.length;++c)if(nb(b,this.a[c].initData))return;wb(this,a.initDataType,b);};
function vb(a,b){try{var c=a.j.createSession("persistent-license");}catch(f){var d=new p(2,6,6005,f.message);a.g(d);return Promise.reject(d)}B(a.f,c,"message",a.wc.bind(a));B(a.f,c,"keystatuseschange",a.qc.bind(a));var e={initData:null,fa:c,loaded:!1,Jb:Infinity,oa:null};a.a.push(e);return c.load(b).then(function(a){if(!this.c){if(a)return e.loaded=!0,this.a.every(function(a){return a.loaded})&&this.i.resolve(),c;this.a.splice(this.a.indexOf(e),1);this.g(new p(2,6,6013));}}.bind(a),function(a){this.c||
(this.a.splice(this.a.indexOf(e),1),this.g(new p(2,6,6005,a.message)));}.bind(a))}
function wb(a,b,c){try{var d=a.ia?a.j.createSession("persistent-license"):a.j.createSession();}catch(e){a.g(new p(2,6,6005,e.message));return}B(a.f,d,"message",a.wc.bind(a));B(a.f,d,"keystatuseschange",a.qc.bind(a));a.a.push({initData:c,fa:d,loaded:!1,Jb:Infinity,oa:null});d.generateRequest(b,c.buffer)["catch"](function(a){if(!this.c){for(var b=0;b<this.a.length;++b)if(this.a[b].fa==d){this.a.splice(b,1);break}this.g(new p(2,6,6006,a.message));}}.bind(a));}
l.wc=function(a){this.h.delayLicenseRequestUntilPlayed&&this.l.paused&&!this.ha?this.L.push(a):Cb(this,a);};
function Cb(a,b){for(var c=b.target,d,e=0;e<a.a.length;e++)if(a.a[e].fa==c){d=a.a[e];break}e=A([a.b.licenseServerUri],a.h.retryParameters);e.body=b.message;e.method="POST";"com.microsoft.playready"!=a.b.keySystem&&"com.chromecast.playready"!=a.b.keySystem||Db(e);a.v.Va.request(2,e).then(function(a){return this.c?Promise.reject():c.update(a.data).then(function(){this.v.onEvent(new C("drmsessionupdate"));d&&(d.oa&&d.oa.resolve(),setTimeout(function(){d.loaded=!0;this.a.every(function(a){return a.loaded})&&
this.i.resolve();}.bind(this),5E3));}.bind(this))}.bind(a),function(a){if(this.c)return Promise.resolve();a=new p(2,6,6007,a);this.g(a);d&&d.oa&&d.oa.reject(a);}.bind(a))["catch"](function(a){if(this.c)return Promise.resolve();a=new p(2,6,6008,a.message);this.g(a);d&&d.oa&&d.oa.reject(a);}.bind(a));}
function Db(a){var b=db(a.body,!0,!0);if(-1==b.indexOf("PlayReadyKeyMessage"))a.headers["Content-Type"]="text/xml; charset=utf-8";else{for(var b=(new DOMParser).parseFromString(b,"application/xml"),c=b.getElementsByTagName("HttpHeader"),d=0;d<c.length;++d)a.headers[c[d].querySelector("name").textContent]=c[d].querySelector("value").textContent;a.body=kb(b.querySelector("Challenge").textContent).buffer;}}
l.qc=function(a){a=a.target;var b;for(b=0;b<this.a.length&&this.a[b].fa!=a;++b);if(b!=this.a.length){var c=!1;a.keyStatuses.forEach(function(a,d){if("string"==typeof d){var e=d;d=a;a=e;}if("com.microsoft.playready"==this.b.keySystem&&16==d.byteLength){var e=new DataView(d),f=e.getUint32(0,!0),k=e.getUint16(4,!0),m=e.getUint16(6,!0);e.setUint32(0,f,!1);e.setUint16(4,k,!1);e.setUint16(6,m,!1);}"com.microsoft.playready"==this.b.keySystem&&"status-pending"==a&&(a="usable");"status-pending"!=a&&(this.a[b].loaded=
!0,this.a.every(function(a){return a.loaded})&&this.i.resolve());"expired"==a&&(c=!0);e=mb(new Uint8Array(d));this.C[e]=a;}.bind(this));var d=a.expiration-Date.now();(0>d||c&&1E3>d)&&!this.a[b].oa&&(this.a.splice(b,1),a.close());hb(this.H);}};l.fe=function(){function a(a,c){return"expired"==c}!Xa(this.C)&&Za(this.C,a)&&this.g(new p(2,6,6014));this.v.Kb(this.C);};
function Eb(){var a=[],b=[{contentType:'video/mp4; codecs="avc1.42E01E"'},{contentType:'video/webm; codecs="vp8"'}],c=[{videoCapabilities:b,persistentState:"required",sessionTypes:["persistent-license"]},{videoCapabilities:b}],d={};"org.w3.clearkey com.widevine.alpha com.microsoft.playready com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime".split(" ").forEach(function(b){var e=navigator.requestMediaKeySystemAccess(b,c).then(function(a){var c=a.getConfiguration().sessionTypes,c=
c?0<=c.indexOf("persistent-license"):!1;0<=navigator.userAgent.indexOf("Tizen 3")&&(c=!1);d[b]={persistentState:c};return a.createMediaKeys()})["catch"](function(){d[b]=null;});a.push(e);});return Promise.all(a).then(function(){return d})}l.Kd=function(){for(var a=0;a<this.L.length;a++)Cb(this,this.L[a]);this.ha=!0;this.L=[];};function Fb(a,b){var c=a.keySystem();return!b.drmInfos.length||b.drmInfos.some(function(a){return a.keySystem==c})}
function Gb(a,b){if(!a.length)return b;if(!b.length)return a;for(var c=[],d=0;d<a.length;d++)for(var e=0;e<b.length;e++)if(a[d].keySystem==b[e].keySystem){var f=a[d],e=b[e],g=[],g=g.concat(f.initData||[]),g=g.concat(e.initData||[]),h=[],h=h.concat(f.keyIds),h=h.concat(e.keyIds);c.push({keySystem:f.keySystem,licenseServerUri:f.licenseServerUri||e.licenseServerUri,distinctiveIdentifierRequired:f.distinctiveIdentifierRequired||e.distinctiveIdentifierRequired,persistentStateRequired:f.persistentStateRequired||
e.persistentStateRequired,videoRobustness:f.videoRobustness||e.videoRobustness,audioRobustness:f.audioRobustness||e.audioRobustness,serverCertificate:f.serverCertificate||e.serverCertificate,initData:g,keyIds:h});break}return c}l.de=function(){this.a.forEach(function(a){var b=a.Jb,c=a.fa.expiration;isNaN(c)&&(c=Infinity);c!=b&&(this.v.onExpirationUpdated(a.fa.sessionId,c),a.Jb=c);}.bind(this));};function Hb(a){return!a||1==a.length&&1E-6>a.end(0)-a.start(0)?null:a.length?a.end(a.length-1):null}function Ib(a,b){return!a||!a.length||1==a.length&&1E-6>a.end(0)-a.start(0)?!1:b>=a.start(0)&&b<=a.end(a.length-1)}function Jb(a,b){if(!a||!a.length||1==a.length&&1E-6>a.end(0)-a.start(0))return 0;for(var c=0,d=a.length-1;0<=d&&a.end(d)>b;--d)c+=a.end(d)-Math.max(a.start(d),b);return c}function Kb(a){if(!a)return[];for(var b=[],c=0;c<a.length;c++)b.push({start:a.start(c),end:a.end(c)});return b}function Lb(){this.a=new muxjs.mp4.Transmuxer;this.b=null;this.c=[];this.f=!1;this.a.on("data",this.h.bind(this));this.a.on("done",this.g.bind(this));}Lb.prototype.o=function(){this.a.dispose();this.a=null;return Promise.resolve()};function Mb(a,b){var c=b.replace("mp2t","mp4");"audio"==a&&(c=c.replace("video","audio"));return c}function Nb(a,b,c){a.b=new u;a.c=[];null==c||a.f||(a.a.setBaseMediaDecodeTime(9E4*c),a.f=!0);b=new Uint8Array(b);a.a.push(b);a.a.flush();return a.b}
Lb.prototype.h=function(a){var b=new Uint8Array(a.data.byteLength+a.initSegment.byteLength);b.set(a.initSegment,0);b.set(a.data,a.initSegment.byteLength);this.c.push(b);};Lb.prototype.g=function(){var a=ob.apply(null,this.c);this.b.resolve(a);};function Ob(a){this.c=null;this.f=a;this.h=this.i=0;this.g=Infinity;this.b=this.a=null;}var Pb={};function Qb(a,b){b.length?(ha("The use of stateless text parsers is deprecated."),Pb[a]=Rb.bind(null,b)):Pb[a]=b;}n("shaka.text.TextEngine.registerParser",Qb);n("shaka.text.TextEngine.unregisterParser",function(a){delete Pb[a];});Ob.prototype.o=function(){this.f=this.c=null;return Promise.resolve()};Ob.prototype.ve=function(a){this.f=a;};Ob.prototype.setDisplayer=Ob.prototype.ve;
function Sb(a,b,c,d){return Promise.resolve().then(function(){if(this.c&&this.f)if(null==c||null==d)this.c.parseInit(b);else{var a={periodStart:this.i,segmentStart:c,segmentEnd:d},a=this.c.parseMedia(new Uint8Array(b),a).filter(function(a){return a.startTime>=this.h&&a.startTime<this.g}.bind(this));this.f.append(a);null==this.a&&(this.a=Math.max(c,this.h));this.b=Math.min(d,this.g);}}.bind(a))}
Ob.prototype.remove=function(a,b){return Promise.resolve().then(function(){!this.f||!this.f.remove(a,b)||null==this.a||b<=this.a||a>=this.b||(a<=this.a&&b>=this.b?this.a=this.b=null:a<=this.a&&b<this.b?this.a=b:a>this.a&&b>=this.b&&(this.b=a));}.bind(this))};function Rb(a){this.ba=a;}Rb.prototype.parseInit=function(a){this.ba(a,0,null,null);};
Rb.prototype.parseMedia=function(a,b){if(a.byteLength!=a.buffer.byteLength||a.byteOffset){var c=new Uint8Array(a.byteLength);c.set(a);c=c.buffer;}else c=a.buffer;return this.ba(c,b.periodStart,b.segmentStart,b.segmentEnd)};function Tb(a,b,c){this.g=a;this.f=b;this.l=c;this.b={};this.a=null;this.c={};this.i=new Ra;this.j=!1;this.h={};}
function Ub(){var a={};'video/mp4; codecs="avc1.42E01E",video/mp4; codecs="avc3.42E01E",video/mp4; codecs="hev1.1.6.L93.90",video/mp4; codecs="hvc1.1.6.L93.90",video/mp4; codecs="hev1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="hvc1.2.4.L153.B0"; eotf="smpte2084",video/mp4; codecs="vp9",video/mp4; codecs="vp09.00.10.08",audio/mp4; codecs="mp4a.40.2",audio/mp4; codecs="ac-3",audio/mp4; codecs="ec-3",audio/mp4; codecs="opus",audio/mp4; codecs="flac",video/webm; codecs="vp8",video/webm; codecs="vp9",video/webm; codecs="av1",audio/webm; codecs="vorbis",audio/webm; codecs="opus",video/mp2t; codecs="avc1.42E01E",video/mp2t; codecs="avc3.42E01E",video/mp2t; codecs="hvc1.1.6.L93.90",video/mp2t; codecs="mp4a.40.2",video/mp2t; codecs="ac-3",video/mp2t; codecs="ec-3",video/mp2t; codecs="mp4a.40.2",text/vtt,application/mp4; codecs="wvtt",application/ttml+xml,application/mp4; codecs="stpp"'.split(",").forEach(function(b){a[b]=!!Pb[b]||
MediaSource.isTypeSupported(b);var c=b.split(";")[0];a[c]=a[c]||a[b];});return a}l=Tb.prototype;l.o=function(){this.j=!0;var a=[],b;for(b in this.c){var c=this.c[b],d=c[0];this.c[b]=c.slice(0,1);d&&a.push(d.p["catch"](Ga));for(d=1;d<c.length;++d)c[d].p["catch"](Ga),c[d].p.reject();}this.a&&a.push(this.a.o());for(b in this.h)a.push(this.h[b].o());return Promise.all(a).then(function(){this.i.o();this.l=this.a=this.f=this.g=this.i=null;this.b={};this.h={};this.c={};}.bind(this))};
l.init=function(a){for(var b in a){var c=a[b],c=ab(c.mimeType,c.codecs);"text"==b?Vb(this,c):(!MediaSource.isTypeSupported(c)&&window.muxjs&&"mp2t"==c.split(";")[0].split("/")[1]&&MediaSource.isTypeSupported(Mb(b,c))&&(this.h[b]=new Lb,c=Mb(b,c)),c=this.f.addSourceBuffer(c),B(this.i,c,"error",this.Ge.bind(this,b)),B(this.i,c,"updateend",this.Ja.bind(this,b)),this.b[b]=c,this.c[b]=[]);}};function Vb(a,b){a.a||(a.a=new Ob(a.l));a.a.c=new Pb[b];}
function Wb(a,b){if("text"==b)var c=a.a.a;else c=Xb(a,b),c=!c||1==c.length&&1E-6>c.end(0)-c.start(0)?null:1==c.length&&0>c.start(0)?0:c.length?c.start(0):null;return c}l.Bb=function(){var a=this.a&&null!=this.a.a?[{start:this.a.a,end:this.a.b}]:[];return{total:Kb(this.g.buffered),audio:Kb(Xb(this,"audio")),video:Kb(Xb(this,"video")),text:a}};function Xb(a,b){try{return a.b[b].buffered}catch(c){return null}}
function Yb(a,b,c,d,e){return"text"==b?Sb(a.a,c,d,e):a.h[b]?Nb(a.h[b],c,d).then(function(a){return Zb(this,b,this.Nc.bind(this,b,a.buffer))}.bind(a)):Zb(a,b,a.Nc.bind(a,b,c))}l.remove=function(a,b,c){return"text"==a?this.a.remove(b,c):Zb(this,a,this.Cc.bind(this,a,b,c))};function $b(a,b){return"text"==b?a.a.remove(0,Infinity):Zb(a,b,a.Cc.bind(a,b,0,a.f.duration))}
function ac(a,b,c,d,e){return"text"==b?(a.a.i=c,a=a.a,a.h=d,a.g=e,Promise.resolve()):Promise.all([Zb(a,b,a.Tc.bind(a,b)),Zb(a,b,a.xe.bind(a,b,c)),Zb(a,b,a.ue.bind(a,b,d,e))])}l.endOfStream=function(a){return bc(this,function(){a?this.f.endOfStream(a):this.f.endOfStream();}.bind(this))};l.ga=function(a){return bc(this,function(){this.f.duration=a;}.bind(this))};l.ka=function(){return this.f.duration};l.Nc=function(a,b){this.b[a].appendBuffer(b);};
l.Cc=function(a,b,c){c<=b?this.Ja(a):this.b[a].remove(b,c);};l.Tc=function(a){var b=this.b[a].appendWindowStart,c=this.b[a].appendWindowEnd;this.b[a].abort();this.b[a].appendWindowStart=b;this.b[a].appendWindowEnd=c;this.Ja(a);};l.bd=function(a){this.g.currentTime-=.001;this.Ja(a);};l.xe=function(a,b){this.b[a].timestampOffset=b;this.Ja(a);};l.ue=function(a,b,c){this.b[a].appendWindowStart=0;this.b[a].appendWindowEnd=c;this.b[a].appendWindowStart=b;this.Ja(a);};
l.Ge=function(a){this.c[a][0].p.reject(new p(2,3,3014,this.g.error?this.g.error.code:0));};l.Ja=function(a){var b=this.c[a][0];b&&(b.p.resolve(),cc(this,a));};function Zb(a,b,c){if(a.j)return Promise.reject();c={start:c,p:new u};a.c[b].push(c);if(1==a.c[b].length)try{c.start();}catch(d){"QuotaExceededError"==d.name?c.p.reject(new p(2,3,3017,b)):c.p.reject(new p(2,3,3015,d)),cc(a,b);}return c.p}
function bc(a,b){if(a.j)return Promise.reject();var c=[],d;for(d in a.b){var e=new u,f={start:function(a){a.resolve();}.bind(null,e),p:e};a.c[d].push(f);c.push(e);1==a.c[d].length&&f.start();}return Promise.all(c).then(function(){var a;try{b();}catch(k){var c=Promise.reject(new p(2,3,3015,k));}for(a in this.b)cc(this,a);return c}.bind(a),function(){return Promise.reject()}.bind(a))}function cc(a,b){a.c[b].shift();var c=a.c[b][0];if(c)try{c.start();}catch(d){c.p.reject(new p(2,3,3015,d)),cc(a,b);}}function dc(a,b,c){return c==b||a>=ec&&c==b.split("-")[0]||a>=fc&&c.split("-")[0]==b.split("-")[0]?!0:!1}var ec=1,fc=2;function gc(a){a=a.toLowerCase().split("-");var b=hc[a[0]];b&&(a[0]=b);return a.join("-")}
var hc={aar:"aa",abk:"ab",afr:"af",aka:"ak",alb:"sq",amh:"am",ara:"ar",arg:"an",arm:"hy",asm:"as",ava:"av",ave:"ae",aym:"ay",aze:"az",bak:"ba",bam:"bm",baq:"eu",bel:"be",ben:"bn",bih:"bh",bis:"bi",bod:"bo",bos:"bs",bre:"br",bul:"bg",bur:"my",cat:"ca",ces:"cs",cha:"ch",che:"ce",chi:"zh",chu:"cu",chv:"cv",cor:"kw",cos:"co",cre:"cr",cym:"cy",cze:"cs",dan:"da",deu:"de",div:"dv",dut:"nl",dzo:"dz",ell:"el",eng:"en",epo:"eo",est:"et",eus:"eu",ewe:"ee",fao:"fo",fas:"fa",fij:"fj",fin:"fi",fra:"fr",fre:"fr",
fry:"fy",ful:"ff",geo:"ka",ger:"de",gla:"gd",gle:"ga",glg:"gl",glv:"gv",gre:"el",grn:"gn",guj:"gu",hat:"ht",hau:"ha",heb:"he",her:"hz",hin:"hi",hmo:"ho",hrv:"hr",hun:"hu",hye:"hy",ibo:"ig",ice:"is",ido:"io",iii:"ii",iku:"iu",ile:"ie",ina:"ia",ind:"id",ipk:"ik",isl:"is",ita:"it",jav:"jv",jpn:"ja",kal:"kl",kan:"kn",kas:"ks",kat:"ka",kau:"kr",kaz:"kk",khm:"km",kik:"ki",kin:"rw",kir:"ky",kom:"kv",kon:"kg",kor:"ko",kua:"kj",kur:"ku",lao:"lo",lat:"la",lav:"lv",lim:"li",lin:"ln",lit:"lt",ltz:"lb",lub:"lu",
lug:"lg",mac:"mk",mah:"mh",mal:"ml",mao:"mi",mar:"mr",may:"ms",mkd:"mk",mlg:"mg",mlt:"mt",mon:"mn",mri:"mi",msa:"ms",mya:"my",nau:"na",nav:"nv",nbl:"nr",nde:"nd",ndo:"ng",nep:"ne",nld:"nl",nno:"nn",nob:"nb",nor:"no",nya:"ny",oci:"oc",oji:"oj",ori:"or",orm:"om",oss:"os",pan:"pa",per:"fa",pli:"pi",pol:"pl",por:"pt",pus:"ps",que:"qu",roh:"rm",ron:"ro",rum:"ro",run:"rn",rus:"ru",sag:"sg",san:"sa",sin:"si",slk:"sk",slo:"sk",slv:"sl",sme:"se",smo:"sm",sna:"sn",snd:"sd",som:"so",sot:"st",spa:"es",sqi:"sq",
srd:"sc",srp:"sr",ssw:"ss",sun:"su",swa:"sw",swe:"sv",tah:"ty",tam:"ta",tat:"tt",tel:"te",tgk:"tg",tgl:"tl",tha:"th",tib:"bo",tir:"ti",ton:"to",tsn:"tn",tso:"ts",tuk:"tk",tur:"tr",twi:"tw",uig:"ug",ukr:"uk",urd:"ur",uzb:"uz",ven:"ve",vie:"vi",vol:"vo",wel:"cy",wln:"wa",wol:"wo",xho:"xh",yid:"yi",yor:"yo",zha:"za",zho:"zh",zul:"zu"};function ic(a,b,c){var d=a.video;return d&&(d.width<b.minWidth||d.width>b.maxWidth||d.width>c.width||d.height<b.minHeight||d.height>b.maxHeight||d.height>c.height||d.width*d.height<b.minPixels||d.width*d.height>b.maxPixels)||a.bandwidth<b.minBandwidth||a.bandwidth>b.maxBandwidth?!1:!0}function jc(a,b,c){var d=!1;a.variants.forEach(function(a){var e=a.allowedByApplication;a.allowedByApplication=ic(a,b,c);e!=a.allowedByApplication&&(d=!0);});return d}
function kc(a,b,c,d){d.variants=d.variants.filter(function(d){return a&&a.M&&!Fb(a,d)?!1:lc(d.audio,a,b)&&lc(d.video,a,c)});d.textStreams=d.textStreams.filter(function(a){return!!Pb[ab(a.mimeType,a.codecs)]});}
function lc(a,b,c){if(!a)return!0;var d=null;b&&b.M&&(d=b.w);b=ab(a.mimeType,a.codecs);var e=ab(a.mimeType,a.codecs),f=a.mimeType,g;for(g in bb){var h=a[g],k=bb[g];h&&(f+="; "+k+'="'+h+'"');}return!(Pb[e]||MediaSource.isTypeSupported(f)||window.muxjs&&"mp2t"==e.split(";")[0].split("/")[1]&&MediaSource.isTypeSupported(Mb(a.type,e)))||d&&a.encrypted&&0>d.indexOf(b)||c&&(a.mimeType!=c.mimeType||a.codecs.split(".")[0]!=c.codecs.split(".")[0])?!1:!0}
function mc(a){var b=a.audio,c=a.video,d=b?b.codecs:null,e=c?c.codecs:null,f=[];e&&f.push(e);d&&f.push(d);var g=[];c&&g.push(c.mimeType);b&&g.push(b.mimeType);var g=g[0]||null,h=[];b&&h.push(b.kind);c&&h.push(c.kind);var h=h[0]||null,k=[];b&&k.push.apply(k,b.roles);c&&k.push.apply(k,c.roles);k=Ma(k);a={id:a.id,active:!1,type:"variant",bandwidth:a.bandwidth,language:a.language,label:null,kind:h,width:null,height:null,frameRate:null,mimeType:g,codecs:f.join(", "),audioCodec:d,videoCodec:e,primary:a.primary,
roles:k,videoId:null,audioId:null,channelsCount:null,audioBandwidth:null,videoBandwidth:null};c&&(a.videoId=c.id,a.width=c.width||null,a.height=c.height||null,a.frameRate=c.frameRate||null,a.videoBandwidth=c.bandwidth||null);b&&(a.audioId=b.id,a.channelsCount=b.channelsCount,a.audioBandwidth=b.bandwidth||null,a.label=b.label);return a}
function nc(a){return{id:a.id,active:!1,type:"text",bandwidth:0,language:a.language,label:a.label,kind:a.kind||null,width:null,height:null,frameRate:null,mimeType:a.mimeType,codecs:a.codecs||null,audioCodec:null,videoCodec:null,primary:a.primary,roles:a.roles,videoId:null,audioId:null,channelsCount:null,audioBandwidth:null,videoBandwidth:null}}function oc(a){var b=[],c=pc(a.variants);a=a.textStreams;c.forEach(function(a){b.push(mc(a));});a.forEach(function(a){b.push(nc(a));});return b}
function qc(a,b,c){return pc(a.variants).map(function(a){var d=mc(a);a.video&&a.audio?d.active=c==a.video.id&&b==a.audio.id:a.video?d.active=c==a.video.id:a.audio&&(d.active=b==a.audio.id);return d})}function rc(a,b){return a.textStreams.map(function(a){var c=nc(a);c.active=b==a.id;return c})}function sc(a,b){for(var c=0;c<a.variants.length;c++)if(a.variants[c].id==b.id)return a.variants[c];return null}
function tc(a,b){for(var c=0;c<a.textStreams.length;c++)if(a.textStreams[c].id==b.id)return a.textStreams[c];return null}function uc(a){return a.allowedByApplication&&a.allowedByKeySystem}function pc(a){return a.filter(function(a){return uc(a)})}
function vc(a,b,c,d){var e=pc(a.variants),f=e.filter(function(a){return a.primary});f.length||(f=e);var g=f.length?f[0].language:"",f=f.filter(function(a){return a.language==g});if(b){var h=gc(b);[fc,ec,0].forEach(function(a){var b=!1;e.forEach(function(c){h=gc(h);var e=gc(c.language);dc(a,h,e)&&(b?f.push(c):(f=[c],b=!0),d&&(d.audio=!0));});});}if(c&&(a=wc(f,c),a.length))return a;a=f.map(function(a){return(a.audio?a.audio.roles:[]).concat(a.video?a.video.roles:[])}).reduce(x,[]);return a.length?wc(f,
a[0]):f}function xc(a,b,c,d){var e=a.textStreams,f=e.filter(function(a){return a.primary});f.length||(f=e);var g=f.length?f[0].language:"",f=f.filter(function(a){return a.language==g});if(b){var h=gc(b);[fc,ec,0].forEach(function(a){var b=!1;e.forEach(function(c){var e=gc(c.language);dc(a,h,e)&&(b?f.push(c):(f=[c],b=!0),d&&(d.text=!0));});});}if(c&&(a=yc(f,c),a.length))return a;a=f.map(function(a){return a.roles}).reduce(x,[]);return a.length?yc(f,a[0]):f}
function wc(a,b){return a.filter(function(a){return a.audio&&0<=a.audio.roles.indexOf(b)||a.video&&0<=a.video.roles.indexOf(b)})}function yc(a,b){return a.filter(function(a){return 0<=a.roles.indexOf(b)})}function zc(a,b,c){for(var d=0;d<c.length;d++)if(c[d].audio==a&&c[d].video==b)return c[d];return null}function Ac(a,b,c){function d(a,b){return null==a?null==b:b.id==a}for(var e=0;e<c.length;e++)if(d(a,c[e].audio)&&d(b,c[e].video))return c[e];return null}
function Bc(a,b){for(var c=a.periods.length-1;0<c;--c)if(b+Wa>=a.periods[c].startTime)return c;return 0}function Cc(a,b){for(var c=0;c<a.periods.length;++c){var d=a.periods[c];if("text"==b.type)for(var e=0;e<d.textStreams.length;++e){if(d.textStreams[e]==b)return c}else for(e=0;e<d.variants.length;++e){var f=d.variants[e];if(f.audio==b||f.video==b||f.video&&f.video.trickModeVideo==b)return c}}return-1}function F(){this.h=null;this.c=!1;this.b=new ga;this.g=[];this.i=!1;this.a=this.f=null;}n("shaka.abr.SimpleAbrManager",F);F.prototype.stop=function(){this.h=null;this.c=!1;this.g=[];this.f=null;};F.prototype.stop=F.prototype.stop;F.prototype.init=function(a){this.h=a;};F.prototype.init=F.prototype.init;
F.prototype.chooseVariant=function(){var a=Dc(this.a.restrictions,this.g),b=this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);if(this.g.length&&!a.length)throw new p(2,4,4012);for(var c=a[0]||null,d=0;d<a.length;++d){var e=a[d],f=(a[d+1]||{bandwidth:Infinity}).bandwidth/this.a.bandwidthUpgradeTarget;b>=e.bandwidth/this.a.bandwidthDowngradeTarget&&b<=f&&(c=e);}this.f=Date.now();return c};F.prototype.chooseVariant=F.prototype.chooseVariant;F.prototype.enable=function(){this.c=!0;};
F.prototype.enable=F.prototype.enable;F.prototype.disable=function(){this.c=!1;};F.prototype.disable=F.prototype.disable;F.prototype.segmentDownloaded=function(a,b){var c=this.b;if(!(16E3>b)){var d=8E3*b/a,e=a/1E3;c.a+=b;ea(c.b,e,d);ea(c.c,e,d);}if(null!=this.f&&this.c)a:{if(!this.i){if(!(128E3<=this.b.a))break a;this.i=!0;}else if(Date.now()-this.f<1E3*this.a.switchInterval)break a;c=this.chooseVariant();this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate);this.h(c);}};
F.prototype.segmentDownloaded=F.prototype.segmentDownloaded;F.prototype.getBandwidthEstimate=function(){return this.b.getBandwidthEstimate(this.a.defaultBandwidthEstimate)};F.prototype.getBandwidthEstimate=F.prototype.getBandwidthEstimate;F.prototype.setVariants=function(a){this.g=a;};F.prototype.setVariants=F.prototype.setVariants;F.prototype.configure=function(a){this.a=a;};F.prototype.configure=F.prototype.configure;
function Dc(a,b){return b.filter(function(b){return ic(b,a,{width:Infinity,height:Infinity})}).sort(function(a,b){return a.bandwidth-b.bandwidth})}var Ec="ended play playing pause pausing ratechange seeked seeking timeupdate volumechange".split(" "),Fc="buffered currentTime duration ended loop muted paused playbackRate seeking videoHeight videoWidth volume".split(" "),Gc=["loop","playbackRate"],Hc=["pause","play"],Ic="adaptation buffering emsg error loading streaming texttrackvisibility timelineregionadded timelineregionenter timelineregionexit trackschanged unloading".split(" "),Jc="drmInfo getAudioLanguages getBufferedInfo getConfiguration getExpiration getManifest getManifestUri getPlaybackRate getTextLanguages getTextTracks getStats getVariantTracks isAudioOnly isBuffering isInProgress isLive isTextTrackVisible keySystem seekRange".split(" "),
Kc=["getPlayheadTimeAsDate","getPresentationStartTimeAsDate"],Lc=[["getConfiguration","configure"]],Mc=[["isTextTrackVisible","setTextTrackVisibility"]],Nc="addTextTrack cancelTrickPlay configure resetConfiguration retryStreaming selectAudioLanguage selectTextLanguage selectTextTrack selectVariantTrack setTextTrackVisibility trickPlay".split(" "),Oc=["load","unload"];
function Pc(a){return JSON.stringify(a,function(a,c){if("manager"!=a&&"function"!=typeof c){if(c instanceof Event||c instanceof C){var b={},e;for(e in c){var f=c[e];f&&"object"==typeof f?"detail"==e&&(b[e]=f):e in Event||(b[e]=f);}return b}if(c instanceof TimeRanges)for(b={__type__:"TimeRanges",length:c.length,start:[],end:[]},e=0;e<c.length;++e)b.start.push(c.start(e)),b.end.push(c.end(e));else b="number"==typeof c?isNaN(c)?"NaN":isFinite(c)?c:0>c?"-Infinity":"Infinity":c;return b}})}
function Tc(a){return JSON.parse(a,function(a,c){return"NaN"==c?NaN:"-Infinity"==c?-Infinity:"Infinity"==c?Infinity:c&&"object"==typeof c&&"TimeRanges"==c.__type__?Uc(c):c})}function Uc(a){return{length:a.length,start:function(b){return a.start[b]},end:function(b){return a.end[b]}}}function Vc(a,b,c,d,e,f){this.L=a;this.g=b;this.M=c;this.j=!1;this.C=d;this.H=e;this.w=f;this.b=this.h=!1;this.B="";this.i=null;this.l=this.oc.bind(this);this.m=this.Gd.bind(this);this.a={video:{},player:{}};this.v=0;this.c={};this.f=null;}var Wc=!1,G=null;l=Vc.prototype;l.o=function(){Xc(this);G&&Yc(this);this.H=this.C=this.g=null;this.b=this.h=!1;this.m=this.l=this.f=this.c=this.a=this.i=null;return Promise.resolve()};l.aa=function(){return this.b};l.Pb=function(){return this.B};
l.init=function(){if(window.chrome&&chrome.cast&&chrome.cast.isAvailable){delete window.__onGCastApiAvailable;this.h=!0;this.g();var a=new chrome.cast.SessionRequest(this.L),a=new chrome.cast.ApiConfig(a,this.pc.bind(this),this.Md.bind(this),"origin_scoped");chrome.cast.initialize(a,function(){},function(){});Wc&&setTimeout(this.g.bind(this),20);(a=G)&&a.status!=chrome.cast.SessionStatus.STOPPED?this.pc(a):G=null;}else window.__onGCastApiAvailable=function(a){a&&this.init();}.bind(this);};
l.Tb=function(a){this.i=a;this.b&&Zc({type:"appData",appData:this.i});};l.cast=function(a){if(!this.h)return Promise.reject(new p(1,8,8E3));if(!Wc)return Promise.reject(new p(1,8,8001));if(this.b)return Promise.reject(new p(1,8,8002));this.f=new u;chrome.cast.requestSession(this.Mb.bind(this,a),this.nc.bind(this));return this.f};l.ob=function(){this.b&&(Xc(this),G&&(Yc(this),G.stop(function(){},function(){}),G=null));};
l.get=function(a,b){if("video"==a){if(0<=Hc.indexOf(b))return this.Bc.bind(this,a,b)}else if("player"==a){if(0<=Kc.indexOf(b)&&!this.get("player","isLive")())return function(){};if(0<=Nc.indexOf(b))return this.Bc.bind(this,a,b);if(0<=Oc.indexOf(b))return this.je.bind(this,a,b);if(0<=Jc.indexOf(b))return this.yc.bind(this,a,b)}return this.yc(a,b)};l.set=function(a,b,c){this.a[a][b]=c;Zc({type:"set",targetName:a,property:b,value:c});};
l.Mb=function(a,b){G=b;b.addUpdateListener(this.l);b.addMessageListener("urn:x-cast:com.google.shaka.v2",this.m);this.oc();Zc({type:"init",initState:a,appData:this.i});this.f.resolve();};l.nc=function(a){var b=8003;switch(a.code){case "cancel":b=8004;break;case "timeout":b=8005;break;case "receiver_unavailable":b=8006;}this.f.reject(new p(2,8,b,a));};l.yc=function(a,b){return this.a[a][b]};l.Bc=function(a,b){Zc({type:"call",targetName:a,methodName:b,args:Array.prototype.slice.call(arguments,2)});};
l.je=function(a,b){var c=Array.prototype.slice.call(arguments,2),d=new u,e=this.v.toString();this.v++;this.c[e]=d;Zc({type:"asyncCall",targetName:a,methodName:b,args:c,id:e});return d};l.pc=function(a){var b=this.w();this.f=new u;this.j=!0;this.Mb(b,a);};l.Md=function(a){Wc="available"==a;this.g();};function Yc(a){var b=G;b.removeUpdateListener(a.l);b.removeMessageListener("urn:x-cast:com.google.shaka.v2",a.m);}
l.oc=function(){var a=G?"connected"==G.status:!1;if(this.b&&!a){this.H();for(var b in this.a)this.a[b]={};Xc(this);}this.B=(this.b=a)?G.receiver.friendlyName:"";this.g();};function Xc(a){for(var b in a.c){var c=a.c[b];delete a.c[b];c.reject(new p(1,7,7E3));}}
l.Gd=function(a,b){var c=Tc(b);switch(c.type){case "event":var d=c.targetName,e=c.event;this.C(d,new C(e.type,e));break;case "update":e=c.update;for(d in e){var c=this.a[d]||{};for(f in e[d])c[f]=e[d][f];}this.j&&(this.M(),this.j=!1);break;case "asyncComplete":d=c.id;var f=c.error;c=this.c[d];delete this.c[d];if(c)if(f){d=new p(f.severity,f.category,f.code);for(e in f)d[e]=f[e];c.reject(d);}else c.resolve();}};function Zc(a){a=Pc(a);G.sendMessage("urn:x-cast:com.google.shaka.v2",a,function(){},ia);}function ca(){this.yb=new Qa;this.fb=this;}ca.prototype.addEventListener=function(a,b){this.yb.push(a,b);};ca.prototype.removeEventListener=function(a,b){this.yb.remove(a,b);};ca.prototype.dispatchEvent=function(a){for(var b=this.yb.get(a.type)||[],c=0;c<b.length;++c){a.target=this.fb;a.currentTarget=this.fb;var d=b[c];try{d.handleEvent?d.handleEvent(a):d.call(this,a);}catch(e){}if(a.a)break}return a.defaultPrevented};function H(a,b,c){ca.call(this);this.c=a;this.b=b;this.i=this.g=this.f=this.j=this.h=null;this.a=new Vc(c,this.Be.bind(this),this.Ce.bind(this),this.De.bind(this),this.Ee.bind(this),this.hc.bind(this));$c(this);}ba(H);n("shaka.cast.CastProxy",H);H.prototype.o=function(a){a&&this.a&&this.a.ob();a=[this.i?this.i.o():null,this.b?this.b.o():null,this.a?this.a.o():null];this.a=this.i=this.j=this.h=this.b=this.c=null;return Promise.all(a)};H.prototype.destroy=H.prototype.o;H.prototype.rd=function(){return this.h};
H.prototype.getVideo=H.prototype.rd;H.prototype.hd=function(){return this.j};H.prototype.getPlayer=H.prototype.hd;H.prototype.Uc=function(){return this.a?this.a.h&&Wc:!1};H.prototype.canCast=H.prototype.Uc;H.prototype.aa=function(){return this.a?this.a.aa():!1};H.prototype.isCasting=H.prototype.aa;H.prototype.Pb=function(){return this.a?this.a.Pb():""};H.prototype.receiverName=H.prototype.Pb;H.prototype.cast=function(){var a=this.hc();return this.a.cast(a).then(function(){return this.b.vb()}.bind(this))};
H.prototype.cast=H.prototype.cast;H.prototype.Tb=function(a){this.a.Tb(a);};H.prototype.setAppData=H.prototype.Tb;H.prototype.Je=function(){var a=this.a;if(a.b){var b=a.w();chrome.cast.requestSession(a.Mb.bind(a,b),a.nc.bind(a));}};H.prototype.suggestDisconnect=H.prototype.Je;H.prototype.ob=function(){this.a.ob();};H.prototype.forceDisconnect=H.prototype.ob;
function $c(a){a.a.init();a.i=new Ra;Ec.forEach(function(a){B(this.i,this.c,a,this.Re.bind(this));}.bind(a));Ic.forEach(function(a){B(this.i,this.b,a,this.be.bind(this));}.bind(a));a.h={};for(var b in a.c)Object.defineProperty(a.h,b,{configurable:!1,enumerable:!0,get:a.Qe.bind(a,b),set:a.Se.bind(a,b)});a.j={};for(b in a.b)Object.defineProperty(a.j,b,{configurable:!1,enumerable:!0,get:a.ae.bind(a,b)});a.f=new ca;a.f.fb=a.h;a.g=new ca;a.g.fb=a.j;}l=H.prototype;
l.hc=function(){var a={video:{},player:{},playerAfterLoad:{},manifest:this.b.lb,startTime:null};this.c.pause();Gc.forEach(function(b){a.video[b]=this.c[b];}.bind(this));this.c.ended||(a.startTime=this.c.currentTime);Lc.forEach(function(b){var c=b[1];b=this.b[b[0]]();a.player[c]=b;}.bind(this));Mc.forEach(function(b){var c=b[1];b=this.b[b[0]]();a.playerAfterLoad[c]=b;}.bind(this));return a};l.Be=function(){this.dispatchEvent(new C("caststatuschanged"));};
l.Ce=function(){this.f.dispatchEvent(new C(this.h.paused?"pause":"play"));};
l.Ee=function(){Lc.forEach(function(a){var b=a[1];a=this.a.get("player",a[0])();this.b[b](a);}.bind(this));var a=this.a.get("player","getManifestUri")(),b=this.a.get("video","ended"),c=Promise.resolve(),d=this.c.autoplay,e=null;b||(e=this.a.get("video","currentTime"));a&&(this.c.autoplay=!1,c=this.b.load(a,e),c["catch"](function(a){this.b.dispatchEvent(new C("error",{detail:a}));}.bind(this)));var f={};Gc.forEach(function(a){f[a]=this.a.get("video",a);}.bind(this));c.then(function(){Gc.forEach(function(a){this.c[a]=
f[a];}.bind(this));Mc.forEach(function(a){var b=a[1];a=this.a.get("player",a[0])();this.b[b](a);}.bind(this));this.c.autoplay=d;a&&this.c.play();}.bind(this));};
l.Qe=function(a){if("addEventListener"==a)return this.f.addEventListener.bind(this.f);if("removeEventListener"==a)return this.f.removeEventListener.bind(this.f);if(this.a.aa()&&!Object.keys(this.a.a.video).length){var b=this.c[a];if("function"!=typeof b)return b}return this.a.aa()?this.a.get("video",a):(b=this.c[a],"function"==typeof b&&(b=b.bind(this.c)),b)};l.Se=function(a,b){this.a.aa()?this.a.set("video",a,b):this.c[a]=b;};l.Re=function(a){this.a.aa()||this.f.dispatchEvent(new C(a.type,a));};
l.ae=function(a){return"addEventListener"==a?this.g.addEventListener.bind(this.g):"removeEventListener"==a?this.g.removeEventListener.bind(this.g):"getMediaElement"==a?function(){return this.h}.bind(this):"getNetworkingEngine"==a?this.b.ic.bind(this.b):this.a.aa()&&!Object.keys(this.a.a.video).length&&0<=Jc.indexOf(a)||!this.a.aa()?(a=this.b[a],a.bind(this.b)):this.a.get("player",a)};l.be=function(a){this.a.aa()||this.g.dispatchEvent(a);};
l.De=function(a,b){this.a.aa()&&("video"==a?this.f.dispatchEvent(b):"player"==a&&this.g.dispatchEvent(b));};function I(a,b,c,d){ca.call(this);this.a=a;this.b=b;this.j={video:a,player:b};this.l=c||function(){};this.m=d||function(a){return a};this.i=!1;this.f=!0;this.h=this.g=this.c=null;ad(this);}ba(I);n("shaka.cast.CastReceiver",I);I.prototype.isConnected=function(){return this.i};I.prototype.isConnected=I.prototype.isConnected;I.prototype.ud=function(){return this.f};I.prototype.isIdle=I.prototype.ud;
I.prototype.o=function(){var a=this.b?this.b.o():Promise.resolve();null!=this.h&&window.clearTimeout(this.h);this.l=this.j=this.b=this.a=null;this.i=!1;this.f=!0;this.h=this.g=this.c=null;return a.then(function(){cast.receiver.CastReceiverManager.getInstance().stop();})};I.prototype.destroy=I.prototype.o;
function ad(a){var b=cast.receiver.CastReceiverManager.getInstance();b.onSenderConnected=a.vc.bind(a);b.onSenderDisconnected=a.vc.bind(a);b.onSystemVolumeChanged=a.ad.bind(a);a.g=b.getCastMessageBus("urn:x-cast:com.google.cast.media");a.g.onMessage=a.Bd.bind(a);a.c=b.getCastMessageBus("urn:x-cast:com.google.shaka.v2");a.c.onMessage=a.Pd.bind(a);b.start();Ec.forEach(function(a){this.a.addEventListener(a,this.zc.bind(this,"video"));}.bind(a));Ic.forEach(function(a){this.b.addEventListener(a,this.zc.bind(this,
"player"));}.bind(a));cast.__platform__&&cast.__platform__.canDisplayType('video/mp4; codecs="avc1.640028"; width=3840; height=2160')?a.b.Ub(3840,2160):a.b.Ub(1920,1080);a.b.addEventListener("loading",function(){this.f=!1;bd(this);}.bind(a));a.a.addEventListener("playing",function(){this.f=!1;bd(this);}.bind(a));a.a.addEventListener("pause",function(){bd(this);}.bind(a));a.b.addEventListener("unloading",function(){this.f=!0;bd(this);}.bind(a));a.a.addEventListener("ended",function(){window.setTimeout(function(){this.a&&
this.a.ended&&(this.f=!0,bd(this));}.bind(this),5E3);}.bind(a));}l=I.prototype;l.vc=function(){this.i=!!cast.receiver.CastReceiverManager.getInstance().getSenders().length;bd(this);};function bd(a){Promise.resolve().then(function(){this.dispatchEvent(new C("caststatuschanged"));cd(this,0);}.bind(a));}
function dd(a,b,c){for(var d in b.player)a.b[d](b.player[d]);a.l(c);c=Promise.resolve();var e=a.a.autoplay;b.manifest&&(a.a.autoplay=!1,c=a.b.load(b.manifest,b.startTime),c["catch"](function(a){this.b.dispatchEvent(new C("error",{detail:a}));}.bind(a)));c.then(function(){var a;for(a in b.video){var c=b.video[a];this.a[a]=c;}for(a in b.playerAfterLoad)c=b.playerAfterLoad[a],this.b[a](c);this.a.autoplay=e;b.manifest&&(this.a.play(),cd(this,0));}.bind(a));}
l.zc=function(a,b){this.Nb();ed(this,{type:"event",targetName:a,event:b},this.c);};
l.Nb=function(){null!=this.h&&window.clearTimeout(this.h);this.h=window.setTimeout(this.Nb.bind(this),500);var a={video:{},player:{}};Fc.forEach(function(b){a.video[b]=this.a[b];}.bind(this));var b=Jc;this.b.S()&&(b=b.concat(Kc));b.forEach(function(b){a.player[b]=this.b[b]();}.bind(this));if(b=cast.receiver.CastReceiverManager.getInstance().getSystemVolume())a.video.volume=b.level,a.video.muted=b.muted;ed(this,{type:"update",update:a},this.c);};
l.ad=function(){var a=cast.receiver.CastReceiverManager.getInstance().getSystemVolume();a&&ed(this,{type:"update",update:{video:{volume:a.level,muted:a.muted}}},this.c);ed(this,{type:"event",targetName:"video",event:{type:"volumechange"}},this.c);};
l.Pd=function(a){var b=Tc(a.data);switch(b.type){case "init":dd(this,b.initState,b.appData);this.Nb();break;case "appData":this.l(b.appData);break;case "set":var c=b.targetName,d=b.property,e=b.value;if("video"==c)if(b=cast.receiver.CastReceiverManager.getInstance(),"volume"==d){b.setSystemVolumeLevel(e);break}else if("muted"==d){b.setSystemVolumeMuted(e);break}this.j[c][d]=e;break;case "call":c=b.targetName;d=b.methodName;e=b.args;c=this.j[c];c[d].apply(c,e);break;case "asyncCall":c=b.targetName,
d=b.methodName,e=b.args,b=b.id,a=a.senderId,c=this.j[c],c[d].apply(c,e).then(this.Hc.bind(this,a,b,null),this.Hc.bind(this,a,b));}};
l.Bd=function(a){var b=Tc(a.data);switch(b.type){case "PLAY":this.a.play();cd(this,0);break;case "PAUSE":this.a.pause();cd(this,0);break;case "SEEK":a=b.currentTime;var c=b.resumeState;null!=a&&(this.a.currentTime=Number(a));c&&"PLAYBACK_START"==c?(this.a.play(),cd(this,0)):c&&"PLAYBACK_PAUSE"==c&&(this.a.pause(),cd(this,0));break;case "STOP":this.b.vb().then(function(){cd(this,0);}.bind(this));break;case "GET_STATUS":cd(this,Number(b.requestId));break;case "VOLUME":c=b.volume;a=c.level;var c=c.muted,
d=this.a.volume,e=this.a.muted;null!=a&&(this.a.volume=Number(a));null!=c&&(this.a.muted=c);d==this.a.volume&&e==this.a.muted||cd(this,0);break;case "LOAD":c=b.media.contentId;a=b.currentTime;var f=this.m(c);this.a.autoplay=!0;this.b.load(f,a).then(function(){cd(this,0,{contentId:f,streamType:this.b.S()?"LIVE":"BUFFERED",contentType:""});}.bind(this))["catch"](function(a){var c="LOAD_FAILED";7==a.category&&7E3==a.code&&(c="LOAD_CANCELLED");ed(this,{requestId:Number(b.requestId),type:c},this.g);}.bind(this));
break;default:ed(this,{requestId:Number(b.requestId),type:"INVALID_REQUEST",reason:"INVALID_COMMAND"},this.g);}};l.Hc=function(a,b,c){ed(this,{type:"asyncComplete",id:b,error:c},this.c,a);};function ed(a,b,c,d){a.i&&(a=Pc(b),d?c.getCastChannel(d).send(a):c.broadcast(a));}
function cd(a,b,c){var d=fd,d={mediaSessionId:0,playbackRate:a.a.playbackRate,playerState:a.f?d.IDLE:a.b.Ra?d.Oc:a.a.paused?d.Qc:d.Rc,currentTime:a.a.currentTime,supportedMediaCommands:15,volume:{level:a.a.volume,muted:a.a.muted}};c&&(d.media=c);ed(a,{requestId:b,type:"MEDIA_STATUS",status:[d]},a.g);}var fd={IDLE:"IDLE",Rc:"PLAYING",Oc:"BUFFERING",Qc:"PAUSED"};function gd(a,b){var c=J(a,b);return 1!=c.length?null:c[0]}function J(a,b){return Array.prototype.filter.call(a.childNodes,function(a){return a.tagName==b})}function hd(a){var b=a.firstChild;return b&&b.nodeType==Node.TEXT_NODE?a.textContent.trim():null}function K(a,b,c,d){var e=null;a=a.getAttribute(b);null!=a&&(e=c(a));return null==e?void 0!=d?d:null:e}
function id(a){if(!a)return null;/^\d+\-\d+\-\d+T\d+:\d+:\d+(\.\d+)?$/.test(a)&&(a+="Z");a=Date.parse(a);return isNaN(a)?null:Math.floor(a/1E3)}function jd(a){if(!a)return null;a=/^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(a);if(!a)return null;a=31536E3*Number(a[1]||null)+2592E3*Number(a[2]||null)+86400*Number(a[3]||null)+3600*Number(a[4]||null)+60*Number(a[5]||null)+Number(a[6]||null);return isFinite(a)?a:null}
function kd(a){var b=/([0-9]+)-([0-9]+)/.exec(a);if(!b)return null;a=Number(b[1]);if(!isFinite(a))return null;b=Number(b[2]);return isFinite(b)?{start:a,end:b}:null}function ld(a){a=Number(a);return a%1?null:a}function md(a){a=Number(a);return!(a%1)&&0<a?a:null}function nd(a){a=Number(a);return!(a%1)&&0<=a?a:null}function od(a){var b;a=(b=a.match(/^(\d+)\/(\d+)$/))?Number(b[1]/b[2]):Number(a);return isNaN(a)?null:a}var pd={"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b":"org.w3.clearkey","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":"com.widevine.alpha","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":"com.microsoft.playready","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb":"com.adobe.primetime"};
function qd(a,b,c){a=rd(a);var d=null,e=[],f=[],g=a.map(function(a){return a.keyId}).filter(Ha);if(g.length&&1<g.filter(Ia).length)throw new p(2,4,4010);c||(f=a.filter(function(a){return"urn:mpeg:dash:mp4protection:2011"==a.Gc?(d=a.init||d,!1):!0}),f.length&&(e=sd(d,b,f),e.length||(e=[Va("",d)])));!a.length||!c&&f.length||(e=Ya(pd).map(function(a){return Va(a,d)}));var h=g[0]||null;h&&e.forEach(function(a){a.initData.forEach(function(a){a.keyId=h;});});return{dc:h,$e:d,drmInfos:e,fc:!0}}
function td(a,b,c,d){var e=qd(a,b,d);if(c.fc){a=1==c.drmInfos.length&&!c.drmInfos[0].keySystem;b=!e.drmInfos.length;if(!c.drmInfos.length||a&&!b)c.drmInfos=e.drmInfos;c.fc=!1;}else if(0<e.drmInfos.length&&(c.drmInfos=c.drmInfos.filter(function(a){return e.drmInfos.some(function(b){return b.keySystem==a.keySystem})}),!c.drmInfos.length))throw new p(2,4,4008);return e.dc||c.dc}
function sd(a,b,c){return c.map(function(c){var d=pd[c.Gc];if(d){var f=c.init||a,g="";if(c.node&&c.node.childNodes&&0<c.node.childNodes.length)for(var h=0;h<c.node.childNodes.length;h++){var k=c.node.childNodes[h];"ms:laurl"===k.nodeName&&k instanceof Element&&(g=k.getAttribute("licenseUrl"));}if(!g&&"com.microsoft.playready"===d&&f&&0<f.length&&"cenc"===f[0].initDataType)a:{if((g=f[0].initData)&&!(g.buffer.byteLength%2)&&(g=String.fromCharCode.apply(null,new Uint16Array(g.buffer)),c=g.indexOf("<WRMHEADER"))&&
(g=g.substr(c))){g=(new DOMParser).parseFromString(g,"application/xml");if(g.getElementsByTagName("LA_URL")[0]&&(c=g.getElementsByTagName("LA_URL")[0].childNodes[0].nodeValue)){g=c;break a}if(g.getElementsByTagName("LUI_URL")[0]&&(g=g.getElementsByTagName("LUI_URL")[0].childNodes[0].nodeValue))break a}g="";}d=Va(d,f);d.licenseServerUri=g?g:"";return[d]}return b(c.node)||[]}).reduce(x,[])}
function rd(a){return a.map(function(a){var b=a.getAttribute("schemeIdUri"),d=a.getAttribute("cenc:default_KID"),e=J(a,"cenc:pssh").map(hd);if(!b)return null;b=b.toLowerCase();if(d&&(d=d.replace(/-/g,"").toLowerCase(),0<=d.indexOf(" ")))throw new p(2,4,4009);var f=[];try{f=e.map(function(a){return{initDataType:"cenc",initData:kb(a),keyId:null}});}catch(g){throw new p(2,4,4007);}return{node:a,Gc:b,keyId:d,init:0<f.length?f:null}}).filter(Ha)}function ud(a,b,c,d,e){null!=e&&(e=Math.round(e));var f={RepresentationID:b,Number:c,Bandwidth:d,Time:e};return a.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\$/g,function(a,b,c){if("$$"==a)return"$";var d=f[b];if(null==d)return a;"RepresentationID"==b&&c&&(c=void 0);a=d.toString();c=window.parseInt(c,10)||1;return Array(Math.max(0,c-a.length)+1).join("0")+a})}
function vd(a,b){var c=wd(a,b,"timescale"),d=1;c&&(d=md(c)||1);c=wd(a,b,"duration");(c=md(c||""))&&(c/=d);var e=wd(a,b,"startNumber"),f=Number(wd(a,b,"presentationTimeOffset"))||0,g=nd(e||"");if(null==e||null==g)g=1;var h=xd(a,b,"SegmentTimeline"),e=null;if(h){for(var e=d,k=a.T.duration||Infinity,h=J(h,"S"),m=[],q=0,v=0;v<h.length;++v){var r=h[v],t=K(r,"t",nd),y=K(r,"d",nd),r=K(r,"r",ld);null!=t&&(t-=f);if(!y)break;t=null!=t?t:q;r=r||0;if(0>r)if(v+1<h.length){r=K(h[v+1],"t",nd);if(null==r)break;else if(t>=
r)break;r=Math.ceil((r-t)/y)-1;}else{if(Infinity==k)break;else if(t/e>=k)break;r=Math.ceil((k*e-t)/y)-1;}0<m.length&&t!=q&&(m[m.length-1].end=t/e);for(var w=0;w<=r;++w)q=t+y,m.push({start:t/e,end:q/e,Oe:t}),t=q;}e=m;}return{timescale:d,R:c,Aa:g,Y:f/d||0,$b:f,K:e}}function wd(a,b,c){return[b(a.A),b(a.U),b(a.W)].filter(Ha).map(function(a){return a.getAttribute(c)}).reduce(function(a,b){return a||b})}
function xd(a,b,c){return[b(a.A),b(a.U),b(a.W)].filter(Ha).map(function(a){return gd(a,c)}).reduce(function(a,b){return a||b})}function yd(a,b){var c=new DOMParser;try{var d=E(a);var e=c.parseFromString(d,"text/xml");}catch(g){}if(e&&e.documentElement.tagName==b)var f=e.documentElement;return f&&0<f.getElementsByTagName("parsererror").length?null:f}
function zd(a,b,c,d,e,f){for(var g=a.getAttribute("xlink:href"),h=a.getAttribute("xlink:actuate")||"onRequest",k=0;k<a.attributes.length;k++){var m=a.attributes[k].nodeName;-1!=m.indexOf("xlink:")&&(a.removeAttribute(m),--k);}if(5<=f)return Promise.reject(new p(2,4,4028));if("onLoad"!=h)return Promise.reject(new p(2,4,4027));var q=D([d],[g]);return e.request(0,A(q,b)).then(function(d){d=yd(d.data,a.tagName);if(!d)return Promise.reject(new p(2,4,4001,g));for(;a.childNodes.length;)a.removeChild(a.childNodes[0]);
for(;d.childNodes.length;){var h=d.childNodes[0];d.removeChild(h);a.appendChild(h);}for(h=0;h<d.attributes.length;h++){var k=d.attributes[h].nodeName,m=d.getAttribute(k);a.setAttribute(k,m);}return Ad(a,b,c,q[0],e,f+1)}.bind(a))}
function Ad(a,b,c,d,e,f){f=f||0;if(a.getAttribute("xlink:href")){var g=zd(a,b,c,d,e,f);c&&(g=g["catch"](function(){return Ad(a,b,c,d,e,f)}));return g}for(g=0;g<a.childNodes.length;g++){var h=a.childNodes[g];h instanceof Element&&"urn:mpeg:dash:resolve-to-zero:2013"==h.getAttribute("xlink:href")&&(a.removeChild(h),--g);}for(var k=[],g=0;g<a.childNodes.length;g++)h=a.childNodes[g],h.nodeType==Node.ELEMENT_NODE&&(h=Ad(h,b,c,d,e,f),k.push(h));return Promise.all(k).then(function(){return a})}function Bd(a,b,c){this.a=a;this.P=b;this.G=c;}n("shaka.media.InitSegmentReference",Bd);function L(a,b,c,d,e,f){this.position=a;this.startTime=b;this.endTime=c;this.a=d;this.P=e;this.G=f;}n("shaka.media.SegmentReference",L);function M(a,b){this.I=a;this.a=b==Cd;this.s=0;}n("shaka.util.DataViewReader",M);var Cd=1;M.Endianness={Ue:0,Xe:Cd};M.prototype.da=function(){return this.s<this.I.byteLength};M.prototype.hasMoreData=M.prototype.da;M.prototype.kd=function(){return this.s};M.prototype.getPosition=M.prototype.kd;M.prototype.dd=function(){return this.I.byteLength};M.prototype.getLength=M.prototype.dd;M.prototype.X=function(){try{var a=this.I.getUint8(this.s);}catch(b){Dd();}this.s+=1;return a};M.prototype.readUint8=M.prototype.X;
M.prototype.Xa=function(){try{var a=this.I.getUint16(this.s,this.a);}catch(b){Dd();}this.s+=2;return a};M.prototype.readUint16=M.prototype.Xa;M.prototype.D=function(){try{var a=this.I.getUint32(this.s,this.a);}catch(b){Dd();}this.s+=4;return a};M.prototype.readUint32=M.prototype.D;M.prototype.Ac=function(){try{var a=this.I.getInt32(this.s,this.a);}catch(b){Dd();}this.s+=4;return a};M.prototype.readInt32=M.prototype.Ac;
M.prototype.Ma=function(){try{if(this.a){var a=this.I.getUint32(this.s,!0);var b=this.I.getUint32(this.s+4,!0);}else b=this.I.getUint32(this.s,!1),a=this.I.getUint32(this.s+4,!1);}catch(c){Dd();}if(2097151<b)throw new p(2,3,3001);this.s+=8;return b*Math.pow(2,32)+a};M.prototype.readUint64=M.prototype.Ma;M.prototype.La=function(a){this.s+a>this.I.byteLength&&Dd();var b=new Uint8Array(this.I.buffer,this.I.byteOffset+this.s,a);this.s+=a;return new Uint8Array(b)};M.prototype.readBytes=M.prototype.La;
M.prototype.J=function(a){this.s+a>this.I.byteLength&&Dd();this.s+=a;};M.prototype.skip=M.prototype.J;M.prototype.Fc=function(a){this.s<a&&Dd();this.s-=a;};M.prototype.rewind=M.prototype.Fc;M.prototype.seek=function(a){(0>a||a>this.I.byteLength)&&Dd();this.s=a;};M.prototype.seek=M.prototype.seek;M.prototype.Ob=function(){for(var a=this.s;this.da()&&this.I.getUint8(this.s);)this.s+=1;a=new Uint8Array(this.I.buffer,this.I.byteOffset+a,this.s-a);this.s+=1;return E(a)};M.prototype.readTerminatedString=M.prototype.Ob;
function Dd(){throw new p(2,3,3E3);}function N(){this.c=[];this.b=[];this.a=!1;}n("shaka.util.Mp4Parser",N);N.prototype.F=function(a,b){var c=Ed(a);this.c[c]=0;this.b[c]=b;return this};N.prototype.box=N.prototype.F;N.prototype.$=function(a,b){var c=Ed(a);this.c[c]=1;this.b[c]=b;return this};N.prototype.fullBox=N.prototype.$;N.prototype.stop=function(){this.a=!0;};N.prototype.stop=N.prototype.stop;
N.prototype.parse=function(a,b){var c=new Uint8Array(a),c=new M(new DataView(c.buffer,c.byteOffset,c.byteLength),0);for(this.a=!1;c.da()&&!this.a;)this.sb(0,c,b);};N.prototype.parse=N.prototype.parse;
N.prototype.sb=function(a,b,c){var d=b.s,e=b.D(),f=b.D();switch(e){case 0:e=b.I.byteLength-d;break;case 1:e=b.Ma();}var g=this.b[f];if(g){var h=null,k=null;1==this.c[f]&&(k=b.D(),h=k>>>24,k&=16777215);f=d+e;c&&f>b.I.byteLength&&(f=b.I.byteLength);f-=b.s;b=0<f?b.La(f):new Uint8Array(0);b=new M(new DataView(b.buffer,b.byteOffset,b.byteLength),0);g({ba:this,xc:c||!1,version:h,gc:k,u:b,size:e,start:d+a});}else b.J(d+e-b.s);};N.prototype.parseNext=N.prototype.sb;
function O(a){for(;a.u.da()&&!a.ba.a;)a.ba.sb(a.start,a.u,a.xc);}N.children=O;function Fd(a){for(var b=a.u.D();0<b&&!a.ba.a;--b)a.ba.sb(a.start,a.u,a.xc);}N.sampleDescription=Fd;function Gd(a){return function(b){a(b.u.La(b.u.I.byteLength-b.u.s));}}N.allData=Gd;function Ed(a){for(var b=0,c=0;c<a.length;c++)b=b<<8|a.charCodeAt(c);return b}function Hd(a,b,c,d){var e,f=(new N).$("sidx",function(a){e=Id(b,d,c,a);});a&&f.parse(a);if(e)return e;throw new p(2,3,3004);}
function Id(a,b,c,d){var e=[];d.u.J(4);var f=d.u.D();if(!f)throw new p(2,3,3005);if(d.version){var g=d.u.Ma();var h=d.u.Ma();}else g=d.u.D(),h=d.u.D();d.u.J(2);var k=d.u.Xa();a=a+d.size+h;for(h=0;h<k;h++){var m=d.u.D(),q=(m&2147483648)>>>31,m=m&2147483647,v=d.u.D();d.u.J(4);if(1==q)throw new p(2,3,3006);e.push(new L(e.length,g/f-b,(g+v)/f-b,function(){return c},a,a+m-1));g+=v;a+=m;}d.ba.stop();return e}function P(a){this.a=a;}n("shaka.media.SegmentIndex",P);P.prototype.o=function(){this.a=null;return Promise.resolve()};P.prototype.destroy=P.prototype.o;P.prototype.find=function(a){for(var b=this.a.length-1;0<=b;--b){var c=this.a[b];if(a>=c.startTime&&a<c.endTime)return c.position}return this.a.length&&a<this.a[0].startTime?this.a[0].position:null};P.prototype.find=P.prototype.find;P.prototype.get=function(a){if(!this.a.length)return null;a-=this.a[0].position;return 0>a||a>=this.a.length?null:this.a[a]};
P.prototype.get=P.prototype.get;P.prototype.offset=function(a){for(var b=0;b<this.a.length;++b)this.a[b].startTime+=a,this.a[b].endTime+=a;};P.prototype.offset=P.prototype.offset;
P.prototype.Gb=function(a){for(var b,c,d,e=[],f=b=0;b<this.a.length&&f<a.length;)c=this.a[b],d=a[f],c.startTime<d.startTime?(e.push(c),b++):(c.startTime>d.startTime?b||e.push(d):(.1<Math.abs(c.endTime-d.endTime)?(d=new L(c.position,d.startTime,d.endTime,d.a,d.P,d.G),e.push(d)):e.push(c),b++),f++);for(;b<this.a.length;)e.push(this.a[b++]);if(e.length)for(b=e[e.length-1].position+1;f<a.length;)d=a[f++],d=new L(b++,d.startTime,d.endTime,d.a,d.P,d.G),e.push(d);else e=a;this.a=e;};P.prototype.merge=P.prototype.Gb;
P.prototype.replace=function(a){this.a=a;};P.prototype.Ab=function(a){for(var b=0;b<this.a.length&&!(this.a[b].endTime>a);++b);this.a.splice(0,b);};P.prototype.evict=P.prototype.Ab;
function Jd(a,b){for(var c;a.a.length;)if(c=a.a[a.a.length-1],c.startTime>=b)a.a.pop();else break;for(;a.a.length;)if(c=a.a[0],0>=c.endTime)a.a.shift();else break;a.a.length&&(c=a.a[0],c.startTime<Wa&&(a.a[0]=new L(c.position,0,c.endTime,c.a,c.P,c.G)),c=a.a[a.a.length-1],a.a[a.a.length-1]=new L(c.position,c.startTime,b,c.a,c.P,c.G));}function Kd(a){this.b=a;this.a=new M(a,0);Ld||(Ld=[new Uint8Array([255]),new Uint8Array([127,255]),new Uint8Array([63,255,255]),new Uint8Array([31,255,255,255]),new Uint8Array([15,255,255,255,255]),new Uint8Array([7,255,255,255,255,255]),new Uint8Array([3,255,255,255,255,255,255]),new Uint8Array([1,255,255,255,255,255,255,255])]);}var Ld;Kd.prototype.da=function(){return this.a.da()};
function Md(a){var b=Nd(a);if(7<b.length)throw new p(2,3,3002);for(var c=0,d=0;d<b.length;d++)c=256*c+b[d];b=c;c=Nd(a);a:{for(d=0;d<Ld.length;d++)if(nb(c,Ld[d])){d=!0;break a}d=!1;}if(d)c=a.b.byteLength-a.a.s;else{if(8==c.length&&c[1]&224)throw new p(2,3,3001);for(var d=c[0]&(1<<8-c.length)-1,e=1;e<c.length;e++)d=256*d+c[e];c=d;}c=a.a.s+c<=a.b.byteLength?c:a.b.byteLength-a.a.s;d=new DataView(a.b.buffer,a.b.byteOffset+a.a.s,c);a.a.J(c);return new Od(b,d)}
function Nd(a){var b=a.a.X(),c;for(c=1;8>=c&&!(b&1<<8-c);c++);if(8<c)throw new p(2,3,3002);var d=new Uint8Array(c);d[0]=b;for(b=1;b<c;b++)d[b]=a.a.X();return d}function Od(a,b){this.id=a;this.a=b;}function Pd(a){if(8<a.a.byteLength)throw new p(2,3,3002);if(8==a.a.byteLength&&a.a.getUint8(0)&224)throw new p(2,3,3001);for(var b=0,c=0;c<a.a.byteLength;c++)var d=a.a.getUint8(c),b=256*b+d;return b}function Qd(){}
Qd.prototype.parse=function(a,b,c,d){var e;b=new Kd(new DataView(b));if(440786851!=Md(b).id)throw new p(2,3,3008);var f=Md(b);if(408125543!=f.id)throw new p(2,3,3009);b=f.a.byteOffset;f=new Kd(f.a);for(e=null;f.da();){var g=Md(f);if(357149030==g.id){e=g;break}}if(!e)throw new p(2,3,3010);f=new Kd(e.a);e=1E6;for(g=null;f.da();){var h=Md(f);if(2807729==h.id)e=Pd(h);else if(17545==h.id)if(g=h,4==g.a.byteLength)g=g.a.getFloat32(0);else if(8==g.a.byteLength)g=g.a.getFloat64(0);else throw new p(2,3,3003);
}if(null==g)throw new p(2,3,3011);f=e/1E9;e=g*f;a=Md(new Kd(new DataView(a)));if(475249515!=a.id)throw new p(2,3,3007);return Rd(a,b,f,e,c,d)};function Rd(a,b,c,d,e,f){function g(){return e}var h=[];a=new Kd(a.a);for(var k=null,m=null;a.da();){var q=Md(a);if(187==q.id){var v=Sd(q);v&&(q=c*v.Pe,v=b+v.ie,null!=k&&h.push(new L(h.length,k-f,q-f,g,m,v-1)),k=q,m=v);}}null!=k&&h.push(new L(h.length,k-f,d-f,g,m,null));return h}
function Sd(a){var b=new Kd(a.a);a=Md(b);if(179!=a.id)throw new p(2,3,3013);a=Pd(a);b=Md(b);if(183!=b.id)throw new p(2,3,3012);for(var b=new Kd(b.a),c=0;b.da();){var d=Md(b);if(241==d.id){c=Pd(d);break}}return{Pe:a,ie:c}}function Td(a,b){var c=xd(a,b,"Initialization");if(!c)return null;var d=a.A.Z,e=c.getAttribute("sourceURL");e&&(d=D(a.A.Z,[e]));var e=0,f=null;if(c=K(c,"range",kd))e=c.start,f=c.end;return new Bd(function(){return d},e,f)}
function Ud(a,b){var c=Number(wd(a,Vd,"presentationTimeOffset"))||0,d=wd(a,Vd,"timescale"),e=1;d&&(e=md(d)||1);var c=c/e||0,d=Td(a,Vd),f=a.A.contentType,e=a.A.mimeType.split("/")[1];if("text"!=f&&"mp4"!=e&&"webm"!=e)throw new p(2,4,4006);if("webm"==e&&!d)throw new p(2,4,4005);var f=xd(a,Vd,"RepresentationIndex"),g=wd(a,Vd,"indexRange"),h=a.A.Z,g=kd(g||"");if(f){var k=f.getAttribute("sourceURL");k&&(h=D(a.A.Z,[k]));g=K(f,"range",kd,g);}if(!g)throw new p(2,4,4002);e=Wd(a,b,d,h,g.start,g.end,e,c);return{createSegmentIndex:e.createSegmentIndex,
findSegmentPosition:e.findSegmentPosition,getSegmentReference:e.getSegmentReference,initSegmentReference:d,Y:c}}
function Wd(a,b,c,d,e,f,g,h){var k=a.presentationTimeline,m=!a.Ea||!a.T.Db,q=a.T.duration,v=b,r=null;return{createSegmentIndex:function(){var a=[v(d,e,f),"webm"==g?v(c.a(),c.P,c.G):null];v=null;return Promise.all(a).then(function(a){var b=a[0];a=a[1]||null;b="mp4"==g?Hd(b,e,d,h):(new Qd).parse(b,a,d,h);k.Ia(0,b);r=new P(b);m&&Jd(r,q);})},findSegmentPosition:function(a){return r.find(a)},getSegmentReference:function(a){return r.get(a)}}}function Vd(a){return a.Ya}function Xd(a,b){var c=Td(a,Yd);var d=Zd(a);var e=vd(a,Yd),f=e.Aa;f||(f=1);var g=0;e.R?g=e.R*(f-1):e.K&&0<e.K.length&&(g=e.K[0].start);d={R:e.R,startTime:g,Aa:f,Y:e.Y,K:e.K,Ha:d};if(!d.R&&!d.K&&1<d.Ha.length)throw new p(2,4,4002);if(!d.R&&!a.T.duration&&!d.K&&1==d.Ha.length)throw new p(2,4,4002);if(d.K&&!d.K.length)throw new p(2,4,4002);f=e=null;a.W.id&&a.A.id&&(f=a.W.id+","+a.A.id,e=b[f]);g=$d(a.T.duration,d.Aa,a.A.Z,d);e?(e.Gb(g),e.Ab(a.presentationTimeline.ca()-a.T.start)):(a.presentationTimeline.Ia(0,
g),e=new P(g),f&&a.Ea&&(b[f]=e));a.Ea&&a.T.Db||Jd(e,a.T.duration);return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:e.find.bind(e),getSegmentReference:e.get.bind(e),initSegmentReference:c,Y:d.Y}}function Yd(a){return a.sa}
function $d(a,b,c,d){var e=d.Ha.length;d.K&&d.K.length!=d.Ha.length&&(e=Math.min(d.K.length,d.Ha.length));for(var f=[],g=d.startTime,h=0;h<e;h++){var k=d.Ha[h],m=D(c,[k.wd]);var q=null!=d.R?g+d.R:d.K?d.K[h].end:g+a;f.push(new L(h+b,g,q,function(a){return a}.bind(null,m),k.start,k.end));g=q;}return f}
function Zd(a){return[a.A.sa,a.U.sa,a.W.sa].filter(Ha).map(function(a){return J(a,"SegmentURL")}).reduce(function(a,c){return 0<a.length?a:c}).map(function(b){b.getAttribute("indexRange")&&!a.kc&&(a.kc=!0);var c=b.getAttribute("media");b=K(b,"mediaRange",kd,{start:0,end:null});return{wd:c,start:b.start,end:b.end}})}function ae(a,b,c,d){var e=be(a);var f=vd(a,ce);var g=wd(a,ce,"media"),h=wd(a,ce,"index");f={R:f.R,timescale:f.timescale,Aa:f.Aa,Y:f.Y,$b:f.$b,K:f.K,Fb:g,Ua:h};g=0+(f.Ua?1:0);g+=f.K?1:0;g+=f.R?1:0;if(!g)throw new p(2,4,4002);1!=g&&(f.Ua&&(f.K=null),f.R=null);if(!f.Ua&&!f.Fb)throw new p(2,4,4002);if(f.Ua){c=a.A.mimeType.split("/")[1];if("mp4"!=c&&"webm"!=c)throw new p(2,4,4006);if("webm"==c&&!e)throw new p(2,4,4005);d=ud(f.Ua,a.A.id,null,a.bandwidth||null,null);d=D(a.A.Z,[d]);a=Wd(a,b,e,d,0,null,c,
f.Y);}else f.R?(d||a.presentationTimeline.Hb(f.R),a=de(a,f)):(d=b=null,a.W.id&&a.A.id&&(d=a.W.id+","+a.A.id,b=c[d]),g=ee(a,f),b?(b.Gb(g),b.Ab(a.presentationTimeline.ca()-a.T.start)):(a.presentationTimeline.Ia(0,g),b=new P(g),d&&a.Ea&&(c[d]=b)),a.Ea&&a.T.Db||Jd(b,a.T.duration),a={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:b.find.bind(b),getSegmentReference:b.get.bind(b)});return{createSegmentIndex:a.createSegmentIndex,findSegmentPosition:a.findSegmentPosition,getSegmentReference:a.getSegmentReference,
initSegmentReference:e,Y:f.Y}}function ce(a){return a.Za}function de(a,b){var c=a.T.duration,d=b.R,e=b.Aa,f=b.timescale,g=b.Fb,h=a.bandwidth||null,k=a.A.id,m=a.A.Z;return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0>a||c&&a>=c?null:Math.floor(a/d)},getSegmentReference:function(a){var b=a*d;return 0>b||c&&b>=c?null:new L(a,b,b+d,function(){var c=ud(g,k,a+e,h,b*f);return D(m,[c])},0,null)}}}
function ee(a,b){for(var c=[],d=0;d<b.K.length;d++){var e=d+b.Aa;c.push(new L(e,b.K[d].start,b.K[d].end,function(a,b,c,d,e,q){a=ud(a,b,e,c,q);return D(d,[a]).map(function(a){return a.toString()})}.bind(null,b.Fb,a.A.id,a.bandwidth||null,a.A.Z,e,b.K[d].Oe+b.$b),0,null));}return c}function be(a){var b=wd(a,ce,"initialization");if(!b)return null;var c=a.A.id,d=a.bandwidth||null,e=a.A.Z;return new Bd(function(){var a=ud(b,c,null,d,null);return D(e,[a])},0,null)}var fe={},ge={};n("shaka.media.ManifestParser.registerParserByExtension",function(a,b){ge[a]=b;});n("shaka.media.ManifestParser.registerParserByMime",function(a,b){fe[a]=b;});function he(){var a={},b;for(b in fe)a[b]=!0;for(b in ge)a[b]=!0;["application/dash+xml","application/x-mpegurl","application/vnd.apple.mpegurl","application/vnd.ms-sstr+xml"].forEach(function(b){a[b]=!!fe[b];});["mpd","m3u8","ism"].forEach(function(b){a[b]=!!ge[b];});return a}
function ie(a,b,c,d){var e=d;e||(d=(new ka(a)).V.split("/").pop().split("."),1<d.length&&(d=d.pop().toLowerCase(),e=ge[d]));if(e)return Promise.resolve(e);c=A([a],c);c.method="HEAD";return b.request(0,c).then(function(b){(b=b.headers["content-type"])&&(b=b.toLowerCase());return(e=fe[b])?e:Promise.reject(new p(2,4,4E3,a))},function(a){a.severity=2;return Promise.reject(a)})}function Q(a,b){this.c=a;this.j=b;this.f=this.a=Infinity;this.b=1;this.i=0;this.h=!0;this.g=0;}n("shaka.media.PresentationTimeline",Q);Q.prototype.ka=function(){return this.a};Q.prototype.getDuration=Q.prototype.ka;Q.prototype.ga=function(a){this.a=a;};Q.prototype.setDuration=Q.prototype.ga;Q.prototype.ld=function(){return this.c};Q.prototype.getPresentationStartTime=Q.prototype.ld;Q.prototype.Jc=function(a){this.i=a;};Q.prototype.setClockOffset=Q.prototype.Jc;Q.prototype.ub=function(a){this.h=a;};
Q.prototype.setStatic=Q.prototype.ub;Q.prototype.nd=function(){return this.f};Q.prototype.getSegmentAvailabilityDuration=Q.prototype.nd;Q.prototype.Vb=function(a){this.f=a;};Q.prototype.setSegmentAvailabilityDuration=Q.prototype.Vb;Q.prototype.Kc=function(a){this.j=a;};Q.prototype.setDelay=Q.prototype.Kc;Q.prototype.Ia=function(a,b){b.length&&(this.b=b.reduce(function(a,b){return Math.max(a,b.endTime-b.startTime)},this.b));};Q.prototype.notifySegments=Q.prototype.Ia;
Q.prototype.Hb=function(a){this.b=Math.max(this.b,a);};Q.prototype.notifyMaxSegmentDuration=Q.prototype.Hb;Q.prototype.S=function(){return Infinity==this.a&&!this.h};Q.prototype.isLive=Q.prototype.S;Q.prototype.xa=function(){return Infinity!=this.a&&!this.h};Q.prototype.isInProgress=Q.prototype.xa;Q.prototype.ca=function(){return this.Fa(0)};Q.prototype.getSegmentAvailabilityStart=Q.prototype.ca;
Q.prototype.Fa=function(a){if(Infinity==this.f)return this.g;var b=this.qa();return Math.max(this.g,Math.min(b-this.f+a,b))};Q.prototype.getSafeAvailabilityStart=Q.prototype.Fa;Q.prototype.Ic=function(a){this.g=a;};Q.prototype.setAvailabilityStart=Q.prototype.Ic;Q.prototype.qa=function(){return this.S()||this.xa()?Math.min(Math.max(0,(Date.now()+this.i)/1E3-this.b-this.c),this.a):this.a};Q.prototype.getSegmentAvailabilityEnd=Q.prototype.qa;
Q.prototype.qb=function(){return Math.max(0,this.qa()-(this.S()||this.xa()?this.j:0))};Q.prototype.getSeekRangeEnd=Q.prototype.qb;function je(){this.a=this.b=null;this.g=[];this.c=null;this.i=[];this.h=1;this.j={};this.l=0;this.f=null;}n("shaka.dash.DashParser",je);l=je.prototype;l.configure=function(a){this.b=a;};l.start=function(a,b){this.g=[a];this.a=b;return ke(this).then(function(){this.a&&le(this,0);return this.c}.bind(this))};l.stop=function(){this.b=this.a=null;this.g=[];this.c=null;this.i=[];this.j={};null!=this.f&&(window.clearTimeout(this.f),this.f=null);return Promise.resolve()};l.update=function(){ke(this)["catch"](function(a){if(this.a)this.a.onError(a);}.bind(this));};
l.onExpirationUpdated=function(){};function ke(a){return a.a.networkingEngine.request(0,A(a.g,a.b.retryParameters),function(){return!this.a}.bind(a)).then(function(a){if(this.a)return me(this,a.data,a.uri)}.bind(a))}function me(a,b,c){b=yd(b,"MPD");if(!b)throw new p(2,4,4001,c);return Ad(b,a.b.retryParameters,a.b.dash.xlinkFailGracefully,c,a.a.networkingEngine).then(function(a){return ne(this,a,c)}.bind(a))}
function ne(a,b,c){function d(a){var b="time_shift".replace(/[\[\]]/g,"\\$&");return(a=(new RegExp("[?&]"+b+"(=([^&#]*)|&|#|$)")).exec(a))?a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):"":null}var e=[c],f=J(b,"Location").map(hd).filter(Ha);0<f.length&&(e=a.g=f);var f=b.getAttribute("type")||"static",g=J(b,"BaseURL").map(hd),e=D(e,g),h=K(b,"minBufferTime",jd);a.l=K(b,"minimumUpdatePeriod",jd,-1);var k=K(b,"publishTime",id),g=K(b,"availabilityStartTime",id);"dynamic"===f&&-1!==c.indexOf("&time_shift=")&&
(c=d(c))&&(g+=parseInt(c,10));null===g&&"dynamic"===f&&(g=k);c=K(b,"timeShiftBufferDepth",jd);var m=K(b,"suggestedPresentationDelay",jd),m=a.b.dash.liveDelay?m+a.b.dash.liveDelay:m,k=K(b,"maxSegmentDuration",jd);if(a.c)var q=a.c.presentationTimeline;else{var v=Math.max(10,1.5*h);q=new Q(g,null!=m?m:v);}var g=oe(a,{Ea:"static"!=f,presentationTimeline:q,W:null,T:null,U:null,A:null,bandwidth:0,kc:!1},e,b),m=g.duration,r=g.periods;q.ub("static"==f);q.ga(m||Infinity);q.Vb(null!=c?c:Infinity);q.Hb(k||1);
if(a.c)return Promise.resolve();b=J(b,"UTCTiming");return pe(a,e,b,q.S()).then(function(a){this.a&&(q.Jc(a),this.c={presentationTimeline:q,periods:r,offlineSessionIds:[],minBufferTime:h||0});}.bind(a))}
function oe(a,b,c,d){var e=K(d,"mediaPresentationDuration",jd),f=[],g=0;d=J(d,"Period");for(var h=0;h<d.length;h++){var k=d[h],g=K(k,"start",jd,g),m=K(k,"duration",jd),q=null;if(h!=d.length-1){var v=K(d[h+1],"start",jd);null!=v&&(q=v-g);}else null!=e&&(q=e-g);null==q&&(q=m);k=qe(a,b,c,{start:g,duration:q,node:k,Db:null==q||h==d.length-1});f.push(k);m=b.W.id;-1==a.i.indexOf(m)&&(a.i.push(m),a.c&&(a.a.filterNewPeriod(k),a.c.periods.push(k)));if(null==q){g=null;break}g+=q;}a.c||a.a.filterAllPeriods(f);
return null!=e?{periods:f,duration:e}:{periods:f,duration:g}}
function qe(a,b,c,d){b.W=re(a,d.node,null,c);b.T=d;b.W.id||(b.W.id="__shaka_period_"+d.start);J(d.node,"EventStream").forEach(a.Zd.bind(a,d.start,d.duration));c=J(d.node,"AdaptationSet").map(a.Xd.bind(a,b)).filter(Ha);var e=c.map(function(a){return a.ke}).reduce(x,[]),f=e.filter(Ia);if(b.Ea&&e.length!=f.length)throw new p(2,4,4018);var g=c.filter(function(a){return!a.Zb});c.filter(function(a){return a.Zb}).forEach(function(a){var b=a.streams[0],c=a.Zb;g.forEach(function(a){a.id==c&&a.streams.forEach(function(a){a.trickModeVideo=
b;});});});e=se(g,"video");f=se(g,"audio");if(!e.length&&!f.length)throw new p(2,4,4004);f.length||(f=[null]);e.length||(e=[null]);b=[];for(c=0;c<f.length;c++)for(var h=0;h<e.length;h++)te(a,f[c],e[h],b);a=se(g,"text");e=[];for(c=0;c<a.length;c++)e.push.apply(e,a[c].streams);return{startTime:d.start,textStreams:e,variants:b}}function se(a,b){return a.filter(function(a){return a.contentType==b})}
function te(a,b,c,d){if(b||c)if(b&&c){var e=b.drmInfos;var f=c.drmInfos;if(e.length&&f.length?0<Gb(e,f).length:1)for(var g=Gb(b.drmInfos,c.drmInfos),e=0;e<b.streams.length;e++)for(var h=0;h<c.streams.length;h++)f=(c.streams[h].bandwidth||0)+(b.streams[e].bandwidth||0),f={id:a.h++,language:b.language,primary:b.Eb||c.Eb,audio:b.streams[e],video:c.streams[h],bandwidth:f,drmInfos:g,allowedByApplication:!0,allowedByKeySystem:!0},d.push(f);}else for(g=b||c,e=0;e<g.streams.length;e++)f=g.streams[e].bandwidth||
0,f={id:a.h++,language:g.language||"und",primary:g.Eb,audio:b?g.streams[e]:null,video:c?g.streams[e]:null,bandwidth:f,drmInfos:g.drmInfos,allowedByApplication:!0,allowedByKeySystem:!0},d.push(f);}
l.Xd=function(a,b){a.U=re(this,b,a.W,null);var c=!1,d=J(b,"Role"),e=d.map(function(a){return a.getAttribute("value")}).filter(Ha),f=void 0;"text"==a.U.contentType&&(f="subtitle");for(var g=0;g<d.length;g++){var h=d[g].getAttribute("schemeIdUri");if(null==h||"urn:mpeg:dash:role:2011"==h)switch(h=d[g].getAttribute("value"),h){case "main":c=!0;break;case "caption":case "subtitle":f=h;}}var k=null,m=!1;J(b,"EssentialProperty").forEach(function(a){"http://dashif.org/guidelines/trickmode"==a.getAttribute("schemeIdUri")?
k=a.getAttribute("value"):m=!0;});if(m)return null;var d=J(b,"ContentProtection"),q=qd(d,this.b.dash.customScheme,this.b.dash.ignoreDrmInfo),d=gc(b.getAttribute("lang")||"und"),h=b.getAttribute("label"),g=J(b,"Representation"),e=g.map(this.$d.bind(this,a,q,f,d,h,c,e)).filter(function(a){return!!a});if(!e.length)throw new p(2,4,4003);a.U.contentType&&"application"!=a.U.contentType||(a.U.contentType=ue(e[0].mimeType,e[0].codecs),e.forEach(function(b){b.type=a.U.contentType;}));e.forEach(function(a){q.drmInfos.forEach(function(b){a.keyId&&
b.keyIds.push(a.keyId);});});f=g.map(function(a){return a.getAttribute("id")}).filter(Ha);return{id:a.U.id||"__fake__"+this.h++,contentType:a.U.contentType,language:d,Eb:c,streams:e,drmInfos:q.drmInfos,Zb:k,ke:f}};
l.$d=function(a,b,c,d,e,f,g,h){a.A=re(this,h,a.U,null);if(!ve(a.A))return null;a.bandwidth=K(h,"bandwidth",md)||0;var k=this.le.bind(this);if(a.A.Ya)k=Ud(a,k);else if(a.A.sa)k=Xd(a,this.j);else if(a.A.Za)k=ae(a,k,this.j,!!this.c);else{var m=a.A.Z,q=a.T.duration||0;k={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0<=a&&a<q?1:null},getSegmentReference:function(a){return 1!=a?null:new L(1,0,q,function(){return m},0,null)},initSegmentReference:null,Y:0};}h=J(h,
"ContentProtection");h=td(h,this.b.dash.customScheme,b,this.b.dash.ignoreDrmInfo);return{id:this.h++,createSegmentIndex:k.createSegmentIndex,findSegmentPosition:k.findSegmentPosition,getSegmentReference:k.getSegmentReference,initSegmentReference:k.initSegmentReference,presentationTimeOffset:k.Y,mimeType:a.A.mimeType,codecs:a.A.codecs,frameRate:a.A.frameRate,bandwidth:a.bandwidth,width:a.A.width,height:a.A.height,kind:c,encrypted:0<b.drmInfos.length,keyId:h,language:d,label:e,type:a.U.contentType,
primary:f,trickModeVideo:null,containsEmsgBoxes:a.A.containsEmsgBoxes,roles:g,channelsCount:a.A.Ib}};l.Fe=function(){this.f=null;var a=Date.now();ke(this).then(function(){this.a&&le(this,(Date.now()-a)/1E3);}.bind(this))["catch"](function(a){this.a&&(a.severity=1,this.a.onError(a),le(this,0));}.bind(this));};function le(a,b){0>a.l||(a.f=window.setTimeout(a.Fe.bind(a),1E3*Math.max(Math.max(3,a.l)-b,0)));}
function re(a,b,c,d){c=c||{contentType:"",mimeType:"",codecs:"",containsEmsgBoxes:!1,frameRate:void 0,Ib:null};d=d||c.Z;var e=J(b,"BaseURL").map(hd);if(0<e.length&&a.b.dash.baseUrl){var f=e[0].split("/");""===f[f.length-1]&&(e=[a.b.dash.baseUrl+f[f.length-4]+"/"+f[f.length-3]+"/"+f[f.length-2]+"/"]);}a=b.getAttribute("contentType")||c.contentType;var f=b.getAttribute("mimeType")||c.mimeType,g=b.getAttribute("codecs")||c.codecs,h=K(b,"frameRate",od)||c.frameRate,k=!!J(b,"InbandEventStream").length,
m=J(b,"AudioChannelConfiguration"),m=we(m)||c.Ib;a||(a=ue(f,g));return{Z:D(d,e),Ya:gd(b,"SegmentBase")||c.Ya,sa:gd(b,"SegmentList")||c.sa,Za:gd(b,"SegmentTemplate")||c.Za,width:K(b,"width",nd)||c.width,height:K(b,"height",nd)||c.height,contentType:a,mimeType:f,codecs:g,frameRate:h,containsEmsgBoxes:k||c.containsEmsgBoxes,id:b.getAttribute("id"),Ib:m}}
function we(a){for(var b=0;b<a.length;++b){var c=a[b],d=c.getAttribute("schemeIdUri");if(d&&(c=c.getAttribute("value")))switch(d){case "urn:mpeg:dash:outputChannelPositionList:2012":return c.trim().split(/ +/).length;case "urn:mpeg:dash:23003:3:audio_channel_configuration:2011":case "urn:dts:dash:audio_channel_configuration:2012":d=parseInt(c,10);if(!d)continue;return d;case "tag:dolby.com,2014:dash:audio_channel_configuration:2011":case "urn:dolby:dash:audio_channel_configuration:2011":if(d=parseInt(c,
16)){for(a=0;d;)d&1&&++a,d>>=1;return a}}}return null}function ve(a){var b=0+(a.Ya?1:0);b+=a.sa?1:0;b+=a.Za?1:0;if(!b)return"text"==a.contentType||"application"==a.contentType?!0:!1;1!=b&&(a.Ya&&(a.sa=null),a.Za=null);return!0}function xe(a,b,c,d){b=D(b,[c]);b=A(b,a.b.retryParameters);b.method=d;return a.a.networkingEngine.request(0,b).then(function(a){if("HEAD"==d){if(!a.headers||!a.headers.date)return 0;a=a.headers.date;}else a=E(a.data);a=Date.parse(a);return isNaN(a)?0:a-Date.now()})}
function pe(a,b,c,d){c=c.map(function(a){return{scheme:a.getAttribute("schemeIdUri"),value:a.getAttribute("value")}});var e=a.b.dash.clockSyncUri;d&&!c.length&&e&&c.push({scheme:"urn:mpeg:dash:utc:http-head:2014",value:e});return Fa(c,function(a){var c=a.value;switch(a.scheme){case "urn:mpeg:dash:utc:http-head:2014":case "urn:mpeg:dash:utc:http-head:2012":return xe(this,b,c,"HEAD");case "urn:mpeg:dash:utc:http-xsdate:2014":case "urn:mpeg:dash:utc:http-iso:2014":case "urn:mpeg:dash:utc:http-xsdate:2012":case "urn:mpeg:dash:utc:http-iso:2012":return xe(this,
b,c,"GET");case "urn:mpeg:dash:utc:direct:2014":case "urn:mpeg:dash:utc:direct:2012":return a=Date.parse(c),isNaN(a)?0:a-Date.now();case "urn:mpeg:dash:utc:http-ntp:2014":case "urn:mpeg:dash:utc:ntp:2014":case "urn:mpeg:dash:utc:sntp:2014":return Promise.reject();default:return Promise.reject()}}.bind(a))["catch"](function(){return 0})}
l.Zd=function(a,b,c){var d=c.getAttribute("schemeIdUri")||"",e=c.getAttribute("value")||"",f=K(c,"timescale",nd)||1;J(c,"Event").forEach(function(c){var g=K(c,"presentationTime",nd)||0,k=K(c,"duration",nd)||0,g=g/f+a,k=g+k/f;null!=b&&(g=Math.min(g,a+b),k=Math.min(k,a+b));c={schemeIdUri:d,value:e,startTime:g,endTime:k,id:c.getAttribute("id")||"",eventElement:c};this.a.onTimelineRegionAdded(c);}.bind(this));};
l.le=function(a,b,c){a=A(a,this.b.retryParameters);null!=b&&(a.headers.Range="bytes="+b+"-"+(null!=c?c:""));return this.a.networkingEngine.request(1,a).then(function(a){return a.data})};function ue(a,b){return Pb[ab(a,b)]?"text":a.split("/")[0]}ge.mpd=je;fe["application/dash+xml"]=je;function ye(a,b,c,d){this.uri=a;this.type=b;this.a=c;this.segments=d||null;}function ze(a,b,c,d){this.id=a;this.name=b;this.a=c;this.value=d||null;}ze.prototype.toString=function(){function a(a){return a.name+'="'+a.value+'"'}return this.value?"#"+this.name+":"+this.value:0<this.a.length?"#"+this.name+":"+this.a.map(a).join(","):"#"+this.name};function Ae(a,b){this.name=a;this.value=b;}ze.prototype.getAttribute=function(a){var b=this.a.filter(function(b){return b.name==a});return b.length?b[0]:null};
function Be(a,b,c){c=c||null;return(a=a.getAttribute(b))?a.value:c}function Ce(a,b){this.a=b;this.uri=a;}function De(a,b){return a.filter(function(a){return a.name==b})}function Ee(a,b){var c=De(a,b);return c.length?c[0]:null}function Fe(a,b,c){return a.filter(function(a){var d=a.getAttribute("TYPE");a=a.getAttribute("GROUP-ID");return d.value==b&&a.value==c})}function Ge(a,b){return D([a],[b])[0]}function He(a){this.b=a;this.a=0;}function Ie(a,b){b.lastIndex=a.a;var c=(c=b.exec(a.b))?{position:c.index,length:c[0].length,ne:c}:null;if(a.a==a.b.length||!c||c.position!=a.a)return null;a.a+=c.length;return c.ne}function Je(a){return a.a==a.b.length?null:(a=Ie(a,/[^ \t\n]*/gm))?a[0]:null}function Ke(){this.a=0;}
function Le(a,b,c){b=E(b);b=b.replace(/\r\n|\r(?=[^\n]|$)/gm,"\n").trim();var d=b.split(/\n+/m);if(!/^#EXTM3U($|[ \t\n])/m.test(d[0]))throw new p(2,4,4015);b=0;for(var e=[],f=1;f<d.length;)if(/^#(?!EXT)/m.test(d[f]))f+=1;else{var g=d[f];g=Me(a.a++,g);if(0<=Ne.indexOf(g.name))b=1;else if(0<=Oe.indexOf(g.name)){if(1!=b)throw new p(2,4,4017);d=d.splice(f,d.length-f);a=Pe(a,d,e);return new ye(c,b,e,a)}e.push(g);f+=1;"EXT-X-STREAM-INF"==g.name&&(g.a.push(new Ae("URI",d[f])),f+=1);}return new ye(c,b,e)}
function Pe(a,b,c){var d=[],e=[];b.forEach(function(a){/^(#EXT)/.test(a)?(a=Me(this.a++,a),0<=Ne.indexOf(a.name)?c.push(a):e.push(a)):/^#(?!EXT)/m.test(a)||(d.push(new Ce(a.trim(),e)),e=[]);}.bind(a));return d}
function Me(a,b){var c=b.match(/^#(EXT[^:]*)(?::(.*))?$/);if(!c)throw new p(2,4,4016);var d=c[1],e=c[2],c=[];if(e&&0<=e.indexOf("="))for(var e=new He(e),f,g=/([^=]+)=(?:"([^"]*)"|([^",]*))(?:,|$)/g;f=Ie(e,g);)c.push(new Ae(f[1],f[2]||f[3]));else if(e)return new ze(a,d,c,e);return new ze(a,d,c)}var Ne="EXT-X-TARGETDURATION EXT-X-MEDIA-SEQUENCE EXT-X-DISCONTINUITY-SEQUENCE EXT-X-PLAYLIST-TYPE EXT-X-MAP EXT-X-I-FRAMES-ONLY EXT-X-ENDLIST".split(" "),Oe="EXTINF EXT-X-BYTERANGE EXT-X-DISCONTINUITY EXT-X-PROGRAM-DATE-TIME EXT-X-KEY EXT-X-DATERANGE".split(" ");function Qe(a){return new Promise(function(b){var c=Qe.parse(a);b({uri:a,data:c.data,headers:{"content-type":c.contentType}});})}n("shaka.net.DataUriPlugin",Qe);
Qe.parse=function(a){var b=a.split(":");if(2>b.length||"data"!=b[0])throw new p(2,1,1004,a);b=b.slice(1).join(":").split(",");if(2>b.length)throw new p(2,1,1004,a);var c=b[0],b=window.decodeURIComponent(b.slice(1).join(",")),c=c.split(";"),d=null;1<c.length&&(d=c[1]);if("base64"==d)a=kb(b).buffer;else{if(d)throw new p(2,1,1005,a);a=fb(b);}return{data:a,contentType:c[0]}};Ka("data",Qe);function Re(){this.g=this.f=null;this.H=1;this.w={};this.C={};this.M={};this.a={};this.b=null;this.l="";this.v=new Ke;this.i=this.h=null;this.c=Se;this.m=null;this.j=0;this.B=Infinity;}n("shaka.hls.HlsParser",Re);l=Re.prototype;l.configure=function(a){this.g=a;};l.start=function(a,b){this.f=b;this.l=a;return Te(this,a).then(function(b){return Ue(this,b.data,a).then(function(){We(this,this.h);return this.m}.bind(this))}.bind(this))};
l.stop=function(){this.g=this.f=null;this.w={};this.C={};this.m=null;return Promise.resolve()};l.update=function(){if(this.c!=Xe.pa){var a=[],b;for(b in this.a)a.push(Ye(this,this.a[b],b));return Promise.all(a)}};
function Ye(a,b,c){Te(a,c).then(function(a){var d=Xe,f=Le(this.v,a.data,c);if(1!=f.type)throw new p(2,4,4017);a=Ee(f.a,"EXT-X-MEDIA-SEQUENCE");if(this.c==d.eb&&!a)throw new p(2,4,4031);var g=b.stream;Ze(this,f,a?Number(a.value):0,g.mimeType,g.codecs).then(function(a){b.tb.replace(a);a=a[a.length-1];Ee(f.a,"EXT-X-ENDLIST")&&($e(this,d.pa),this.b.ga(a.endTime));}.bind(this));}.bind(a));}l.onExpirationUpdated=function(){};
function Ue(a,b,c){b=Le(a.v,b,c);if(0!=b.type)throw new p(2,4,4022);return af(a,b).then(function(a){this.f.filterAllPeriods([a]);if(this.c!=Xe.pa){var b=3*this.j;this.b.Kc(b);this.h=this.B;this.c==Xe.eb&&this.b.Vb(b);}else{var c=Infinity,d=Infinity,h;for(h in this.a)b=this.a[h],c=Math.min(c,b.xd),d=Math.min(d,b.duration);this.b.ga(d);for(h in this.a)b=this.a[h],b.stream.presentationTimeOffset=c,b.tb.offset(-c),Jd(b.tb,d);}this.m={presentationTimeline:this.b,periods:[a],offlineSessionIds:[],minBufferTime:0};}.bind(a))}
function af(a,b){var c=b.a,d=De(b.a,"EXT-X-MEDIA").filter(function(a){return"SUBTITLES"==bf(a,"TYPE")}.bind(a)).map(function(a){return cf(this,a)}.bind(a));return Promise.all(d).then(function(a){var d=De(c,"EXT-X-STREAM-INF").map(function(a){return df(this,a,b)}.bind(this));return Promise.all(d).then(function(b){return{startTime:0,variants:b.reduce(x,[]),textStreams:a}}.bind(this))}.bind(a))}
function df(a,b,c){var d=Be(b,"CODECS","avc1.42E01E,mp4a.40.2").split(","),e=b.getAttribute("RESOLUTION"),f=null,g=null,h=Be(b,"FRAME-RATE"),k=Number(bf(b,"BANDWIDTH"));if(e)var m=e.value.split("x"),f=m[0],g=m[1];c=De(c.a,"EXT-X-MEDIA");var q=Be(b,"AUDIO"),v=Be(b,"VIDEO");q?c=Fe(c,"AUDIO",q):v&&(c=Fe(c,"VIDEO",v));if(m=ef("text",d)){var r=Be(b,"SUBTITLES");r&&(r=Fe(c,"SUBTITLES",r),r.length&&(a.w[r[0].id].stream.codecs=m));d.splice(d.indexOf(m),1);}c=c.map(function(a){return ff(this,a,d)}.bind(a));
var t=[],y=[];return Promise.all(c).then(function(a){q?t=a:v&&(y=a);if(t.length||y.length)if(t.length)if(bf(b,"URI")==t[0].Rb){a="audio";var c=!0;}else a="video";else a="audio";else c=!1,1==d.length?(a=ef("video",d),a=e||h||a?"video":"audio"):(a="video",d=[d.join(",")]);return c?Promise.resolve():gf(this,b,d,a)}.bind(a)).then(function(a){a&&("audio"==a.stream.type?t=[a]:y=[a]);return jf(this,t,y,k,f,g,h)}.bind(a))}
function jf(a,b,c,d,e,f,g){c.forEach(function(a){if(a=a.stream)a.width=Number(e)||void 0,a.height=Number(f)||void 0,a.frameRate=Number(g)||void 0;}.bind(a));b.length||(b=[null]);c.length||(c=[null]);for(var h=[],k=0;k<b.length;k++)for(var m=0;m<c.length;m++){var q=b[k]?b[k].stream:null,v=c[m]?c[m].stream:null,r=b[k]?b[k].drmInfos:null,t=c[m]?c[m].drmInfos:null;if(q&&v)if(r.length&&t.length?0<Gb(r,t).length:1)var y=Gb(r,t);else continue;else q?y=r:v&&(y=t);r=(c[k]?c[k].Rb:"")+" - "+(b[k]?b[k].Rb:"");
a.C[r]||(q=kf(a,q,v,d,y),h.push(q),a.C[r]=q);}return h}function kf(a,b,c,d,e){return{id:a.H++,language:b?b.language:"und",primary:!!b&&b.primary||!!c&&c.primary,audio:b,video:c,bandwidth:d,drmInfos:e,allowedByApplication:!0,allowedByKeySystem:!0}}function cf(a,b){bf(b,"TYPE");return ff(a,b,[]).then(function(a){return a.stream})}
function ff(a,b,c){var d=bf(b,"URI"),d=Ge(a.l,d);if(a.a[d])return Promise.resolve(a.a[d]);var e=bf(b,"TYPE").toLowerCase();"subtitles"==e&&(e="text");var f=gc(Be(b,"LANGUAGE","und")),g=Be(b,"NAME"),h=b.getAttribute("DEFAULT"),k=b.getAttribute("AUTOSELECT"),m=Be(b,"CHANNELS");return lf(a,d,c,e,f,!!h||!!k,g,"audio"==e?mf(m):null).then(function(a){if(this.a[d])return this.a[d];this.w[b.id]=a;return this.a[d]=a}.bind(a))}function mf(a){if(!a)return null;a=a.split("/")[0];return parseInt(a,10)}
function gf(a,b,c,d){var e=bf(b,"URI"),e=Ge(a.l,e);return a.a[e]?Promise.resolve(a.a[e]):lf(a,e,c,d,"und",!1,null,null).then(function(a){return this.a[e]?this.a[e]:this.a[e]=a}.bind(a))}
function lf(a,b,c,d,e,f,g,h){var k=Xe,m=b;b=Ge(a.l,b);var q,v="",r;return Te(a,b).then(function(a){q=Le(this.v,a.data,b);if(1!=q.type)throw new p(2,4,4017);a=q;var e=Xe,f=Ee(a.a,"EXT-X-PLAYLIST-TYPE"),g=Ee(a.a,"EXT-X-ENDLIST"),g=f&&"VOD"==f.value||g,f=f&&"EVENT"==f.value&&!g,f=!g&&!f;g?$e(this,e.pa):(f?$e(this,e.eb):$e(this,e.Pc),a=nf(a.a,"EXT-X-TARGETDURATION"),a=Number(a.value),this.j=Math.max(a,this.j),this.B=Math.min(a,this.B));if(1==c.length)v=c[0];else if(a=ef(d,c),null!=a)v=a;else throw new p(2,
4,4025,c);return of(this,d,v,q)}.bind(a)).then(function(a){r=a;a=Ee(q.a,"EXT-X-MEDIA-SEQUENCE");if(this.c==k.eb&&!a)throw new p(2,4,4031);return Ze(this,q,a?Number(a.value):0,r,v)}.bind(a)).then(function(a){var b=a[0].startTime,c=a[a.length-1].endTime,k=c-b,t=new P(a);this.b||pf(this,c);c=null;"text"!=d&&(c=qf(q));this.b.Ia(0,a);a=void 0;"text"==d&&(a="subtitle");var Qc=[];q.segments.forEach(function(a){a=De(a.a,"EXT-X-KEY");Qc.push.apply(Qc,a);});var Rc=!1,Sc=[],hf=null;Qc.forEach(function(a){if("NONE"!=
bf(a,"METHOD")){Rc=!0;var b=bf(a,"KEYFORMAT");if(a=(b=rf[b])?b(a):null)a.keyIds.length&&(hf=a.keyIds[0]),Sc.push(a);}});if(Rc&&!Sc.length)throw new p(2,4,4026);a={id:this.H++,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:t.find.bind(t),getSegmentReference:t.get.bind(t),initSegmentReference:c,presentationTimeOffset:0,mimeType:r,codecs:v,kind:a,encrypted:Rc,keyId:hf,language:e,label:g||null,type:d,primary:f,trickModeVideo:null,containsEmsgBoxes:!1,frameRate:void 0,width:void 0,
height:void 0,bandwidth:void 0,roles:[],channelsCount:h};this.M[a.id]=t;return{stream:a,tb:t,drmInfos:Sc,Rb:m,xd:b,duration:k}}.bind(a))}function pf(a,b){var c=null,d=0;a.c!=Xe.pa&&(c=Date.now()/1E3-b,d=3*a.j);a.b=new Q(c,d);a.b.ub(a.c==Xe.pa);}
function qf(a){var b=De(a.a,"EXT-X-MAP");if(!b.length)return null;if(1<b.length)throw new p(2,4,4020);var b=b[0],c=bf(b,"URI"),d=Ge(a.uri,c);a=0;c=null;if(b=Be(b,"BYTERANGE"))a=b.split("@"),b=Number(a[0]),a=Number(a[1]),c=a+b-1;return new Bd(function(){return[d]},a,c)}
function sf(a,b,c,d,e){var f=c.a,g=Ge(a.uri,c.uri);a=nf(f,"EXTINF").value.split(",");a=e+Number(a[0]);c=0;var h=null;if(f=Ee(f,"EXT-X-BYTERANGE"))c=f.value.split("@"),f=Number(c[0]),c=c[1]?Number(c[1]):b.G+1,h=c+f-1;return new L(d,e,a,function(){return[g]},c,h)}
function Ze(a,b,c,d,e){var f=b.segments,g=[],h=Ge(b.uri,f[0].uri),k=sf(b,null,f[0],c,0);return tf(a,b.uri,k,d,e).then(function(a){h.split("/").pop();for(var d=0;d<f.length;++d){var e=g[g.length-1],e=sf(b,e,f[d],c+d,d?e.endTime:a);g.push(e);}return g}.bind(a))}
function uf(a,b){var c=a.f.networkingEngine,d=A(b.a(),a.g.retryParameters),e={},f=b.P;e.Range="bytes="+f+"-"+(f+1024-1);var g={};if(f||null!=b.G)f="bytes="+f+"-",null!=b.G&&(f+=b.G),g.Range=f;d.headers=e;return c.request(1,d)["catch"](function(){ha("Unable to fetch a partial HLS segment! Falling back to a full segment request, which is expensive!  Your server should support Range requests and CORS preflights.",d.uris[0]);d.headers=g;return c.request(1,d)})}
function tf(a,b,c,d,e){return a.m&&(b=a.a[b].tb.get(c.position))?Promise.resolve(b.startTime):uf(a,c).then(function(a){if("video/mp4"==d||"audio/mp4"==d)return vf(a.data);if("video/mp2t"==d)return wf(a.data);if("application/mp4"!=d&&d.indexOf("text/"))throw new p(2,4,4030);a=a.data;var b=ab(d,e);if(Pb[b]){var c=new Ob(null);c.c=new Pb[b];b={periodStart:0,segmentStart:0,segmentEnd:0};try{var f=c.c.parseMedia(new Uint8Array(a),b)[0].startTime;}catch(m){throw new p(2,2,2009,m);}}else f=0;return f}.bind(a))}
function vf(a){var b=0,c=!1;(new N).F("moof",O).F("traf",O).$("tfdt",function(a){b=(a.version?a.u.Ma():a.u.D())/9E4;c=!0;a.ba.stop();}).parse(a,!0);if(!c)throw new p(2,4,4030);return b}
function wf(a){function b(){throw new p(2,4,4030);}a=new M(new DataView(a),0);for(var c=0;;){c=a.s;var d=a.X();71!=d&&b();a.Xa()&16384||b();(d=(a.X()&48)>>4)&&2!=d||b();3==d&&(d=a.X(),a.J(d));if(1!=a.D()>>8)a.seek(c+188),d=a.X(),71!=d&&(a.seek(c+192),d=a.X()),71!=d&&(a.seek(c+204),d=a.X()),71!=d&&b(),a.Fc(1);else return a.J(3),(c=a.X()>>6)&&1!=c||b(),a.X()||b(),c=a.X(),d=a.Xa(),a=a.Xa(),(1073741824*((c&14)>>1)+((d&65534)<<14|(a&65534)>>1))/9E4}}
function ef(a,b){for(var c=xf[a],d=0;d<c.length;d++)for(var e=0;e<b.length;e++)if(c[d].test(b[e].trim()))return b[e].trim();return"text"==a?"":null}
function of(a,b,c,d){d=Ge(d.uri,d.segments[0].uri);var e=(new ka(d)).V.split(".").pop(),f=yf[b][e];if(f)return Promise.resolve(f);if("text"==b)return c&&"vtt"!=c?Promise.resolve("application/mp4"):Promise.resolve("text/vtt");b=A([d],a.g.retryParameters);b.method="HEAD";return a.f.networkingEngine.request(1,b).then(function(a){a=a.headers["content-type"];if(!a)throw new p(2,4,4021,e);return a.split(";")[0]})}function bf(a,b){var c=a.getAttribute(b);if(!c)throw new p(2,4,4023,b);return c.value}
function nf(a,b){var c=Ee(a,b);if(!c)throw new p(2,4,4024,b);return c}function Te(a,b){return a.f.networkingEngine.request(0,A([b],a.g.retryParameters),function(){return!this.f}.bind(a))}
var xf={audio:[/^vorbis$/,/^opus$/,/^flac$/,/^mp4a/,/^[ae]c-3$/],video:[/^avc/,/^hev/,/^hvc/,/^vp0?[89]/,/^av1$/],text:[/^vtt$/,/^wvtt/,/^stpp/]},yf={audio:{mp4:"audio/mp4",m4s:"audio/mp4",m4i:"audio/mp4",m4a:"audio/mp4",ts:"video/mp2t"},video:{mp4:"video/mp4",m4s:"video/mp4",m4i:"video/mp4",m4v:"video/mp4",ts:"video/mp2t"},text:{mp4:"application/mp4",m4s:"application/mp4",m4i:"application/mp4",vtt:"text/vtt",ttml:"application/ttml+xml"}};
Re.prototype.L=function(){this.f&&(this.i=null,this.update().then(function(){We(this,this.h);}.bind(this))["catch"](function(a){this.f&&(a.severity=1,this.f.onError(a),We(this,0));}.bind(this)));};function We(a,b){null!=a.h&&null!=b&&(a.i=window.setTimeout(a.L.bind(a),1E3*b));}function $e(a,b){a.c=b;a.b&&a.b.ub(a.c==Xe.pa);a.c==Xe.pa&&null!=a.i&&(window.clearTimeout(a.i),a.i=null,a.h=null);}
var rf={"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":function(a){if("SAMPLE-AES-CENC"!=bf(a,"METHOD"))return null;var b=bf(a,"URI"),b=Qe.parse(b),b=new Uint8Array(b.data),b=Va("com.widevine.alpha",[{initDataType:"cenc",initData:b}]);if(a=Be(a,"KEYID"))b.keyIds=[a.substr(2).toLowerCase()];return b}},Se="VOD",Xe={pa:Se,Pc:"EVENT",eb:"LIVE"};ge.m3u8=Re;fe["application/x-mpegurl"]=Re;fe["application/vnd.apple.mpegurl"]=Re;function zf(a,b,c,d,e,f){this.a=a;this.c=b;this.l=c;this.B=d;this.L=e;this.H=f;this.b=new Ra;this.i=!1;this.h=1;this.g=this.f=null;this.C=a.readyState;this.j=!1;this.w=this.M=-1;this.m=this.v=!1;0<a.readyState?this.rc():Ua(this.b,a,"loadedmetadata",this.rc.bind(this));b=this.tc.bind(this);B(this.b,a,"ratechange",this.Ld.bind(this));B(this.b,a,"waiting",b);this.g=new gb(b);ib(this.g,.25);}l=zf.prototype;
l.o=function(){var a=this.b.o();this.b=null;this.f&&(this.f.cancel(),this.f=null);this.g&&(this.g.cancel(),this.g=null);this.H=this.L=this.l=this.c=this.a=null;return a};function Af(a,b){0<a.a.readyState?a.a.currentTime=Bf(a,b):a.B=b;}function Cf(a){return 0<a.a.readyState?Bf(a,a.a.currentTime):Df(a)}function Df(a){if(null!=a.B)return Bf(a,a.B);a=a.c.presentationTimeline;return Infinity>a.ka()?a.ca():a.qb()}l.Cb=function(){return this.h};
function Ef(a,b){a.f&&(a.f.cancel(),a.f=null);a.h=b;a.a.playbackRate=a.i||0>b?0:b;!a.i&&0>b&&(a.f=new gb(function(){this.a.currentTime+=b/4;}.bind(a)),ib(a.f,.25));}l.Lb=function(){this.m=!0;this.tc();};l.Ld=function(){var a=this.i||0>this.h?0:this.h;this.a.playbackRate&&this.a.playbackRate!=a&&Ef(this,this.a.playbackRate);};
l.rc=function(){var a=Df(this);.001>Math.abs(this.a.currentTime-a)?(B(this.b,this.a,"seeking",this.uc.bind(this)),B(this.b,this.a,"playing",this.sc.bind(this))):(Ua(this.b,this.a,"seeking",this.Nd.bind(this)),this.a.currentTime=a);};l.Nd=function(){B(this.b,this.a,"seeking",this.uc.bind(this));B(this.b,this.a,"playing",this.sc.bind(this));};
l.tc=function(){if(this.a.readyState&&!this.a.seeking&&!this.a.paused){this.a.readyState!=this.C&&(this.j=!1,this.C=this.a.readyState);var a=this.l.smallGapLimit,b=this.a.currentTime,c=this.a.buffered;if(b<this.c.presentationTimeline.ca())c=Ff(this,b),Gf(this,b,c);else{a:{if(c&&c.length&&!(1==c.length&&1E-6>c.end(0)-c.start(0))){var d=.1;/(Edge\/|Trident\/|Tizen)/.test(navigator.userAgent)&&(d=.5);for(var e=0;e<c.length;e++)if(c.start(e)>b&&(!e||c.end(e-1)-b<=d)){d=e;break a}}d=null;}if(null==d){if(3>
this.a.readyState&&0<this.a.playbackRate)if(this.w!=b)this.w=b,this.M=Date.now(),this.v=!1;else if(!this.v&&this.M<Date.now()-1E3)for(d=0;d<c.length;d++)if(b>=c.start(d)&&b<c.end(d)-.5){this.a.currentTime+=.1;this.w=this.a.currentTime;this.v=!0;break}}else if(d||this.m)if(e=c.start(d),!(e>=this.c.presentationTimeline.qb())){var f=e-b,a=f<=a,g=!1;a||this.j||(this.j=!0,f=new C("largegap",{currentTime:b,gapSize:f}),f.cancelable=!0,this.H(f),this.l.jumpLargeGaps&&!f.defaultPrevented&&(g=!0));if(a||g)d&&
c.end(d-1),Gf(this,b,e);}}}};l.uc=function(){this.m=!1;var a=this.a.currentTime,b=Ff(this,a);.001<Math.abs(b-a)?Gf(this,a,b):(this.j=!1,this.L());};l.sc=function(){var a=this.a.currentTime,b=Ff(this,a);.001<Math.abs(b-a)&&Gf(this,a,b);};function Ff(a,b){var c=Ib.bind(null,a.a.buffered),d=1*Math.max(a.c.minBufferTime||0,a.l.rebufferingGoal),e=a.c.presentationTimeline,f=e.qa(),g=e.Fa(d),h=e.Fa(5),d=e.Fa(d+5);return b>f?f:b<e.Fa(0)?c(h)?h:d:b>=g||c(b)?b:d}
function Gf(a,b,c){a.a.currentTime=c;var d=0,e=function(){!this.a||10<=d++||this.a.currentTime!=b||(this.a.currentTime=c,setTimeout(e,100));}.bind(a);setTimeout(e,100);}function Bf(a,b){var c=a.c.presentationTimeline.ca();if(b<c)return c;c=a.c.presentationTimeline.qa();return b>=c?c?c-.1:0:b}function Hf(a,b,c,d,e,f,g){this.a=a;this.B=b;this.g=c;this.w=d;this.l=e;this.h=f;this.C=g;this.c=[];this.j=new Ra;this.b=!1;this.i=-1;this.f=null;If(this);}Hf.prototype.o=function(){var a=this.j?this.j.o():Promise.resolve();this.j=null;Jf(this);this.C=this.h=this.l=this.w=this.g=this.B=this.a=null;this.c=[];return a};
Hf.prototype.v=function(a){if(!this.c.some(function(b){return b.info.schemeIdUri==a.schemeIdUri&&b.info.startTime==a.startTime&&b.info.endTime==a.endTime})){var b={info:a,status:1};this.c.push(b);var c=new C("timelineregionadded",{detail:Kf(a)});this.h(c);this.m(!0,b);}};function Kf(a){var b=Ea(a);b.eventElement=a.eventElement;return b}
Hf.prototype.m=function(a,b){var c=b.info.startTime>this.a.currentTime?1:b.info.endTime<this.a.currentTime?3:2,d=2==b.status,e=2==c;if(c!=b.status){if(!a||d||e)d||this.h(new C("timelineregionenter",{detail:Kf(b.info)})),e||this.h(new C("timelineregionexit",{detail:Kf(b.info)}));b.status=c;}};function If(a){Jf(a);a.f=window.setTimeout(a.H.bind(a),250);}function Jf(a){a.f&&(window.clearTimeout(a.f),a.f=null);}
Hf.prototype.H=function(){this.f=null;If(this);var a=Bc(this.g,this.a.currentTime);a!=this.i&&(-1!=this.i&&this.C(),this.i=a);var a=Jb(this.a.buffered,this.a.currentTime),b=Hb(this.a.buffered),c=this.g.presentationTimeline,d=c.qa(),e="ended"==this.B.readyState,b=c.S()&&b>=d||this.a.ended||e;this.b?(c=1*Math.max(this.g.minBufferTime||0,this.w.rebufferingGoal),(b||a>=c)&&0!=this.b&&(this.b=!1,this.l(!1))):!b&&.5>a&&1!=this.b&&(this.b=!0,this.l(!0));this.c.forEach(this.m.bind(this,!1));};function Lf(a,b){this.a=b;this.b=a;this.h=null;this.i=1;this.m=Promise.resolve();this.g=[];this.j={};this.c={};this.v=!1;this.w=null;this.f=this.l=!1;}l=Lf.prototype;l.o=function(){for(var a in this.c)Mf(this.c[a]);this.h=this.c=this.j=this.g=this.m=this.b=this.a=null;this.f=!0;return Promise.resolve()};
l.configure=function(a){this.h=a;this.w=new ya({maxAttempts:Math.max(a.retryParameters.maxAttempts,2),baseDelay:a.retryParameters.baseDelay,backoffFactor:a.retryParameters.backoffFactor,fuzzFactor:a.retryParameters.fuzzFactor,timeout:0},!0);};l.init=function(){var a=this.a.mc(this.b.periods[Bc(this.b,Cf(this.a.Wa))]);return a.variant||a.text?Nf(this,a).then(function(){this.a&&this.a.Cd&&this.a.Cd();}.bind(this)):Promise.reject(new p(2,5,5005))};function R(a){return a.b.periods[Bc(a.b,Cf(a.a.Wa))]}
function Of(a){var b=a.c.video||a.c.audio;return b?a.b.periods[b.ya]:null}function Pf(a){return Qf(a,"audio")}function Rf(a){return Qf(a,"video")}function Qf(a,b){var c=a.c[b];return c?c.ra||c.stream:null}function Sf(a,b){var c=a.c.video;if(c){var d=c.stream;if(d)if(b){var e=d.trickModeVideo;if(e){var f=c.ra;f||(Tf(a,e,!1),c.ra=d);}}else if(f=c.ra)c.ra=null,Tf(a,f,!0);}}function Uf(a,b,c){b.video&&Tf(a,b.video,c);b.audio&&Tf(a,b.audio,c);}
function Tf(a,b,c){var d=a.c[b.type];if(!d&&"text"==b.type&&a.h.ignoreTextStreamFailures)Nf(a,{text:b});else if(d){var e=Cc(a.b,b);c&&e!=d.ya?Vf(a):(d.ra&&(b.trickModeVideo?(d.ra=b,b=b.trickModeVideo):d.ra=null),(e=a.g[e])&&e.Na&&(e=a.j[b.id])&&e.Na&&d.stream!=b&&("text"==b.type&&Vb(a.a.N,ab(b.mimeType,b.codecs)),d.stream=b,d.rb=!0,c&&(d.va?d.wb=!0:d.za?(d.ua=!0,d.wb=!0):(Mf(d),Wf(a,d,!0)))));}}
function Xf(a){var b=Cf(a.a.Wa);Object.keys(a.c).every(function(a){var c=this.a.N;"text"==a?(a=c.a,a=b>=a.a&&b<a.b):(a=Xb(c,a),a=Ib(a,b));return a}.bind(a))||Vf(a);}function Vf(a){for(var b in a.c){var c=a.c[b];c.va||c.ua||(c.za?c.ua=!0:null==Wb(a.a.N,b)?null==c.ta&&Yf(a,c,0):(Mf(c),Wf(a,c,!1)));}}
function Nf(a,b,c){var d=Bc(a.b,Cf(a.a.Wa)),e={},f=[];b.variant&&b.variant.audio&&(e.audio=b.variant.audio,f.push(b.variant.audio));b.variant&&b.variant.video&&(e.video=b.variant.video,f.push(b.variant.video));b.text&&(e.text=b.text,f.push(b.text));a.a.N.init(e);Zf(a);return $f(a,f).then(function(){if(!this.f)for(var a in e){var b=e[a];this.c[a]||(this.c[a]={stream:b,type:a,Ga:null,la:null,ra:null,rb:!0,ya:d,endOfStream:!1,za:!1,ta:null,ua:!1,wb:!1,va:!1,Qb:!1,Ta:!1,Dc:c||0},Yf(this,this.c[a],0));}}.bind(a))}
function ag(a,b){var c=a.g[b];if(c)return c.O;c={O:new u,Na:!1};a.g[b]=c;var d=a.b.periods[b].variants.map(function(a){var b=[];a.audio&&b.push(a.audio);a.video&&b.push(a.video);a.video&&a.video.trickModeVideo&&b.push(a.video.trickModeVideo);return b}).reduce(x,[]).filter(Ia);d.push.apply(d,a.b.periods[b].textStreams);a.m=a.m.then(function(){if(!this.f)return $f(this,d)}.bind(a)).then(function(){this.f||(this.g[b].O.resolve(),this.g[b].Na=!0);}.bind(a))["catch"](function(a){this.f||(this.g[b].O.reject(),
delete this.g[b],this.a.onError(a));}.bind(a));return c.O}
function $f(a,b){b.map(function(a){return a.id}).filter(Ia);for(var c=[],d=0;d<b.length;++d){var e=b[d];var f=a.j[e.id];f?c.push(f.O):(a.j[e.id]={O:new u,Na:!1},c.push(e.createSegmentIndex()));}return Promise.all(c).then(function(){if(!this.f)for(var a=0;a<b.length;++a){var c=this.j[b[a].id];c.Na||(c.O.resolve(),c.Na=!0);}}.bind(a))["catch"](function(a){if(!this.f)return this.j[e.id].O.reject(),delete this.j[e.id],Promise.reject(a)}.bind(a))}
function Zf(a){var b=a.b.presentationTimeline.ka();Infinity>b?a.a.N.ga(b):a.a.N.ga(Math.pow(2,32));}l.He=function(a){if(!this.f&&!a.za&&null!=a.ta&&!a.va)if(a.ta=null,a.ua)Wf(this,a,a.wb);else{try{var b=bg(this,a);null!=b&&(Yf(this,a,b),a.Ta=!1);}catch(c){cg(this,c);return}b=Ya(this.c);dg(this,a);b.every(function(a){return a.endOfStream})&&this.a.N.endOfStream().then(function(){this.b.presentationTimeline.ga(this.a.N.ka());}.bind(this));}};
function bg(a,b){var c=Cf(a.a.Wa),d=b.Ga&&b.la?a.b.periods[Cc(a.b,b.Ga)].startTime+b.la.endTime:Math.max(c,b.Dc),e=Cc(a.b,b.stream),f=Bc(a.b,d);var g=a.a.N;var h=b.type;"text"==h?(g=g.a,g=null==g.b||g.b<c?0:g.b-Math.max(c,g.a)):(g=Xb(g,h),g=Jb(g,c));h=Math.max(a.i*Math.max(a.b.minBufferTime||0,a.h.rebufferingGoal),a.i*a.h.bufferingGoal);if(d>=a.b.presentationTimeline.ka())return b.endOfStream=!0,null;b.endOfStream=!1;b.ya=f;if(f!=e)return null;if(g>=h)return.5;d=a.a.N;f=b.type;d="text"==f?d.a.b:Hb(Xb(d,
f));b.la&&b.stream==b.Ga?(f=b.la.position+1,d=eg(a,b,e,f)):(f=b.la?b.stream.findSegmentPosition(Math.max(0,a.b.periods[Cc(a.b,b.Ga)].startTime+b.la.endTime-a.b.periods[e].startTime)):b.stream.findSegmentPosition(Math.max(0,(d||c)-a.b.periods[e].startTime)),null==f?d=null:(g=null,null==d&&(g=eg(a,b,e,Math.max(0,f-1))),d=g||eg(a,b,e,f)));if(!d)return 1;b.Dc=0;fg(a,b,c,e,d);return null}
function eg(a,b,c,d){c=a.b.periods[c];b=b.stream.getSegmentReference(d);if(!b)return null;a=a.b.presentationTimeline;d=a.qa();return c.startTime+b.endTime<a.ca()||c.startTime+b.startTime>d?null:b}
function fg(a,b,c,d,e){var f=a.b.periods[d],g=b.stream,h=a.b.presentationTimeline.ka(),k=a.b.periods[d+1];d=gg(a,b,d,f.startTime,k?k.startTime:h);b.za=!0;b.rb=!1;h=hg(a,e);Promise.all([d,h]).then(function(a){if(!this.f&&!this.l)return ig(this,b,c,f,g,e,a[1])}.bind(a)).then(function(){this.f||this.l||(b.za=!1,b.Qb=!1,b.ua||this.a.Lb(),Yf(this,b,0),jg(this,g));}.bind(a))["catch"](function(a){this.f||this.l||(b.za=!1,"text"==b.type&&this.h.ignoreTextStreamFailures?delete this.c.text:3017==a.code?kg(this,
b,a):(b.Ta=!0,a.severity=2,cg(this,a)));}.bind(a));}function kg(a,b,c){if(!Ya(a.c).some(function(a){return a!=b&&a.Qb})){var d=Math.round(100*a.i);if(20<d)a.i-=.2;else if(4<d)a.i-=.04;else{b.Ta=!0;a.l=!0;a.a.onError(c);return}b.Qb=!0;}Yf(a,b,4);}
function gg(a,b,c,d,e){if(!b.rb)return Promise.resolve();c=ac(a.a.N,b.type,a.b.periods[c].startTime-b.stream.presentationTimeOffset,d,e);if(!b.stream.initSegmentReference)return c;a=hg(a,b.stream.initSegmentReference).then(function(a){if(!this.f)return Yb(this.a.N,b.type,a,null,null)}.bind(a))["catch"](function(a){b.rb=!0;return Promise.reject(a)});return Promise.all([c,a])}
function ig(a,b,c,d,e,f,g){e.containsEmsgBoxes&&(new N).$("emsg",a.Yd.bind(a,d,f)).parse(g);return lg(a,b,c).then(function(){if(!this.f)return Yb(this.a.N,b.type,g,f.startTime+d.startTime,f.endTime+d.startTime)}.bind(a)).then(function(){if(!this.f)return b.Ga=e,b.la=f,Promise.resolve()}.bind(a))}
l.Yd=function(a,b,c){var d=c.u.Ob(),e=c.u.Ob(),f=c.u.D(),g=c.u.D(),h=c.u.D(),k=c.u.D(),m=c.u.La(c.u.I.byteLength-c.u.s);a=a.startTime+b.startTime+g/f;if("urn:mpeg:dash:event:2012"==d)this.a.Ed();else this.a.onEvent(new C("emsg",{detail:{startTime:a,endTime:a+h/f,schemeIdUri:d,value:e,timescale:f,presentationTimeDelta:g,eventDuration:h,id:k,messageData:m}}));c.ba.stop();};
function lg(a,b,c){var d=Wb(a.a.N,b.type);if(null==d)return Promise.resolve();c=c-d-a.h.bufferBehind;return 0>=c?Promise.resolve():a.a.N.remove(b.type,d,d+c).then(function(){}.bind(a))}function jg(a,b){if(!a.v&&(a.v=Ya(a.c).every(function(a){return"text"==a.type?!0:!a.ua&&!a.va&&a.la}),a.v)){var c=Cc(a.b,b);a.g[c]||ag(a,c).then(function(){this.a.lc();}.bind(a))["catch"](Ga);for(c=0;c<a.b.periods.length;++c)ag(a,c)["catch"](Ga);a.a.Qd&&a.a.Qd();}}
function dg(a,b){if(b.ya!=Cc(a.b,b.stream)){var c=b.ya,d=Ya(a.c);d.every(function(a){return a.ya==c})&&d.every(mg)&&ag(a,c).then(function(){if(!this.f&&d.every(function(a){var b=Cc(this.b,a.stream);return mg(a)&&a.ya==c&&b!=c}.bind(this))){var a=this.b.periods[c],b=this.a.mc(a),g={};b.variant&&b.variant.video&&(g.video=b.variant.video);b.variant&&b.variant.audio&&(g.audio=b.variant.audio);b.text&&(g.text=b.text);for(var h in this.c)if(!g[h]&&"text"!=h){this.a.onError(new p(2,5,5005));return}for(h in g)if(!this.c[h])if("text"==
h)Nf(this,{text:g.text},a.startTime),delete g[h];else{this.a.onError(new p(2,5,5005));return}for(h in this.c)(a=g[h])?(Tf(this,a,!1),Yf(this,this.c[h],0)):delete this.c[h];this.a.lc();}}.bind(a))["catch"](Ga);}}function mg(a){return!a.za&&null==a.ta&&!a.ua&&!a.va}function hg(a,b){var c=A(b.a(),a.h.retryParameters);if(b.P||null!=b.G){var d="bytes="+b.P+"-";null!=b.G&&(d+=b.G);c.headers.Range=d;}return a.a.Va.request(1,c).then(function(a){return a.data})}
function Wf(a,b,c){b.ua=!1;b.wb=!1;b.va=!0;$b(a.a.N,b.type).then(function(){if(!this.f&&c){var a=this.a.N,e=b.type;return"text"==e?Promise.resolve():Zb(a,e,a.bd.bind(a,e))}}.bind(a)).then(function(){this.f||(b.Ga=null,b.la=null,b.va=!1,b.endOfStream=!1,Yf(this,b,0));}.bind(a));}function Yf(a,b,c){b.ta=window.setTimeout(a.He.bind(a,b),1E3*c);}function Mf(a){null!=a.ta&&(window.clearTimeout(a.ta),a.ta=null);}
function cg(a,b){Aa(a.w).then(function(){this.a.onError(b);b.handled||this.h.failureCallback(b);}.bind(a));}function ng(a,b){return new Promise(function(c,d){var e=new XMLHttpRequest;e.open(b.method,a,!0);e.responseType="arraybuffer";e.timeout=b.retryParameters.timeout;e.withCredentials=b.allowCrossSiteCredentials;e.onload=function(b){b=b.target;var e=b.getAllResponseHeaders().split("\r\n").reduce(function(a,b){var c=b.split(": ");a[c[0].toLowerCase()]=c.slice(1).join(": ");return a},{});if(200<=b.status&&299>=b.status&&202!=b.status)b.responseURL&&(a=b.responseURL),c({uri:a,data:b.response,headers:e,fromCache:!!e["x-shaka-from-cache"]});
else{var f=null;try{f=eb(b.response);}catch(m){}d(new p(401==b.status||403==b.status?2:1,1,1001,a,b.status,f,e));}};e.onerror=function(){d(new p(1,1,1002,a));};e.ontimeout=function(){d(new p(1,1,1003,a));};for(var f in b.headers)e.setRequestHeader(f,b.headers[f]);e.send(b.body);})}n("shaka.net.HttpPlugin",ng);Ka("http",ng,1);Ka("https",ng,1);function og(){this.b=null;this.a=[];this.c={};}l=og.prototype;l.init=function(a,b){return pg(this,a,b).then(function(){var b=Object.keys(a);return Promise.all(b.map(function(a){return qg(this,a).then(function(b){this.c[a]=b;}.bind(this))}.bind(this)))}.bind(this))};l.o=function(){return Promise.all(this.a.map(function(a){try{a.transaction.abort();}catch(b){}return a.O["catch"](Ga)})).then(function(){this.b&&(this.b.close(),this.b=null);}.bind(this))};
l.get=function(a,b){var c;return rg(this,a,"readonly",function(a){c=a.get(b);}).then(function(){return c.result})};l.forEach=function(a,b){return rg(this,a,"readonly",function(a){a.openCursor().onsuccess=function(a){if(a=a.target.result)b(a.value),a["continue"]();};})};function sg(a,b,c){return rg(a,b,"readwrite",function(a){a.put(c);})}l.remove=function(a,b){return rg(this,a,"readwrite",function(a){a["delete"](b);})};
function tg(a,b,c){return rg(a,"segment","readwrite",function(a){for(var d=0;d<b.length;d++)a["delete"](b[d]).onsuccess=c||function(){};})}function qg(a,b){var c=0;return rg(a,b,"readonly",function(a){a.openCursor(null,"prev").onsuccess=function(a){(a=a.target.result)&&(c=a.key+1);};}).then(function(){return c})}
function rg(a,b,c,d){var e={transaction:a.b.transaction([b],c),O:new u};e.transaction.oncomplete=function(){this.a.splice(this.a.indexOf(e),1);e.O.resolve();}.bind(a);e.transaction.onabort=function(a){this.a.splice(this.a.indexOf(e),1);ug(e.transaction,e.O,a);}.bind(a);e.transaction.onerror=function(a){a.preventDefault();}.bind(a);b=e.transaction.objectStore(b);d(b);a.a.push(e);return e.O}
function pg(a,b,c){var d=window.indexedDB.open("shaka_offline_db",1),e=!1,f=new u;d.onupgradeneeded=function(a){e=!0;a=a.target.result;for(var c in b)a.createObjectStore(c,{keyPath:b[c]});};d.onsuccess=function(a){c&&!e?(a.target.result.close(),setTimeout(function(){pg(this,b,c-1).then(f.resolve,f.reject);}.bind(this),1E3)):(this.b=a.target.result,f.resolve());}.bind(a);d.onerror=ug.bind(null,d,f);return f}
function ug(a,b,c){a.error?b.reject(new p(2,9,9001,a.error)):b.reject(new p(2,9,9002));c.preventDefault();}function vg(){if(!window.indexedDB)return Promise.reject(new p(2,9,9E3));var a=new og;return a.init({manifest:"key",segment:"key"}).then(function(){return a})}function S(a){if(null!=S.a(a))return S.g(a);var b=S.b(a);return null!=b?S.h(b,a):Promise.reject(new p(2,1,9004,a))}n("shaka.offline.OfflineScheme",S);S.g=function(a){a={uri:a,data:new ArrayBuffer(0),headers:{"content-type":"application/x-offline-manifest"}};return Promise.resolve(a)};S.h=function(a,b){var c,d;return vg().then(function(b){c=b;return c.get("segment",a)}).then(function(a){d=a;return c.o()}).then(function(){if(!d)throw new p(2,9,9003,a);return{uri:b,data:d.data,headers:{}}})};
S.f=function(a){return"offline:"+a};S.a=function(a){return(a=/^offline:([0-9]+)$/.exec(a))?Number(a[1]):null};S.c=function(a,b,c){return"offline:"+a+"/"+b+"/"+c};S.b=function(a){return(a=/^offline:[0-9]+\/[0-9]+\/([0-9]+)$/.exec(a))?Number(a[1]):null};Ka("offline",S);function wg(a){var b=xg(a.periods[0],[],new Q(null,0)),b=oc(b);return{offlineUri:S.f(a.key),originalManifestUri:a.originalManifestUri,duration:a.duration,size:a.size,expiration:void 0==a.expiration?Infinity:a.expiration,tracks:b,appMetadata:a.appMetadata}}function xg(a,b,c){var d=a.streams.filter(yg),e=a.streams.filter(zg);b=Ag(d,e,b);d=a.streams.filter(Bg).map(Cg);a.streams.forEach(function(a){a=Dg(a);c.Ia(0,a);});return{startTime:a.startTime,variants:b,textStreams:d}}
function Dg(a){return a.segments.map(function(a,c){return new L(c,a.startTime,a.endTime,function(){return[a.uri]},0,null)})}
function Ag(a,b,c){var d=[];d.push.apply(d,a);d.push.apply(d,b);var e=d.every(function(a){return!a.variantIds});d.every(function(a){return!!a.variantIds});if(e){d.forEach(function(a){a.variantIds=[];});var f=0;a.length&&b.length?a.forEach(function(a){b.forEach(function(b){a.variantIds.push(f);b.variantIds.push(f);f++;});}):d.forEach(function(a){a.variantIds.push(f);f++;});}var g={};d.forEach(function(a){a.variantIds.forEach(function(a){g[a]||(g[a]={id:a,language:"",primary:!1,audio:null,video:null,bandwidth:0,
drmInfos:c,allowedByApplication:!0,allowedByKeySystem:!0});});});a.forEach(function(a){var b=Cg(a);a.variantIds.forEach(function(a){a=g[a];a.language=b.language;a.primary=a.primary||b.primary;a.audio=b;});});b.forEach(function(a){var b=Cg(a);a.variantIds.forEach(function(a){a=g[a];a.primary=a.primary||b.primary;a.video=b;});});return Ya(g)}
function Cg(a){var b=Dg(a),b=new P(b);return{id:a.id,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:b.find.bind(b),getSegmentReference:b.get.bind(b),initSegmentReference:a.initSegmentUri?new Bd(function(){return[a.initSegmentUri]},0,null):null,presentationTimeOffset:a.presentationTimeOffset,mimeType:a.mimeType,codecs:a.codecs,width:a.width||void 0,height:a.height||void 0,frameRate:a.frameRate||void 0,kind:a.kind,encrypted:a.encrypted,keyId:a.keyId,language:a.language,label:a.label||
null,type:a.contentType,primary:a.primary,trickModeVideo:null,containsEmsgBoxes:!1,roles:[],channelsCount:null}}function yg(a){return"audio"==a.contentType}function zg(a){return"video"==a.contentType}function Bg(a){return"text"==a.contentType}function Eg(a,b,c,d){this.b={};this.l=[];this.m=d;this.j=a;this.v=b;this.w=c;this.i=this.a=null;this.f=this.g=this.h=this.c=0;}Eg.prototype.o=function(){var a=this.j,b=this.l,c=this.i||Promise.resolve();b.length&&(c=c.then(function(){return tg(a,b)}));this.b={};this.l=[];this.i=this.a=this.w=this.v=this.j=this.m=null;return c};function Fg(a,b,c,d,e){a.b[b]=a.b[b]||[];a.b[b].push({uris:c.a(),P:c.P,G:c.G,cc:d,Sb:e});}
function Gg(a,b){a.c=0;a.h=0;a.g=0;a.f=0;Ya(a.b).forEach(function(a){a.forEach(function(a){null!=a.G?this.c+=a.G-a.P+1:this.g+=a.cc;}.bind(this));}.bind(a));a.a=b;a.a.size=a.c;var c=Ya(a.b).map(function(a){var b=0,c=function(){if(!this.m)return Promise.reject(new p(2,9,9002));if(b>=a.length)return Promise.resolve();var d=a[b++];return Hg(this,d).then(c)}.bind(this);return c()}.bind(a));a.b={};a.i=Promise.all(c).then(function(){return sg(this.j,"manifest",b)}.bind(a)).then(function(){this.l=[];}.bind(a));
return a.i}
function Hg(a,b){var c=A(b.uris,a.w);if(b.P||null!=b.G)c.headers.Range="bytes="+b.P+"-"+(null==b.G?"":b.G);var d;return a.v.request(1,c).then(function(a){if(!this.a)return Promise.reject(new p(2,9,9002));d=a.data.byteLength;this.l.push(b.Sb.key);b.Sb.data=a.data;return sg(this.j,"segment",b.Sb)}.bind(a)).then(function(){if(!this.a)return Promise.reject(new p(2,9,9002));null==b.G?(this.a.size+=d,this.f+=b.cc):this.h+=d;var a=(this.h+this.f)/(this.c+this.g),c=wg(this.a);this.m.progressCallback(c,a);}.bind(a))}
function Ig(){this.a=-1;}l=Ig.prototype;l.configure=function(){};l.start=function(a){var b=S.a(a);if(null==b)return Promise.reject(new p(2,1,9004,a));this.a=b;var c;return vg().then(function(a){c=a;return c.get("manifest",this.a)}.bind(this)).then(function(a){if(!a)throw new p(2,9,9003,b);return Jg(a)}).then(function(a){return c.o().then(function(){return a})},function(a){return c.o().then(function(){throw a;})})};l.stop=function(){return Promise.resolve()};l.update=function(){};
l.onExpirationUpdated=function(a,b){var c=this.a,d;vg().then(function(a){d=a;return d.get("manifest",c)}).then(function(c){if(c&&!(0>c.sessionIds.indexOf(a))&&(void 0==c.expiration||c.expiration>b))return c.expiration=b,sg(d,"manifest",c)})["catch"](function(){}).then(function(){return d.o()});};
function Jg(a){var b=new Q(null,0);b.ga(a.duration);var c=a.drmInfo?[a.drmInfo]:[];return{presentationTimeline:b,minBufferTime:10,offlineSessionIds:a.sessionIds,periods:a.periods.map(function(a){return xg(a,c,b)})}}fe["application/x-offline-manifest"]=Ig;function T(a){this.a=null;for(var b=0;b<a.textTracks.length;++b){var c=a.textTracks[b];c.mode="disabled";"Shaka Player TextTrack"==c.label&&(this.a=c);}this.a||(this.a=a.addTextTrack("subtitles","Shaka Player TextTrack"));this.a.mode="hidden";0<this.a.cues.length&&this.remove(0,Infinity);this.b=this.a.cues;}n("shaka.text.SimpleTextDisplayer",T);T.prototype.remove=function(a,b){if(!this.a)return!1;Kg(this,function(c){return c.startTime>=b||c.endTime<=a?!1:!0});return!0};T.prototype.remove=T.prototype.remove;
T.prototype.append=function(a){this.a.cues.length&&a.length&&"EMPTY"!=a[0].id&&""!=a[0].id&&this.a.cues[this.a.cues.length-1].id==a[0].id&&a.shift();for(var b=[],c=0;c<a.length;c++){var d=Lg(a[c]);d&&(this.a.cues.getCueById&&this.a.cues.getCueById(d.id)||b.push(d));}b.slice().sort(function(a,c){return a.startTime!=c.startTime?a.startTime-c.startTime:a.endTime!=c.endTime?a.endTime-c.startTime:b.indexOf(c)-b.indexOf(a)}).forEach(function(a){this.a.addCue(a);}.bind(this));};T.prototype.append=T.prototype.append;
T.prototype.o=function(){this.a&&Kg(this,function(){return!0});this.a=null;return Promise.resolve()};T.prototype.destroy=T.prototype.o;T.prototype.isTextVisible=function(){return"showing"==this.a.mode};T.prototype.isTextVisible=T.prototype.isTextVisible;T.prototype.setTextVisibility=function(a){this.a.mode=a?"showing":"hidden";};T.prototype.setTextVisibility=T.prototype.setTextVisibility;
function Lg(a){if(a.startTime>=a.endTime)return null;var b=new VTTCue(a.startTime,a.endTime,a.payload);b.id=a.id;b.lineAlign=a.lineAlign;b.positionAlign=a.positionAlign;b.size=a.size;try{b.align=a.textAlign;}catch(d){}"center"==a.textAlign&&"center"!=b.align&&(b.align="middle");a.writingDirection==Mg?b.vertical="lr":a.writingDirection==Ng&&(b.vertical="rl");a.lineInterpretation==Og&&(b.snapToLines=!1);null!=a.line&&(b.line=a.line);null!=a.position&&(b.position=a.position);if(window.VTTRegion&&a.region){var c=
new VTTRegion;c.viewportAnchorX=a.region.x;c.viewportAnchorY=a.region.y;c.width=a.region.width;c.height=a.region.height;b.region=c;}return b}function Kg(a,b){for(var c=a.b,d=[],e=0;e<c.length;++e)b(c[e])&&d.push(c[e]);for(e=0;e<d.length;++e)a.a.removeCue(d[e]);}function Pg(){this.a=Promise.resolve();this.b=this.c=this.f=!1;this.i=new Promise(function(a){this.g=a;}.bind(this));}Pg.prototype.then=function(a){this.a=this.a.then(a).then(function(a){return this.b?(this.g(),Promise.reject(this.h)):Promise.resolve(a)}.bind(this));return this};function Qg(a){a.f||(a.a=a.a.then(function(a){this.c=!0;return Promise.resolve(a)}.bind(a),function(a){this.c=!0;return this.b?(this.g(),Promise.reject(this.h)):Promise.reject(a)}.bind(a)));a.f=!0;return a.a}
Pg.prototype.cancel=function(a){if(this.c)return Promise.resolve();this.b=!0;this.h=a;return this.i};function U(a,b){ca.call(this);this.C=!1;this.f=a;this.mb=!1;this.w=null;this.m=new Ra;this.g=this.lb=this.b=this.i=this.a=this.B=this.h=this.jb=this.L=this.M=this.l=this.v=null;this.Sc=1E9;this.hb=[];this.Ra=!1;this.Da=!0;this.Qa=this.Sa=this.ia=null;this.ac=!1;this.ha=null;this.kb=[];this.H={};this.c=Rg(this);this.ib={width:Infinity,height:Infinity};this.j=Sg();this.gb=0;this.Pa=this.c.preferredAudioLanguage;this.bb=this.c.preferredTextLanguage;this.xb=this.cb="";this.bc=!0;b&&b(this);this.v=new z(this.Ae.bind(this));
this.jb=Tg(this);B(this.m,this.f,"error",this.Sd.bind(this));}ba(U);n("shaka.Player",U);function Ug(a){if(!a.ia)return Promise.resolve();var b=Promise.resolve();a.i&&(b=a.i.stop(),a.i=null);a=a.ia.cancel(new p(2,7,7E3));return Promise.all([b,a])}U.prototype.o=function(){this.C=!0;return Ug(this).then(function(){var a=Promise.all([this.Sa,Vg(this),this.m?this.m.o():null,this.v?this.v.o():null]);this.f=null;this.mb=!1;this.c=this.v=this.g=this.m=null;return a}.bind(this))};U.prototype.destroy=U.prototype.o;
U.version="v2.2.6-7-gca38bd4";var Wg={};U.registerSupportPlugin=function(a,b){Wg[a]=b;};U.isBrowserSupported=function(){return!!window.Promise&&!!window.Uint8Array&&!!Array.prototype.forEach&&!!window.MediaSource&&!!MediaSource.isTypeSupported&&!!window.MediaKeys&&!!window.navigator&&!!window.navigator.requestMediaKeySystemAccess&&!!window.MediaKeySystemAccess&&!!window.MediaKeySystemAccess.prototype.getConfiguration};
U.probeSupport=function(){return Eb().then(function(a){var b=he(),c=Ub();a={manifest:b,media:c,drm:a};for(var d in Wg)a[d]=Wg[d]();return a})};
U.prototype.load=function(a,b,c){var d=this.vb(),e=new Pg;this.ia=e;this.dispatchEvent(new C("loading"));var f=Date.now();return Qg(e.then(function(){return d}).then(function(){this.j=Sg();B(this.m,this.f,"playing",this.ab.bind(this));B(this.m,this.f,"pause",this.ab.bind(this));B(this.m,this.f,"ended",this.ab.bind(this));this.g=new this.c.abrFactory;Xg(this);this.w=new this.c.textDisplayFactory;this.w.setTextVisibility(this.mb);return ie(a,this.v,this.c.manifest.retryParameters,c)}.bind(this)).then(function(b){this.i=
new b;this.i.configure(this.c.manifest);b={networkingEngine:this.v,filterNewPeriod:this.nb.bind(this),filterAllPeriods:this.Wb.bind(this),onTimelineRegionAdded:this.Rd.bind(this),onEvent:this.$a.bind(this),onError:this.Oa.bind(this)};return 2<this.i.start.length?(ha("The ManifestParser interface has changed. Please upgrade your plugin to accept the PlayerInterface structure. See the ManifestParser documentation for details."),this.i.start(a,this.v,b.filterNewPeriod,b.onError,b.onEvent)):this.i.start(a,
b)}.bind(this)).then(function(b){b.periods.some(function(a){return a.variants.some(function(a){return a.video&&a.audio})})&&b.periods.forEach(function(a){a.variants=a.variants.filter(function(a){return a.video&&a.audio});});if(0==b.periods.length)throw new p(2,4,4014);this.b=b;this.lb=a;this.l=new pb({Va:this.v,onError:this.Oa.bind(this),Kb:this.Dd.bind(this),onExpirationUpdated:this.Ad.bind(this),onEvent:this.$a.bind(this)});this.l.configure(this.c.drm);return this.l.init(b,!1)}.bind(this)).then(function(){this.Wb(this.b.periods);
this.gb=Date.now()/1E3;this.Pa=this.c.preferredAudioLanguage;this.bb=this.c.preferredTextLanguage;var a=this.b.presentationTimeline.ka(),b=this.c.playRangeEnd,c=this.c.playRangeStart;0<c&&(this.S()||this.b.presentationTimeline.Ic(c));b<a&&(this.S()||this.b.presentationTimeline.ga(b));return Promise.all([sb(this.l,this.f),this.jb])}.bind(this)).then(function(){this.g.chooseStreams?(ha("AbrManager API has changed. The SwitchCallback signature has changed to accept a variant instead of a map. Please update your AbrManager. The old API will be removed in v2.3."),
this.g.init(this.Ke.bind(this))):this.g.init(this.Mc.bind(this));this.h=new zf(this.f,this.b,this.c.streaming,void 0==b?null:b,this.ze.bind(this),this.$a.bind(this));this.B=new Hf(this.f,this.M,this.b,this.c.streaming,this.Lc.bind(this),this.$a.bind(this),this.ye.bind(this));this.L=new Tb(this.f,this.M,this.w);this.a=new Lf(this.b,{Wa:this.h,N:this.L,Va:this.v,mc:this.yd.bind(this),lc:this.Vc.bind(this),onError:this.Oa.bind(this),onEvent:this.$a.bind(this),Ed:this.Fd.bind(this),Lb:this.Od.bind(this),
filterNewPeriod:this.nb.bind(this),filterAllPeriods:this.Wb.bind(this)});this.a.configure(this.c.streaming);this.dispatchEvent(new C("streaming"));Yg(this);return this.a.init()}.bind(this)).then(function(){if(this.c.streaming.startAtSegmentBoundary){var a=Zg(this,Cf(this.h));Af(this.h,a);}this.b.periods.forEach(this.nb.bind(this));$g(this);ah(this);var a=R(this.a),b=vc(a,this.Pa,this.cb);this.g.setVariants(b);a.variants.some(function(a){return a.primary});this.kb.forEach(this.B.v.bind(this.B));this.kb=
[];Ua(this.m,this.f,"loadeddata",function(){this.j.loadLatency=(Date.now()-f)/1E3;}.bind(this));this.ia=null;}.bind(this)))["catch"](function(a){this.ia==e&&(this.ia=null,this.dispatchEvent(new C("unloading")));return Promise.reject(a)}.bind(this))};U.prototype.load=U.prototype.load;
function Yg(a){function b(a){return(a.video?a.video.codecs.split(".")[0]:"")+"-"+(a.audio?a.audio.codecs.split(".")[0]:"")}var c={};a.b.periods.forEach(function(a){a.variants.forEach(function(a){var d=b(a);d in c||(c[d]=[]);c[d].push(a);});});var d=null,e=Infinity;$a(c,function(a,b){var c=0,f=0;b.forEach(function(a){c+=a.bandwidth||0;++f;});var g=c/f;g<e&&(d=a,e=g);});a.b.periods.forEach(function(a){a.variants=a.variants.filter(function(a){return b(a)==d?!0:!1});});}
function Tg(a){a.M=new MediaSource;var b=new u;B(a.m,a.M,"sourceopen",b.resolve);a.f.src=window.URL.createObjectURL(a.M);return b}
U.prototype.configure=function(a){if(a.abr&&a.abr.manager){ha("AbrManager configuration has changed. Please use abrFactory instead of abr.manager. The old API will be removed in v2.3.");var b=a.abr.manager;delete a.abr.manager;a.abrFactory=function(){return b};}a.streaming&&null!=a.streaming.infiniteRetriesForLiveStreams&&(ha("Streaming configuration has changed. Please use streaming.failureCallback instead of streaming.infiniteRetriesForLiveStreams. The old API will be removed in v2.3."),this.bc=
!!a.streaming.infiniteRetriesForLiveStreams,delete a.streaming.infiniteRetriesForLiveStreams);Da(this.c,a,Rg(this),bh(),"");ch(this,"restrictions"in a);};U.prototype.configure=U.prototype.configure;function ch(a,b){a.i&&a.i.configure(a.c.manifest);a.l&&a.l.configure(a.c.drm);if(a.a){a.a.configure(a.c.streaming);try{a.b.periods.forEach(a.nb.bind(a));}catch(c){a.Oa(c);}dh(a,R(a.a),b);}a.g&&(Xg(a),a.c.abr.enabled&&!a.Da?a.g.enable():a.g.disable());}
function Xg(a){a.g.configure?a.g.configure(a.c.abr):(ha("AbrManager API has changed. AbrManager.setDefaultEstimate() and AbrManager.setRestrictions() are deprecated. AbrManager.configure() is used instead. Please upgrade to the new API. The old API will be removed in v2.3."),a.g.setDefaultEstimate(a.c.abr.defaultBandwidthEstimate),a.g.setRestrictions(a.c.abr.restrictions));}U.prototype.getConfiguration=function(){var a=Rg(this);Da(a,this.c,Rg(this),bh(),"");return a};U.prototype.getConfiguration=U.prototype.getConfiguration;
U.prototype.me=function(){this.c=Rg(this);ch(this,!0);};U.prototype.resetConfiguration=U.prototype.me;U.prototype.gd=function(){return this.f};U.prototype.getMediaElement=U.prototype.gd;U.prototype.ic=function(){return this.v};U.prototype.getNetworkingEngine=U.prototype.ic;U.prototype.fd=function(){return this.lb};U.prototype.getManifestUri=U.prototype.fd;U.prototype.S=function(){return this.b?this.b.presentationTimeline.S():!1};U.prototype.isLive=U.prototype.S;
U.prototype.xa=function(){return this.b?this.b.presentationTimeline.xa():!1};U.prototype.isInProgress=U.prototype.xa;U.prototype.sd=function(){if(!this.b||!this.b.periods.length)return!1;var a=this.b.periods[0].variants;return a.length?!a[0].video:!1};U.prototype.isAudioOnly=U.prototype.sd;U.prototype.oe=function(){var a=0,b=0;this.b&&(b=this.b.presentationTimeline,a=b.ca(),b=b.qb());return{start:a,end:b}};U.prototype.seekRange=U.prototype.oe;
U.prototype.keySystem=function(){return this.l?this.l.keySystem():""};U.prototype.keySystem=U.prototype.keySystem;U.prototype.drmInfo=function(){return this.l?this.l.b:null};U.prototype.drmInfo=U.prototype.drmInfo;U.prototype.pb=function(){return this.l?this.l.pb():Infinity};U.prototype.getExpiration=U.prototype.pb;U.prototype.td=function(){return this.Ra};U.prototype.isBuffering=U.prototype.td;
U.prototype.vb=function(){if(this.C)return Promise.resolve();this.dispatchEvent(new C("unloading"));return Ug(this).then(function(){this.Sa||(this.Sa=eh(this).then(function(){this.Sa=null;}.bind(this)));return this.Sa}.bind(this))};U.prototype.unload=U.prototype.vb;U.prototype.Cb=function(){return this.h?this.h.Cb():0};U.prototype.getPlaybackRate=U.prototype.Cb;U.prototype.Le=function(a){this.h&&Ef(this.h,a);this.a&&Sf(this.a,1!=a);};U.prototype.trickPlay=U.prototype.Le;
U.prototype.Wc=function(){this.h&&Ef(this.h,1);this.a&&Sf(this.a,!1);};U.prototype.cancelTrickPlay=U.prototype.Wc;U.prototype.qd=function(){if(!this.b)return[];var a=Bc(this.b,Cf(this.h)),b=this.H[a]||{};return qc(this.b.periods[a],b.audio,b.video)};U.prototype.getVariantTracks=U.prototype.qd;U.prototype.pd=function(){if(!this.b)return[];var a=Bc(this.b,Cf(this.h));return rc(this.b.periods[a],(this.H[a]||{}).text).filter(function(a){return 0>this.hb.indexOf(a.id)}.bind(this))};
U.prototype.getTextTracks=U.prototype.pd;U.prototype.se=function(a){this.a&&(a=tc(R(this.a),a))&&(fh(this,a,!1),this.Da?this.ha=a:Tf(this.a,a,!0));};U.prototype.selectTextTrack=U.prototype.se;U.prototype.te=function(a,b){if(this.a){this.c.abr.enabled&&ha("Changing tracks while abr manager is enabled will likely result in the selected track being overriden. Consider disabling abr before calling selectVariantTrack().");var c=sc(R(this.a),a);c&&uc(c)&&(gh(this,c,!1),hh(this,c,b));}};
U.prototype.selectVariantTrack=U.prototype.te;U.prototype.cd=function(){return this.a?pc(R(this.a).variants).map(function(a){return a.language}).filter(Ia):[]};U.prototype.getAudioLanguages=U.prototype.cd;U.prototype.od=function(){return this.a?R(this.a).textStreams.map(function(a){return a.language}).filter(Ia):[]};U.prototype.getTextLanguages=U.prototype.od;U.prototype.qe=function(a,b){if(this.a){var c=R(this.a);this.Pa=a;this.cb=b||"";dh(this,c,!0);}};U.prototype.selectAudioLanguage=U.prototype.qe;
U.prototype.re=function(a,b){if(this.a){var c=R(this.a);this.bb=a;this.xb=b||"";dh(this,c,!0);}};U.prototype.selectTextLanguage=U.prototype.re;U.prototype.vd=function(){return this.w?this.w.isTextVisible():this.mb};U.prototype.isTextTrackVisible=U.prototype.vd;U.prototype.we=function(a){this.w?this.w.setTextVisibility(a):this.mb=a;ih(this);};U.prototype.setTextTrackVisibility=U.prototype.we;U.prototype.jd=function(){return this.b?new Date(1E3*this.b.presentationTimeline.c+1E3*this.f.currentTime):null};
U.prototype.getPlayheadTimeAsDate=U.prototype.jd;U.prototype.md=function(){return this.b?new Date(1E3*this.b.presentationTimeline.c):null};U.prototype.getPresentationStartTimeAsDate=U.prototype.md;U.prototype.Bb=function(){return this.L?this.L.Bb():{total:[],audio:[],video:[],text:[]}};U.prototype.getBufferedInfo=U.prototype.Bb;
U.prototype.getStats=function(){jh(this);this.ab();var a=null,b=null,c=this.f,c=c&&c.getVideoPlaybackQuality?c.getVideoPlaybackQuality():{};this.h&&this.b&&(a=Bc(this.b,Cf(this.h)),b=this.H[a],b=Ac(b.audio,b.video,this.b.periods[a].variants),a=b.video||{});a||(a={});b||(b={});return{width:a.width||0,height:a.height||0,streamBandwidth:b.bandwidth||0,decodedFrames:Number(c.totalVideoFrames),droppedFrames:Number(c.droppedVideoFrames),estimatedBandwidth:this.g?this.g.getBandwidthEstimate():NaN,loadLatency:this.j.loadLatency,
playTime:this.j.playTime,bufferingTime:this.j.bufferingTime,switchHistory:Ea(this.j.switchHistory),stateHistory:Ea(this.j.stateHistory)}};U.prototype.getStats=U.prototype.getStats;
U.prototype.addTextTrack=function(a,b,c,d,e,f){if(!this.a)return Promise.reject();for(var g=R(this.a),h,k=0;k<this.b.periods.length;k++)if(this.b.periods[k]==g){if(k==this.b.periods.length-1){if(h=this.b.presentationTimeline.ka()-g.startTime,Infinity==h)return Promise.reject()}else h=this.b.periods[k+1].startTime-g.startTime;break}var m={id:this.Sc++,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(){return 1},getSegmentReference:function(b){return 1!=b?null:new L(1,0,
h,function(){return[a]},0,null)},initSegmentReference:null,presentationTimeOffset:0,mimeType:d,codecs:e||"",kind:c,encrypted:!1,keyId:null,language:b,label:f||null,type:"text",primary:!1,trickModeVideo:null,containsEmsgBoxes:!1,roles:[],channelsCount:null};this.hb.push(m.id);g.textStreams.push(m);return Nf(this.a,{text:m}).then(function(){if(!this.C){var a=this.b.periods.indexOf(g),d=Qf(this.a,"text");d&&(this.H[a].text=d.id);this.hb.splice(this.hb.indexOf(m.id),1);dh(this,g,!0);$g(this);return{id:m.id,
active:!1,type:"text",bandwidth:0,language:b,label:f||null,kind:c,width:null,height:null}}}.bind(this))};U.prototype.addTextTrack=U.prototype.addTextTrack;U.prototype.Ub=function(a,b){this.ib.width=a;this.ib.height=b;};U.prototype.setMaxHardwareResolution=U.prototype.Ub;U.prototype.Ec=function(){if(this.a){var a=this.a;if(a.f)a=!1;else if(a.l)a=!1;else{for(var b in a.c){var c=a.c[b];c.Ta&&(c.Ta=!1,Yf(a,c,.1));}a=!0;}}else a=!1;return a};U.prototype.retryStreaming=U.prototype.Ec;U.prototype.ed=function(){return this.b};
U.prototype.getManifest=U.prototype.ed;function gh(a,b,c){b.video&&kh(a,b.video);b.audio&&kh(a,b.audio);var d=Of(a.a);b!=zc(Pf(a.a),Rf(a.a),d?d.variants:[])&&a.j.switchHistory.push({timestamp:Date.now()/1E3,id:b.id,type:"variant",fromAdaptation:c,bandwidth:b.bandwidth});}function fh(a,b,c){kh(a,b);a.j.switchHistory.push({timestamp:Date.now()/1E3,id:b.id,type:"text",fromAdaptation:c,bandwidth:null});}function kh(a,b){var c=Cc(a.b,b);a.H[c]||(a.H[c]={});a.H[c][b.type]=b.id;}
function Vg(a){a.m&&(a.m.na(a.M,"sourceopen"),a.m.na(a.f,"loadeddata"),a.m.na(a.f,"playing"),a.m.na(a.f,"pause"),a.m.na(a.f,"ended"));a.f&&(a.f.removeAttribute("src"),a.f.load());var b=Promise.all([a.g?a.g.stop():null,a.l?a.l.o():null,a.L?a.L.o():null,a.h?a.h.o():null,a.B?a.B.o():null,a.a?a.a.o():null,a.i?a.i.stop():null,a.w?a.w.o():null]);a.l=null;a.L=null;a.h=null;a.B=null;a.a=null;a.i=null;a.w=null;a.b=null;a.lb=null;a.jb=null;a.M=null;a.kb=[];a.H={};a.j=Sg();return b}
function eh(a){return a.i?Vg(a).then(function(){this.C||(this.Lc(!1),this.jb=Tg(this));}.bind(a)):Promise.resolve()}function bh(){return{".drm.servers":"",".drm.clearKeys":"",".drm.advanced":{distinctiveIdentifierRequired:!1,persistentStateRequired:!1,videoRobustness:"",audioRobustness:"",serverCertificate:new Uint8Array(0)}}}
function Rg(a){return{drm:{retryParameters:za(),servers:{},clearKeys:{},advanced:{},delayLicenseRequestUntilPlayed:!1},manifest:{retryParameters:za(),dash:{customScheme:function(a){if(a)return null},clockSyncUri:"",liveDelay:0,baseUrl:"",ignoreDrmInfo:!1,xlinkFailGracefully:!1}},streaming:{retryParameters:za(),failureCallback:a.Zc.bind(a),rebufferingGoal:2,bufferingGoal:10,bufferBehind:30,ignoreTextStreamFailures:!1,startAtSegmentBoundary:!1,smallGapLimit:.5,jumpLargeGaps:!1},abrFactory:F,textDisplayFactory:function(a){return new T(a)}.bind(null,
a.f),abr:{enabled:!0,defaultBandwidthEstimate:5E5,switchInterval:8,bandwidthUpgradeTarget:.85,bandwidthDowngradeTarget:.95,restrictions:{minWidth:0,maxWidth:Infinity,minHeight:0,maxHeight:Infinity,minPixels:0,maxPixels:Infinity,minBandwidth:0,maxBandwidth:Infinity}},preferredAudioLanguage:"",preferredTextLanguage:"",restrictions:{minWidth:0,maxWidth:Infinity,minHeight:0,maxHeight:Infinity,minPixels:0,maxPixels:Infinity,minBandwidth:0,maxBandwidth:Infinity},playRangeStart:0,playRangeEnd:Infinity}}
l=U.prototype;l.Zc=function(a){var b=[1001,1002,1003];this.S()&&this.bc&&0<=b.indexOf(a.code)&&(a.severity=1,this.Ec());};function Sg(){return{width:NaN,height:NaN,streamBandwidth:NaN,decodedFrames:NaN,droppedFrames:NaN,estimatedBandwidth:NaN,loadLatency:NaN,playTime:0,bufferingTime:0,switchHistory:[],stateHistory:[]}}
l.Wb=function(a){a.forEach(kc.bind(null,this.l,this.a?Pf(this.a):null,this.a?Rf(this.a):null));var b=Pa(a,function(a){return a.variants.some(uc)});if(!b)throw new p(2,4,9009);if(b<a.length)throw new p(2,4,4011);a.forEach(function(a){jc(a,this.c.restrictions,this.ib)&&this.a&&R(this.a)==a&&$g(this);if(!a.variants.some(uc))throw new p(2,4,4012);}.bind(this));};
l.nb=function(a){kc(this.l,this.a?Pf(this.a):null,this.a?Rf(this.a):null,a);var b=a.variants,c=b.some(uc);jc(a,this.c.restrictions,this.ib)&&this.a&&R(this.a)==a&&$g(this);a=b.some(uc);if(!c)throw new p(2,4,4011);if(!a)throw new p(2,4,4012);};function hh(a,b,c){a.Da?(a.Qa=b,a.ac=c||!1):Uf(a.a,b,c||!1);}function jh(a){if(a.b){var b=Date.now()/1E3;a.Ra?a.j.bufferingTime+=b-a.gb:a.j.playTime+=b-a.gb;a.gb=b;}}
function Zg(a,b){function c(a,b){if(!a)return null;var c=a.findSegmentPosition(b-e.startTime);return null==c?null:(c=a.getSegmentReference(c))?c.startTime+e.startTime:null}var d=Rf(a.a),e=R(a.a),f=c(Pf(a.a),b),d=c(d,b);return null!=d&&null!=f?Math.max(d,f):null!=d?d:null!=f?f:b}l.Ae=function(a,b){this.g&&this.g.segmentDownloaded(a,b);};l.Lc=function(a){jh(this);this.Ra=a;this.ab();if(this.h){var b=this.h;a!=b.i&&(b.i=a,Ef(b,b.h));}this.dispatchEvent(new C("buffering",{buffering:a}));};l.ye=function(){$g(this);};
l.ab=function(){if(!this.C){var a=this.Ra?"buffering":this.f.ended?"ended":this.f.paused?"paused":"playing";var b=Date.now()/1E3;if(this.j.stateHistory.length){var c=this.j.stateHistory[this.j.stateHistory.length-1];c.duration=b-c.timestamp;if(a==c.state)return}this.j.stateHistory.push({timestamp:b,state:a,duration:0});}};l.ze=function(){if(this.B){var a=this.B;a.c.forEach(a.m.bind(a,!0));}this.a&&Xf(this.a);};
function lh(a,b){if(!b||!b.length)return a.Oa(new p(2,4,4012)),null;a.g.setVariants(b);if(a.g.chooseStreams){ha("AbrManager API has changed. AbrManager.chooseStreams() is deprecated. Please implement AbrManager.chooseVariant() to upgrade. The old API will be removed in v2.3.");var c=a.g.chooseStreams(["video","audio"]);return zc(c.audio,c.video,b)}return a.g.chooseVariant()}
function dh(a,b,c){var d=vc(b,a.Pa,a.cb);b=xc(b,a.bb,a.xb);if(d=lh(a,d))gh(a,d,!0),hh(a,d,c);if(c=b[0])fh(a,c,!0),a.Da?a.ha=c:Tf(a.a,c,!0);ah(a);}l.yd=function(a){this.Da=!0;this.g.disable();var b={audio:!1,text:!1},c=vc(a,this.Pa,this.cb,b);a=xc(a,this.bb,this.xb,b);c=lh(this,c);a=a[0]||null;this.ha=this.Qa=null;c&&gh(this,c,!0);a&&(fh(this,a,!0),!Of(this.a)&&c&&c.audio&&b.text&&a.language!=c.audio.language&&(this.w.setTextVisibility(!0),ih(this)));return{variant:c,text:a}};
l.Vc=function(){this.Da=!1;this.c.abr.enabled&&this.g.enable();this.Qa&&(Uf(this.a,this.Qa,this.ac),this.Qa=null);this.ha&&(Tf(this.a,this.ha,!0),this.ha=null);};l.Fd=function(){this.i&&this.i.update&&this.i.update();};l.Od=function(){this.h&&this.h.Lb();};l.Mc=function(a,b){gh(this,a,!0);this.a&&(Uf(this.a,a,b||!1),ah(this));};l.Ke=function(a,b){if(this.a){var c=Of(this.a);(c=zc(a.audio,a.video,c?c.variants:[]))&&this.Mc(c,b);}};
function ah(a){Promise.resolve().then(function(){this.C||this.dispatchEvent(new C("adaptation"));}.bind(a));}function $g(a){Promise.resolve().then(function(){this.C||this.dispatchEvent(new C("trackschanged"));}.bind(a));}function ih(a){a.dispatchEvent(new C("texttrackvisibility"));}l.Oa=function(a){if(!this.C){var b=new C("error",{detail:a});this.dispatchEvent(b);b.defaultPrevented&&(a.handled=!0);}};l.Rd=function(a){this.B?this.B.v(a):this.kb.push(a);};l.$a=function(a){this.dispatchEvent(a);};
l.Sd=function(){if(this.f.error){var a=this.f.error.code;if(1!=a){var b=this.f.error.msExtendedCode;b&&(0>b&&(b+=Math.pow(2,32)),b=b.toString(16));this.Oa(new p(2,3,3016,a,b,this.f.error.message));}}};
l.Dd=function(a){var b=["output-restricted","internal-error"],c=R(this.a),d=!1,e=1==Object.keys(a).length&&"00"==Object.keys(a)[0];c.variants.forEach(function(c){var f=[];c.audio&&f.push(c.audio);c.video&&f.push(c.video);f.forEach(function(f){var g=c.allowedByKeySystem;f.keyId&&(f=a[e?"00":f.keyId],c.allowedByKeySystem=!!f&&0>b.indexOf(f));g!=c.allowedByKeySystem&&(d=!0);});});var f=zc(Pf(this.a),Rf(this.a),c.variants);f&&!f.allowedByKeySystem&&dh(this,c,!0);d&&$g(this);};
l.Ad=function(a,b){if(this.i&&this.i.onExpirationUpdated)this.i.onExpirationUpdated(a,b);this.dispatchEvent(new C("expirationupdated"));};
l.pe=function(a){if(this.C)return Promise.resolve();if(this.b&&this.b.presentationTimeline){if(a<this.b.presentationTimeline.ca()||a>this.b.presentationTimeline.qa())return Promise.reject();var b=Rf(this.a);if(!b){a:{for(b=this.b.periods.length-1;0<b;--b)if(a>=this.b.periods[b].startTime)break a;b=0;}b=this.b.periods[b].variants[0].video;}a=b.findSegmentPosition(a);return(a=null!=a?b.getSegmentReference(a):null)?mh(this,a):Promise.reject()}return Promise.resolve()};U.prototype.segmentExist=U.prototype.pe;
function mh(a,b){var c=A(b.a(),za());if(b.P||null!=b.G){var d="bytes="+b.P+"-";null!=b.G&&(d+=b.G);c.headers.Range=d;}return a.v.request(1,c).then(function(a){return a.data})}function V(a){if(!a||a.constructor!=U)throw new p(2,9,9008);this.a=null;this.b=a;this.c=nh(this);this.f=null;this.v=!1;this.j=null;this.i=-1;this.l=0;this.h=this.g=null;}n("shaka.offline.Storage",V);function oh(){return!!window.indexedDB}V.support=oh;V.prototype.o=function(){var a=this.a,b=this.h?this.h.o()["catch"](function(){}).then(function(){if(a)return a.o()}):Promise.resolve();this.c=this.b=this.h=this.a=null;return b};V.prototype.destroy=V.prototype.o;
V.prototype.configure=function(a){Da(this.c,a,nh(this),{},"");};V.prototype.configure=V.prototype.configure;
V.prototype.Ie=function(a,b,c){function d(a){f=a;}if(this.v)return Promise.reject(new p(2,9,9006));this.v=!0;var e,f=null;return ph(this).then(function(){W(this);return qh(this,a,d,c)}.bind(this)).then(function(c){W(this);this.g=c.manifest;this.f=c.$c;if(this.g.presentationTimeline.S()||this.g.presentationTimeline.xa())throw new p(2,9,9005,a);this.m(this.g.periods);this.i=this.a.c.manifest++;this.l=0;c=b||{};var d=this.g.periods.map(this.C.bind(this)),f=this.f.b,g=xb(this.f);if(f){if(!g.length)throw new p(2,
9,9007,a);f.initData=[];}e={key:this.i,originalManifestUri:a,duration:this.l,size:0,expiration:this.f.pb(),periods:d,sessionIds:this.c.usePersistentLicense?g:[],drmInfo:f,appMetadata:c};return Gg(this.h,e)}.bind(this)).then(function(){W(this);if(f)throw f;return rh(this)}.bind(this)).then(function(){return wg(e)}.bind(this))["catch"](function(a){return rh(this)["catch"](Ga).then(function(){throw a;})}.bind(this))};V.prototype.store=V.prototype.Ie;
V.prototype.remove=function(a){function b(a){6013!=a.code&&(e=a);}var c=a.offlineUri,d=S.a(c);if(null==d)return Promise.reject(new p(2,9,9004,c));var e=null,f,g;return ph(this).then(function(){W(this);return this.a.get("manifest",d)}.bind(this)).then(function(a){W(this);if(!a)throw new p(2,9,9003,c);f=a;a=Jg(f);g=new pb({Va:this.b.v,onError:b,Kb:function(){},onExpirationUpdated:function(){},onEvent:function(){}});g.configure(this.b.getConfiguration().drm);return g.init(a,this.c.usePersistentLicense||
!1)}.bind(this)).then(function(){return ub(g,f.sessionIds)}.bind(this)).then(function(){return g.o()}.bind(this)).then(function(){W(this);if(e)throw e;var b=f.periods.map(function(a){return a.streams.map(function(a){var b=a.segments.map(function(a){return S.b(a.uri)});a.initSegmentUri&&b.push(S.b(a.initSegmentUri));return b}).reduce(x,[])}).reduce(x,[]),c=0,d=b.length,g=this.c.progressCallback;return tg(this.a,b,function(){c++;g(a,c/d);})}.bind(this)).then(function(){W(this);this.c.progressCallback(a,
1);return this.a.remove("manifest",d)}.bind(this))};V.prototype.remove=V.prototype.remove;V.prototype.list=function(){var a=[];return ph(this).then(function(){W(this);return this.a.forEach("manifest",function(b){a.push(wg(b));})}.bind(this)).then(function(){return a})};V.prototype.list=V.prototype.list;
function qh(a,b,c,d){function e(){}var f=a.b.v,g=a.b.getConfiguration(),h,k,m;return ie(b,f,g.manifest.retryParameters,d).then(function(a){W(this);m=new a;m.configure(g.manifest);return m.start(b,{networkingEngine:f,filterAllPeriods:this.m.bind(this),filterNewPeriod:this.w.bind(this),onTimelineRegionAdded:function(){},onEvent:function(){},onError:c})}.bind(a)).then(function(a){W(this);h=a;k=new pb({Va:f,onError:c,Kb:e,onExpirationUpdated:function(){},onEvent:function(){}});k.configure(g.drm);return k.init(h,
this.c.usePersistentLicense||!1)}.bind(a)).then(function(){W(this);return sh(h)}.bind(a)).then(function(){W(this);return tb(k)}.bind(a)).then(function(){W(this);return m.stop()}.bind(a)).then(function(){W(this);return{manifest:h,$c:k}}.bind(a))["catch"](function(a){if(m)return m.stop().then(function(){throw a;});throw a;})}
V.prototype.B=function(a){for(var b=[],c=gc(this.b.getConfiguration().preferredAudioLanguage),d=[0,ec,fc],e=a.filter(function(a){return"variant"==a.type}),d=d.map(function(a){return e.filter(function(b){b=gc(b.language);return dc(a,c,b)})}),f,g=0;g<d.length;g++)if(d[g].length){f=d[g];break}f||(d=e.filter(function(a){return a.primary}),d.length&&(f=d));f||(f=e,e.map(function(a){return a.language}).filter(Ia));var h=f.filter(function(a){return a.height&&480>=a.height});h.length&&(h.sort(function(a,
b){return b.height-a.height}),f=h.filter(function(a){return a.height==h[0].height}));f.sort(function(a,b){return a.bandwidth-b.bandwidth});f.length&&b.push(f[Math.floor(f.length/2)]);b.push.apply(b,a.filter(function(a){return"text"==a.type}));return b};function nh(a){return{trackSelectionCallback:a.B.bind(a),progressCallback:function(a,c){if(a||c)return null},usePersistentLicense:!0}}
function ph(a){if(!window.indexedDB)return Promise.reject(new p(2,9,9E3));if(a.a)return Promise.resolve();var b=a.b.v,c=a.b.getConfiguration().streaming.retryParameters,d=a.c;return vg().then(function(a){this.a=a;this.h=new Eg(a,b,c,d);}.bind(a))}V.prototype.m=function(a){a.forEach(this.w.bind(this));};
V.prototype.w=function(a){var b=null;if(this.j){var c=this.j.filter(function(a){return"variant"==a.type})[0];c&&(b=sc(a,c));}var d=c=null;b&&(b.audio&&(c=b.audio),b.video&&(d=b.video));kc(this.f,c,d,a);jc(a,this.b.getConfiguration().restrictions,{width:Infinity,height:Infinity});};function rh(a){var b=a.f?a.f.o():Promise.resolve();a.f=null;a.g=null;a.v=!1;a.j=null;a.i=-1;return b}
function sh(a){var b=a.periods.map(function(a){return a.variants}).reduce(x,[]).map(function(a){var b=[];a.audio&&b.push(a.audio);a.video&&b.push(a.video);return b}).reduce(x,[]).filter(Ia);a=a.periods.map(function(a){return a.textStreams}).reduce(x,[]);b.push.apply(b,a);return Promise.all(b.map(function(a){return a.createSegmentIndex()}))}
V.prototype.C=function(a){var b,c,d=qc(a,null,null),e=rc(a,null),d=this.c.trackSelectionCallback(d.concat(e));this.j||(this.j=d,this.m(this.g.periods));for(e=d.length-1;0<e;--e){var f=!1;for(c=e-1;0<=c;--c)if(d[e].type==d[c].type&&d[e].kind==d[c].kind&&d[e].language==d[c].language){f=!0;break}if(f)break}f=[];for(e=0;e<d.length;e++)(b=sc(a,d[e]))?(b.audio&&((c=f.filter(function(a){return a.id==b.audio.id})[0])?c.variantIds.push(b.id):(c=b.video?b.bandwidth/2:b.bandwidth,f.push(th(this,a,b.audio,c,
b.id)))),b.video&&((c=f.filter(function(a){return a.id==b.video.id})[0])?c.variantIds.push(b.id):(c=b.audio?b.bandwidth/2:b.bandwidth,f.push(th(this,a,b.video,c,b.id))))):f.push(th(this,a,tc(a,d[e]),0));return{startTime:a.startTime,streams:f}};
function th(a,b,c,d,e){var f=[],g=a.g.presentationTimeline.ca();var h=g;for(var k=c.findSegmentPosition(g),m=null!=k?c.getSegmentReference(k):null;m;)h=a.a.c.segment++,Fg(a.h,c.type,m,(m.endTime-m.startTime)*d/8,{key:h,data:null,manifestKey:a.i,streamNumber:c.id,segmentNumber:h}),f.push({startTime:m.startTime,endTime:m.endTime,uri:S.c(a.i,c.id,h)}),h=m.endTime+b.startTime,m=c.getSegmentReference(++k);a.l=Math.max(a.l,h-g);b=null;c.initSegmentReference&&(h=a.a.c.segment++,b=S.c(a.i,c.id,h),Fg(a.h,
c.contentType,c.initSegmentReference,0,{key:h,data:null,manifestKey:a.i,streamNumber:c.id,segmentNumber:-1}));a=[];null!=e&&a.push(e);return{id:c.id,primary:c.primary,presentationTimeOffset:c.presentationTimeOffset||0,contentType:c.type,mimeType:c.mimeType,codecs:c.codecs,frameRate:c.frameRate,kind:c.kind,language:c.language,label:c.label,width:c.width||null,height:c.height||null,initSegmentUri:b,encrypted:c.encrypted,keyId:c.keyId,segments:f,variantIds:a}}
function W(a){if(!a.b)throw new p(2,9,9002);}Wg.offline=oh;n("shaka.polyfill.installAll",function(){for(var a=0;a<uh.length;++a)uh[a]();});var uh=[];function vh(a){uh.push(a);}n("shaka.polyfill.register",vh);vh(function(){var a=navigator.userAgent;a&&0<=a.indexOf("CrKey")&&delete window.indexedDB;});var wh;function xh(a,b,c){if("input"==a)switch(this.type){case "range":a="change";}wh.call(this,a,b,c);}vh(function(){0>navigator.userAgent.indexOf("Trident/")||HTMLInputElement.prototype.addEventListener==xh||(wh=HTMLInputElement.prototype.addEventListener,HTMLInputElement.prototype.addEventListener=xh);});vh(function(){if(4503599627370497!=Math.round(4503599627370497)){var a=Math.round;Math.round=function(b){var c=b;4503599627370496>=b&&(c=a(b));return c};}});function yh(a){this.f=[];this.b=[];this.a=[];(new N).$("pssh",this.c.bind(this)).parse(a.buffer);}yh.prototype.c=function(a){if(!(1<a.version)){var b=mb(a.u.La(16)),c=[];if(0<a.version)for(var d=a.u.D(),e=0;e<d;++e){var f=mb(a.u.La(16));c.push(f);}d=a.u.D();a.u.J(d);this.b.push.apply(this.b,c);this.f.push(b);this.a.push({start:a.start,end:a.start+a.size-1});}};function zh(a,b){try{var c=new Ah(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}
function Ah(a,b){this.keySystem=a;for(var c=!1,d=0;d<b.length;++d){var e=b[d];var f={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:e.initDataTypes,sessionTypes:["temporary"],label:e.label},g=!1;if(e.audioCapabilities)for(var h=0;h<e.audioCapabilities.length;++h){var k=e.audioCapabilities[h];if(k.contentType){g=!0;var m=k.contentType.split(";")[0];MSMediaKeys.isTypeSupported(this.keySystem,m)&&(f.audioCapabilities.push(k),c=!0);}}if(e.videoCapabilities)for(h=
0;h<e.videoCapabilities.length;++h)k=e.videoCapabilities[h],k.contentType&&(g=!0,m=k.contentType.split(";")[0],MSMediaKeys.isTypeSupported(this.keySystem,m)&&(f.videoCapabilities.push(k),c=!0));g||(c=MSMediaKeys.isTypeSupported(this.keySystem,"video/mp4"));"required"==e.persistentState&&(c=!1);if(c){this.a=f;return}}e=Error("Unsupported keySystem");e.name="NotSupportedError";e.code=DOMException.NOT_SUPPORTED_ERR;throw e;}Ah.prototype.createMediaKeys=function(){var a=new Bh(this.keySystem);return Promise.resolve(a)};
Ah.prototype.getConfiguration=function(){return this.a};function Ch(a){var b=this.mediaKeys;b&&b!=a&&Dh(b,null);delete this.mediaKeys;return(this.mediaKeys=a)?Dh(a,this):Promise.resolve()}function Bh(a){this.a=new MSMediaKeys(a);this.b=new Ra;}Bh.prototype.createSession=function(a){if("temporary"!=(a||"temporary"))throw new TypeError("Session type "+a+" is unsupported on this platform.");return new Eh(this.a)};Bh.prototype.setServerCertificate=function(){return Promise.resolve(!1)};
function Dh(a,b){function c(){b.msSetMediaKeys(d.a);b.removeEventListener("loadedmetadata",c);}Sa(a.b);if(!b)return Promise.resolve();B(a.b,b,"msneedkey",Fh);var d=a;try{return 1<=b.readyState?b.msSetMediaKeys(a.a):b.addEventListener("loadedmetadata",c),Promise.resolve()}catch(e){return Promise.reject(e)}}function Eh(a){ca.call(this);this.c=null;this.g=a;this.b=this.a=null;this.f=new Ra;this.sessionId="";this.expiration=NaN;this.closed=new u;this.keyStatuses=new Gh;}ba(Eh);l=Eh.prototype;
l.generateRequest=function(a,b){this.a=new u;try{this.c=this.g.createSession("video/mp4",new Uint8Array(b),null),B(this.f,this.c,"mskeymessage",this.Jd.bind(this)),B(this.f,this.c,"mskeyadded",this.Hd.bind(this)),B(this.f,this.c,"mskeyerror",this.Id.bind(this)),Hh(this,"status-pending");}catch(c){this.a.reject(c);}return this.a};l.load=function(){return Promise.reject(Error("MediaKeySession.load not yet supported"))};l.update=function(a){this.b=new u;try{this.c.update(new Uint8Array(a));}catch(b){this.b.reject(b);}return this.b};
l.close=function(){try{this.c.close(),this.closed.resolve(),Sa(this.f);}catch(a){this.closed.reject(a);}return this.closed};l.remove=function(){return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"))};
function Fh(a){var b=document.createEvent("CustomEvent");b.initCustomEvent("encrypted",!1,!1,null);b.initDataType="cenc";var c=a.initData;if(c){var d=new yh(c);if(1>=d.a.length)a=c;else{var e=[];for(a=0;a<d.a.length;a++)e.push(c.subarray(d.a[a].start,d.a[a].end+1));c=Ma(e,Ih);for(a=d=0;a<c.length;a++)d+=c[a].length;d=new Uint8Array(d);for(a=e=0;a<c.length;a++)d.set(c[a],e),e+=c[a].length;a=d;}}else a=c;b.initData=a;this.dispatchEvent(b);}function Ih(a,b){return nb(a,b)}
l.Jd=function(a){this.a&&(this.a.resolve(),this.a=null);this.dispatchEvent(new C("message",{messageType:void 0==this.keyStatuses.a?"licenserequest":"licenserenewal",message:a.message.buffer}));};l.Hd=function(){this.a?(Hh(this,"usable"),this.a.resolve(),this.a=null):this.b&&(Hh(this,"usable"),this.b.resolve(),this.b=null);};
l.Id=function(){var a=Error("EME PatchedMediaKeysMs key error");a.errorCode=this.c.error;if(this.a)this.a.reject(a),this.a=null;else if(this.b)this.b.reject(a),this.b=null;else switch(this.c.error.code){case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:Hh(this,"output-not-allowed");default:Hh(this,"internal-error");}};function Hh(a,b){var c=a.keyStatuses;c.size=void 0==b?0:1;c.a=b;a.dispatchEvent(new C("keystatuseschange"));}
function Gh(){this.size=0;this.a=void 0;}var Jh;l=Gh.prototype;l.forEach=function(a){this.a&&a(this.a,Jh);};l.get=function(a){if(this.has(a))return this.a};l.has=function(a){var b=Jh;return this.a&&nb(new Uint8Array(a),new Uint8Array(b))?!0:!1};l.entries=function(){};l.keys=function(){};l.values=function(){};function Kh(){return Promise.reject(Error("The key system specified is not supported."))}function Lh(a){return a?Promise.reject(Error("MediaKeys not supported.")):Promise.resolve()}function Mh(){throw new TypeError("Illegal constructor.");}Mh.prototype.createSession=function(){};Mh.prototype.setServerCertificate=function(){};function Nh(){throw new TypeError("Illegal constructor.");}Nh.prototype.getConfiguration=function(){};Nh.prototype.createMediaKeys=function(){};var Oh="";function Ph(a){Oh=a;Qh=(new Uint8Array([0])).buffer;navigator.requestMediaKeySystemAccess=Rh;delete HTMLMediaElement.prototype.mediaKeys;HTMLMediaElement.prototype.mediaKeys=null;HTMLMediaElement.prototype.setMediaKeys=Sh;window.MediaKeys=Th;window.MediaKeySystemAccess=Uh;}function Vh(a){var b=Oh;return b?b+a.charAt(0).toUpperCase()+a.slice(1):a}function Rh(a,b){try{var c=new Uh(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}
function Sh(a){var b=this.mediaKeys;b&&b!=a&&Wh(b,null);delete this.mediaKeys;(this.mediaKeys=a)&&Wh(a,this);return Promise.resolve()}
function Uh(a,b){this.a=this.keySystem=a;var c=!1;"org.w3.clearkey"==a&&(this.a="webkit-org.w3.clearkey",c=!1);var d=!1;var e=document.getElementsByTagName("video");var f=e.length?e[0]:document.createElement("video");for(var g=0;g<b.length;++g){e=b[g];var h={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:e.initDataTypes,sessionTypes:["temporary"],label:e.label},k=!1;if(e.audioCapabilities)for(var m=0;m<e.audioCapabilities.length;++m){var q=
e.audioCapabilities[m];if(q.contentType){var k=!0,v=q.contentType.split(";")[0];f.canPlayType(v,this.a)&&(h.audioCapabilities.push(q),d=!0);}}if(e.videoCapabilities)for(m=0;m<e.videoCapabilities.length;++m)q=e.videoCapabilities[m],q.contentType&&(k=!0,f.canPlayType(q.contentType,this.a)&&(h.videoCapabilities.push(q),d=!0));k||(d=f.canPlayType("video/mp4",this.a)||f.canPlayType("video/webm",this.a));"required"==e.persistentState&&(c?(h.persistentState="required",h.sessionTypes=["persistent-license"]):
d=!1);if(d){this.b=h;return}}c="Unsupported keySystem";if("org.w3.clearkey"==a||"com.widevine.alpha"==a)c="None of the requested configurations were supported.";c=Error(c);c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}Uh.prototype.createMediaKeys=function(){var a=new Th(this.a);return Promise.resolve(a)};Uh.prototype.getConfiguration=function(){return this.b};function Th(a){this.g=a;this.b=null;this.a=new Ra;this.c=[];this.f={};}
function Wh(a,b){a.b=b;Sa(a.a);var c=Oh;b&&(B(a.a,b,c+"needkey",a.Wd.bind(a)),B(a.a,b,c+"keymessage",a.Vd.bind(a)),B(a.a,b,c+"keyadded",a.Td.bind(a)),B(a.a,b,c+"keyerror",a.Ud.bind(a)));}l=Th.prototype;l.createSession=function(a){var b=a||"temporary";if("temporary"!=b&&"persistent-license"!=b)throw new TypeError("Session type "+a+" is unsupported on this platform.");a=this.b||document.createElement("video");a.src||(a.src="about:blank");b=new Xh(a,this.g,b);this.c.push(b);return b};
l.setServerCertificate=function(){return Promise.resolve(!1)};l.Wd=function(a){var b=document.createEvent("CustomEvent");b.initCustomEvent("encrypted",!1,!1,null);b.initDataType="webm";b.initData=a.initData;this.b.dispatchEvent(b);};l.Vd=function(a){var b=Yh(this,a.sessionId);b&&(a=new C("message",{messageType:void 0==b.keyStatuses.a?"licenserequest":"licenserenewal",message:a.message}),b.b&&(b.b.resolve(),b.b=null),b.dispatchEvent(a));};
l.Td=function(a){if(a=Yh(this,a.sessionId))$h(a,"usable"),a.a&&a.a.resolve(),a.a=null;};
l.Ud=function(a){var b=Yh(this,a.sessionId);if(b){var c=Error("EME v0.1b key error");c.errorCode=a.errorCode;c.errorCode.systemCode=a.systemCode;!a.sessionId&&b.b?(c.method="generateRequest",45==a.systemCode&&(c.message="Unsupported session type."),b.b.reject(c),b.b=null):a.sessionId&&b.a?(c.method="update",b.a.reject(c),b.a=null):(c=a.systemCode,a.errorCode.code==MediaKeyError.MEDIA_KEYERR_OUTPUT?$h(b,"output-restricted"):1==c?$h(b,"expired"):$h(b,"internal-error"));}};
function Yh(a,b){var c=a.f[b];return c?c:(c=a.c.shift())?(c.sessionId=b,a.f[b]=c):null}function Xh(a,b,c){ca.call(this);this.f=a;this.h=!1;this.a=this.b=null;this.c=b;this.g=c;this.sessionId="";this.expiration=NaN;this.closed=new u;this.keyStatuses=new ai;}ba(Xh);
function bi(a,b,c){if(a.h)return Promise.reject(Error("The session is already initialized."));a.h=!0;try{if("persistent-license"==a.g)if(c)var d=new Uint8Array(fb("LOAD_SESSION|"+c));else{var e=fb("PERSISTENT|"),f=new Uint8Array(e.byteLength+b.byteLength);f.set(new Uint8Array(e),0);f.set(new Uint8Array(b),e.byteLength);d=f;}else d=new Uint8Array(b);}catch(h){return Promise.reject(h)}a.b=new u;var g=Vh("generateKeyRequest");try{a.f[g](a.c,d);}catch(h){if("InvalidStateError"!=h.name)return a.b=null,Promise.reject(h);
setTimeout(function(){try{this.f[g](this.c,d);}catch(k){this.b.reject(k),this.b=null;}}.bind(a),10);}return a.b}l=Xh.prototype;
l.Xb=function(a,b){if(this.a)this.a.then(this.Xb.bind(this,a,b))["catch"](this.Xb.bind(this,a,b));else{this.a=a;if("webkit-org.w3.clearkey"==this.c){var c=E(b);var d=JSON.parse(c);"oct"!=d.keys[0].kty&&(this.a.reject(Error("Response is not a valid JSON Web Key Set.")),this.a=null);c=kb(d.keys[0].k);d=kb(d.keys[0].kid);}else c=new Uint8Array(b),d=null;var e=Vh("addKey");try{this.f[e](this.c,c,d,this.sessionId);}catch(f){this.a.reject(f),this.a=null;}}};
function $h(a,b){var c=a.keyStatuses;c.size=void 0==b?0:1;c.a=b;a.dispatchEvent(new C("keystatuseschange"));}l.generateRequest=function(a,b){return bi(this,b,null)};l.load=function(a){return"persistent-license"==this.g?bi(this,null,a):Promise.reject(Error("Not a persistent session."))};l.update=function(a){var b=new u;this.Xb(b,a);return b};
l.close=function(){if("persistent-license"!=this.g){if(!this.sessionId)return this.closed.reject(Error("The session is not callable.")),this.closed;var a=Vh("cancelKeyRequest");try{this.f[a](this.c,this.sessionId);}catch(b){}}this.closed.resolve();return this.closed};l.remove=function(){return"persistent-license"!=this.g?Promise.reject(Error("Not a persistent session.")):this.close()};function ai(){this.size=0;this.a=void 0;}var Qh;l=ai.prototype;l.forEach=function(a){this.a&&a(this.a,Qh);};l.get=function(a){if(this.has(a))return this.a};
l.has=function(a){var b=Qh;return this.a&&nb(new Uint8Array(a),new Uint8Array(b))?!0:!1};l.entries=function(){};l.keys=function(){};l.values=function(){};vh(function(){!window.HTMLVideoElement||navigator.requestMediaKeySystemAccess&&MediaKeySystemAccess.prototype.getConfiguration||(HTMLMediaElement.prototype.webkitGenerateKeyRequest?Ph("webkit"):HTMLMediaElement.prototype.generateKeyRequest?Ph(""):window.MSMediaKeys?(Jh=(new Uint8Array([0])).buffer,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=Ch,window.MediaKeys=Bh,window.MediaKeySystemAccess=Ah,navigator.requestMediaKeySystemAccess=
zh):(navigator.requestMediaKeySystemAccess=Kh,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=Lh,window.MediaKeys=Mh,window.MediaKeySystemAccess=Nh));});function ci(){var a=MediaSource.prototype.addSourceBuffer;MediaSource.prototype.addSourceBuffer=function(){var b=a.apply(this,arguments);b.abort=function(){};return b};}function di(){var a=SourceBuffer.prototype.remove;SourceBuffer.prototype.remove=function(b,c){return a.call(this,b,c-.001)};}
function ei(){var a=MediaSource.prototype.endOfStream;MediaSource.prototype.endOfStream=function(){for(var b,c=0,f=0;f<this.sourceBuffers.length;++f)b=this.sourceBuffers[f],b=b.buffered.end(b.buffered.length-1),c=Math.max(c,b);if(!isNaN(this.duration)&&c<this.duration)for(this.jc=!0,f=0;f<this.sourceBuffers.length;++f)b=this.sourceBuffers[f],b.ec=!1;return a.apply(this,arguments)};var b=!1,c=MediaSource.prototype.addSourceBuffer;MediaSource.prototype.addSourceBuffer=function(){var a=c.apply(this,
arguments);a.mediaSource_=this;a.addEventListener("updateend",fi,!1);b||(this.addEventListener("sourceclose",gi,!1),b=!0);return a};}function fi(a){var b=a.target,c=b.mediaSource_;if(c.jc){a.preventDefault();a.stopPropagation();a.stopImmediatePropagation();b.ec=!0;for(a=0;a<c.sourceBuffers.length;++a)if(0==c.sourceBuffers[a].ec)return;c.jc=!1;}}
function gi(a){a=a.target;for(var b=0;b<a.sourceBuffers.length;++b)a.sourceBuffers[b].removeEventListener("updateend",fi,!1);a.removeEventListener("sourceclose",gi,!1);}function hi(){var a=MediaSource.isTypeSupported;MediaSource.isTypeSupported=function(b){return"mp2t"==b.split(/ *; */)[0].split("/")[1]?!1:a(b)};}
function ii(){var a=MediaSource.isTypeSupported,b=/^dv(?:he|av)\./;MediaSource.isTypeSupported=function(c){for(var d,e,f=c.split(/ *; */),g=f[0],h={},k=1;k<f.length;++k)d=f[k].split("="),e=d[0],d=d[1].replace(/"(.*)"/,"$1"),h[e]=d;d=h.codecs;if(!d)return a(c);var m=!1,q=!1;c=d.split(",").filter(function(a){if(b.test(a))return q=!0,!1;/^(hev|hvc)1\.2/.test(a)&&(m=!0);return!0});q&&(m=!1);h.codecs=c.join(",");m&&(h.eotf="smpte2084");for(e in h)d=h[e],g+="; "+e+'="'+d+'"';return cast.__platform__.canDisplayType(g)};}
vh(function(){if(window.MediaSource)if(window.cast&&cast.__platform__&&cast.__platform__.canDisplayType)ii();else if(navigator.vendor&&0<=navigator.vendor.indexOf("Apple")){var a=navigator.appVersion;hi();0<=a.indexOf("Version/8")?window.MediaSource=null:0<=a.indexOf("Version/9")?ci():0<=a.indexOf("Version/10")?(ci(),ei()):0<=a.indexOf("Version/11")&&(ci(),di());}});function X(a){this.c=[];this.b=[];this.Ba=ji;if(a)try{a(this.ma.bind(this),this.a.bind(this));}catch(b){this.a(b);}}var ji=0;function ki(a){var b=new X;b.ma(void 0);return b.then(function(){return a})}function li(a){var b=new X;b.a(a);return b}function mi(a){function b(a,b,c){a.Ba==ji&&(e[b]=c,d++,d==e.length&&a.ma(e));}var c=new X;if(!a.length)return c.ma([]),c;for(var d=0,e=Array(a.length),f=c.a.bind(c),g=0;g<a.length;++g)a[g]&&a[g].then?a[g].then(b.bind(null,c,g),f):b(c,g,a[g]);return c}
function ni(a){for(var b=new X,c=b.ma.bind(b),d=b.a.bind(b),e=0;e<a.length;++e)a[e]&&a[e].then?a[e].then(c,d):c(a[e]);return b}X.prototype.then=function(a,b){var c=new X;switch(this.Ba){case 1:oi(this,c,a);break;case 2:oi(this,c,b);break;case ji:this.c.push({O:c,zb:a}),this.b.push({O:c,zb:b});}return c};X.prototype["catch"]=function(a){return this.then(void 0,a)};
X.prototype.ma=function(a){if(this.Ba==ji){this.f=a;this.Ba=1;for(a=0;a<this.c.length;++a)oi(this,this.c[a].O,this.c[a].zb);this.c=[];this.b=[];}};X.prototype.a=function(a){if(this.Ba==ji){this.f=a;this.Ba=2;for(a=0;a<this.b.length;++a)oi(this,this.b[a].O,this.b[a].zb);this.c=[];this.b=[];}};
function oi(a,b,c){pi.push(function(){if(c&&"function"==typeof c){try{var a=c(this.f);}catch(f){b.a(f);return}try{var e=a&&a.then;}catch(f){b.a(f);return}a instanceof X?a==b?b.a(new TypeError("Chaining cycle detected")):a.then(b.ma.bind(b),b.a.bind(b)):e?qi(a,e,b):b.ma(a);}else 1==this.Ba?b.ma(this.f):b.a(this.f);}.bind(a));null==ri&&(ri=si(ti));}
function qi(a,b,c){try{var d=!1;b.call(a,function(a){if(!d){d=!0;try{var b=a&&a.then;}catch(g){c.a(g);return}b?qi(a,b,c):c.ma(a);}},c.a.bind(c));}catch(e){c.a(e);}}function ti(){for(;pi.length;){null!=ri&&(ui(ri),ri=null);var a=pi;pi=[];for(var b=0;b<a.length;++b)a[b]();}}function si(){return 0}function ui(){}var ri=null,pi=[];
vh(function(a){window.setImmediate?(si=function(a){return window.setImmediate(a)},ui=function(a){return window.clearImmediate(a)}):(si=function(a){return window.setTimeout(a,0)},ui=function(a){return window.clearTimeout(a)});if(!window.Promise||a)window.Promise=X,window.Promise.resolve=ki,window.Promise.reject=li,window.Promise.all=mi,window.Promise.race=ni,window.Promise.prototype.then=X.prototype.then,window.Promise.prototype["catch"]=X.prototype["catch"];});vh(function(){if(window.HTMLMediaElement){var a=HTMLMediaElement.prototype.play;HTMLMediaElement.prototype.play=function(){var b=a.apply(this,arguments);b&&b["catch"](function(){});return b};}});function vi(){return{droppedVideoFrames:this.webkitDroppedFrameCount,totalVideoFrames:this.webkitDecodedFrameCount,corruptedVideoFrames:0,creationTime:NaN,totalFrameDelay:0}}vh(function(){if(window.HTMLVideoElement){var a=HTMLVideoElement.prototype;!a.getVideoPlaybackQuality&&"webkitDroppedFrameCount"in a&&(a.getVideoPlaybackQuality=vi);}});function wi(a,b,c){return new window.TextTrackCue(a,b,c)}function xi(a,b,c){return new window.TextTrackCue(a+"-"+b+"-"+c,a,b,c)}vh(function(){var a=window.navigator.userAgent.indexOf("Edge/");if((-1!=window.navigator.userAgent.indexOf("Trident/")||-1!=a||!window.VTTCue)&&window.TextTrackCue)if(a=TextTrackCue.length,3==a)window.VTTCue=wi;else if(6==a)window.VTTCue=xi;else{try{var b=!!wi(1,2,"");}catch(c){b=!1;}b&&(window.VTTCue=wi);}});function Y(a,b,c){this.startTime=a;this.endTime=b;this.payload=c;this.region={x:0,y:0,width:100,height:100};this.position=null;this.positionAlign=yi;this.size=100;this.textAlign=zi;this.writingDirection=Ai;this.lineInterpretation=Bi;this.line=null;this.lineHeight="";this.lineAlign=Ci;this.displayAlign=Di;this.fontSize=this.backgroundColor=this.color="";this.fontWeight=Ei;this.fontStyle=Fi;this.fontFamily="";this.textDecoration=[];this.wrapLine=!0;this.id="";}n("shaka.text.Cue",Y);var yi="auto";
Y.positionAlign={LEFT:"line-left",RIGHT:"line-right",CENTER:"center",AUTO:yi};var zi="center",Gi={LEFT:"left",RIGHT:"right",CENTER:zi,START:"start",END:"end"};Y.textAlign=Gi;var Di="before",Hi={BEFORE:Di,CENTER:"center",AFTER:"after"};Y.displayAlign=Hi;var Ai=0,Mg=2,Ng=3;Y.writingDirection={HORIZONTAL_LEFT_TO_RIGHT:Ai,HORIZONTAL_RIGHT_TO_LEFT:1,VERTICAL_LEFT_TO_RIGHT:Mg,VERTICAL_RIGHT_TO_LEFT:Ng};var Bi=0,Og=1;Y.lineInterpretation={LINE_NUMBER:Bi,PERCENTAGE:Og};
var Ci="center",Ii={CENTER:Ci,START:"start",END:"end"};Y.lineAlign=Ii;var Ei=400;Y.fontWeight={NORMAL:Ei,BOLD:700};var Fi="normal",Ji={NORMAL:Fi,ITALIC:"italic",OBLIQUE:"oblique"};Y.fontStyle=Ji;Y.textDecoration={UNDERLINE:"underline",LINE_THROUGH:"lineThrough",OVERLINE:"overline"};function Ki(){}Ki.prototype.parseInit=function(){};
Ki.prototype.parseMedia=function(a,b){var c=E(a),d=[],e=new DOMParser,f=null;try{f=e.parseFromString(c,"text/xml");}catch(kj){throw new p(2,2,2005);}if(f){var g=f.getElementsByTagName("tt")[0];if(g){e=g.getAttribute("ttp:frameRate");f=g.getAttribute("ttp:subFrameRate");var h=g.getAttribute("ttp:frameRateMultiplier");var k=g.getAttribute("ttp:tickRate");c=g.getAttribute("xml:space")||"default";}else throw new p(2,2,2005);if("default"!=c&&"preserve"!=c)throw new p(2,2,2005);c="default"==c;e=new Li(e,
f,h,k);f=Mi(g.getElementsByTagName("styling")[0]);h=Mi(g.getElementsByTagName("layout")[0]);g=Mi(g.getElementsByTagName("body")[0]);for(k=0;k<g.length;k++){var m=g[k];var q=b.periodStart;var v=e,r=f,t=h,y=c;if(m.hasAttribute("begin")||m.hasAttribute("end")||!/^\s*$/.test(m.textContent)){Ni(m,y);var y=Oi(m.getAttribute("begin"),v),w=Oi(m.getAttribute("end"),v),v=Oi(m.getAttribute("dur"),v),Zh=m.textContent;null==w&&null!=v&&(w=y+v);if(null==y||null==w)throw new p(2,2,2001);q=new Y(y+q,w+q,Zh);y=Pi(m,
"region",t);t=q;"rtl"==Z(m,y,r,"tts:direction")&&(t.writingDirection=1);w=Z(m,y,r,"tts:writingMode");"tb"==w||"tblr"==w?t.writingDirection=Mg:"tbrl"==w?t.writingDirection=Ng:"rltb"==w||"rl"==w?t.writingDirection=1:w&&(t.writingDirection=Ai);if(w=Z(m,y,r,"tts:origin"))if(w=Qi.exec(w))t.region.x=Number(w[1]),t.region.y=Number(w[2]);if(w=Z(m,y,r,"tts:extent"))if(w=Qi.exec(w))t.region.width=Number(w[1]),t.region.height=Number(w[2]);if(w=Z(m,y,r,"tts:textAlign"))t.positionAlign=Ri[w],t.lineAlign=Si[w],
t.textAlign=Gi[w.toUpperCase()];if(w=Z(m,y,r,"tts:displayAlign"))t.displayAlign=Hi[w.toUpperCase()];if(w=Z(m,y,r,"tts:color"))t.color=w;if(w=Z(m,y,r,"tts:backgroundColor"))t.backgroundColor=w;if(w=Z(m,y,r,"tts:fontFamily"))t.fontFamily=w;(w=Z(m,y,r,"tts:fontWeight"))&&"bold"==w&&(t.fontWeight=700);(w=Z(m,y,r,"tts:wrapOption"))&&"noWrap"==w&&(t.wrapLine=!1);(w=Z(m,y,r,"tts:lineHeight"))&&w.match(Ti)&&(t.lineHeight=w);(w=Z(m,y,r,"tts:fontSize"))&&w.match(Ti)&&(t.fontSize=w);if(w=Z(m,y,r,"tts:fontStyle"))t.fontStyle=
Ji[w.toUpperCase()];(y=Ui(y,r,"tts:textDecoration"))&&Vi(t,y);(m=Wi(m,r,"tts:textDecoration"))&&Vi(t,m);}else q=null;q&&d.push(q);}}return d};
var Xi=/^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/,Yi=/^(?:(\d{2,}):)?(\d{2}):(\d{2})$/,Zi=/^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/,$i=/^(\d*\.?\d*)f$/,aj=/^(\d*\.?\d*)t$/,bj=/^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/,Qi=/^(\d{1,2}|100)% (\d{1,2}|100)%$/,Ti=/^(\d+px|\d+em)$/,Si={left:"start",center:"center",right:"end",start:"start",end:"end"},Ri={left:"line-left",center:"center",right:"line-right"};
function Mi(a){var b=[];if(!a)return b;for(var c=a.childNodes,d=0;d<c.length;d++){var e="span"==c[d].nodeName&&"p"==a.nodeName;c[d].nodeType!=Node.ELEMENT_NODE||"br"==c[d].nodeName||e||(e=Mi(c[d]),b=b.concat(e));}b.length||b.push(a);return b}function Ni(a,b){for(var c=a.childNodes,d=0;d<c.length;d++)if("br"==c[d].nodeName&&0<d)c[d-1].textContent+="\n";else if(0<c[d].childNodes.length)Ni(c[d],b);else if(b){var e=c[d].textContent.trim(),e=e.replace(/\s+/g," ");c[d].textContent=e;}}
function Vi(a,b){for(var c=b.split(" "),d=0;d<c.length;d++)switch(c[d]){case "underline":0>a.textDecoration.indexOf("underline")&&a.textDecoration.push("underline");break;case "noUnderline":0<=a.textDecoration.indexOf("underline")&&Oa(a.textDecoration,"underline");break;case "lineThrough":0>a.textDecoration.indexOf("lineThrough")&&a.textDecoration.push("lineThrough");break;case "noLineThrough":0<=a.textDecoration.indexOf("lineThrough")&&Oa(a.textDecoration,"lineThrough");break;case "overline":0>a.textDecoration.indexOf("overline")&&
a.textDecoration.push("overline");break;case "noOverline":0<=a.textDecoration.indexOf("overline")&&Oa(a.textDecoration,"overline");}}function Z(a,b,c,d){return(a=Wi(a,c,d))?a:Ui(b,c,d)}function Ui(a,b,c){for(var d=Mi(a),e=0;e<d.length;e++){var f=d[e].getAttribute(c);if(f)return f}return(a=Pi(a,"style",b))?a.getAttribute(c):null}function Wi(a,b,c){return(a=Pi(a,"style",b))?a.getAttribute(c):null}
function Pi(a,b,c){if(!a||1>c.length)return null;var d=null,e=a;for(a=null;e&&!(a=e.getAttribute(b))&&(e=e.parentNode,e instanceof Element););if(b=a)for(a=0;a<c.length;a++)if(c[a].getAttribute("xml:id")==b){d=c[a];break}return d}
function Oi(a,b){var c=null;if(Xi.test(a))var c=Xi.exec(a),d=Number(c[1]),e=Number(c[2]),f=Number(c[3]),g=Number(c[4]),g=g+(Number(c[5])||0)/b.b,f=f+g/b.frameRate,c=f+60*e+3600*d;else Yi.test(a)?c=cj(Yi,a):Zi.test(a)?c=cj(Zi,a):$i.test(a)?(c=$i.exec(a),c=Number(c[1])/b.frameRate):aj.test(a)?(c=aj.exec(a),c=Number(c[1])/b.a):bj.test(a)&&(c=cj(bj,a));return c}
function cj(a,b){var c=a.exec(b);return c&&""!=c[0]?(Number(c[4])||0)/1E3+(Number(c[3])||0)+60*(Number(c[2])||0)+3600*(Number(c[1])||0):null}function Li(a,b,c,d){this.frameRate=Number(a)||30;this.b=Number(b)||1;this.a=Number(d);this.a||(this.a=a?this.frameRate*this.b:1);c&&(a=/^(\d+) (\d+)$/g.exec(c))&&(this.frameRate*=a[1]/a[2]);}Qb("application/ttml+xml",Ki);function dj(){this.a=new Ki;}dj.prototype.parseInit=function(a){var b=!1;(new N).F("moov",O).F("trak",O).F("mdia",O).F("minf",O).F("stbl",O).$("stsd",Fd).F("stpp",function(a){b=!0;a.ba.stop();}).parse(a);if(!b)throw new p(2,2,2007);};dj.prototype.parseMedia=function(a,b){var c=!1,d=[];(new N).F("mdat",Gd(function(a){c=!0;d=d.concat(this.a.parseMedia(a,b));}.bind(this))).parse(a);if(!c)throw new p(2,2,2007);return d};Qb('application/mp4; codecs="stpp"',dj);
Qb('application/mp4; codecs="stpp.TTML.im1t"',dj);function ej(){}ej.prototype.parseInit=function(){};
ej.prototype.parseMedia=function(a,b){var c=E(a),c=c.replace(/\r\n|\r(?=[^\n]|$)/gm,"\n"),c=c.split(/\n{2,}/m);if(!/^WEBVTT($|[ \t\n])/m.test(c[0]))throw new p(2,2,2E3);for(var d=b.segmentStart,e=[],f=1;f<c.length;f++){var g=c[f].split("\n"),h=d;if(1==g.length&&!g[0]||/^NOTE($|[ \t])/.test(g[0]))var k=null;else{k=null;0>g[0].indexOf("--\x3e")&&(k=g[0],g.splice(0,1));var m=new He(g[0]),q=fj(m),v=Ie(m,/[ \t]+--\x3e[ \t]+/g),r=fj(m);if(null==q||!v||null==r)throw new p(2,2,2001);g=new Y(q+h,r+h,g.slice(1).join("\n").trim());
Ie(m,/[ \t]+/gm);for(h=Je(m);h;)gj(g,h),Ie(m,/[ \t]+/gm),h=Je(m);null!=k&&(g.id=k);k=g;}k&&e.push(k);}return e};
function gj(a,b){var c;if(c=/^align:(start|middle|center|end|left|right)$/.exec(b))c=c[1],"middle"==c?a.textAlign=zi:a.textAlign=Gi[c.toUpperCase()];else if(c=/^vertical:(lr|rl)$/.exec(b))a.writingDirection="lr"==c[1]?Mg:Ng;else if(c=/^size:([\d\.]+)%$/.exec(b))a.size=Number(c[1]);else if(c=/^position:([\d\.]+)%(?:,(line-left|line-right|center|start|end))?$/.exec(b))a.position=Number(c[1]),c[2]&&(c=c[2],a.positionAlign="line-left"==c||"start"==c?"line-left":"line-right"==c||"end"==c?"line-right":
"center");else if(c=/^line:([\d\.]+)%(?:,(start|end|center))?$/.exec(b))a.lineInterpretation=Og,a.line=Number(c[1]),c[2]&&(a.lineAlign=Ii[c[2].toUpperCase()]);else if(c=/^line:(-?\d+)(?:,(start|end|center))?$/.exec(b))a.lineInterpretation=Bi,a.line=Number(c[1]),c[2]&&(a.lineAlign=Ii[c[2].toUpperCase()]);}function fj(a){a=Ie(a,/(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3})/g);if(!a)return null;var b=Number(a[2]),c=Number(a[3]);return 59<b||59<c?null:Number(a[4])/1E3+c+60*b+3600*(Number(a[1])||0)}
Qb("text/vtt",ej);Qb('text/vtt; codecs="vtt"',ej);function hj(){this.a=null;}hj.prototype.parseInit=function(a){var b=!1;(new N).F("moov",O).F("trak",O).F("mdia",O).$("mdhd",function(a){0==a.version?(a.u.J(4),a.u.J(4),this.a=a.u.D(),a.u.J(4)):(a.u.J(8),a.u.J(8),this.a=a.u.D(),a.u.J(8));a.u.J(4);}.bind(this)).F("minf",O).F("stbl",O).$("stsd",Fd).F("wvtt",function(){b=!0;}).parse(a);if(!this.a)throw new p(2,2,2008);if(!b)throw new p(2,2,2008);};
hj.prototype.parseMedia=function(a,b){if(!this.a)throw new p(2,2,2008);var c=0,d=[],e=[],f=[],g=!1,h=!1,k=!1,m=null;(new N).F("moof",O).F("traf",O).$("tfdt",function(a){g=!0;c=a.version?a.u.Ma():a.u.D();}).$("tfhd",function(a){var b=a.gc;a=a.u;a.J(4);b&1&&a.J(8);b&2&&a.J(4);m=b&8?a.D():null;}).$("trun",function(a){h=!0;var b=a.version,c=a.gc;a=a.u;var e=a.D();c&1&&a.J(4);c&4&&a.J(4);for(var f=[],g=0;g<e;g++){var k={duration:null,Yb:null};c&256&&(k.duration=a.D());c&512&&a.J(4);c&1024&&a.J(4);c&2048&&
(k.Yb=b?a.Ac():a.D());f.push(k);}d=f;}).F("vtte",function(){e.push(null);}).F("vttc",Gd(function(a){e.push(a);})).F("mdat",function(a){k=!0;O(a);}).parse(a);if(!k&&!g&&!h)throw new p(2,2,2008);for(var q=c,v=0;v<d.length;v++){var r=d[v],t=e[v],y=r.duration||m;y&&(r=r.Yb?c+r.Yb:q,q=r+y,t&&f.push(ij(t,b.periodStart+r/this.a,b.periodStart+q/this.a)));}return f.filter(Ha)};
function ij(a,b,c){var d,e,f;(new N).F("payl",Gd(function(a){d=E(a);})).F("iden",Gd(function(a){e=E(a);})).F("sttg",Gd(function(a){f=E(a);})).parse(a);return d?jj(d,e,f,b,c):null}function jj(a,b,c,d,e){a=new Y(d,e,a);b&&(a.id=b);if(c)for(b=new He(c),c=Je(b);c;)gj(a,c),Ie(b,/[ \t]+/gm),c=Je(b);return a}Qb('application/mp4; codecs="wvtt"',hj);}.call(g,this));
if ('object'!="undefined"&&module.exports)module.exports=g.shaka;
else if (typeof(undefined)!="undefined" && undefined.amd)undefined(function(){return g.shaka});
else this.shaka=g.shaka;
})();


});

/**
 * @file time-ranges.js
 *
 * Should create a fake TimeRange object
 * Mimics an HTML5 time range instance, which has functions that
 * return the start and end times for a range
 * TimeRanges are returned by the buffered() method
 *
 * @param  {(Number|Array)} Start of a single range or an array of ranges
 * @param  {Number} End of a single range
 * @private
 * @method createTimeRanges
 */
function createTimeRanges(start, end) {
  if (Array.isArray(start)) {
    return createTimeRangesObj(start);
  } else if (start === undefined || end === undefined) {
    return createTimeRangesObj();
  }
  return createTimeRangesObj([[start, end]]);
}

function createTimeRangesObj(ranges) {
  if (ranges === undefined || ranges.length === 0) {
    return {
      length: 0,
      start: function start() {
        throw new Error('This TimeRanges object is empty');
      },
      end: function end() {
        throw new Error('This TimeRanges object is empty');
      }
    };
  }
  return {
    length: ranges.length,
    start: getRange.bind(null, 'start', 0, ranges),
    end: getRange.bind(null, 'end', 1, ranges)
  };
}

function getRange(fnName, valueIndex, ranges, rangeIndex) {
  if (rangeIndex === undefined) {
    log.warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
    rangeIndex = 0;
  }
  rangeCheck(fnName, rangeIndex, ranges.length - 1);
  return ranges[rangeIndex][valueIndex];
}

function rangeCheck(fnName, index, maxIndex) {
  if (index < 0 || index > maxIndex) {
    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
  }
}

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/**
 * Remember mixins? Until facebook and various react utilities figure out a new solution this will
 * make mixins work how they used to, by adding mixin methods directly to your react component.
 *
 * @param {function/array} mixins A reference to your mixin class
 * @param {object} context A reference to the react component class. Usually just "this".
 * @param {object} options An object of optional settings".
 * @returns undefined
 *
 * use it like this in your constructor:
 * mixins([mixin1, mixin2], this, {options});
 */

var Mixins = (function () {
    function Mixins() {
        _classCallCheck(this, Mixins);
    }

    _createClass(Mixins, [{
        key: 'init',
        value: function init(mixins, context, options) {
            this.mixins = mixins;
            this.context = context;

            this.opt = {
                warn: true,
                mergeDuplicates: true
            };

            this.contextMethods = Object.getOwnPropertyNames(this.context.constructor.prototype);
            this.reactMethods = ['componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount'];

            if (options) {
                this.opt.warn = options.warn !== undefined ? options.warn : this.opt.warn;
                this.opt.mergeDuplicates = options.mergeDuplicates !== undefined ? options.mergeDuplicates : this.opt.mergeDuplicates;
            }

            if (this.mixins.constructor === Array) {
                mixins.map(function (mixin) {
                    this.grabMethods(mixin);
                }, this);
            } else if (typeof mixins === 'function' || typeof mixins === 'object') {
                this.grabMethods(mixins);
            } else {
                throw 'mixins expects a function, an array, or an object. Please and thank you';
            }
        }
    }, {
        key: 'addNewMethod',

        /**
         * If the method doesn't already exist on the react component, simply add this to it.
         *
         * @param {string} mm The name of a single mixin method
         * @param {function} currentMixin A reference to the mixin you are adding to the react component
         */
        value: function addNewMethod(mm, currentMixin) {
            if (this.mixins.prototype) {
                this.context.constructor.prototype[mm] = this.mixins.prototype[mm];
            } else {
                this.context.constructor.prototype[mm] = typeof currentMixin === 'object' ? currentMixin[mm] : currentMixin.prototype[mm];
            }
            this.contextMethods = Object.getOwnPropertyNames(this.context.constructor.prototype);
        }
    }, {
        key: 'extendMethod',

        /**
         * If there is already a method on your react component that matches the mixin method create a new function that
         * calls both methods so they can live in harmony.
         *
         * @param {string} mm The name of a single mixin method
         * @param {string} cm The name of the matched react method to extend
         * @param {function} currentMixin A reference to the mixin being added to the react method.
         */
        value: function extendMethod(mm, cm, currentMixin) {
            var orig = this.context[cm];
            var newMethod = typeof currentMixin === 'object' ? currentMixin[mm] : currentMixin.prototype[mm];
            this.context[mm] = function () {
                newMethod.call(this, arguments);
                orig.call(this, arguments);
            };
        }
    }, {
        key: 'grabMethods',

        /**
         * Takes a mixin method and sends it along the pipe
         * @param {function} mixin A single method from your mixin
         *
         */
        value: function grabMethods(mixin) {
            var _this = this;

            var currentMixin = mixin;
            var mixinMethods = typeof mixin === 'object' ? Object.getOwnPropertyNames(mixin) : Object.getOwnPropertyNames(mixin.prototype);

            mixinMethods.map(function (method) {
                if (method !== 'constructor' && method !== 'render') {
                    _this.checkForMatch(method, currentMixin);
                }
            }, this);
        }
    }, {
        key: 'checkForMatch',

        /**
         * Checks the react component to see if the method we want to add is already there.
         * If it is a duplicate and a React lifecycle method it silently extends the React method.
         * If it is a duplicate and not a React lifecycle method it warns you before extending the React method.
         *
         * @param {string} mm the mixin method to check against the react methods
         * @param {function} currentMixin A reference to the mixin being added to the React Component.
         */
        value: function checkForMatch(mm, currentMixin) {
            var _this2 = this;

            this.contextMethods.map(function (ctxMethod) {
                if (mm === ctxMethod) {
                    if (_this2.reactMethods.indexOf(mm) > -1) {
                        _this2.extendMethod(mm, ctxMethod, currentMixin);
                    } else {
                        if (_this2.opt.warn) {
                            console.warn(mm + ' method already exists within the ' + _this2.context.constructor.name + ' component.');
                        }
                        if (_this2.opt.mergeDuplicates) {
                            _this2.extendMethod(mm, ctxMethod, currentMixin);
                        }
                    }
                }
            });
            this.addNewMethod(mm, currentMixin);
        }
    }]);

    return Mixins;
})();

var mix = new Mixins();

var es6Mixins = mix.init.bind(mix);

function ISO639Converter() {
  this['aar'] = { 'ISO_639-1': 'aa', 'ISO_639-3': 'aar' };
  this['abk'] = { 'ISO_639-1': 'ab', 'ISO_639-3': 'abk' };
  this['ave'] = { 'ISO_639-1': 'ae', 'ISO_639-3': 'ave' };
  this['afr'] = { 'ISO_639-1': 'af', 'ISO_639-3': 'afr' };
  this['aka'] = { 'ISO_639-1': 'ak', 'ISO_639-3': 'aka' };
  this['amh'] = { 'ISO_639-1': 'am', 'ISO_639-3': 'amh' };
  this['arg'] = { 'ISO_639-1': 'an', 'ISO_639-3': 'arg' };
  this['ara'] = { 'ISO_639-1': 'ar', 'ISO_639-3': 'ara' };
  this['asm'] = { 'ISO_639-1': 'as', 'ISO_639-3': 'asm' };
  this['ava'] = { 'ISO_639-1': 'av', 'ISO_639-3': 'ava' };
  this['aym'] = { 'ISO_639-1': 'ay', 'ISO_639-3': 'aym' };
  this['aze'] = { 'ISO_639-1': 'az', 'ISO_639-3': 'aze' };
  this['bak'] = { 'ISO_639-1': 'ba', 'ISO_639-3': 'bak' };
  this['bel'] = { 'ISO_639-1': 'be', 'ISO_639-3': 'bel' };
  this['bul'] = { 'ISO_639-1': 'bg', 'ISO_639-3': 'bul' };
  this['bis'] = { 'ISO_639-1': 'bi', 'ISO_639-3': 'bis' };
  this['bam'] = { 'ISO_639-1': 'bm', 'ISO_639-3': 'bam' };
  this['ben'] = { 'ISO_639-1': 'bn', 'ISO_639-3': 'ben' };
  this['bod'] = { 'ISO_639-1': 'bo', 'ISO_639-3': 'bod' };
  this['bre'] = { 'ISO_639-1': 'br', 'ISO_639-3': 'bre' };
  this['bos'] = { 'ISO_639-1': 'bs', 'ISO_639-3': 'bos' };
  this['cat'] = { 'ISO_639-1': 'ca', 'ISO_639-3': 'cat' };
  this['che'] = { 'ISO_639-1': 'ce', 'ISO_639-3': 'che' };
  this['cha'] = { 'ISO_639-1': 'ch', 'ISO_639-3': 'cha' };
  this['cos'] = { 'ISO_639-1': 'co', 'ISO_639-3': 'cos' };
  this['cre'] = { 'ISO_639-1': 'cr', 'ISO_639-3': 'cre' };
  this['ces'] = { 'ISO_639-1': 'cs', 'ISO_639-3': 'ces' };
  this['chu'] = { 'ISO_639-1': 'cu', 'ISO_639-3': 'chu' };
  this['chv'] = { 'ISO_639-1': 'cv', 'ISO_639-3': 'chv' };
  this['cym'] = { 'ISO_639-1': 'cy', 'ISO_639-3': 'cym' };
  this['dan'] = { 'ISO_639-1': 'da', 'ISO_639-3': 'dan' };
  this['deu'] = { 'ISO_639-1': 'de', 'ISO_639-3': 'deu' };
  this['div'] = { 'ISO_639-1': 'dv', 'ISO_639-3': 'div' };
  this['dzo'] = { 'ISO_639-1': 'dz', 'ISO_639-3': 'dzo' };
  this['ewe'] = { 'ISO_639-1': 'ee', 'ISO_639-3': 'ewe' };
  this['ell'] = { 'ISO_639-1': 'el', 'ISO_639-3': 'ell' };
  this['eng'] = { 'ISO_639-1': 'en', 'ISO_639-3': 'eng' };
  this['epo'] = { 'ISO_639-1': 'eo', 'ISO_639-3': 'epo' };
  this['spa'] = { 'ISO_639-1': 'es', 'ISO_639-3': 'spa' };
  this['est'] = { 'ISO_639-1': 'et', 'ISO_639-3': 'est' };
  this['eus'] = { 'ISO_639-1': 'eu', 'ISO_639-3': 'eus' };
  this['fas'] = { 'ISO_639-1': 'fa', 'ISO_639-3': 'fas' };
  this['ful'] = { 'ISO_639-1': 'ff', 'ISO_639-3': 'ful' };
  this['fin'] = { 'ISO_639-1': 'fi', 'ISO_639-3': 'fin' };
  this['fij'] = { 'ISO_639-1': 'fj', 'ISO_639-3': 'fij' };
  this['fao'] = { 'ISO_639-1': 'fo', 'ISO_639-3': 'fao' };
  this['fra'] = { 'ISO_639-1': 'fr', 'ISO_639-3': 'fra' };
  this['fry'] = { 'ISO_639-1': 'fy', 'ISO_639-3': 'fry' };
  //Bugfix some track have "ger" as code
  this['ger'] = { 'ISO_639-1': 'de', 'ISO_639-3': 'deu' };
  this['gle'] = { 'ISO_639-1': 'ga', 'ISO_639-3': 'gle' };
  this['gla'] = { 'ISO_639-1': 'gd', 'ISO_639-3': 'gla' };
  this['glg'] = { 'ISO_639-1': 'gl', 'ISO_639-3': 'glg' };
  this['grn'] = { 'ISO_639-1': 'gn', 'ISO_639-3': 'grn' };
  this['guj'] = { 'ISO_639-1': 'gu', 'ISO_639-3': 'guj' };
  this['glv'] = { 'ISO_639-1': 'gv', 'ISO_639-3': 'glv' };
  this['hau'] = { 'ISO_639-1': 'ha', 'ISO_639-3': 'hau' };
  this['heb'] = { 'ISO_639-1': 'he', 'ISO_639-3': 'heb' };
  this['hin'] = { 'ISO_639-1': 'hi', 'ISO_639-3': 'hin' };
  this['hmo'] = { 'ISO_639-1': 'ho', 'ISO_639-3': 'hmo' };
  this['hrv'] = { 'ISO_639-1': 'hr', 'ISO_639-3': 'hrv' };
  this['hat'] = { 'ISO_639-1': 'ht', 'ISO_639-3': 'hat' };
  this['hun'] = { 'ISO_639-1': 'hu', 'ISO_639-3': 'hun' };
  this['hye'] = { 'ISO_639-1': 'hy', 'ISO_639-3': 'hye' };
  this['her'] = { 'ISO_639-1': 'hz', 'ISO_639-3': 'her' };
  this['ina'] = { 'ISO_639-1': 'ia', 'ISO_639-3': 'ina' };
  this['ind'] = { 'ISO_639-1': 'id', 'ISO_639-3': 'ind' };
  this['ile'] = { 'ISO_639-1': 'ie', 'ISO_639-3': 'ile' };
  this['ibo'] = { 'ISO_639-1': 'ig', 'ISO_639-3': 'ibo' };
  this['iii'] = { 'ISO_639-1': 'ii', 'ISO_639-3': 'iii' };
  this['ipk'] = { 'ISO_639-1': 'ik', 'ISO_639-3': 'ipk' };
  this['ido'] = { 'ISO_639-1': 'io', 'ISO_639-3': 'ido' };
  this['isl'] = { 'ISO_639-1': 'is', 'ISO_639-3': 'isl' };
  this['ita'] = { 'ISO_639-1': 'it', 'ISO_639-3': 'ita' };
  this['iku'] = { 'ISO_639-1': 'iu', 'ISO_639-3': 'iku' };
  this['jpn'] = { 'ISO_639-1': 'ja', 'ISO_639-3': 'jpn' };
  this['jav'] = { 'ISO_639-1': 'jv', 'ISO_639-3': 'jav' };
  this['kat'] = { 'ISO_639-1': 'ka', 'ISO_639-3': 'kat' };
  this['kon'] = { 'ISO_639-1': 'kg', 'ISO_639-3': 'kon' };
  this['kik'] = { 'ISO_639-1': 'ki', 'ISO_639-3': 'kik' };
  this['kua'] = { 'ISO_639-1': 'kj', 'ISO_639-3': 'kua' };
  this['kaz'] = { 'ISO_639-1': 'kk', 'ISO_639-3': 'kaz' };
  this['kal'] = { 'ISO_639-1': 'kl', 'ISO_639-3': 'kal' };
  this['khm'] = { 'ISO_639-1': 'km', 'ISO_639-3': 'khm' };
  this['kan'] = { 'ISO_639-1': 'kn', 'ISO_639-3': 'kan' };
  this['kor'] = { 'ISO_639-1': 'ko', 'ISO_639-3': 'kor' };
  this['kau'] = { 'ISO_639-1': 'kr', 'ISO_639-3': 'kau' };
  this['kas'] = { 'ISO_639-1': 'ks', 'ISO_639-3': 'kas' };
  this['kur'] = { 'ISO_639-1': 'ku', 'ISO_639-3': 'kur' };
  this['kom'] = { 'ISO_639-1': 'kv', 'ISO_639-3': 'kom' };
  this['cor'] = { 'ISO_639-1': 'kw', 'ISO_639-3': 'cor' };
  this['kir'] = { 'ISO_639-1': 'ky', 'ISO_639-3': 'kir' };
  this['lat'] = { 'ISO_639-1': 'la', 'ISO_639-3': 'lat' };
  this['ltz'] = { 'ISO_639-1': 'lb', 'ISO_639-3': 'ltz' };
  this['lug'] = { 'ISO_639-1': 'lg', 'ISO_639-3': 'lug' };
  this['lim'] = { 'ISO_639-1': 'li', 'ISO_639-3': 'lim' };
  this['lin'] = { 'ISO_639-1': 'ln', 'ISO_639-3': 'lin' };
  this['lao'] = { 'ISO_639-1': 'lo', 'ISO_639-3': 'lao' };
  this['lit'] = { 'ISO_639-1': 'lt', 'ISO_639-3': 'lit' };
  this['lub'] = { 'ISO_639-1': 'lu', 'ISO_639-3': 'lub' };
  this['lav'] = { 'ISO_639-1': 'lv', 'ISO_639-3': 'lav' };
  this['mlg'] = { 'ISO_639-1': 'mg', 'ISO_639-3': 'mlg' };
  this['mah'] = { 'ISO_639-1': 'mh', 'ISO_639-3': 'mah' };
  this['mri'] = { 'ISO_639-1': 'mi', 'ISO_639-3': 'mri' };
  this['mkd'] = { 'ISO_639-1': 'mk', 'ISO_639-3': 'mkd' };
  this['mal'] = { 'ISO_639-1': 'ml', 'ISO_639-3': 'mal' };
  this['mon'] = { 'ISO_639-1': 'mn', 'ISO_639-3': 'mon' };
  this['mar'] = { 'ISO_639-1': 'mr', 'ISO_639-3': 'mar' };
  this['msa'] = { 'ISO_639-1': 'ms', 'ISO_639-3': 'msa' };
  this['mlt'] = { 'ISO_639-1': 'mt', 'ISO_639-3': 'mlt' };
  this['mya'] = { 'ISO_639-1': 'my', 'ISO_639-3': 'mya' };
  this['nau'] = { 'ISO_639-1': 'na', 'ISO_639-3': 'nau' };
  this['nob'] = { 'ISO_639-1': 'nb', 'ISO_639-3': 'nob' };
  this['nde'] = { 'ISO_639-1': 'nd', 'ISO_639-3': 'nde' };
  this['nep'] = { 'ISO_639-1': 'ne', 'ISO_639-3': 'nep' };
  this['ndo'] = { 'ISO_639-1': 'ng', 'ISO_639-3': 'ndo' };
  this['nld'] = { 'ISO_639-1': 'nl', 'ISO_639-3': 'nld' };
  this['nno'] = { 'ISO_639-1': 'nn', 'ISO_639-3': 'nno' };
  this['nor'] = { 'ISO_639-1': 'no', 'ISO_639-3': 'nor' };
  this['nbl'] = { 'ISO_639-1': 'nr', 'ISO_639-3': 'nbl' };
  this['nav'] = { 'ISO_639-1': 'nv', 'ISO_639-3': 'nav' };
  this['nya'] = { 'ISO_639-1': 'ny', 'ISO_639-3': 'nya' };
  this['oci'] = { 'ISO_639-1': 'oc', 'ISO_639-3': 'oci' };
  this['oji'] = { 'ISO_639-1': 'oj', 'ISO_639-3': 'oji' };
  this['orm'] = { 'ISO_639-1': 'om', 'ISO_639-3': 'orm' };
  this['ori'] = { 'ISO_639-1': 'or', 'ISO_639-3': 'ori' };
  this['oss'] = { 'ISO_639-1': 'os', 'ISO_639-3': 'oss' };
  this['pan'] = { 'ISO_639-1': 'pa', 'ISO_639-3': 'pan' };
  this['pli'] = { 'ISO_639-1': 'pi', 'ISO_639-3': 'pli' };
  this['pol'] = { 'ISO_639-1': 'pl', 'ISO_639-3': 'pol' };
  this['pus'] = { 'ISO_639-1': 'ps', 'ISO_639-3': 'pus' };
  this['por'] = { 'ISO_639-1': 'pt', 'ISO_639-3': 'por' };
  this['que'] = { 'ISO_639-1': 'qu', 'ISO_639-3': 'que' };
  this['roh'] = { 'ISO_639-1': 'rm', 'ISO_639-3': 'roh' };
  this['run'] = { 'ISO_639-1': 'rn', 'ISO_639-3': 'run' };
  this['ron'] = { 'ISO_639-1': 'ro', 'ISO_639-3': 'ron' };
  this['rus'] = { 'ISO_639-1': 'ru', 'ISO_639-3': 'rus' };
  this['kin'] = { 'ISO_639-1': 'rw', 'ISO_639-3': 'kin' };
  this['san'] = { 'ISO_639-1': 'sa', 'ISO_639-3': 'san' };
  this['srd'] = { 'ISO_639-1': 'sc', 'ISO_639-3': 'srd' };
  this['snd'] = { 'ISO_639-1': 'sd', 'ISO_639-3': 'snd' };
  this['sme'] = { 'ISO_639-1': 'se', 'ISO_639-3': 'sme' };
  this['sag'] = { 'ISO_639-1': 'sg', 'ISO_639-3': 'sag' };
  this['hbs'] = { 'ISO_639-1': 'sh (deprecated)', 'ISO_639-3': 'hbs' };
  this['sin'] = { 'ISO_639-1': 'si', 'ISO_639-3': 'sin' };
  this['slk'] = { 'ISO_639-1': 'sk', 'ISO_639-3': 'slk' };
  this['slv'] = { 'ISO_639-1': 'sl', 'ISO_639-3': 'slv' };
  this['smo'] = { 'ISO_639-1': 'sm', 'ISO_639-3': 'smo' };
  this['sna'] = { 'ISO_639-1': 'sn', 'ISO_639-3': 'sna' };
  this['som'] = { 'ISO_639-1': 'so', 'ISO_639-3': 'som' };
  this['sqi'] = { 'ISO_639-1': 'sq', 'ISO_639-3': 'sqi' };
  this['srp'] = { 'ISO_639-1': 'sr', 'ISO_639-3': 'srp' };
  this['ssw'] = { 'ISO_639-1': 'ss', 'ISO_639-3': 'ssw' };
  this['sot'] = { 'ISO_639-1': 'st', 'ISO_639-3': 'sot' };
  this['sun'] = { 'ISO_639-1': 'su', 'ISO_639-3': 'sun' };
  this['swe'] = { 'ISO_639-1': 'sv', 'ISO_639-3': 'swe' };
  this['swa'] = { 'ISO_639-1': 'sw', 'ISO_639-3': 'swa' };
  this['tam'] = { 'ISO_639-1': 'ta', 'ISO_639-3': 'tam' };
  this['tel'] = { 'ISO_639-1': 'te', 'ISO_639-3': 'tel' };
  this['tgk'] = { 'ISO_639-1': 'tg', 'ISO_639-3': 'tgk' };
  this['tha'] = { 'ISO_639-1': 'th', 'ISO_639-3': 'tha' };
  this['tir'] = { 'ISO_639-1': 'ti', 'ISO_639-3': 'tir' };
  this['tuk'] = { 'ISO_639-1': 'tk', 'ISO_639-3': 'tuk' };
  this['tgl'] = { 'ISO_639-1': 'tl', 'ISO_639-3': 'tgl' };
  this['tsn'] = { 'ISO_639-1': 'tn', 'ISO_639-3': 'tsn' };
  this['ton'] = { 'ISO_639-1': 'to', 'ISO_639-3': 'ton' };
  this['tur'] = { 'ISO_639-1': 'tr', 'ISO_639-3': 'tur' };
  this['tso'] = { 'ISO_639-1': 'ts', 'ISO_639-3': 'tso' };
  this['tat'] = { 'ISO_639-1': 'tt', 'ISO_639-3': 'tat' };
  this['twi'] = { 'ISO_639-1': 'tw', 'ISO_639-3': 'twi' };
  this['tah'] = { 'ISO_639-1': 'ty', 'ISO_639-3': 'tah' };
  this['uig'] = { 'ISO_639-1': 'ug', 'ISO_639-3': 'uig' };
  this['ukr'] = { 'ISO_639-1': 'uk', 'ISO_639-3': 'ukr' };
  this['urd'] = { 'ISO_639-1': 'ur', 'ISO_639-3': 'urd' };
  this['uzb'] = { 'ISO_639-1': 'uz', 'ISO_639-3': 'uzb' };
  this['ven'] = { 'ISO_639-1': 've', 'ISO_639-3': 'ven' };
  this['vie'] = { 'ISO_639-1': 'vi', 'ISO_639-3': 'vie' };
  this['vol'] = { 'ISO_639-1': 'vo', 'ISO_639-3': 'vol' };
  this['wln'] = { 'ISO_639-1': 'wa', 'ISO_639-3': 'wln' };
  this['wol'] = { 'ISO_639-1': 'wo', 'ISO_639-3': 'wol' };
  this['xho'] = { 'ISO_639-1': 'xh', 'ISO_639-3': 'xho' };
  this['yid'] = { 'ISO_639-1': 'yi', 'ISO_639-3': 'yid' };
  this['yor'] = { 'ISO_639-1': 'yo', 'ISO_639-3': 'yor' };
  this['zha'] = { 'ISO_639-1': 'za', 'ISO_639-3': 'zha' };
  this['zho'] = { 'ISO_639-1': 'zh', 'ISO_639-3': 'zho' };
  this['zul'] = { 'ISO_639-1': 'zu', 'ISO_639-3': 'zul' };
}
ISO639Converter.prototype.from3to1 = function (ISO3Code) {
  if (this.hasOwnProperty(ISO3Code)) {
    return this[ISO3Code]['ISO_639-1'];
  } else {
    return null;
  }
};

window.iso639Converter = new ISO639Converter();

/**
* @author Phil Teare
* using wikipedia data
*/
var isoLangs = {
  "ab": {
    "name": "Abkhaz",
    "nativeName": "аҧсуа"
  },
  "aa": {
    "name": "Afar",
    "nativeName": "Afaraf"
  },
  "af": {
    "name": "Afrikaans",
    "nativeName": "Afrikaans"
  },
  "ak": {
    "name": "Akan",
    "nativeName": "Akan"
  },
  "sq": {
    "name": "Albanian",
    "nativeName": "Shqip"
  },
  "am": {
    "name": "Amharic",
    "nativeName": "አማርኛ"
  },
  "ar": {
    "name": "Arabic",
    "nativeName": "العربية"
  },
  "an": {
    "name": "Aragonese",
    "nativeName": "Aragonés"
  },
  "hy": {
    "name": "Armenian",
    "nativeName": "Հայերեն"
  },
  "as": {
    "name": "Assamese",
    "nativeName": "অসমীয়া"
  },
  "av": {
    "name": "Avaric",
    "nativeName": "авар мацӀ, магӀарул мацӀ"
  },
  "ae": {
    "name": "Avestan",
    "nativeName": "avesta"
  },
  "ay": {
    "name": "Aymara",
    "nativeName": "aymar aru"
  },
  "az": {
    "name": "Azerbaijani",
    "nativeName": "azərbaycan dili"
  },
  "bm": {
    "name": "Bambara",
    "nativeName": "bamanankan"
  },
  "ba": {
    "name": "Bashkir",
    "nativeName": "башҡорт теле"
  },
  "eu": {
    "name": "Basque",
    "nativeName": "euskara, euskera"
  },
  "be": {
    "name": "Belarusian",
    "nativeName": "Беларуская"
  },
  "bn": {
    "name": "Bengali",
    "nativeName": "বাংলা"
  },
  "bh": {
    "name": "Bihari",
    "nativeName": "भोजपुरी"
  },
  "bi": {
    "name": "Bislama",
    "nativeName": "Bislama"
  },
  "bs": {
    "name": "Bosnian",
    "nativeName": "bosanski jezik"
  },
  "br": {
    "name": "Breton",
    "nativeName": "brezhoneg"
  },
  "bg": {
    "name": "Bulgarian",
    "nativeName": "български език"
  },
  "my": {
    "name": "Burmese",
    "nativeName": "ဗမာစာ"
  },
  "ca": {
    "name": "Catalan; Valencian",
    "nativeName": "Català"
  },
  "ch": {
    "name": "Chamorro",
    "nativeName": "Chamoru"
  },
  "ce": {
    "name": "Chechen",
    "nativeName": "нохчийн мотт"
  },
  "ny": {
    "name": "Chichewa; Chewa; Nyanja",
    "nativeName": "chiCheŵa, chinyanja"
  },
  "zh": {
    "name": "Chinese",
    "nativeName": "中文 (Zhōngwén), 汉语, 漢語"
  },
  "cv": {
    "name": "Chuvash",
    "nativeName": "чӑваш чӗлхи"
  },
  "kw": {
    "name": "Cornish",
    "nativeName": "Kernewek"
  },
  "co": {
    "name": "Corsican",
    "nativeName": "corsu, lingua corsa"
  },
  "cr": {
    "name": "Cree",
    "nativeName": "ᓀᐦᐃᔭᐍᐏᐣ"
  },
  "hr": {
    "name": "Croatian",
    "nativeName": "hrvatski"
  },
  "cs": {
    "name": "Czech",
    "nativeName": "česky, čeština"
  },
  "da": {
    "name": "Danish",
    "nativeName": "dansk"
  },
  "dv": {
    "name": "Divehi; Dhivehi; Maldivian;",
    "nativeName": "ދިވެހި"
  },
  "nl": {
    "name": "Dutch",
    "nativeName": "Nederlands, Vlaams"
  },
  "en": {
    "name": "English",
    "nativeName": "English"
  },
  "eo": {
    "name": "Esperanto",
    "nativeName": "Esperanto"
  },
  "et": {
    "name": "Estonian",
    "nativeName": "eesti, eesti keel"
  },
  "ee": {
    "name": "Ewe",
    "nativeName": "Eʋegbe"
  },
  "fo": {
    "name": "Faroese",
    "nativeName": "føroyskt"
  },
  "fj": {
    "name": "Fijian",
    "nativeName": "vosa Vakaviti"
  },
  "fi": {
    "name": "Finnish",
    "nativeName": "suomi, suomen kieli"
  },
  "fr": {
    "name": "French",
    "nativeName": "français, langue française"
  },
  "ff": {
    "name": "Fula; Fulah; Pulaar; Pular",
    "nativeName": "Fulfulde, Pulaar, Pular"
  },
  "gl": {
    "name": "Galician",
    "nativeName": "Galego"
  },
  "ka": {
    "name": "Georgian",
    "nativeName": "ქართული"
  },
  "de": {
    "name": "German",
    "nativeName": "Deutsch"
  },
  "el": {
    "name": "Greek, Modern",
    "nativeName": "Ελληνικά"
  },
  "gn": {
    "name": "Guaraní",
    "nativeName": "Avañeẽ"
  },
  "gu": {
    "name": "Gujarati",
    "nativeName": "ગુજરાતી"
  },
  "ht": {
    "name": "Haitian; Haitian Creole",
    "nativeName": "Kreyòl ayisyen"
  },
  "ha": {
    "name": "Hausa",
    "nativeName": "Hausa, هَوُسَ"
  },
  "he": {
    "name": "Hebrew (modern)",
    "nativeName": "עברית"
  },
  "hz": {
    "name": "Herero",
    "nativeName": "Otjiherero"
  },
  "hi": {
    "name": "Hindi",
    "nativeName": "हिन्दी, हिंदी"
  },
  "ho": {
    "name": "Hiri Motu",
    "nativeName": "Hiri Motu"
  },
  "hu": {
    "name": "Hungarian",
    "nativeName": "Magyar"
  },
  "ia": {
    "name": "Interlingua",
    "nativeName": "Interlingua"
  },
  "id": {
    "name": "Indonesian",
    "nativeName": "Bahasa Indonesia"
  },
  "ie": {
    "name": "Interlingue",
    "nativeName": "Originally called Occidental; then Interlingue after WWII"
  },
  "ga": {
    "name": "Irish",
    "nativeName": "Gaeilge"
  },
  "ig": {
    "name": "Igbo",
    "nativeName": "Asụsụ Igbo"
  },
  "ik": {
    "name": "Inupiaq",
    "nativeName": "Iñupiaq, Iñupiatun"
  },
  "io": {
    "name": "Ido",
    "nativeName": "Ido"
  },
  "is": {
    "name": "Icelandic",
    "nativeName": "Íslenska"
  },
  "it": {
    "name": "Italian",
    "nativeName": "Italiano"
  },
  "iu": {
    "name": "Inuktitut",
    "nativeName": "ᐃᓄᒃᑎᑐᑦ"
  },
  "ja": {
    "name": "Japanese",
    "nativeName": "日本語 (にほんご／にっぽんご)"
  },
  "jv": {
    "name": "Javanese",
    "nativeName": "basa Jawa"
  },
  "kl": {
    "name": "Kalaallisut, Greenlandic",
    "nativeName": "kalaallisut, kalaallit oqaasii"
  },
  "kn": {
    "name": "Kannada",
    "nativeName": "ಕನ್ನಡ"
  },
  "kr": {
    "name": "Kanuri",
    "nativeName": "Kanuri"
  },
  "ks": {
    "name": "Kashmiri",
    "nativeName": "कश्मीरी, كشميري‎"
  },
  "kk": {
    "name": "Kazakh",
    "nativeName": "Қазақ тілі"
  },
  "km": {
    "name": "Khmer",
    "nativeName": "ភាសាខ្មែរ"
  },
  "ki": {
    "name": "Kikuyu, Gikuyu",
    "nativeName": "Gĩkũyũ"
  },
  "rw": {
    "name": "Kinyarwanda",
    "nativeName": "Ikinyarwanda"
  },
  "ky": {
    "name": "Kirghiz, Kyrgyz",
    "nativeName": "кыргыз тили"
  },
  "kv": {
    "name": "Komi",
    "nativeName": "коми кыв"
  },
  "kg": {
    "name": "Kongo",
    "nativeName": "KiKongo"
  },
  "ko": {
    "name": "Korean",
    "nativeName": "한국어 (韓國語), 조선말 (朝鮮語)"
  },
  "ku": {
    "name": "Kurdish",
    "nativeName": "Kurdî, كوردی‎"
  },
  "kj": {
    "name": "Kwanyama, Kuanyama",
    "nativeName": "Kuanyama"
  },
  "la": {
    "name": "Latin",
    "nativeName": "latine, lingua latina"
  },
  "lb": {
    "name": "Luxembourgish, Letzeburgesch",
    "nativeName": "Lëtzebuergesch"
  },
  "lg": {
    "name": "Luganda",
    "nativeName": "Luganda"
  },
  "li": {
    "name": "Limburgish, Limburgan, Limburger",
    "nativeName": "Limburgs"
  },
  "ln": {
    "name": "Lingala",
    "nativeName": "Lingála"
  },
  "lo": {
    "name": "Lao",
    "nativeName": "ພາສາລາວ"
  },
  "lt": {
    "name": "Lithuanian",
    "nativeName": "lietuvių kalba"
  },
  "lu": {
    "name": "Luba-Katanga",
    "nativeName": ""
  },
  "lv": {
    "name": "Latvian",
    "nativeName": "latviešu valoda"
  },
  "gv": {
    "name": "Manx",
    "nativeName": "Gaelg, Gailck"
  },
  "mk": {
    "name": "Macedonian",
    "nativeName": "македонски јазик"
  },
  "mg": {
    "name": "Malagasy",
    "nativeName": "Malagasy fiteny"
  },
  "ms": {
    "name": "Malay",
    "nativeName": "bahasa Melayu, بهاس ملايو‎"
  },
  "ml": {
    "name": "Malayalam",
    "nativeName": "മലയാളം"
  },
  "mt": {
    "name": "Maltese",
    "nativeName": "Malti"
  },
  "mi": {
    "name": "Māori",
    "nativeName": "te reo Māori"
  },
  "mr": {
    "name": "Marathi (Marāṭhī)",
    "nativeName": "मराठी"
  },
  "mh": {
    "name": "Marshallese",
    "nativeName": "Kajin M̧ajeļ"
  },
  "mn": {
    "name": "Mongolian",
    "nativeName": "монгол"
  },
  "na": {
    "name": "Nauru",
    "nativeName": "Ekakairũ Naoero"
  },
  "nv": {
    "name": "Navajo, Navaho",
    "nativeName": "Diné bizaad, Dinékʼehǰí"
  },
  "nb": {
    "name": "Norwegian Bokmål",
    "nativeName": "Norsk bokmål"
  },
  "nd": {
    "name": "North Ndebele",
    "nativeName": "isiNdebele"
  },
  "ne": {
    "name": "Nepali",
    "nativeName": "नेपाली"
  },
  "ng": {
    "name": "Ndonga",
    "nativeName": "Owambo"
  },
  "nn": {
    "name": "Norwegian Nynorsk",
    "nativeName": "Norsk nynorsk"
  },
  "no": {
    "name": "Norwegian",
    "nativeName": "Norsk"
  },
  "ii": {
    "name": "Nuosu",
    "nativeName": "ꆈꌠ꒿ Nuosuhxop"
  },
  "nr": {
    "name": "South Ndebele",
    "nativeName": "isiNdebele"
  },
  "oc": {
    "name": "Occitan",
    "nativeName": "Occitan"
  },
  "oj": {
    "name": "Ojibwe, Ojibwa",
    "nativeName": "ᐊᓂᔑᓈᐯᒧᐎᓐ"
  },
  "cu": {
    "name": "Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic",
    "nativeName": "ѩзыкъ словѣньскъ"
  },
  "om": {
    "name": "Oromo",
    "nativeName": "Afaan Oromoo"
  },
  "or": {
    "name": "Oriya",
    "nativeName": "ଓଡ଼ିଆ"
  },
  "os": {
    "name": "Ossetian, Ossetic",
    "nativeName": "ирон æвзаг"
  },
  "pa": {
    "name": "Panjabi, Punjabi",
    "nativeName": "ਪੰਜਾਬੀ, پنجابی‎"
  },
  "pi": {
    "name": "Pāli",
    "nativeName": "पाऴि"
  },
  "fa": {
    "name": "Persian",
    "nativeName": "فارسی"
  },
  "pl": {
    "name": "Polish",
    "nativeName": "polski"
  },
  "ps": {
    "name": "Pashto, Pushto",
    "nativeName": "پښتو"
  },
  "pt": {
    "name": "Portuguese",
    "nativeName": "Português"
  },
  "qu": {
    "name": "Quechua",
    "nativeName": "Runa Simi, Kichwa"
  },
  "rm": {
    "name": "Romansh",
    "nativeName": "rumantsch grischun"
  },
  "rn": {
    "name": "Kirundi",
    "nativeName": "kiRundi"
  },
  "ro": {
    "name": "Romanian, Moldavian, Moldovan",
    "nativeName": "română"
  },
  "ru": {
    "name": "Russian",
    "nativeName": "русский язык"
  },
  "sa": {
    "name": "Sanskrit (Saṁskṛta)",
    "nativeName": "संस्कृतम्"
  },
  "sc": {
    "name": "Sardinian",
    "nativeName": "sardu"
  },
  "sd": {
    "name": "Sindhi",
    "nativeName": "सिन्धी, سنڌي، سندھی‎"
  },
  "se": {
    "name": "Northern Sami",
    "nativeName": "Davvisámegiella"
  },
  "sm": {
    "name": "Samoan",
    "nativeName": "gagana faa Samoa"
  },
  "sg": {
    "name": "Sango",
    "nativeName": "yângâ tî sängö"
  },
  "sr": {
    "name": "Serbian",
    "nativeName": "српски језик"
  },
  "gd": {
    "name": "Scottish Gaelic; Gaelic",
    "nativeName": "Gàidhlig"
  },
  "sn": {
    "name": "Shona",
    "nativeName": "chiShona"
  },
  "si": {
    "name": "Sinhala, Sinhalese",
    "nativeName": "සිංහල"
  },
  "sk": {
    "name": "Slovak",
    "nativeName": "slovenčina"
  },
  "sl": {
    "name": "Slovene",
    "nativeName": "slovenščina"
  },
  "so": {
    "name": "Somali",
    "nativeName": "Soomaaliga, af Soomaali"
  },
  "st": {
    "name": "Southern Sotho",
    "nativeName": "Sesotho"
  },
  "es": {
    "name": "Spanish; Castilian",
    "nativeName": "español, castellano"
  },
  "su": {
    "name": "Sundanese",
    "nativeName": "Basa Sunda"
  },
  "sw": {
    "name": "Swahili",
    "nativeName": "Kiswahili"
  },
  "ss": {
    "name": "Swati",
    "nativeName": "SiSwati"
  },
  "sv": {
    "name": "Swedish",
    "nativeName": "svenska"
  },
  "ta": {
    "name": "Tamil",
    "nativeName": "தமிழ்"
  },
  "te": {
    "name": "Telugu",
    "nativeName": "తెలుగు"
  },
  "tg": {
    "name": "Tajik",
    "nativeName": "тоҷикӣ, toğikī, تاجیکی‎"
  },
  "th": {
    "name": "Thai",
    "nativeName": "ไทย"
  },
  "ti": {
    "name": "Tigrinya",
    "nativeName": "ትግርኛ"
  },
  "bo": {
    "name": "Tibetan Standard, Tibetan, Central",
    "nativeName": "བོད་ཡིག"
  },
  "tk": {
    "name": "Turkmen",
    "nativeName": "Türkmen, Түркмен"
  },
  "tl": {
    "name": "Tagalog",
    "nativeName": "Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔"
  },
  "tn": {
    "name": "Tswana",
    "nativeName": "Setswana"
  },
  "to": {
    "name": "Tonga (Tonga Islands)",
    "nativeName": "faka Tonga"
  },
  "tr": {
    "name": "Turkish",
    "nativeName": "Türkçe"
  },
  "ts": {
    "name": "Tsonga",
    "nativeName": "Xitsonga"
  },
  "tt": {
    "name": "Tatar",
    "nativeName": "татарча, tatarça, تاتارچا‎"
  },
  "tw": {
    "name": "Twi",
    "nativeName": "Twi"
  },
  "ty": {
    "name": "Tahitian",
    "nativeName": "Reo Tahiti"
  },
  "ug": {
    "name": "Uighur, Uyghur",
    "nativeName": "Uyƣurqə, ئۇيغۇرچە‎"
  },
  "uk": {
    "name": "Ukrainian",
    "nativeName": "українська"
  },
  "ur": {
    "name": "Urdu",
    "nativeName": "اردو"
  },
  "uz": {
    "name": "Uzbek",
    "nativeName": "zbek, Ўзбек, أۇزبېك‎"
  },
  "ve": {
    "name": "Venda",
    "nativeName": "Tshivenḓa"
  },
  "vi": {
    "name": "Vietnamese",
    "nativeName": "Tiếng Việt"
  },
  "vo": {
    "name": "Volapük",
    "nativeName": "Volapük"
  },
  "wa": {
    "name": "Walloon",
    "nativeName": "Walon"
  },
  "cy": {
    "name": "Welsh",
    "nativeName": "Cymraeg"
  },
  "wo": {
    "name": "Wolof",
    "nativeName": "Wollof"
  },
  "fy": {
    "name": "Western Frisian",
    "nativeName": "Frysk"
  },
  "xh": {
    "name": "Xhosa",
    "nativeName": "isiXhosa"
  },
  "yi": {
    "name": "Yiddish",
    "nativeName": "ייִדיש"
  },
  "yo": {
    "name": "Yoruba",
    "nativeName": "Yorùbá"
  },
  "za": {
    "name": "Zhuang, Chuang",
    "nativeName": "Saɯ cueŋƅ, Saw cuengh"
  }
};

function getLanguageName(value) {
  var key;
  if (value.length == 3) key = window.iso639Converter.from3to1(value);else key = value.slice(0, 2);
  var lang = isoLangs[key];
  return lang ? lang.name : value; //Return value if no hit
}

/**
 * @file emp-shaka.js
 * @module empShaka
 */
//Override npm shaka if external defined for debug
var shaka = window_1.shaka ? window_1.shaka : shakaPlayer_compiled;
var Html5 = videojs.getTech('Html5');
var Tech = videojs.getComponent('Tech');
var TechName = 'EmpShaka';
/**
 * HTML5 Dash Media Controller - Wrapper for HTML5 Media API using MPEG-Dash playback
 *
 * @param {Object=} options Object of option names and values
 * @param {Function=} ready Ready callback function
 * @extends videojs.Html5
 * @class EmpShaka
 */

var EmpShaka = function (_Html) {
  inherits(EmpShaka, _Html);

  function EmpShaka() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    classCallCheck(this, EmpShaka);

    // es6-mixins adds the method to the prototype
    // meaning the second time this object is created the methods are already on the prototype
    // therefore do not merge duplicates
    var _this = possibleConstructorReturn(this, _Html.call(this, options, ready));

    if (!_this.base) {
      es6Mixins(EmpTech, _this, { mergeDuplicates: false });
    }

    _this.isDispose_ = false;

    _this.edgeIELoadingBugWorkaround_();

    // Shaka polyfills, fullscreen has been excluded because VideoJS handles this api
    shaka.polyfill.installAll();

    _this.textTrackChangeBind = _this.textTrackChange.bind(_this);
    _this.textTracks().on('selectedlanguagechange', _this.textTrackChangeBind);

    _this.textTrackAddedBind = _this.textTrackAdded.bind(_this);
    _this.textTracks().on(empPlayerEvents.ADD_TRACK, _this.textTrackAddedBind);

    _this.audioTrackChangeBind = _this.audioTrackChange.bind(_this);
    _this.audioTracks().on(empPlayerEvents.CHANGE, _this.audioTrackChangeBind);

    _this.audioTrackAddedBind = _this.audioTrackAdded.bind(_this);
    _this.audioTracks().on(empPlayerEvents.ADD_TRACK, _this.audioTrackAddedBind);

    _this.onEndedBind = _this.onEnded.bind(_this);
    _this.el_.addEventListener(empPlayerEvents.ENDED, _this.onEndedBind);

    _this.preActiveVariantTrack = null;
    _this.preActiveTextTrack = null;

    _this.onLoadStartBind = _this.onLoadStart.bind(_this);
    _this.on(_this, empPlayerEvents.LOAD_START, _this.onLoadStartBind);
    return _this;
  }

  EmpShaka.prototype.onLoadStart = function onLoadStart(event) {
    this.hasMetadata_ = true;
    log$1('onLoadStart');
    if (this.stopped_) {
      event.stopImmediatePropagation();
      this.trigger({ type: empPlayerEvents.ENDED, bubbles: true });
    }
  };

  /**
   * Disables timeshifting for livestreams
   *
   * Setting this to true, hides the player progress controlbar
   *
   * @param {Boolean} disable
   */


  EmpShaka.prototype.disableTimeShift = function disableTimeShift(disable) {
    if (!this.options_) {
      this.options_ = {
        'timeShiftDisabled': disable
      };
    } else {
      this.options_.timeShiftDisabled = disable;
    }
    this.trigger(empPlayerEvents.DURATION_CHANGE);
  };

  /**
   * Handle source
   *
   * Source handler for dash playback.
   *
   * @param {Object} source Source object for playback
   * @method handleSource
   */


  EmpShaka.prototype.handleSource = function handleSource(source) {
    var _this2 = this;

    //For testing fallback
    //setTimeout(() => {
    //   this.triggerRecoverableError({ code: 1, message: 'test fallback' });
    //}, 30000); 
    if (this.stopTrackingDuration) {
      this.stopTrackingDuration();
    }
    this.stopped_ = false;
    this.ended_ = false;
    this.hasStarted_ = false;
    this.hasMetadata_ = false;
    this.preActiveVariantTrack = null;
    this.preActiveTextTrack = null;
    var options = this.options_;
    options.source = source;
    this.options_ = Object.assign(this.options_, source.options);
    this.currentProgram_ = null;

    var manifestSource = void 0;

    // Do nothing if the src is falsey
    if (!source.src) {
      return;
    }

    this.playToken = source.playToken;

    manifestSource = source.src;
    if (source.live && source.src.indexOf('dynamic') === -1 && !source.isDynamicCachupAsLive) {
      manifestSource += source.src.indexOf('?') >= 0 ? '&dynamic' : '?dynamic';
    }

    this.isDispose_ = false;

    if (!this.shakaPlayer_) {
      // We can re-use the old player. calling the 'load' method automatically calls 'unload' if a previous manifest has
      // been loaded
      this.createPlayer_();
    }
    //Needed for not get Promise rejected error
    else if (!this.el_.paused) {
        //If playing, pause first before load new asset
        this.el_.pause();
      }

    this.shakaPlayer_.resetConfiguration();

    // Default language is defined (in descending order)
    // 1. language set in player options
    // 2. document language (lang attribute on html tag)
    // 3. Browser preferred language
    // 4. 'None'
    var audioLanguage = this.options_.audioLanguage || this.options_.language;
    var textLanguage = this.options_.subtitleLanguage || this.options_.language;
    textLanguage = textLanguage !== 'None' ? textLanguage : '';
    log$1('preferredAudioLanguage', audioLanguage);
    log$1('preferredTextLanguage', textLanguage);
    this.clearTracks(['text']);
    var config = { streaming: {}, abr: {}, restrictions: {}, preferredAudioLanguage: audioLanguage, preferredTextLanguage: textLanguage };
    config.abr.enabled = true;
    // minBandwidth/maxBandwidth bit/sec, from entitlement we get kbit/sec. Not Byte/sec.
    // It's Video+Audio bitrate
    if (source.minBitrate) {
      config.restrictions.minBandwidth = source.minBitrate * 1000;
    }
    if (source.maxBitrate) {
      config.restrictions.maxBandwidth = source.maxBitrate * 1000;
    }
    if (source.maxResWidth) {
      config.restrictions.maxWidth = source.maxResWidth;
    }
    if (source.maxResHeight) {
      config.restrictions.maxHeight = source.maxResHeight;
    }

    //override with custom value
    if (options.maxBitrate) {
      config.restrictions.maxBandwidth = options.maxBitrate * 1000;
    }

    config.manifest = {
      dash: {}
    };

    if (options.clockSyncUri) {
      config.manifest.dash.clockSyncUri = options.clockSyncUri;
    }

    if (source.baseUrl) {
      //Remove Last Directory Part Of BaseUrl, EMP MDN Rule
      var the_arr = source.baseUrl.split('/');
      the_arr.pop(); // last separator
      the_arr.pop(); // last directory
      var baseUrl = the_arr.join('/') + '/';
      config.manifest.dash.baseUrl = baseUrl;
    }

    if (options.liveDelay !== undefined) {
      config.manifest.dash.liveDelay = options.liveDelay;
    }

    if (options.abr) {
      if (options.abr.defaultBandwidthEstimate) {
        config.abr.defaultBandwidthEstimate = options.abr.defaultBandwidthEstimate;
      }
      if (options.abr.bandwidth_upgrade_target) {
        config.abr.bandwidthUpgradeTarget = options.abr.bandwidth_upgrade_target;
      }
      if (options.abr.bandwidth_downgrade_target) {
        config.abr.bandwidthDowngradeTarget = options.abr.bandwidth_downgrade_target;
      }
      if (options.abr.switch_interval_ms) {
        config.abr.switchInterval = options.abr.switch_interval_ms / 1000;
      }
    }

    config.streaming = {
      retryParameters: {
        maxAttempts: 6,
        baseDelay: 1000,
        backoffFactor: 2,
        fuzzFactor: 0.5,
        timeout: 0
      },
      failureCallback: this.streamingFailureCallback.bind(this),
      ignoreTextStreamFailures: true
    };

    if (window_1.navigator.userAgent.indexOf('Android') === -1) {
      config.drm = {
        advanced: {
          'com.widevine.alpha': {
            'videoRobustness': 'SW_SECURE_DECODE',
            'audioRobustness': 'SW_SECURE_CRYPTO'
          }
        }
      };
    } else {
      //Android
      config.drm = {
        advanced: {
          'com.widevine.alpha': {
            'videoRobustness': 'SW_SECURE_CRYPTO',
            'audioRobustness': 'SW_SECURE_CRYPTO'
          }
        }
      };
    }

    if (source.licenseServer) {
      config.drm.servers = {
        'com.widevine.alpha': source.licenseServer,
        'com.microsoft.playready': source.licenseServer,
        'com.adobe.primetime': source.licenseServer
      };
    } else if (source.licenseServers) {
      config.drm.servers = source.licenseServers;
    }

    this.shakaPlayer_.configure(config);
    this.shakaPlayer_.setTextTrackVisibility(textLanguage !== '');

    // Configure network filters
    var networkingEngine = this.shakaPlayer_.getNetworkingEngine();
    networkingEngine.clearAllRequestFilters();
    networkingEngine.clearAllResponseFilters();

    // Filter requests and set auth header
    if (this.playToken) {
      var header = { 'Authorization': 'Bearer ' + this.playToken };
      var filter = this.addLicenseRequestHeaders.bind(null, header);
      networkingEngine.registerRequestFilter(filter);
    }

    var startTime;
    // In order to start from the beginning of live stream send 0.1s as startTime
    if (this.options_.startTime > 0) {
      if (!this.options._timeShiftDisabled) {
        startTime = this.options_.startTime;
      }
    }
    log$1('before load stream');
    this.shakaPlayer_.load(manifestSource, startTime).then(function () {
      log$1('after load stream');
      _this2.triggerReady();
      _this2.trackDuration();
    })['catch'](function (error) {
      if (error.code === shaka.util.Error.Code.LOAD_INTERRUPTED) {
        log$1('Shaka load() interrupted');
      } else {
        _this2.checkForRecoverableErrors(error);
      }
    });
  };

  EmpShaka.prototype.streamingFailureCallback = function streamingFailureCallback(error) {
    //The default streamingFailureCallback will infiniteRetriesForLiveStreams
    //Error will be fire later
    log$1(TechName, 'Streaming Failure', error);
  };

  EmpShaka.prototype.techVersion = function techVersion() {
    if (shaka && shaka.Player) {
      return shaka.Player.version || 'N/A';
    }
    return 'N/A';
  };

  /**
   * Temporary bug fix to overcome shaka bug in IE/Edge where the loading spinner never disapears after seek occurs.
   * @private
   */


  EmpShaka.prototype.edgeIELoadingBugWorkaround_ = function edgeIELoadingBugWorkaround_() {
    this.on(empPlayerEvents.SEEKED, function () {
      var loadings = document_1.getElementsByClassName('vjs-waiting');
      [].forEach.call(loadings, function (loadingEl) {
        if (loadingEl && loadingEl.classList) {
          loadingEl.classList.remove('vjs-waiting');
        }
      });
    });
  };

  /**
   * Creates an instance of Shaka.Player for use and sets the relevant listeners
   * @private
   */


  EmpShaka.prototype.createPlayer_ = function createPlayer_() {
    var _this3 = this;

    log$1('createPlayer Shaka');
    this.shakaPlayer_ = new shaka.Player(this.el_);

    this.shakaPlayer_.addEventListener('texttrackvisibility', function (event) {
      log$1('texttrackvisibility', _this3.hasMetadata_, _this3.shakaPlayer_.isTextTrackVisible());
      if (_this3.hasMetadata_) {
        _this3.syncVideojsTexttrackVisibility();
      }
    });

    this.shakaPlayer_.addEventListener('adaptation', function (event) {
      log$1('Shaka adaptationchanged');
      if (!_this3.hasMetadata_) {
        return;
      }
      //For debug
      //var state = this.shakaPlayer_.getStats();
      //log('Shaka state', state.estimatedBandwidth, state.streamBandwidth, state.switchHistory.length, state.switchHistory);
      //if(state.switchHistory.length > 1) {
      //  log('switchHistory1', state.switchHistory[state.switchHistory.length -2].id, state.switchHistory[state.switchHistory.length -2].type, state.switchHistory[state.switchHistory.length -2].bandwidth);
      //  log('switchHistory2', state.switchHistory[state.switchHistory.length -1].id, state.switchHistory[state.switchHistory.length -1].type, state.switchHistory[state.switchHistory.length -1].bandwidth);
      //}

      var activeVariantTrack = _this3.getActiveVariantTrack();
      var activeTextTrack = _this3.getActiveTextTrack();

      if (_this3.preActiveVariantTrack === null || activeVariantTrack.language !== _this3.preActiveVariantTrack.language) {
        _this3.blockLocalTrackChange = true;
        _this3.configureVideojsAudioTracks();
      }

      if (_this3.preActiveTextTrack === null || activeTextTrack && activeTextTrack.language !== _this3.preActiveTextTrack.language) {
        //Shaka bug fix
        if (_this3.preActiveTextTrack === null && _this3.shakaPlayer_.getConfiguration().preferredTextLanguage === '' && _this3.shakaPlayer_.isTextTrackVisible()) {
          _this3.shakaPlayer_.setTextTrackVisibility(false);
        }
        if (_this3.shakaPlayer_.getTextTracks().length || _this3.textTracks().length) {
          _this3.blockLocalTrackChange = true;
          _this3.configureVideojsTextTracks();
        }
      }

      if (_this3.preActiveVariantTrack && activeVariantTrack.videoBandwidth !== _this3.preActiveVariantTrack.videoBandwidth) {
        log$1('BITRATE_CHANGED', activeVariantTrack.videoBandwidth);
        _this3.trigger({ type: empPlayerEvents.BITRATE_CHANGED, bubbles: true }, { bitrate: activeVariantTrack.videoBandwidth, auto: false });
      }

      _this3.stopBlockLocalTrackChange('adaptationchanged');

      _this3.preActiveVariantTrack = activeVariantTrack;
      _this3.preActiveTextTrack = activeTextTrack;
    });

    this.shakaPlayer_.addEventListener('trackschanged', function (event) {
      log$1('Shaka trackschanged', event);
      //TODO: With multi periods we maybe have to update tracks and send TRACK_CHANGE from here.
    });

    this.shakaPlayer_.addEventListener('error', function (event) {
      _this3.checkForRecoverableErrors(event.detail);
    });

    this.shakaPlayer_.addEventListener('buffering', function (event) {
      //Shaka player send buffering after ended and stop
      if (!_this3.stopped_ && !_this3.ended_) {
        log$1('buffering', event, event ? event.buffering : null);
        if (event.buffering) {
          _this3.trigger({ type: empPlayerEvents.WAITING, bubbles: true });
        } else {
          if (_this3.paused()) {
            _this3.trigger({ type: empPlayerEvents.PAUSE, bubbles: true });
          } else {
            _this3.trigger({ type: empPlayerEvents.PLAYING, bubbles: true });
          }
        }
      }
    });
  };

  EmpShaka.prototype.addErrorMessage = function addErrorMessage(error) {
    if (error.message) return;
    var categoryName = 'UNKNOWN';
    var codeName = 'UNKNOWN';

    for (var k in shaka.util.Error.Category) {
      if (shaka.util.Error.Category[k] === error.category) categoryName = k;
    }
    for (var c in shaka.util.Error.Code) {
      if (shaka.util.Error.Code[c] === error.code) codeName = c;
    }
    error.message = categoryName + ' ' + codeName;
  };

  /**
  * Check for recoverable errors
  * allows the player to fallback to another tech
  *
  * @param {Object} error
  * @private
  */


  EmpShaka.prototype.checkForRecoverableErrors = function checkForRecoverableErrors(error) {
    this.addErrorMessage(error);
    if (error && error.data && error.data.length > 0) {
      log$1.error(TechName, error.code, error.data, error.message);
    }
    switch (error.category) {
      // 404s on MPD
      case 1:
        if (error.code === 1002) {
          this.triggerRecoverableError(error);
          break;
        }
      /* falls through */
      // Errors parsing or processing audio or video streams.
      case 3:
        //Ignore Reload error from previous mediasource
        if (error.code === 3015) return;
        this.triggerRecoverableError(error);
        break;
      // Errors parsing the Manifest.
      case 4:
        this.triggerRecoverableError(error);
        break;
      // Errors related to DRM.
      case 6:
        this.triggerRecoverableError(error);
        break;
      default:
        this.trigger(empPlayerEvents.ERROR, error);
        break;
    }
  };

  EmpShaka.prototype.stop = function stop(afterStopCallback) {
    var _this4 = this;

    this.stopped_ = true;
    this.stopTrackingDuration();
    if (this.shakaPlayer_) {
      this.hasMetadata_ = false;
      this.shakaPlayer_.unload().then(function () {
        _this4.clearTracks(['text']);
        _this4.clearTracks(['audio']);
        _this4.trigger({ type: empPlayerEvents.PAUSE, bubbles: true });
        _this4.trigger({ type: empPlayerEvents.ABORT, bubbles: true });
        _this4.trigger({ type: empPlayerEvents.STOPPED, bubbles: true });
        if (afterStopCallback) {
          afterStopCallback();
        }
      });
    }
  };

  EmpShaka.prototype.onEnded = function onEnded(event) {
    this.ended_ = true;
    this.stopTrackingDuration();
    if (this.shakaPlayer_) {
      this.reset();
    }
  };

  EmpShaka.prototype.reset = function reset() {
    this.hasMetadata_ = false;
    this.clearTracks(['text']);
    this.clearTracks(['audio']);
    _Html.prototype.reset.call(this);
  };

  /**
   * Adds headers to the license requests
   *
   * @param {!Object.<string, string>} headers
   * @param {shaka.net.NetworkingEngine.RequestType} requestType
   * @param {shakaExtern.Request} request
   */


  EmpShaka.prototype.addLicenseRequestHeaders = function addLicenseRequestHeaders(headers, requestType, request) {
    if (requestType !== shaka.net.NetworkingEngine.RequestType.LICENSE) {
      return;
    }

    // Add these to the existing headers.  Do not clobber them!
    // For PlayReady, there will already be headers in the request.
    for (var field in headers) {
      request.headers[field] = headers[field];
    }
  };

  /**
  * Is current playback live or not?
  *
  * @return {Boolean} whether or not current playback is live
  */


  EmpShaka.prototype.live = function live() {
    if (this.shakaPlayer_) {
      return this.shakaPlayer_.isLive();
    } else if (this.options_ && this.options_.source) {
      return this.options_.source.live;
    }
    return false;
  };

  /**
   * Duration
   *
   * Total length of the video
   *
   * @return {Number} The duration of the video in seconds
   */


  EmpShaka.prototype.duration = function duration() {
    if (this.live()) {
      if (this.timeShiftEnabled()) {
        if (!this.shakaPlayer_) {
          return 0;
        }
        var seekRange = this.shakaPlayer_.seekRange();
        var duration = seekRange.end;
        return duration;
        // No progress control
      } else {
        return Infinity;
      }
    }
    return _Html.prototype.duration.call(this);
  };

  /**
   * currentTime
   *
   * The time at which the video is currently playing
   *
   * @return {Number} Current time in seconds
   */


  EmpShaka.prototype.currentTime = function currentTime() {
    if (!this.shakaPlayer_) {
      return 0;
    }

    var currentTime = _Html.prototype.currentTime.call(this);

    // Return currentTime based on seekRange
    if (this.live() && this.duration() !== Infinity) {
      var seekRange = this.shakaPlayer_.seekRange();
      var behindLive = Math.floor(seekRange.end - currentTime);
      var duration = this.duration();
      currentTime = Math.max(0, duration - behindLive);
    }
    return currentTime;
  };

  EmpShaka.prototype.baseCurrentTime = function baseCurrentTime() {
    return _Html.prototype.currentTime.call(this);
  };

  EmpShaka.prototype.setAbsoluteTime = function setAbsoluteTime(value) {
    log$1('setAbsoluteTime', value.date);
    try {
      if (this.live()) {
        var moreAccurateTime = (value.date - this.startTimeLive()) / 1000;
        log$1('setAbsoluteTime setCurrentTime', moreAccurateTime);
        this.setCurrentTime(moreAccurateTime);
      }
      //VOD
      else {
          this.setCurrentTime(value.date / 1000);
        }
    } catch (e) {
      log$1.error(e);
    }
  };

  EmpShaka.prototype.getAbsoluteTime = function getAbsoluteTime() {
    if (!this.shakaPlayer_) {
      return 0;
    }
    return this.shakaPlayer_.getPlayheadTimeAsDate();
  };

  EmpShaka.prototype.timeBehindLive = function timeBehindLive() {
    if (!this.shakaPlayer_ || !this.live()) {
      return 0;
    }
    var seekRange = this.shakaPlayer_.seekRange();
    var currentTime = _Html.prototype.currentTime.call(this);
    return Math.floor(seekRange.end - currentTime);
  };

  EmpShaka.prototype.startTimeLive = function startTimeLive() {
    if (this.shakaPlayer_ && this.shakaPlayer_.getPresentationStartTimeAsDate()) {
      return this.shakaPlayer_.getPresentationStartTimeAsDate().getTime();
    }
    return 0;
  };

  //It's ok to seek to beginning or end


  EmpShaka.prototype.allowJump_ = function allowJump_(time) {
    var seekRange = this.shakaPlayer_.seekRange();
    if (time > seekRange.end - 2) {
      return true;
    }
    return time < 2;
  };

  /**
   * Set current time
   *
   * @param {Number} time Current time of video
   * @method setCurrentTime
   */


  EmpShaka.prototype.setCurrentTime = function setCurrentTime(time) {
    var _this5 = this;

    // handle restrictions
    if (this.options_.source) {
      if (this.options_.source.ffEnabled === false && !this.allowJump_(time)) {
        if (this.currentTime() <= time) return;
      }
      if (this.options_.source.rwEnabled === false && !this.allowJump_(time)) {
        if (this.currentTime() >= time) return;
      }
    }

    if (this.live()) {
      var seekRange = this.shakaPlayer_.seekRange();
      // Clamp to seek range
      time = time > seekRange.start ? time : seekRange.start;
      time = time < seekRange.end ? time : seekRange.end;
      _Html.prototype.setCurrentTime.call(this, time);
    } else {
      this.shakaPlayer_.segmentExist(time).then(function () {
        log$1('segmentExist sucess');
        _Html.prototype.setCurrentTime.call(_this5, time);
      })['catch'](function (error) {
        log$1('segmentExist faild', error);
        this.trigger({ type: empPlayerEvents.SEGMENT_MISSING, bubbles: true });
        return;
      }.bind(this));
    }
  };

  /**
   * Get timeShiftEnabled
   * @return {Boolean} if timeShift is enabled
   */


  EmpShaka.prototype.timeShiftEnabled = function timeShiftEnabled() {
    return this.options_.timeShiftDisabled === false;
  };

  /**
   * Returns a list of available bitrates
   *
   * @return {Number[]}) Array of available bitrates
   */


  EmpShaka.prototype.bitrates = function bitrates() {
    if (!this.shakaPlayer_) {
      return [];
    }

    var activeVariantTrack = this.getActiveVariantTrack();
    var variantTracks = this.getVariantTracks();
    var bitrateList = [];

    variantTracks.forEach(function (track) {
      //Add only unique videoBandwidth
      if (track.language === activeVariantTrack.language && bitrateList.indexOf(track.videoBandwidth) === -1) {
        bitrateList.push(track.videoBandwidth);
      }
    });
    bitrateList = bitrateList.reverse();
    return bitrateList;
  };

  /**
   * Get/Set bitrate
   *
   * Will return a bitrate equal to the current video bitrate. However if ABR is enabled will return 0 to indicate a non-fixed bitrate.
   *
   * Setting this value disable dynamic switching, and fixes the bitrate as specified.
   * To set a ceiling, but allow it to dynamically switch quality when
   * able use setMaxBitrate instead
   *
   * @throws TypeError Invalid bitrate specified.
   * @param {Number} value Bitrate to set. 0 to 'reset' back to ABR
   * @return {Number} bitrate when getting
   */


  EmpShaka.prototype.bitrate = function bitrate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var activeVariantTrack = this.getActiveVariantTrack();
    if (value == null) {
      // Get video bitrate
      var config = this.shakaPlayer_.getConfiguration();
      if (config.abr.enabled) {
        return 0;
      } else if (activeVariantTrack) {
        return activeVariantTrack.videoBandwidth;
      }
      return 0;
    } else if (value === 0) {
      // Reset bitrate, it should auto switch again.
      this.shakaPlayer_.configure({ abr: { enabled: true } });
      this.trigger({ type: empPlayerEvents.BITRATE_CHANGED, bubbles: true }, { bitrate: value, auto: false });
      return;
    } else {
      // Set bitrate and stop auto switch.
      var variantTracks = this.getVariantTracks();
      var newTrack = null;
      for (var i = 0; i < variantTracks.length; i++) {
        var track = variantTracks[i];
        if (track.videoBandwidth === value && track.language === activeVariantTrack.language) {
          newTrack = track;
          break;
        }
      }

      if (newTrack === null) {
        throw new TypeError('Invalid bitrate specified.');
      }
      this.shakaPlayer_.configure({ abr: { enabled: false } });
      // Finnaly, set the bitrate
      this.shakaPlayer_.selectVariantTrack(newTrack, true);
      this.trigger({ type: empPlayerEvents.BITRATE_CHANGED, bubbles: true }, { bitrate: value, auto: false });
    }
  };

  /**
   * Get current bitrate
   *
   * Always returns the current bitrate, unlike bitrate() which returns 0 if ABR is enabled
   *
   * @return {Number} bitrate
   */


  EmpShaka.prototype.getBitrate = function getBitrate() {
    var activeVariantTrack = this.getActiveVariantTrack();
    if (activeVariantTrack) {
      return activeVariantTrack.videoBandwidth;
    }
    return 0;
  };

  /**
   * Is Dash supported?
   * @returns {boolean}
   */


  EmpShaka.isSupported = function isSupported() {

    // Dash is definitely not supported if HTML5 video isn't
    if (!videojs.getTech('Html5').isSupported()) {
      return false;
    }

    var hasWebKit = 'WebKitMediaSource' in window_1;
    var hasMediaSource = 'MediaSource' in window_1;

    return hasWebKit || hasMediaSource;
  };

  /**
   * Define source handler options.
   *
   * These options check whether or not we can playback the source object.
   *
   * @returns {Object}
   * @static
   */


  /**
   * Set max bitrate
   *
   * Setting this to NaN will clear the max bitrate
   *
   * @param {Number} bitrate in kbps
   */
  EmpShaka.prototype.setMaxBitrate = function setMaxBitrate(bitrate) {
    if (this.shakaPlayer_) {
      // set to max
      if (isNaN(bitrate)) {
        bitrate = Number.POSITIVE_INFINITY;
      } else {
        bitrate * 1000;
      }

      var config = { restrictions: { maxBandwidth: bitrate } };
      this.shakaPlayer_.configure(config);
      // Updates the bitrate button
      this.trigger(empPlayerEvents.LOADED_DATA);
    } else {
      this.options_.maxBitrate = bitrate;
    }
  };

  /**
   * Get bitrate
   * @returns {Number} bitrate in kbps
   */


  EmpShaka.prototype.getMaxBitrate = function getMaxBitrate() {
    if (this.shakaPlayer_) {
      var config = this.shakaPlayer_.getConfiguration();
      if (config.restrictions.maxBandwidth) {
        return config.restrictions.maxBandwidth / 1000;
      } else {
        return config.restrictions.maxBandwidth;
      }
    } else {
      return this.options_.maxBitrate;
    }
  };

  /**
   * Return the object presentation of the play-request required for the entitlement engine
   */


  /**
   * Returns true if the playback can be restarted
   */
  EmpShaka.prototype.canRestart = function canRestart() {
    return !this.live() || this.timeShiftEnabled();
  };

  /**
   * Get the current track of a specific type
   *
   * @param {String} type track type (deprecated in Shaka 2.2)
   * @private
   */


  EmpShaka.prototype.getActiveVariantTrack = function getActiveVariantTrack() {
    var variantTracks = this.getVariantTracks();
    for (var i = 0; i < variantTracks.length; i++) {
      var track = variantTracks[i];
      if (track.active) {
        return track;
      }
    }

    return null;
  };

  /**
   * Get all variantTracks
   *
   * @param {String} type track type (deprecated in Shaka 2.2)
   * @returns {Array} Array with Track items
   * @private
   */


  EmpShaka.prototype.getVariantTracks = function getVariantTracks() {
    var variantTracks = this.shakaPlayer_.getVariantTracks();
    return variantTracks;
  };

  ///////////////////// Audio tracks


  /**
  * isAudioTrackSynchronized
  *
  * @private
  */


  EmpShaka.prototype.isAudioTrackSynchronized = function isAudioTrackSynchronized() {
    var shakaVariantTracksLanguages = this.shakaPlayer_.getVariantTracks().map(function (track) {
      return track.language;
    }).filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });

    shakaVariantTracksLanguages = shakaVariantTracksLanguages.sort();

    var videojsAudioTracks = this.audioTracks();
    var videojsAudioTracksLanguages = [];
    for (var i = 0; i < videojsAudioTracks.length; i++) {
      videojsAudioTracksLanguages.push(videojsAudioTracks[i].language);
    }
    videojsAudioTracksLanguages = videojsAudioTracksLanguages.sort();

    var isSync = shakaVariantTracksLanguages.join() === videojsAudioTracksLanguages.join();
    //log('isAudioTrackSynchronized', isSync, shakaVariantTracksLanguages.join(), videojsAudioTracksLanguages.join());
    log$1('isAudioTrackSynchronized', isSync);
    return isSync;
  };

  /**
   * Configure audio tracks
   *
   * Adds available audio tracks to the video
   * @private
   */


  EmpShaka.prototype.configureVideojsAudioTracks = function configureVideojsAudioTracks() {
    var _this6 = this;

    if (this.isAudioTrackSynchronized()) {
      this.selectVideojsAudioLanguage(this.getSelectedShakaAudioLanguage());
      return;
    }

    log$1('configureVideojsAudioTracks');
    var variantTracks = this.getVariantTracks();
    // Clear current audio tracks 
    this.clearTracks(['audio']);

    // Audio tracks can have multiple bitrates, filter out the highest for each language
    var filteredTracks = {};
    variantTracks.forEach(function (variantTrack) {
      var language = variantTrack.language;

      // Check if language has been added already
      if (filteredTracks.hasOwnProperty(language)) {
        var track = filteredTracks[language];

        // replace the filtered track if the current track contains a higher bandwidth
        if (variantTrack.audioBandwidth > track.audioBandwidth) {
          filteredTracks[language] = variantTrack;
        }
        // Language hasn't been added yet
      } else {
        filteredTracks[language] = variantTrack;
      }
    });
    var activeVariantTrack = this.getActiveVariantTrack();
    /*
     Videojs AudioTrack kind
      "alternative": A possible alternative to the main track.
      "descriptions": An audio description of a video track.
      "main": The primary audio track for this video.
      "main-desc": The primary audio track, mixed with audio descriptions.
      "translation": A translated version of the main audio track.
      "commentary": Commentary on the primary audio track, e.g. a director's commentary.
      "" (default): No explicit kind, or the kind given by the track's metadata is not recognized by the user agent.
    */
    Object.keys(filteredTracks).forEach(function (key) {
      var audioTrack = filteredTracks[key];
      _this6.addAudioTrack(audioTrack.kind, getLanguageName(audioTrack.language).split(';')[0], audioTrack.language, audioTrack.language === activeVariantTrack.language);
    });
  };

  /**
  * selectShakaAudioLanguage
  *
  * @private
  */


  EmpShaka.prototype.selectShakaAudioLanguage = function selectShakaAudioLanguage(languageCode) {
    if (languageCode) {
      //Make selection sticky
      if (!this.options_) {
        this.options_ = {
          'audioLanguage': languageCode
        };
      } else {
        this.options_.audioLanguage = languageCode;
      }

      if (languageCode !== this.getSelectedShakaAudioLanguage()) {
        log$1('selectShakaAudioLanguage', languageCode);
        this.shakaPlayer_.selectAudioLanguage(languageCode);
      }
    }
  };

  /**
   * getSelectedShakaAudioLanguage
   *
   * @private
   */


  EmpShaka.prototype.getSelectedShakaAudioLanguage = function getSelectedShakaAudioLanguage() {
    if (!this.shakaPlayer_) {
      return null;
    }
    var activeVariantTrack = this.getActiveVariantTrack();
    return activeVariantTrack ? activeVariantTrack.language : null;
  };

  /**
   * VideoJS audioTrackChange
   * One of the VideoJS audio track changed its enabled
   *
   * @private
   */


  EmpShaka.prototype.audioTrackChange = function audioTrackChange(event) {
    if (this.blockLocalTrackChange) {
      log$1('blockLocalTrackChange', 'audioTrackChange');
      return;
    }
    log$1('onAudioTrackChange');
    var audioTracks = this.audioTracks();
    var i = audioTracks.length;
    while (i--) {
      var track = audioTracks[i];
      if (track.enabled) {
        this.selectShakaAudioLanguage(track.language);
        return;
      }
    }
  };

  /**
  * selectVideojsAudioLanguage
  *
  * @private
  */


  EmpShaka.prototype.selectVideojsAudioLanguage = function selectVideojsAudioLanguage(languageCode) {
    log$1('selectVideojsAudioLanguage', languageCode);
    if (languageCode) {
      var audioTracks = this.audioTracks();
      var i = audioTracks.length;
      while (i--) {
        var track = audioTracks[i];
        if (track.language === languageCode && !track.enabled) {
          this.blockLocalTrackChange = true;
          track.enabled = true;
          return;
        }
      }
      this.stopBlockLocalTrackChange('selectVideojsAudioLanguage');
    }
  };

  /**
  * Called when a VideoJS audio track has been added
  *
  * @private
  */


  EmpShaka.prototype.audioTrackAdded = function audioTrackAdded(event) {
    //No code here
    log$1('videojs audioTrackAdded', event);
  };

  //////////////////////////// Text tracks


  /**
  * get Shaka ActiveTextTrack
  *
  * @private
  */


  EmpShaka.prototype.getActiveTextTrack = function getActiveTextTrack() {
    var textTracks = this.shakaPlayer_.getTextTracks();
    var activeTextTrack = textTracks.filter(function (track) {
      return track.active;
    });
    return activeTextTrack.length > 0 ? activeTextTrack[0] : null;
  };

  /**
  * getSelectedShakaTextLanguage
  *
  * @private
  */


  EmpShaka.prototype.getSelectedShakaTextLanguage = function getSelectedShakaTextLanguage() {
    if (!this.shakaPlayer_) {
      return null;
    }
    var activeTextTrack = this.getActiveTextTrack();
    return activeTextTrack && this.shakaPlayer_.isTextTrackVisible() ? activeTextTrack.language : null;
  };

  /**
   * isTextTrackSynchronized
   *
   * @private
   */


  EmpShaka.prototype.isTextTrackSynchronized = function isTextTrackSynchronized() {
    var shakaTextTracksLanguages = this.shakaPlayer_.getTextTracks().map(function (track) {
      return track.language;
    });
    shakaTextTracksLanguages = shakaTextTracksLanguages.sort();

    var videojsTextTracks = this.textTracks();
    var videojsTextTracksLanguages = [];
    for (var i = 0; i < videojsTextTracks.length; i++) {
      videojsTextTracksLanguages.push(videojsTextTracks[i].language);
    }
    videojsTextTracksLanguages = videojsTextTracksLanguages.sort();

    var isSync = shakaTextTracksLanguages.join() === videojsTextTracksLanguages.join();
    //log('isTextTrackSynchronized', isSync, shakaTextTracksLanguages.join(), videojsTextTracksLanguages.join());
    log$1('isTextTrackSynchronized', isSync);
    return isSync;
  };

  /**
  * syncVideojsTexttrackVisibility
  *
  * @private
  */


  EmpShaka.prototype.syncVideojsTexttrackVisibility = function syncVideojsTexttrackVisibility() {
    log$1('syncVideojsTexttrackVisibility');
    this.blockLocalTrackChange = true;
    var textTracks = this.textTracks();
    var i = textTracks.length;
    if (!this.shakaPlayer_.isTextTrackVisible()) {
      while (i--) {
        var track = textTracks[i];
        if (track.mode === 'showing') {
          track.mode = 'hidden';
        }
      }
    } else {
      var selectedShakaTextLanguage = this.getSelectedShakaTextLanguage();
      while (i--) {
        var track = textTracks[i];
        if (track.language === selectedShakaTextLanguage && track.mode !== 'showing') {
          track.mode = 'showing';
        } else if (track.language !== selectedShakaTextLanguage && track.mode !== 'disabled') {
          track.mode = 'disabled';
        }
      }
    }
    this.stopBlockLocalTrackChange('syncVideojsTexttrackVisibility');
  };

  /**
   * Configure text tracks
   *
   * Clear all videojs text tracks then Adds shaka text tracks to the videojs
   * @private
   */


  EmpShaka.prototype.configureVideojsTextTracks = function configureVideojsTextTracks() {
    var _this7 = this;

    if (this.isTextTrackSynchronized()) {
      this.selectVideojsTextLanguage(this.getSelectedShakaTextLanguage());
      return;
    }

    this.blockLocalTrackChange = true;
    log$1('configureVideojsTextTracks');
    // Clear videojs text tracks
    this.clearTracks(['text']);

    // Add available text tracks to videojs
    var textTracks = this.shakaPlayer_.getTextTracks();
    var selectedVideojsTrack = void 0;
    var selectedShakaTextLanguage = this.getSelectedShakaTextLanguage();
    /*
     Videojs TextTrack kind
      "subtitles" (default): Translations of the dialogue in the video for when audio is available but not understood. Subtitles are shown over the video.
      "captions": Transcription of the dialogue, sound effects, musical cues, and other audio information for viewer who are deaf/hard of hearing, or the video is muted. Captions are also shown over the video.
      "chapters": Chapter titles that are used to create navigation within the video. Typically, these are in the form of a list of chapters that the viewer can use to navigate the video.
      "descriptions": Text descriptions of the action in the content for when the video portion isn't available or because the viewer is blind or not using a screen. Descriptions are read by a screen reader or turned into a separate audio track.
      "metadata": Tracks that have data meant for JavaScript to parse and do something with. These aren't shown to the user
    */
    textTracks.forEach(function (track) {
      var newTrack = _this7.addTextTrack(track.kind ? track.kind : 'subtitles', getLanguageName(track.language).split(';')[0], track.language);
      if (selectedShakaTextLanguage === track.language) {
        selectedVideojsTrack = newTrack;
      }
    });
    //We need change mode after all tracks are added for UI menu to work.
    if (selectedVideojsTrack) {
      selectedVideojsTrack.mode = 'showing';
      if (!this.shakaPlayer_.isTextTrackVisible()) {
        this.shakaPlayer_.setTextTrackVisibility(true);
      }
    } else {
      this.shakaPlayer_.setTextTrackVisibility(true);
    }
  };

  /**
  * selectVideojsTextLanguage
  *
  * @private
  */


  EmpShaka.prototype.selectVideojsTextLanguage = function selectVideojsTextLanguage(languageCode) {
    log$1('selectVideojsTextLanguage', languageCode);
    var textTracks = this.textTracks();
    var i = textTracks.length;
    while (i--) {
      var track = textTracks[i];
      if (languageCode === track.language && track.mode !== 'showing') {
        this.blockLocalTrackChange = true;
        track.mode === 'showing';
      } else if (languageCode !== track.language && track.mode === 'showing') {
        this.blockLocalTrackChange = true;
        track.mode === 'disabled';
        return;
      }
    }
    this.stopBlockLocalTrackChange('selectVideojsAudioLanguage');
  };

  /**
   * VideoJS Text track change
   *
   * One of the VideoJS text track changed its mode
   *
   * @private
   */


  EmpShaka.prototype.textTrackChange = function textTrackChange(event) {
    if (this.blockLocalTrackChange) {
      log$1('blockLocalTrackChange', 'textTrackChange');
      return;
    }

    log$1('ontextTrackChange');
    var textTracks = this.textTracks();
    var i = textTracks.length;
    while (i--) {
      var track = textTracks[i];
      if (track.mode === 'showing') {
        this.deferredSelectTextTrack(track.language);
        return;
      }
    }
    this.deferredSelectTextTrack(null);
  };

  /**
  * deferredSelectTextTrack
  * When changing tracklist we get many onTextTrackChange, wait to the update is done
  *
  * @private
  */


  EmpShaka.prototype.deferredSelectTextTrack = function deferredSelectTextTrack(languageCode) {
    log$1('deferredSelectTextTrack enter', languageCode);
    if (this.deferredTextTrackChangeTimeOut) {
      //Reset TrackChange, new selection comming in
      clearTimeout(this.deferredTextTrackChangeTimeOut);
    }
    this.deferredTextTrackChangeTimeOut = setTimeout(function () {
      log$1('update texttrack');
      clearTimeout(this.deferredTextTrackChangeTimeOut);
      this.deferredTextTrackChangeTimeOut = null;
      if (this.isDispose_) {
        return;
      }
      this.blockLocalTrackChange = true;

      this.selectShakaTextLanguage(languageCode);
      this.stopBlockLocalTrackChange('deferredSelectTextTrack exit');
    }.bind(this), 1000); // 1 sec
  };

  /**
  * selectShakaTextLanguage
  *
  * @private
  */


  EmpShaka.prototype.selectShakaTextLanguage = function selectShakaTextLanguage(languageCode) {
    if (languageCode) {
      // Show text track
      if (this.getSelectedShakaTextLanguage() !== languageCode) {
        log$1('select Shaka texttrack', languageCode);
        this.shakaPlayer_.selectTextLanguage(languageCode);
      }
      if (!this.shakaPlayer_.isTextTrackVisible()) {
        log$1('Shaka texttrack', 'show');
        this.shakaPlayer_.setTextTrackVisibility(true);
      }
    } else {
      // Hide text track
      if (this.shakaPlayer_.isTextTrackVisible()) {
        log$1('Shaka texttrack', 'hide');
        this.shakaPlayer_.setTextTrackVisibility(false);
      }
    }
    languageCode = languageCode ? languageCode : 'None';
    //Make selection sticky
    if (!this.options_) {
      this.options_ = {
        'subtitleLanguage': languageCode
      };
    } else {
      this.options_.subtitleLanguage = languageCode;
    }
  };

  /**
   * Called when a VideoJS text track has been added
   *
   * @private
   */


  EmpShaka.prototype.textTrackAdded = function textTrackAdded(event) {
    //No code here
    log$1('videojs textTrackAdded', event);
  };

  /////////////////// Text tracks end

  EmpShaka.prototype.stopBlockLocalTrackChange = function stopBlockLocalTrackChange(caller) {
    if (this.blockLocalTrackChange) {
      if (this.blockLocalTrackChangeTimeOut) {
        clearTimeout(this.blockLocalTrackChangeTimeOut);
      }

      this.blockLocalTrackChangeTimeOut = setTimeout(function () {
        try {
          clearTimeout(this.blockLocalTrackChangeTimeOut);
          this.blockLocalTrackChangeTimeOut = null;
          log$1(caller + ' TRACK_CHANGE');
          this.trigger(empPlayerEvents.TRACK_CHANGE);
          this.blockLocalTrackChange = false;
        } catch (e) {} //Crash when navigate away
      }.bind(this), 1000); //Stop block LocalTrackChange after 1 sec
    }
  };

  /**
  *
  * Overide play() and block videojs from send play when autoplay, should be handle by Shaka player
  */


  EmpShaka.prototype.play = function play() {
    if (this.stopped_ || this.ended_) {
      this.trigger({ type: empPlayerEvents.REPLAY, bubbles: true });
    } else if (!this.options_.autoplay && this.el_.networkState > this.el_.HAVE_METADATA || this.hasStarted_ && this.el_.networkState > this.el_.HAVE_METADATA) {
      //this.trigger('play'); not needed
      return _Html.prototype.play.call(this);
    }
  };

  EmpShaka.prototype.pause = function pause() {
    if (this.live() && this.options_.timeShiftDisabled) {
      return;
    }
    _Html.prototype.pause.call(this);
    this.trigger({ type: empPlayerEvents.PAUSE, bubbles: true });
  };

  /**
   *
   * Dispose of the tech
   * @private
   */


  EmpShaka.prototype.dispose = function dispose() {
    log$1('dispose ' + TechName);
    this.stopTrackingDuration();
    this.textTracks().off('selectedlanguagechange', this.textTrackChangeBind);
    this.textTracks().off('addtrack', this.textTrackAddedBind);
    this.audioTracks().off('change', this.audioTrackChangeBind);
    this.audioTracks().off('addtrack', this.audioTrackAddedBind);
    this.el_.removeEventListener('ended', this.onEndedBind);
    this.off(empPlayerEvents.LOAD_START, this.onLoadStartBind);

    if (this.shakaPlayer_) {
      this.shakaPlayer_.destroy();
    }

    _Html.prototype.dispose.call(this);
    this.isDispose_ = true;
  };

  EmpShaka.prototype.program = function program(currentProgram) {
    if (currentProgram) {
      this.currentProgram_ = currentProgram;
    }
  };

  EmpShaka.prototype.seekable = function seekable() {
    if (this.shakaPlayer_) {
      var seekRange = this.shakaPlayer_.seekRange();
      var start = seekRange.start;
      if (this.options_.source && this.options_.source.isDynamicCachupAsLive) {
        start = this.options_.source.streamInfo.startTime / 1000;
      }

      return createTimeRanges(start, seekRange.end);
    } else {
      return createTimeRanges(0, 0);
    }
  };

  EmpShaka.prototype.triggerRecoverableError = function triggerRecoverableError(error) {
    this.triggerRecoverableTechError(error, TechName);
  };

  createClass(EmpShaka, null, [{
    key: 'nativeSourceHandler',
    get: function get$$1() {
      return {
        /**
         * Checks if we can handle source from source object
         *
         * @param {Object} source Source for playback
         * @returns {probably|maybe|*}
         * @method canHandleSource
         */
        canHandleSource: function canHandleSource(source) {
          // Keep this so when setting the source to an mpd url it still works
          var dashExtRE = /\.mpd/i;

          if (EmpShaka.nativeSourceHandler.canPlayType(source.type)) {
            return 'probably';
          } else if (dashExtRE.test(source.src)) {
            return 'maybe';
          } else {
            return '';
          }
        },

        /**
         * Handle source
         * @param {Object} source Source for playback
         * @param {Tech}   tech Tech object to use for playback
         */
        handleSource: function handleSource(source, tech) {
          tech.handleSource(source);
        },

        /**
         * Determine if we can play type
         * @param {String}  type mime-type
         * @returns {probably|''}
         */
        canPlayType: function canPlayType(type) {
          var dashTypeRE = /^application\/dash\+xml/i;
          if (dashTypeRE.test(type) && shaka.Player.isBrowserSupported()) {
            return 'probably';
          }

          return '';
        }
      };
    }
  }, {
    key: 'entitlementPlayRequest',
    get: function get$$1() {
      return {
        drm: 'CENC',
        format: 'DASH',
        type: 'application/dash+xml'
      };
    }
  }, {
    key: 'log',
    get: function get$$1() {
      return log$1;
    }
  }]);
  return EmpShaka;
}(Html5);

EmpShaka.prototype['featuresNativeTextTracks'] = false;

Tech.withSourceHandlers(EmpShaka);

EmpShaka.VERSION = '2.0.79-32';

// Unset source handlers set by Html5 super class.
// We do not intent to support any sources other then sources allowed by nativeSourceHandler
EmpShaka.sourceHandlers = [];
EmpShaka.registerSourceHandler(EmpShaka.nativeSourceHandler);
if (Tech.getTech(TechName)) {
  videojs.log.warn('Not using ' + TechName + ' as it appears to already be registered');
  videojs.log.warn(TechName + ' should only be used with emp-player@2 and above');
} else {
  Tech.registerTech(TechName, EmpShaka);
}

return EmpShaka;

})));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(_dereq_,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/**
 * Remember mixins? Until facebook and various react utilities figure out a new solution this will
 * make mixins work how they used to, by adding mixin methods directly to your react component.
 *
 * @param {function/array} mixins A reference to your mixin class
 * @param {object} context A reference to the react component class. Usually just "this".
 * @param {object} options An object of optional settings".
 * @returns undefined
 *
 * use it like this in your constructor:
 * mixins([mixin1, mixin2], this, {options});
 */

var Mixins = (function () {
    function Mixins() {
        _classCallCheck(this, Mixins);
    }

    _createClass(Mixins, [{
        key: 'init',
        value: function init(mixins, context, options) {
            this.mixins = mixins;
            this.context = context;

            this.opt = {
                warn: true,
                mergeDuplicates: true
            };

            this.contextMethods = Object.getOwnPropertyNames(this.context.constructor.prototype);
            this.reactMethods = ['componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount'];

            if (options) {
                this.opt.warn = options.warn !== undefined ? options.warn : this.opt.warn;
                this.opt.mergeDuplicates = options.mergeDuplicates !== undefined ? options.mergeDuplicates : this.opt.mergeDuplicates;
            }

            if (this.mixins.constructor === Array) {
                mixins.map(function (mixin) {
                    this.grabMethods(mixin);
                }, this);
            } else if (typeof mixins === 'function' || typeof mixins === 'object') {
                this.grabMethods(mixins);
            } else {
                throw 'mixins expects a function, an array, or an object. Please and thank you';
            }
        }
    }, {
        key: 'addNewMethod',

        /**
         * If the method doesn't already exist on the react component, simply add this to it.
         *
         * @param {string} mm The name of a single mixin method
         * @param {function} currentMixin A reference to the mixin you are adding to the react component
         */
        value: function addNewMethod(mm, currentMixin) {
            if (this.mixins.prototype) {
                this.context.constructor.prototype[mm] = this.mixins.prototype[mm];
            } else {
                this.context.constructor.prototype[mm] = typeof currentMixin === 'object' ? currentMixin[mm] : currentMixin.prototype[mm];
            }
            this.contextMethods = Object.getOwnPropertyNames(this.context.constructor.prototype);
        }
    }, {
        key: 'extendMethod',

        /**
         * If there is already a method on your react component that matches the mixin method create a new function that
         * calls both methods so they can live in harmony.
         *
         * @param {string} mm The name of a single mixin method
         * @param {string} cm The name of the matched react method to extend
         * @param {function} currentMixin A reference to the mixin being added to the react method.
         */
        value: function extendMethod(mm, cm, currentMixin) {
            var orig = this.context[cm];
            var newMethod = typeof currentMixin === 'object' ? currentMixin[mm] : currentMixin.prototype[mm];
            this.context[mm] = function () {
                newMethod.call(this, arguments);
                orig.call(this, arguments);
            };
        }
    }, {
        key: 'grabMethods',

        /**
         * Takes a mixin method and sends it along the pipe
         * @param {function} mixin A single method from your mixin
         *
         */
        value: function grabMethods(mixin) {
            var _this = this;

            var currentMixin = mixin;
            var mixinMethods = typeof mixin === 'object' ? Object.getOwnPropertyNames(mixin) : Object.getOwnPropertyNames(mixin.prototype);

            mixinMethods.map(function (method) {
                if (method !== 'constructor' && method !== 'render') {
                    _this.checkForMatch(method, currentMixin);
                }
            }, this);
        }
    }, {
        key: 'checkForMatch',

        /**
         * Checks the react component to see if the method we want to add is already there.
         * If it is a duplicate and a React lifecycle method it silently extends the React method.
         * If it is a duplicate and not a React lifecycle method it warns you before extending the React method.
         *
         * @param {string} mm the mixin method to check against the react methods
         * @param {function} currentMixin A reference to the mixin being added to the React Component.
         */
        value: function checkForMatch(mm, currentMixin) {
            var _this2 = this;

            this.contextMethods.map(function (ctxMethod) {
                if (mm === ctxMethod) {
                    if (_this2.reactMethods.indexOf(mm) > -1) {
                        _this2.extendMethod(mm, ctxMethod, currentMixin);
                    } else {
                        if (_this2.opt.warn) {
                            console.warn(mm + ' method already exists within the ' + _this2.context.constructor.name + ' component.');
                        }
                        if (_this2.opt.mergeDuplicates) {
                            _this2.extendMethod(mm, ctxMethod, currentMixin);
                        }
                    }
                }
            });
            this.addNewMethod(mm, currentMixin);
        }
    }]);

    return Mixins;
})();

var mix = new Mixins();

module.exports = mix.init.bind(mix);

},{}],4:[function(_dereq_,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = _dereq_('min-document');

var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

module.exports = doccy;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":6}],5:[function(_dereq_,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],6:[function(_dereq_,module,exports){

},{}],7:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],8:[function(_dereq_,module,exports){
/**
 * @license
 * Video.js 6.7.4 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var window = _interopDefault(_dereq_('global/window'));
var document = _interopDefault(_dereq_('global/document'));
var tsml = _interopDefault(_dereq_('tsml'));
var safeParseTuple = _interopDefault(_dereq_('safe-json-parse/tuple'));
var xhr = _interopDefault(_dereq_('xhr'));
var vtt = _interopDefault(_dereq_('videojs-vtt.js'));

var version = "6.7.4";

/**
 * @file browser.js
 * @module browser
 */
var USER_AGENT = window.navigator && window.navigator.userAgent || '';
var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

/*
 * Device is an iPhone
 *
 * @type {Boolean}
 * @constant
 * @private
 */
var IS_IPAD = /iPad/i.test(USER_AGENT);

// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
var IS_IPOD = /iPod/i.test(USER_AGENT);
var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

var IOS_VERSION = function () {
  var match = USER_AGENT.match(/OS (\d+)_/i);

  if (match && match[1]) {
    return match[1];
  }
  return null;
}();

var IS_ANDROID = /Android/i.test(USER_AGENT);
var ANDROID_VERSION = function () {
  // This matches Android Major.Minor.Patch versions
  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

  if (!match) {
    return null;
  }

  var major = match[1] && parseFloat(match[1]);
  var minor = match[2] && parseFloat(match[2]);

  if (major && minor) {
    return parseFloat(match[1] + '.' + match[2]);
  } else if (major) {
    return major;
  }
  return null;
}();

// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
var IS_EDGE = /Edge/i.test(USER_AGENT);
var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
var CHROME_VERSION = function () {
  var match = USER_AGENT.match(/Chrome\/(\d+)/);

  if (match && match[1]) {
    return parseFloat(match[1]);
  }
  return null;
}();
var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
var IE_VERSION = function () {
  var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
  var version = result && parseFloat(result[1]);

  if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
    // IE 11 has a different user agent string than other IE versions
    version = 11.0;
  }

  return version;
}();

var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
var IS_ANY_SAFARI = IS_SAFARI || IS_IOS;

var TOUCH_ENABLED = isReal() && ('ontouchstart' in window || window.DocumentTouch && window.document instanceof window.DocumentTouch);

var BACKGROUND_SIZE_SUPPORTED = isReal() && 'backgroundSize' in window.document.createElement('video').style;

var browser = (Object.freeze || Object)({
	IS_IPAD: IS_IPAD,
	IS_IPHONE: IS_IPHONE,
	IS_IPOD: IS_IPOD,
	IS_IOS: IS_IOS,
	IOS_VERSION: IOS_VERSION,
	IS_ANDROID: IS_ANDROID,
	ANDROID_VERSION: ANDROID_VERSION,
	IS_OLD_ANDROID: IS_OLD_ANDROID,
	IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,
	IS_FIREFOX: IS_FIREFOX,
	IS_EDGE: IS_EDGE,
	IS_CHROME: IS_CHROME,
	CHROME_VERSION: CHROME_VERSION,
	IS_IE8: IS_IE8,
	IE_VERSION: IE_VERSION,
	IS_SAFARI: IS_SAFARI,
	IS_ANY_SAFARI: IS_ANY_SAFARI,
	TOUCH_ENABLED: TOUCH_ENABLED,
	BACKGROUND_SIZE_SUPPORTED: BACKGROUND_SIZE_SUPPORTED
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};











var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};











var taggedTemplateLiteralLoose = function (strings, raw) {
  strings.raw = raw;
  return strings;
};

/**
 * @file obj.js
 * @module obj
 */

/**
 * @callback obj:EachCallback
 *
 * @param {Mixed} value
 *        The current key for the object that is being iterated over.
 *
 * @param {string} key
 *        The current key-value for object that is being iterated over
 */

/**
 * @callback obj:ReduceCallback
 *
 * @param {Mixed} accum
 *        The value that is accumulating over the reduce loop.
 *
 * @param {Mixed} value
 *        The current key for the object that is being iterated over.
 *
 * @param {string} key
 *        The current key-value for object that is being iterated over
 *
 * @return {Mixed}
 *         The new accumulated value.
 */
var toString = Object.prototype.toString;

/**
 * Get the keys of an Object
 *
 * @param {Object}
 *        The Object to get the keys from
 *
 * @return {string[]}
 *         An array of the keys from the object. Returns an empty array if the
 *         object passed in was invalid or had no keys.
 *
 * @private
 */
var keys = function keys(object) {
  return isObject(object) ? Object.keys(object) : [];
};

/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {obj:EachCallback} fn
 *        The callback function which is called for each key in the object.
 */
function each(object, fn) {
  keys(object).forEach(function (key) {
    return fn(object[key], key);
  });
}

/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {Mixed} [initial = 0]
 *        Starting value
 *
 * @return {Mixed}
 *         The final accumulated value.
 */
function reduce(object, fn) {
  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  return keys(object).reduce(function (accum, key) {
    return fn(accum, object[key], key);
  }, initial);
}

/**
 * Object.assign-style object shallow merge/extend.
 *
 * @param  {Object} target
 * @param  {Object} ...sources
 * @return {Object}
 */
function assign(target) {
  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }

  if (Object.assign) {
    return Object.assign.apply(Object, [target].concat(sources));
  }

  sources.forEach(function (source) {
    if (!source) {
      return;
    }

    each(source, function (value, key) {
      target[key] = value;
    });
  });

  return target;
}

/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value
 * @return {Boolean}
 */
function isObject(value) {
  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value
 * @return {Boolean}
 */
function isPlain(value) {
  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
}

/**
 * @file log.js
 * @module log
 */
var log = void 0;

// This is the private tracking variable for logging level.
var level = 'info';

// This is the private tracking variable for the logging history.
var history = [];

/**
 * Log messages to the console and history based on the type of message
 *
 * @private
 * @param  {string} type
 *         The name of the console method to use.
 *
 * @param  {Array} args
 *         The arguments to be passed to the matching console method.
 *
 * @param  {boolean} [stringify]
 *         By default, only old IEs should get console argument stringification,
 *         but this is exposed as a parameter to facilitate testing.
 */
var logByType = function logByType(type, args) {
  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!IE_VERSION && IE_VERSION < 11;

  var lvl = log.levels[level];
  var lvlRegExp = new RegExp('^(' + lvl + ')$');

  if (type !== 'log') {

    // Add the type to the front of the message when it's not "log".
    args.unshift(type.toUpperCase() + ':');
  }

  // Add a clone of the args at this point to history.
  if (history) {
    history.push([].concat(args));
  }

  // Add console prefix after adding to history.
  args.unshift('VIDEOJS:');

  // If there's no console then don't try to output messages, but they will
  // still be stored in history.
  if (!window.console) {
    return;
  }

  // Was setting these once outside of this function, but containing them
  // in the function makes it easier to test cases where console doesn't exist
  // when the module is executed.
  var fn = window.console[type];

  if (!fn && type === 'debug') {
    // Certain browsers don't have support for console.debug. For those, we
    // should default to the closest comparable log.
    fn = window.console.info || window.console.log;
  }

  // Bail out if there's no console or if this type is not allowed by the
  // current logging level.
  if (!fn || !lvl || !lvlRegExp.test(type)) {
    return;
  }

  // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
  // objects and arrays for those less-capable browsers.
  if (stringify) {
    args = args.map(function (a) {
      if (isObject(a) || Array.isArray(a)) {
        try {
          return JSON.stringify(a);
        } catch (x) {
          return String(a);
        }
      }

      // Cast to string before joining, so we get null and undefined explicitly
      // included in output (as we would in a modern console).
      return String(a);
    }).join(' ');
  }

  // Old IE versions do not allow .apply() for console methods (they are
  // reported as objects rather than functions).
  if (!fn.apply) {
    fn(args);
  } else {
    fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);
  }
};

/**
 * Logs plain debug messages. Similar to `console.log`.
 *
 * @class
 * @param    {Mixed[]} args
 *           One or more messages or objects that should be logged.
 */
log = function log() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  logByType('log', args);
};

/**
 * Enumeration of available logging levels, where the keys are the level names
 * and the values are `|`-separated strings containing logging methods allowed
 * in that logging level. These strings are used to create a regular expression
 * matching the function name being called.
 *
 * Levels provided by video.js are:
 *
 * - `off`: Matches no calls. Any value that can be cast to `false` will have
 *   this effect. The most restrictive.
 * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
 *   `log.warn`, and `log.error`).
 * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
 * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
 * - `warn`: Matches `log.warn` and `log.error` calls.
 * - `error`: Matches only `log.error` calls.
 *
 * @type {Object}
 */
log.levels = {
  all: 'debug|log|warn|error',
  off: '',
  debug: 'debug|log|warn|error',
  info: 'log|warn|error',
  warn: 'warn|error',
  error: 'error',
  DEFAULT: level
};

/**
 * Get or set the current logging level. If a string matching a key from
 * {@link log.levels} is provided, acts as a setter. Regardless of argument,
 * returns the current logging level.
 *
 * @param  {string} [lvl]
 *         Pass to set a new logging level.
 *
 * @return {string}
 *         The current logging level.
 */
log.level = function (lvl) {
  if (typeof lvl === 'string') {
    if (!log.levels.hasOwnProperty(lvl)) {
      throw new Error('"' + lvl + '" in not a valid log level');
    }
    level = lvl;
  }
  return level;
};

/**
 * Returns an array containing everything that has been logged to the history.
 *
 * This array is a shallow clone of the internal history record. However, its
 * contents are _not_ cloned; so, mutating objects inside this array will
 * mutate them in history.
 *
 * @return {Array}
 */
log.history = function () {
  return history ? [].concat(history) : [];
};

/**
 * Clears the internal history tracking, but does not prevent further history
 * tracking.
 */
log.history.clear = function () {
  if (history) {
    history.length = 0;
  }
};

/**
 * Disable history tracking if it is currently enabled.
 */
log.history.disable = function () {
  if (history !== null) {
    history.length = 0;
    history = null;
  }
};

/**
 * Enable history tracking if it is currently disabled.
 */
log.history.enable = function () {
  if (history === null) {
    history = [];
  }
};

/**
 * Logs error messages. Similar to `console.error`.
 *
 * @param {Mixed[]} args
 *        One or more messages or objects that should be logged as an error
 */
log.error = function () {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return logByType('error', args);
};

/**
 * Logs warning messages. Similar to `console.warn`.
 *
 * @param {Mixed[]} args
 *        One or more messages or objects that should be logged as a warning.
 */
log.warn = function () {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return logByType('warn', args);
};

/**
 * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
 * log if `console.debug` is not available
 *
 * @param {Mixed[]} args
 *        One or more messages or objects that should be logged as debug.
 */
log.debug = function () {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return logByType('debug', args);
};

var log$1 = log;

/**
 * @file computed-style.js
 * @module computed-style
 */
/**
 * A safe getComputedStyle with an IE8 fallback.
 *
 * This is needed because in Firefox, if the player is loaded in an iframe with
 * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
 * make sure  that the player doesn't break in these cases.
 *
 * @param {Element} el
 *        The element you want the computed style of
 *
 * @param {string} prop
 *        The property name you want
 *
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 *
 * @static
 * @const
 */
function computedStyle(el, prop) {
  if (!el || !prop) {
    return '';
  }

  if (typeof window.getComputedStyle === 'function') {
    var cs = window.getComputedStyle(el);

    return cs ? cs[prop] : '';
  }

  return el.currentStyle[prop] || '';
}

var _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

/**
 * @file dom.js
 * @module dom
 */
/**
 * Detect if a value is a string with any non-whitespace characters.
 *
 * @param {string} str
 *        The string to check
 *
 * @return {boolean}
 *         - True if the string is non-blank
 *         - False otherwise
 *
 */
function isNonBlankString(str) {
  return typeof str === 'string' && /\S/.test(str);
}

/**
 * Throws an error if the passed string has whitespace. This is used by
 * class methods to be relatively consistent with the classList API.
 *
 * @param {string} str
 *         The string to check for whitespace.
 *
 * @throws {Error}
 *         Throws an error if there is whitespace in the string.
 *
 */
function throwIfWhitespace(str) {
  if (/\s/.test(str)) {
    throw new Error('class has illegal whitespace characters');
  }
}

/**
 * Produce a regular expression for matching a className within an elements className.
 *
 * @param {string} className
 *         The className to generate the RegExp for.
 *
 * @return {RegExp}
 *         The RegExp that will check for a specific `className` in an elements
 *         className.
 */
function classRegExp(className) {
  return new RegExp('(^|\\s)' + className + '($|\\s)');
}

/**
 * Whether the current DOM interface appears to be real.
 *
 * @return {Boolean}
 */
function isReal() {
  return (

    // Both document and window will never be undefined thanks to `global`.
    document === window.document &&

    // In IE < 9, DOM methods return "object" as their type, so all we can
    // confidently check is that it exists.
    typeof document.createElement !== 'undefined'
  );
}

/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @param {Mixed} value
 *        The thing to check
 *
 * @return {boolean}
 *         - True if it is a DOM element
 *         - False otherwise
 */
function isEl(value) {
  return isObject(value) && value.nodeType === 1;
}

/**
 * Determines if the current DOM is embedded in an iframe.
 *
 * @return {boolean}
 *
 */
function isInFrame() {

  // We need a try/catch here because Safari will throw errors when attempting
  // to get either `parent` or `self`
  try {
    return window.parent !== window.self;
  } catch (x) {
    return true;
  }
}

/**
 * Creates functions to query the DOM using a given method.
 *
 * @param {string} method
 *         The method to create the query with.
 *
 * @return {Function}
 *         The query method
 */
function createQuerier(method) {
  return function (selector, context) {
    if (!isNonBlankString(selector)) {
      return document[method](null);
    }
    if (isNonBlankString(context)) {
      context = document.querySelector(context);
    }

    var ctx = isEl(context) ? context : document;

    return ctx[method] && ctx[method](selector);
  };
}

/**
 * Creates an element and applies properties.
 *
 * @param {string} [tagName='div']
 *         Name of tag to be created.
 *
 * @param {Object} [properties={}]
 *         Element properties to be applied.
 *
 * @param {Object} [attributes={}]
 *         Element attributes to be applied.
 *
 * @param {String|Element|TextNode|Array|Function} [content]
 *         Contents for the element (see: {@link dom:normalizeContent})
 *
 * @return {Element}
 *         The element that was created.
 */
function createEl() {
  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var content = arguments[3];

  var el = document.createElement(tagName);

  Object.getOwnPropertyNames(properties).forEach(function (propName) {
    var val = properties[propName];

    // See #2176
    // We originally were accepting both properties and attributes in the
    // same object, but that doesn't work so well.
    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
      log$1.warn(tsml(_templateObject, propName, val));
      el.setAttribute(propName, val);

      // Handle textContent since it's not supported everywhere and we have a
      // method for it.
    } else if (propName === 'textContent') {
      textContent(el, val);
    } else {
      el[propName] = val;
    }
  });

  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
    el.setAttribute(attrName, attributes[attrName]);
  });

  if (content) {
    appendContent(el, content);
  }

  return el;
}

/**
 * Injects text into an element, replacing any existing contents entirely.
 *
 * @param {Element} el
 *        The element to add text content into
 *
 * @param {string} text
 *        The text content to add.
 *
 * @return {Element}
 *         The element with added text content.
 */
function textContent(el, text) {
  if (typeof el.textContent === 'undefined') {
    el.innerText = text;
  } else {
    el.textContent = text;
  }
  return el;
}

/**
 * Insert an element as the first child node of another
 *
 * @param {Element} child
 *        Element to insert
 *
 * @param {Element} parent
 *        Element to insert child into
 */
function prependTo(child, parent) {
  if (parent.firstChild) {
    parent.insertBefore(child, parent.firstChild);
  } else {
    parent.appendChild(child);
  }
}

/**
 * Check if an element has a CSS class
 *
 * @param {Element} element
 *        Element to check
 *
 * @param {string} classToCheck
 *        Class name to check for
 *
 * @return {boolean}
 *         - True if the element had the class
 *         - False otherwise.
 *
 * @throws {Error}
 *         Throws an error if `classToCheck` has white space.
 */
function hasClass(element, classToCheck) {
  throwIfWhitespace(classToCheck);
  if (element.classList) {
    return element.classList.contains(classToCheck);
  }
  return classRegExp(classToCheck).test(element.className);
}

/**
 * Add a CSS class name to an element
 *
 * @param {Element} element
 *        Element to add class name to.
 *
 * @param {string} classToAdd
 *        Class name to add.
 *
 * @return {Element}
 *         The dom element with the added class name.
 */
function addClass(element, classToAdd) {
  if (element.classList) {
    element.classList.add(classToAdd);

    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
    // in the case of classList not being supported.
  } else if (!hasClass(element, classToAdd)) {
    element.className = (element.className + ' ' + classToAdd).trim();
  }

  return element;
}

/**
 * Remove a CSS class name from an element
 *
 * @param {Element} element
 *        Element to remove a class name from.
 *
 * @param {string} classToRemove
 *        Class name to remove
 *
 * @return {Element}
 *         The dom element with class name removed.
 */
function removeClass(element, classToRemove) {
  if (element.classList) {
    element.classList.remove(classToRemove);
  } else {
    throwIfWhitespace(classToRemove);
    element.className = element.className.split(/\s+/).filter(function (c) {
      return c !== classToRemove;
    }).join(' ');
  }

  return element;
}

/**
 * The callback definition for toggleElClass.
 *
 * @callback Dom~PredicateCallback
 * @param {Element} element
 *        The DOM element of the Component.
 *
 * @param {string} classToToggle
 *        The `className` that wants to be toggled
 *
 * @return {boolean|undefined}
 *         - If true the `classToToggle` will get added to `element`.
 *         - If false the `classToToggle` will get removed from `element`.
 *         - If undefined this callback will be ignored
 */

/**
 * Adds or removes a CSS class name on an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @param {Element} element
 *        The element to toggle a class name on.
 *
 * @param {string} classToToggle
 *        The class that should be toggled
 *
 * @param {boolean|PredicateCallback} [predicate]
 *        See the return value for {@link Dom~PredicateCallback}
 *
 * @return {Element}
 *         The element with a class that has been toggled.
 */
function toggleClass(element, classToToggle, predicate) {

  // This CANNOT use `classList` internally because IE does not support the
  // second parameter to the `classList.toggle()` method! Which is fine because
  // `classList` will be used by the add/remove functions.
  var has = hasClass(element, classToToggle);

  if (typeof predicate === 'function') {
    predicate = predicate(element, classToToggle);
  }

  if (typeof predicate !== 'boolean') {
    predicate = !has;
  }

  // If the necessary class operation matches the current state of the
  // element, no action is required.
  if (predicate === has) {
    return;
  }

  if (predicate) {
    addClass(element, classToToggle);
  } else {
    removeClass(element, classToToggle);
  }

  return element;
}

/**
 * Apply attributes to an HTML element.
 *
 * @param {Element} el
 *        Element to add attributes to.
 *
 * @param {Object} [attributes]
 *        Attributes to be applied.
 */
function setAttributes(el, attributes) {
  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
    var attrValue = attributes[attrName];

    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
      el.removeAttribute(attrName);
    } else {
      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
    }
  });
}

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 *
 * @param {Element} tag
 *        Element from which to get tag attributes.
 *
 * @return {Object}
 *         All attributes of the element.
 */
function getAttributes(tag) {
  var obj = {};

  // known boolean attributes
  // we can check for matching boolean properties, but older browsers
  // won't know about HTML5 boolean attributes that we still read from
  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';

  if (tag && tag.attributes && tag.attributes.length > 0) {
    var attrs = tag.attributes;

    for (var i = attrs.length - 1; i >= 0; i--) {
      var attrName = attrs[i].name;
      var attrVal = attrs[i].value;

      // check for known booleans
      // the matching element property will return a value for typeof
      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
        // the value of an included boolean attribute is typically an empty
        // string ('') which would equal false if we just check for a false value.
        // we also don't want support bad code like autoplay='false'
        attrVal = attrVal !== null ? true : false;
      }

      obj[attrName] = attrVal;
    }
  }

  return obj;
}

/**
 * Get the value of an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to get the value of
 *
 * @return {string}
 *         value of the attribute
 */
function getAttribute(el, attribute) {
  return el.getAttribute(attribute);
}

/**
 * Set the value of an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to set
 *
 * @param {string} value
 *        Value to set the attribute to
 */
function setAttribute(el, attribute, value) {
  el.setAttribute(attribute, value);
}

/**
 * Remove an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to remove
 */
function removeAttribute(el, attribute) {
  el.removeAttribute(attribute);
}

/**
 * Attempt to block the ability to select text while dragging controls
 */
function blockTextSelection() {
  document.body.focus();
  document.onselectstart = function () {
    return false;
  };
}

/**
 * Turn off text selection blocking
 */
function unblockTextSelection() {
  document.onselectstart = function () {
    return true;
  };
}

/**
 * Identical to the native `getBoundingClientRect` function, but ensures that
 * the method is supported at all (it is in all browsers we claim to support)
 * and that the element is in the DOM before continuing.
 *
 * This wrapper function also shims properties which are not provided by some
 * older browsers (namely, IE8).
 *
 * Additionally, some browsers do not support adding properties to a
 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
 * properties (except `x` and `y` which are not widely supported). This helps
 * avoid implementations where keys are non-enumerable.
 *
 * @param  {Element} el
 *         Element whose `ClientRect` we want to calculate.
 *
 * @return {Object|undefined}
 *         Always returns a plain
 */
function getBoundingClientRect(el) {
  if (el && el.getBoundingClientRect && el.parentNode) {
    var rect = el.getBoundingClientRect();
    var result = {};

    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {
      if (rect[k] !== undefined) {
        result[k] = rect[k];
      }
    });

    if (!result.height) {
      result.height = parseFloat(computedStyle(el, 'height'));
    }

    if (!result.width) {
      result.width = parseFloat(computedStyle(el, 'width'));
    }

    return result;
  }
}

/**
 * The postion of a DOM element on the page.
 *
 * @typedef {Object} module:dom~Position
 *
 * @property {number} left
 *           Pixels to the left
 *
 * @property {number} top
 *           Pixels on top
 */

/**
 * Offset Left.
 * getBoundingClientRect technique from
 * John Resig
 *
 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
 *
 * @param {Element} el
 *        Element from which to get offset
 *
 * @return {module:dom~Position}
 *         The position of the element that was passed in.
 */
function findPosition(el) {
  var box = void 0;

  if (el.getBoundingClientRect && el.parentNode) {
    box = el.getBoundingClientRect();
  }

  if (!box) {
    return {
      left: 0,
      top: 0
    };
  }

  var docEl = document.documentElement;
  var body = document.body;

  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  var scrollLeft = window.pageXOffset || body.scrollLeft;
  var left = box.left + scrollLeft - clientLeft;

  var clientTop = docEl.clientTop || body.clientTop || 0;
  var scrollTop = window.pageYOffset || body.scrollTop;
  var top = box.top + scrollTop - clientTop;

  // Android sometimes returns slightly off decimal values, so need to round
  return {
    left: Math.round(left),
    top: Math.round(top)
  };
}

/**
 * x and y coordinates for a dom element or mouse pointer
 *
 * @typedef {Object} Dom~Coordinates
 *
 * @property {number} x
 *           x coordinate in pixels
 *
 * @property {number} y
 *           y coordinate in pixels
 */

/**
 * Get pointer position in element
 * Returns an object with x and y coordinates.
 * The base on the coordinates are the bottom left of the element.
 *
 * @param {Element} el
 *        Element on which to get the pointer position on
 *
 * @param {EventTarget~Event} event
 *        Event object
 *
 * @return {Dom~Coordinates}
 *         A Coordinates object corresponding to the mouse position.
 *
 */
function getPointerPosition(el, event) {
  var position = {};
  var box = findPosition(el);
  var boxW = el.offsetWidth;
  var boxH = el.offsetHeight;

  var boxY = box.top;
  var boxX = box.left;
  var pageY = event.pageY;
  var pageX = event.pageX;

  if (event.changedTouches) {
    pageX = event.changedTouches[0].pageX;
    pageY = event.changedTouches[0].pageY;
  }

  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

  return position;
}

/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @param {Mixed} value
 *        Check if this value is a text node.
 *
 * @return {boolean}
 *         - True if it is a text node
 *         - False otherwise
 */
function isTextNode(value) {
  return isObject(value) && value.nodeType === 3;
}

/**
 * Empties the contents of an element.
 *
 * @param {Element} el
 *        The element to empty children from
 *
 * @return {Element}
 *         The element with no children
 */
function emptyEl(el) {
  while (el.firstChild) {
    el.removeChild(el.firstChild);
  }
  return el;
}

/**
 * Normalizes content for eventual insertion into the DOM.
 *
 * This allows a wide range of content definition methods, but protects
 * from falling into the trap of simply writing to `innerHTML`, which is
 * an XSS concern.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        - String: Normalized into a text node.
 *        - Element/TextNode: Passed through.
 *        - Array: A one-dimensional array of strings, elements, nodes, or functions
 *          (which return single strings, elements, or nodes).
 *        - Function: If the sole argument, is expected to produce a string, element,
 *          node, or array as defined above.
 *
 * @return {Array}
 *         All of the content that was passed in normalized.
 */
function normalizeContent(content) {

  // First, invoke content if it is a function. If it produces an array,
  // that needs to happen before normalization.
  if (typeof content === 'function') {
    content = content();
  }

  // Next up, normalize to an array, so one or many items can be normalized,
  // filtered, and returned.
  return (Array.isArray(content) ? content : [content]).map(function (value) {

    // First, invoke value if it is a function to produce a new value,
    // which will be subsequently normalized to a Node of some kind.
    if (typeof value === 'function') {
      value = value();
    }

    if (isEl(value) || isTextNode(value)) {
      return value;
    }

    if (typeof value === 'string' && /\S/.test(value)) {
      return document.createTextNode(value);
    }
  }).filter(function (value) {
    return value;
  });
}

/**
 * Normalizes and appends content to an element.
 *
 * @param {Element} el
 *        Element to append normalized content to.
 *
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        See the `content` argument of {@link dom:normalizeContent}
 *
 * @return {Element}
 *         The element with appended normalized content.
 */
function appendContent(el, content) {
  normalizeContent(content).forEach(function (node) {
    return el.appendChild(node);
  });
  return el;
}

/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * @param {Element} el
 *        Element to insert normalized content into.
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        See the `content` argument of {@link dom:normalizeContent}
 *
 * @return {Element}
 *         The element with inserted normalized content.
 *
 */
function insertContent(el, content) {
  return appendContent(emptyEl(el), content);
}

/**
 * Check if event was a single left click
 *
 * @param {EventTarget~Event} event
 *        Event object
 *
 * @return {boolean}
 *         - True if a left click
 *         - False if not a left click
 */
function isSingleLeftClick(event) {
  // Note: if you create something draggable, be sure to
  // call it on both `mousedown` and `mousemove` event,
  // otherwise `mousedown` should be enough for a button

  if (event.button === undefined && event.buttons === undefined) {
    // Why do we need `butttons` ?
    // Because, middle mouse sometimes have this:
    // e.button === 0 and e.buttons === 4
    // Furthermore, we want to prevent combination click, something like
    // HOLD middlemouse then left click, that would be
    // e.button === 0, e.buttons === 5
    // just `button` is not gonna work

    // Alright, then what this block does ?
    // this is for chrome `simulate mobile devices`
    // I want to support this as well

    return true;
  }

  if (event.button === 0 && event.buttons === undefined) {
    // Touch screen, sometimes on some specific device, `buttons`
    // doesn't have anything (safari on ios, blackberry...)

    return true;
  }

  if (IE_VERSION === 9) {
    // Ignore IE9

    return true;
  }

  if (event.button !== 0 || event.buttons !== 1) {
    // This is the reason we have those if else block above
    // if any special case we can catch and let it slide
    // we do it above, when get to here, this definitely
    // is-not-left-click

    return false;
  }

  return true;
}

/**
 * Finds a single DOM element matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param {string} selector
 *        A valid CSS selector, which will be passed to `querySelector`.
 *
 * @param {Element|String} [context=document]
 *        A DOM element within which to query. Can also be a selector
 *        string in which case the first matching element will be used
 *        as context. If missing (or no element matches selector), falls
 *        back to `document`.
 *
 * @return {Element|null}
 *         The element that was found or null.
 */
var $ = createQuerier('querySelector');

/**
 * Finds a all DOM elements matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param {string} selector
 *           A valid CSS selector, which will be passed to `querySelectorAll`.
 *
 * @param {Element|String} [context=document]
 *           A DOM element within which to query. Can also be a selector
 *           string in which case the first matching element will be used
 *           as context. If missing (or no element matches selector), falls
 *           back to `document`.
 *
 * @return {NodeList}
 *         A element list of elements that were found. Will be empty if none were found.
 *
 */
var $$ = createQuerier('querySelectorAll');



var Dom = (Object.freeze || Object)({
	isReal: isReal,
	isEl: isEl,
	isInFrame: isInFrame,
	createEl: createEl,
	textContent: textContent,
	prependTo: prependTo,
	hasClass: hasClass,
	addClass: addClass,
	removeClass: removeClass,
	toggleClass: toggleClass,
	setAttributes: setAttributes,
	getAttributes: getAttributes,
	getAttribute: getAttribute,
	setAttribute: setAttribute,
	removeAttribute: removeAttribute,
	blockTextSelection: blockTextSelection,
	unblockTextSelection: unblockTextSelection,
	getBoundingClientRect: getBoundingClientRect,
	findPosition: findPosition,
	getPointerPosition: getPointerPosition,
	isTextNode: isTextNode,
	emptyEl: emptyEl,
	normalizeContent: normalizeContent,
	appendContent: appendContent,
	insertContent: insertContent,
	isSingleLeftClick: isSingleLeftClick,
	$: $,
	$$: $$
});

/**
 * @file guid.js
 * @module guid
 */

/**
 * Unique ID for an element or function
 * @type {Number}
 */
var _guid = 1;

/**
 * Get a unique auto-incrementing ID by number that has not been returned before.
 *
 * @return {number}
 *         A new unique ID.
 */
function newGUID() {
  return _guid++;
}

/**
 * @file dom-data.js
 * @module dom-data
 */
/**
 * Element Data Store.
 *
 * Allows for binding data to an element without putting it directly on the
 * element. Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 *
 * @type {Object}
 * @private
 */
var elData = {};

/*
 * Unique attribute name to store an element's guid in
 *
 * @type {String}
 * @constant
 * @private
 */
var elIdAttr = 'vdata' + new Date().getTime();

/**
 * Returns the cache object where data for an element is stored
 *
 * @param {Element} el
 *        Element to store data for.
 *
 * @return {Object}
 *         The cache object for that el that was passed in.
 */
function getData(el) {
  var id = el[elIdAttr];

  if (!id) {
    id = el[elIdAttr] = newGUID();
  }

  if (!elData[id]) {
    elData[id] = {};
  }

  return elData[id];
}

/**
 * Returns whether or not an element has cached data
 *
 * @param {Element} el
 *        Check if this element has cached data.
 *
 * @return {boolean}
 *         - True if the DOM element has cached data.
 *         - False otherwise.
 */
function hasData(el) {
  var id = el[elIdAttr];

  if (!id) {
    return false;
  }

  return !!Object.getOwnPropertyNames(elData[id]).length;
}

/**
 * Delete data for the element from the cache and the guid attr from getElementById
 *
 * @param {Element} el
 *        Remove cached data for this element.
 */
function removeData(el) {
  var id = el[elIdAttr];

  if (!id) {
    return;
  }

  // Remove all stored data
  delete elData[id];

  // Remove the elIdAttr property from the DOM node
  try {
    delete el[elIdAttr];
  } catch (e) {
    if (el.removeAttribute) {
      el.removeAttribute(elIdAttr);
    } else {
      // IE doesn't appear to support removeAttribute on the document element
      el[elIdAttr] = null;
    }
  }
}

/**
 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 *
 * @module events
 */

/**
 * Clean up the listener cache and dispatchers
 *
 * @param {Element|Object} elem
 *        Element to clean up
 *
 * @param {string} type
 *        Type of event to clean up
 */
function _cleanUpEvents(elem, type) {
  var data = getData(elem);

  // Remove the events of a particular type if there are none left
  if (data.handlers[type].length === 0) {
    delete data.handlers[type];
    // data.handlers[type] = null;
    // Setting to null was causing an error with data.handlers

    // Remove the meta-handler from the element
    if (elem.removeEventListener) {
      elem.removeEventListener(type, data.dispatcher, false);
    } else if (elem.detachEvent) {
      elem.detachEvent('on' + type, data.dispatcher);
    }
  }

  // Remove the events object if there are no types left
  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
    delete data.handlers;
    delete data.dispatcher;
    delete data.disabled;
  }

  // Finally remove the element data if there is no data left
  if (Object.getOwnPropertyNames(data).length === 0) {
    removeData(elem);
  }
}

/**
 * Loops through an array of event types and calls the requested method for each type.
 *
 * @param {Function} fn
 *        The event method we want to use.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string} type
 *        Type of event to bind to.
 *
 * @param {EventTarget~EventListener} callback
 *        Event listener.
 */
function _handleMultipleEvents(fn, elem, types, callback) {
  types.forEach(function (type) {
    // Call the event method for each one of the types
    fn(elem, type, callback);
  });
}

/**
 * Fix a native event to have standard property values
 *
 * @param {Object} event
 *        Event object to fix.
 *
 * @return {Object}
 *         Fixed event object.
 */
function fixEvent(event) {

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  // Test if fixing up is needed
  // Used to check if !event.stopPropagation instead of isPropagationStopped
  // But native events return true for stopPropagation, but don't have
  // other expected methods like isPropagationStopped. Seems to be a problem
  // with the Javascript Ninja code. So we're just overriding all events now.
  if (!event || !event.isPropagationStopped) {
    var old = event || window.event;

    event = {};
    // Clone the old object so that we can modify the values event = {};
    // IE8 Doesn't like when you mess with native event properties
    // Firefox returns false for event.hasOwnProperty('type') and other props
    //  which makes copying more difficult.
    // TODO: Probably best to create a whitelist of event props
    for (var key in old) {
      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
      // and webkitMovementX/Y
      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
        // Chrome 32+ warns if you try to copy deprecated returnValue, but
        // we still want to if preventDefault isn't supported (IE8).
        if (!(key === 'returnValue' && old.preventDefault)) {
          event[key] = old[key];
        }
      }
    }

    // The event occurred on this element
    if (!event.target) {
      event.target = event.srcElement || document;
    }

    // Handle which other element the event is related to
    if (!event.relatedTarget) {
      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
    }

    // Stop the default browser action
    event.preventDefault = function () {
      if (old.preventDefault) {
        old.preventDefault();
      }
      event.returnValue = false;
      old.returnValue = false;
      event.defaultPrevented = true;
    };

    event.defaultPrevented = false;

    // Stop the event from bubbling
    event.stopPropagation = function () {
      if (old.stopPropagation) {
        old.stopPropagation();
      }
      event.cancelBubble = true;
      old.cancelBubble = true;
      event.isPropagationStopped = returnTrue;
    };

    event.isPropagationStopped = returnFalse;

    // Stop the event from bubbling and executing other handlers
    event.stopImmediatePropagation = function () {
      if (old.stopImmediatePropagation) {
        old.stopImmediatePropagation();
      }
      event.isImmediatePropagationStopped = returnTrue;
      event.stopPropagation();
    };

    event.isImmediatePropagationStopped = returnFalse;

    // Handle mouse position
    if (event.clientX !== null && event.clientX !== undefined) {
      var doc = document.documentElement;
      var body = document.body;

      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
    }

    // Handle key presses
    event.which = event.charCode || event.keyCode;

    // Fix button for mouse clicks:
    // 0 == left; 1 == middle; 2 == right
    if (event.button !== null && event.button !== undefined) {

      // The following is disabled because it does not pass videojs-standard
      // and... yikes.
      /* eslint-disable */
      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
      /* eslint-enable */
    }
  }

  // Returns fixed-up instance
  return event;
}

/**
 * Whether passive event listeners are supported
 */
var _supportsPassive = false;

(function () {
  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function get() {
        _supportsPassive = true;
      }
    });

    window.addEventListener('test', null, opts);
    window.removeEventListener('test', null, opts);
  } catch (e) {
    // disregard
  }
})();

/**
 * Touch events Chrome expects to be passive
 */
var passiveEvents = ['touchstart', 'touchmove'];

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string|string[]} type
 *        Type of event to bind to.
 *
 * @param {EventTarget~EventListener} fn
 *        Event listener.
 */
function on(elem, type, fn) {
  if (Array.isArray(type)) {
    return _handleMultipleEvents(on, elem, type, fn);
  }

  var data = getData(elem);

  // We need a place to store all our handler data
  if (!data.handlers) {
    data.handlers = {};
  }

  if (!data.handlers[type]) {
    data.handlers[type] = [];
  }

  if (!fn.guid) {
    fn.guid = newGUID();
  }

  data.handlers[type].push(fn);

  if (!data.dispatcher) {
    data.disabled = false;

    data.dispatcher = function (event, hash) {

      if (data.disabled) {
        return;
      }

      event = fixEvent(event);

      var handlers = data.handlers[event.type];

      if (handlers) {
        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
        var handlersCopy = handlers.slice(0);

        for (var m = 0, n = handlersCopy.length; m < n; m++) {
          if (event.isImmediatePropagationStopped()) {
            break;
          } else {
            try {
              handlersCopy[m].call(elem, event, hash);
            } catch (e) {
              log$1.error(e);
            }
          }
        }
      }
    };
  }

  if (data.handlers[type].length === 1) {
    if (elem.addEventListener) {
      var options = false;

      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {
        options = { passive: true };
      }
      elem.addEventListener(type, data.dispatcher, options);
    } else if (elem.attachEvent) {
      elem.attachEvent('on' + type, data.dispatcher);
    }
  }
}

/**
 * Removes event listeners from an element
 *
 * @param {Element|Object} elem
 *        Object to remove listeners from.
 *
 * @param {string|string[]} [type]
 *        Type of listener to remove. Don't include to remove all events from element.
 *
 * @param {EventTarget~EventListener} [fn]
 *        Specific listener to remove. Don't include to remove listeners for an event
 *        type.
 */
function off(elem, type, fn) {
  // Don't want to add a cache object through getElData if not needed
  if (!hasData(elem)) {
    return;
  }

  var data = getData(elem);

  // If no events exist, nothing to unbind
  if (!data.handlers) {
    return;
  }

  if (Array.isArray(type)) {
    return _handleMultipleEvents(off, elem, type, fn);
  }

  // Utility function
  var removeType = function removeType(el, t) {
    data.handlers[t] = [];
    _cleanUpEvents(el, t);
  };

  // Are we removing all bound events?
  if (type === undefined) {
    for (var t in data.handlers) {
      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {
        removeType(elem, t);
      }
    }
    return;
  }

  var handlers = data.handlers[type];

  // If no handlers exist, nothing to unbind
  if (!handlers) {
    return;
  }

  // If no listener was provided, remove all listeners for type
  if (!fn) {
    removeType(elem, type);
    return;
  }

  // We're only removing a single handler
  if (fn.guid) {
    for (var n = 0; n < handlers.length; n++) {
      if (handlers[n].guid === fn.guid) {
        handlers.splice(n--, 1);
      }
    }
  }

  _cleanUpEvents(elem, type);
}

/**
 * Trigger an event for an element
 *
 * @param {Element|Object} elem
 *        Element to trigger an event on
 *
 * @param {EventTarget~Event|string} event
 *        A string (the type) or an event object with a type attribute
 *
 * @param {Object} [hash]
 *        data hash to pass along with the event
 *
 * @return {boolean|undefined}
 *         - Returns the opposite of `defaultPrevented` if default was prevented
 *         - Otherwise returns undefined
 */
function trigger(elem, event, hash) {
  // Fetches element data and a reference to the parent (for bubbling).
  // Don't want to add a data object to cache for every parent,
  // so checking hasElData first.
  var elemData = hasData(elem) ? getData(elem) : {};
  var parent = elem.parentNode || elem.ownerDocument;
  // type = event.type || event,
  // handler;

  // If an event name was passed as a string, creates an event out of it
  if (typeof event === 'string') {
    event = { type: event, target: elem };
  } else if (!event.target) {
    event.target = elem;
  }

  // Normalizes the event properties.
  event = fixEvent(event);

  // If the passed element has a dispatcher, executes the established handlers.
  if (elemData.dispatcher) {
    elemData.dispatcher.call(elem, event, hash);
  }

  // Unless explicitly stopped or the event does not bubble (e.g. media events)
  // recursively calls this function to bubble the event up the DOM.
  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
    trigger.call(null, parent, event, hash);

    // If at the top of the DOM, triggers the default action unless disabled.
  } else if (!parent && !event.defaultPrevented) {
    var targetData = getData(event.target);

    // Checks if the target has a default action for this event.
    if (event.target[event.type]) {
      // Temporarily disables event dispatching on the target as we have already executed the handler.
      targetData.disabled = true;
      // Executes the default action.
      if (typeof event.target[event.type] === 'function') {
        event.target[event.type]();
      }
      // Re-enables event dispatching.
      targetData.disabled = false;
    }
  }

  // Inform the triggerer if the default was prevented by returning false
  return !event.defaultPrevented;
}

/**
 * Trigger a listener only once for an event
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event Listener function
 */
function one(elem, type, fn) {
  if (Array.isArray(type)) {
    return _handleMultipleEvents(one, elem, type, fn);
  }
  var func = function func() {
    off(elem, type, func);
    fn.apply(this, arguments);
  };

  // copy the guid to the new function so it can removed using the original function's ID
  func.guid = fn.guid = fn.guid || newGUID();
  on(elem, type, func);
}

var Events = (Object.freeze || Object)({
	fixEvent: fixEvent,
	on: on,
	off: off,
	trigger: trigger,
	one: one
});

/**
 * @file setup.js - Functions for setting up a player without
 * user interaction based on the data-setup `attribute` of the video tag.
 *
 * @module setup
 */
var _windowLoaded = false;
var videojs$2 = void 0;

/**
 * Set up any tags that have a data-setup `attribute` when the player is started.
 */
var autoSetup = function autoSetup() {

  // Protect against breakage in non-browser environments.
  if (!isReal()) {
    return;
  }

  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
  // var mediaEls = vids.concat(audios);

  // Because IE8 doesn't support calling slice on a node list, we need to loop
  // through each list of elements to build up a new, combined list of elements.
  var vids = document.getElementsByTagName('video');
  var audios = document.getElementsByTagName('audio');
  var divs = document.getElementsByTagName('video-js');
  var mediaEls = [];

  if (vids && vids.length > 0) {
    for (var i = 0, e = vids.length; i < e; i++) {
      mediaEls.push(vids[i]);
    }
  }

  if (audios && audios.length > 0) {
    for (var _i = 0, _e = audios.length; _i < _e; _i++) {
      mediaEls.push(audios[_i]);
    }
  }

  if (divs && divs.length > 0) {
    for (var _i2 = 0, _e2 = divs.length; _i2 < _e2; _i2++) {
      mediaEls.push(divs[_i2]);
    }
  }

  // Check if any media elements exist
  if (mediaEls && mediaEls.length > 0) {

    for (var _i3 = 0, _e3 = mediaEls.length; _i3 < _e3; _i3++) {
      var mediaEl = mediaEls[_i3];

      // Check if element exists, has getAttribute func.
      // IE seems to consider typeof el.getAttribute == 'object' instead of
      // 'function' like expected, at least when loading the player immediately.
      if (mediaEl && mediaEl.getAttribute) {

        // Make sure this player hasn't already been set up.
        if (mediaEl.player === undefined) {
          var options = mediaEl.getAttribute('data-setup');

          // Check if data-setup attr exists.
          // We only auto-setup if they've added the data-setup attr.
          if (options !== null) {
            // Create new video.js instance.
            videojs$2(mediaEl);
          }
        }

        // If getAttribute isn't defined, we need to wait for the DOM.
      } else {
        autoSetupTimeout(1);
        break;
      }
    }

    // No videos were found, so keep looping unless page is finished loading.
  } else if (!_windowLoaded) {
    autoSetupTimeout(1);
  }
};

/**
 * Wait until the page is loaded before running autoSetup. This will be called in
 * autoSetup if `hasLoaded` returns false.
 *
 * @param {number} wait
 *        How long to wait in ms
 *
 * @param {module:videojs} [vjs]
 *        The videojs library function
 */
function autoSetupTimeout(wait, vjs) {
  if (vjs) {
    videojs$2 = vjs;
  }

  window.setTimeout(autoSetup, wait);
}

if (isReal() && document.readyState === 'complete') {
  _windowLoaded = true;
} else {
  /**
   * Listen for the load event on window, and set _windowLoaded to true.
   *
   * @listens load
   */
  one(window, 'load', function () {
    _windowLoaded = true;
  });
}

/**
 * @file stylesheet.js
 * @module stylesheet
 */
/**
 * Create a DOM syle element given a className for it.
 *
 * @param {string} className
 *        The className to add to the created style element.
 *
 * @return {Element}
 *         The element that was created.
 */
var createStyleElement = function createStyleElement(className) {
  var style = document.createElement('style');

  style.className = className;

  return style;
};

/**
 * Add text to a DOM element.
 *
 * @param {Element} el
 *        The Element to add text content to.
 *
 * @param {string} content
 *        The text to add to the element.
 */
var setTextContent = function setTextContent(el, content) {
  if (el.styleSheet) {
    el.styleSheet.cssText = content;
  } else {
    el.textContent = content;
  }
};

/**
 * @file fn.js
 * @module fn
 */
/**
 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
 * It also stores a unique id on the function so it can be easily removed from events.
 *
 * @param {Mixed} context
 *        The object to bind as scope.
 *
 * @param {Function} fn
 *        The function to be bound to a scope.
 *
 * @param {number} [uid]
 *        An optional unique ID for the function to be set
 *
 * @return {Function}
 *         The new function that will be bound into the context given
 */
var bind = function bind(context, fn, uid) {
  // Make sure the function has a unique ID
  if (!fn.guid) {
    fn.guid = newGUID();
  }

  // Create the new function that changes the context
  var bound = function bound() {
    return fn.apply(context, arguments);
  };

  // Allow for the ability to individualize this function
  // Needed in the case where multiple objects might share the same prototype
  // IF both items add an event listener with the same function, then you try to remove just one
  // it will remove both because they both have the same guid.
  // when using this, you need to use the bind method when you remove the listener as well.
  // currently used in text tracks
  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

  return bound;
};

/**
 * Wraps the given function, `fn`, with a new function that only invokes `fn`
 * at most once per every `wait` milliseconds.
 *
 * @param  {Function} fn
 *         The function to be throttled.
 *
 * @param  {Number}   wait
 *         The number of milliseconds by which to throttle.
 *
 * @return {Function}
 */
var throttle = function throttle(fn, wait) {
  var last = Date.now();

  var throttled = function throttled() {
    var now = Date.now();

    if (now - last >= wait) {
      fn.apply(undefined, arguments);
      last = now;
    }
  };

  return throttled;
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked.
 *
 * Inspired by lodash and underscore implementations.
 *
 * @param  {Function} func
 *         The function to wrap with debounce behavior.
 *
 * @param  {number} wait
 *         The number of milliseconds to wait after the last invocation.
 *
 * @param  {boolean} [immediate]
 *         Whether or not to invoke the function immediately upon creation.
 *
 * @param  {Object} [context=window]
 *         The "context" in which the debounced function should debounce. For
 *         example, if this function should be tied to a Video.js player,
 *         the player can be passed here. Alternatively, defaults to the
 *         global `window` object.
 *
 * @return {Function}
 *         A debounced function.
 */
var debounce = function debounce(func, wait, immediate) {
  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window;

  var timeout = void 0;

  /* eslint-disable consistent-this */
  return function () {
    var self = this;
    var args = arguments;

    var _later = function later() {
      timeout = null;
      _later = null;
      if (!immediate) {
        func.apply(self, args);
      }
    };

    if (!timeout && immediate) {
      func.apply(self, args);
    }

    context.clearTimeout(timeout);
    timeout = context.setTimeout(_later, wait);
  };
  /* eslint-enable consistent-this */
};

/**
 * @file src/js/event-target.js
 */
/**
 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
 * adds shorthand functions that wrap around lengthy functions. For example:
 * the `on` function is a wrapper around `addEventListener`.
 *
 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
 * @class EventTarget
 */
var EventTarget = function EventTarget() {};

/**
 * A Custom DOM event.
 *
 * @typedef {Object} EventTarget~Event
 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
 */

/**
 * All event listeners should follow the following format.
 *
 * @callback EventTarget~EventListener
 * @this {EventTarget}
 *
 * @param {EventTarget~Event} event
 *        the event that triggered this function
 *
 * @param {Object} [hash]
 *        hash of data sent during the event
 */

/**
 * An object containing event names as keys and booleans as values.
 *
 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
 *         will have extra functionality. See that function for more information.
 *
 * @property EventTarget.prototype.allowedEvents_
 * @private
 */
EventTarget.prototype.allowedEvents_ = {};

/**
 * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
 * function that will get called when an event with a certain name gets triggered.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to call with `EventTarget`s
 */
EventTarget.prototype.on = function (type, fn) {
  // Remove the addEventListener alias before calling Events.on
  // so we don't get into an infinite type loop
  var ael = this.addEventListener;

  this.addEventListener = function () {};
  on(this, type, fn);
  this.addEventListener = ael;
};

/**
 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#on}
 */
EventTarget.prototype.addEventListener = EventTarget.prototype.on;

/**
 * Removes an `event listener` for a specific event from an instance of `EventTarget`.
 * This makes it so that the `event listener` will no longer get called when the
 * named event happens.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to remove.
 */
EventTarget.prototype.off = function (type, fn) {
  off(this, type, fn);
};

/**
 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#off}
 */
EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

/**
 * This function will add an `event listener` that gets triggered only once. After the
 * first trigger it will get removed. This is like adding an `event listener`
 * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to be called once for each event name.
 */
EventTarget.prototype.one = function (type, fn) {
  // Remove the addEventListener alialing Events.on
  // so we don't get into an infinite type loop
  var ael = this.addEventListener;

  this.addEventListener = function () {};
  one(this, type, fn);
  this.addEventListener = ael;
};

/**
 * This function causes an event to happen. This will then cause any `event listeners`
 * that are waiting for that event, to get called. If there are no `event listeners`
 * for an event then nothing will happen.
 *
 * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
 * Trigger will also call the `on` + `uppercaseEventName` function.
 *
 * Example:
 * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
 * `onClick` if it exists.
 *
 * @param {string|EventTarget~Event|Object} event
 *        The name of the event, an `Event`, or an object with a key of type set to
 *        an event name.
 */
EventTarget.prototype.trigger = function (event) {
  var type = event.type || event;

  if (typeof event === 'string') {
    event = { type: type };
  }
  event = fixEvent(event);

  if (this.allowedEvents_[type] && this['on' + type]) {
    this['on' + type](event);
  }

  trigger(this, event);
};

/**
 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#trigger}
 */
EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

/**
 * @file mixins/evented.js
 * @module evented
 */
/**
 * Returns whether or not an object has had the evented mixin applied.
 *
 * @param  {Object} object
 *         An object to test.
 *
 * @return {boolean}
 *         Whether or not the object appears to be evented.
 */
var isEvented = function isEvented(object) {
  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {
    return typeof object[k] === 'function';
  });
};

/**
 * Whether a value is a valid event type - non-empty string or array.
 *
 * @private
 * @param  {string|Array} type
 *         The type value to test.
 *
 * @return {boolean}
 *         Whether or not the type is a valid event type.
 */
var isValidEventType = function isValidEventType(type) {
  return (
    // The regex here verifies that the `type` contains at least one non-
    // whitespace character.
    typeof type === 'string' && /\S/.test(type) || Array.isArray(type) && !!type.length
  );
};

/**
 * Validates a value to determine if it is a valid event target. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the target does not appear to be a valid event target.
 *
 * @param  {Object} target
 *         The object to test.
 */
var validateTarget = function validateTarget(target) {
  if (!target.nodeName && !isEvented(target)) {
    throw new Error('Invalid target; must be a DOM node or evented object.');
  }
};

/**
 * Validates a value to determine if it is a valid event target. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the type does not appear to be a valid event type.
 *
 * @param  {string|Array} type
 *         The type to test.
 */
var validateEventType = function validateEventType(type) {
  if (!isValidEventType(type)) {
    throw new Error('Invalid event type; must be a non-empty string or array.');
  }
};

/**
 * Validates a value to determine if it is a valid listener. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the listener is not a function.
 *
 * @param  {Function} listener
 *         The listener to test.
 */
var validateListener = function validateListener(listener) {
  if (typeof listener !== 'function') {
    throw new Error('Invalid listener; must be a function.');
  }
};

/**
 * Takes an array of arguments given to `on()` or `one()`, validates them, and
 * normalizes them into an object.
 *
 * @private
 * @param  {Object} self
 *         The evented object on which `on()` or `one()` was called. This
 *         object will be bound as the `this` value for the listener.
 *
 * @param  {Array} args
 *         An array of arguments passed to `on()` or `one()`.
 *
 * @return {Object}
 *         An object containing useful values for `on()` or `one()` calls.
 */
var normalizeListenArgs = function normalizeListenArgs(self, args) {

  // If the number of arguments is less than 3, the target is always the
  // evented object itself.
  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;
  var target = void 0;
  var type = void 0;
  var listener = void 0;

  if (isTargetingSelf) {
    target = self.eventBusEl_;

    // Deal with cases where we got 3 arguments, but we are still listening to
    // the evented object itself.
    if (args.length >= 3) {
      args.shift();
    }

    type = args[0];
    listener = args[1];
  } else {
    target = args[0];
    type = args[1];
    listener = args[2];
  }

  validateTarget(target);
  validateEventType(type);
  validateListener(listener);

  listener = bind(self, listener);

  return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };
};

/**
 * Adds the listener to the event type(s) on the target, normalizing for
 * the type of target.
 *
 * @private
 * @param  {Element|Object} target
 *         A DOM node or evented object.
 *
 * @param  {string} method
 *         The event binding method to use ("on" or "one").
 *
 * @param  {string|Array} type
 *         One or more event type(s).
 *
 * @param  {Function} listener
 *         A listener function.
 */
var listen = function listen(target, method, type, listener) {
  validateTarget(target);

  if (target.nodeName) {
    Events[method](target, type, listener);
  } else {
    target[method](type, listener);
  }
};

/**
 * Contains methods that provide event capabilites to an object which is passed
 * to {@link module:evented|evented}.
 *
 * @mixin EventedMixin
 */
var EventedMixin = {

  /**
   * Add a listener to an event (or events) on this object or another evented
   * object.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  on: function on$$1() {
    var _this = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _normalizeListenArgs = normalizeListenArgs(this, args),
        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,
        target = _normalizeListenArgs.target,
        type = _normalizeListenArgs.type,
        listener = _normalizeListenArgs.listener;

    listen(target, 'on', type, listener);

    // If this object is listening to another evented object.
    if (!isTargetingSelf) {

      // If this object is disposed, remove the listener.
      var removeListenerOnDispose = function removeListenerOnDispose() {
        return _this.off(target, type, listener);
      };

      // Use the same function ID as the listener so we can remove it later it
      // using the ID of the original listener.
      removeListenerOnDispose.guid = listener.guid;

      // Add a listener to the target's dispose event as well. This ensures
      // that if the target is disposed BEFORE this object, we remove the
      // removal listener that was just added. Otherwise, we create a memory leak.
      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {
        return _this.off('dispose', removeListenerOnDispose);
      };

      // Use the same function ID as the listener so we can remove it later
      // it using the ID of the original listener.
      removeRemoverOnTargetDispose.guid = listener.guid;

      listen(this, 'on', 'dispose', removeListenerOnDispose);
      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);
    }
  },


  /**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will only be called once and then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  one: function one$$1() {
    var _this2 = this;

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var _normalizeListenArgs2 = normalizeListenArgs(this, args),
        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,
        target = _normalizeListenArgs2.target,
        type = _normalizeListenArgs2.type,
        listener = _normalizeListenArgs2.listener;

    // Targeting this evented object.


    if (isTargetingSelf) {
      listen(target, 'one', type, listener);

      // Targeting another evented object.
    } else {
      var wrapper = function wrapper() {
        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          largs[_key3] = arguments[_key3];
        }

        _this2.off(target, type, wrapper);
        listener.apply(null, largs);
      };

      // Use the same function ID as the listener so we can remove it later
      // it using the ID of the original listener.
      wrapper.guid = listener.guid;
      listen(target, 'one', type, wrapper);
    }
  },


  /**
   * Removes listener(s) from event(s) on an evented object.
   *
   * @param  {string|Array|Element|Object} [targetOrType]
   *         If this is a string or array, it represents the event type(s).
   *
   *         Another evented object can be passed here instead, in which case
   *         ALL 3 arguments are _required_.
   *
   * @param  {string|Array|Function} [typeOrListener]
   *         If the first argument was a string or array, this may be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function; otherwise, _all_ listeners bound to the
   *         event type(s) will be removed.
   */
  off: function off$$1(targetOrType, typeOrListener, listener) {

    // Targeting this evented object.
    if (!targetOrType || isValidEventType(targetOrType)) {
      off(this.eventBusEl_, targetOrType, typeOrListener);

      // Targeting another evented object.
    } else {
      var target = targetOrType;
      var type = typeOrListener;

      // Fail fast and in a meaningful way!
      validateTarget(target);
      validateEventType(type);
      validateListener(listener);

      // Ensure there's at least a guid, even if the function hasn't been used
      listener = bind(this, listener);

      // Remove the dispose listener on this evented object, which was given
      // the same guid as the event listener in on().
      this.off('dispose', listener);

      if (target.nodeName) {
        off(target, type, listener);
        off(target, 'dispose', listener);
      } else if (isEvented(target)) {
        target.off(type, listener);
        target.off('dispose', listener);
      }
    }
  },


  /**
   * Fire an event on this evented object, causing its listeners to be called.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash]
   *          An additional object to pass along to listeners.
   *
   * @returns {boolean}
   *          Whether or not the default behavior was prevented.
   */
  trigger: function trigger$$1(event, hash) {
    return trigger(this.eventBusEl_, event, hash);
  }
};

/**
 * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
 *
 * @param  {Object} target
 *         The object to which to add event methods.
 *
 * @param  {Object} [options={}]
 *         Options for customizing the mixin behavior.
 *
 * @param  {String} [options.eventBusKey]
 *         By default, adds a `eventBusEl_` DOM element to the target object,
 *         which is used as an event bus. If the target object already has a
 *         DOM element that should be used, pass its key here.
 *
 * @return {Object}
 *         The target object.
 */
function evented(target) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var eventBusKey = options.eventBusKey;

  // Set or create the eventBusEl_.

  if (eventBusKey) {
    if (!target[eventBusKey].nodeName) {
      throw new Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
    }
    target.eventBusEl_ = target[eventBusKey];
  } else {
    target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });
  }

  assign(target, EventedMixin);

  // When any evented object is disposed, it removes all its listeners.
  target.on('dispose', function () {
    target.off();
    window.setTimeout(function () {
      target.eventBusEl_ = null;
    }, 0);
  });

  return target;
}

/**
 * @file mixins/stateful.js
 * @module stateful
 */
/**
 * Contains methods that provide statefulness to an object which is passed
 * to {@link module:stateful}.
 *
 * @mixin StatefulMixin
 */
var StatefulMixin = {

  /**
   * A hash containing arbitrary keys and values representing the state of
   * the object.
   *
   * @type {Object}
   */
  state: {},

  /**
   * Set the state of an object by mutating its
   * {@link module:stateful~StatefulMixin.state|state} object in place.
   *
   * @fires   module:stateful~StatefulMixin#statechanged
   * @param   {Object|Function} stateUpdates
   *          A new set of properties to shallow-merge into the plugin state.
   *          Can be a plain object or a function returning a plain object.
   *
   * @returns {Object|undefined}
   *          An object containing changes that occurred. If no changes
   *          occurred, returns `undefined`.
   */
  setState: function setState(stateUpdates) {
    var _this = this;

    // Support providing the `stateUpdates` state as a function.
    if (typeof stateUpdates === 'function') {
      stateUpdates = stateUpdates();
    }

    var changes = void 0;

    each(stateUpdates, function (value, key) {

      // Record the change if the value is different from what's in the
      // current state.
      if (_this.state[key] !== value) {
        changes = changes || {};
        changes[key] = {
          from: _this.state[key],
          to: value
        };
      }

      _this.state[key] = value;
    });

    // Only trigger "statechange" if there were changes AND we have a trigger
    // function. This allows us to not require that the target object be an
    // evented object.
    if (changes && isEvented(this)) {

      /**
       * An event triggered on an object that is both
       * {@link module:stateful|stateful} and {@link module:evented|evented}
       * indicating that its state has changed.
       *
       * @event    module:stateful~StatefulMixin#statechanged
       * @type     {Object}
       * @property {Object} changes
       *           A hash containing the properties that were changed and
       *           the values they were changed `from` and `to`.
       */
      this.trigger({
        changes: changes,
        type: 'statechanged'
      });
    }

    return changes;
  }
};

/**
 * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
 * object.
 *
 * If the target object is {@link module:evented|evented} and has a
 * `handleStateChanged` method, that method will be automatically bound to the
 * `statechanged` event on itself.
 *
 * @param   {Object} target
 *          The object to be made stateful.
 *
 * @param   {Object} [defaultState]
 *          A default set of properties to populate the newly-stateful object's
 *          `state` property.
 *
 * @returns {Object}
 *          Returns the `target`.
 */
function stateful(target, defaultState) {
  assign(target, StatefulMixin);

  // This happens after the mixing-in because we need to replace the `state`
  // added in that step.
  target.state = assign({}, target.state, defaultState);

  // Auto-bind the `handleStateChanged` method of the target object if it exists.
  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {
    target.on('statechanged', target.handleStateChanged);
  }

  return target;
}

/**
 * @file to-title-case.js
 * @module to-title-case
 */

/**
 * Uppercase the first letter of a string.
 *
 * @param {string} string
 *        String to be uppercased
 *
 * @return {string}
 *         The string with an uppercased first letter
 */
function toTitleCase(string) {
  if (typeof string !== 'string') {
    return string;
  }

  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Compares the TitleCase versions of the two strings for equality.
 *
 * @param {string} str1
 *        The first string to compare
 *
 * @param {string} str2
 *        The second string to compare
 *
 * @return {boolean}
 *         Whether the TitleCase versions of the strings are equal
 */
function titleCaseEquals(str1, str2) {
  return toTitleCase(str1) === toTitleCase(str2);
}

/**
 * @file merge-options.js
 * @module merge-options
 */
/**
 * Deep-merge one or more options objects, recursively merging **only** plain
 * object properties.
 *
 * @param   {Object[]} sources
 *          One or more objects to merge into a new object.
 *
 * @returns {Object}
 *          A new object that is the merged result of all sources.
 */
function mergeOptions() {
  var result = {};

  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  sources.forEach(function (source) {
    if (!source) {
      return;
    }

    each(source, function (value, key) {
      if (!isPlain(value)) {
        result[key] = value;
        return;
      }

      if (!isPlain(result[key])) {
        result[key] = {};
      }

      result[key] = mergeOptions(result[key], value);
    });
  });

  return result;
}

/**
 * Player Component - Base class for all UI objects
 *
 * @file component.js
 */
/**
 * Base class for all UI Components.
 * Components are UI objects which represent both a javascript object and an element
 * in the DOM. They can be children of other components, and can have
 * children themselves.
 *
 * Components can also use methods from {@link EventTarget}
 */

var Component = function () {

  /**
   * A callback that is called when a component is ready. Does not have any
   * paramters and any callback value will be ignored.
   *
   * @callback Component~ReadyCallback
   * @this Component
   */

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Object[]} [options.children]
   *        An array of children objects to intialize this component with. Children objects have
   *        a name property that will be used if more than one component of the same type needs to be
   *        added.
   *
   * @param {Component~ReadyCallback} [ready]
   *        Function that gets called when the `Component` is ready.
   */
  function Component(player, options, ready) {
    classCallCheck(this, Component);


    // The component might be the player itself and we can't pass `this` to super
    if (!player && this.play) {
      this.player_ = player = this; // eslint-disable-line
    } else {
      this.player_ = player;
    }

    // Make a copy of prototype.options_ to protect against overriding defaults
    this.options_ = mergeOptions({}, this.options_);

    // Updated options with supplied options
    options = this.options_ = mergeOptions(this.options_, options);

    // Get ID from options or options element if one is supplied
    this.id_ = options.id || options.el && options.el.id;

    // If there was no ID from the options, generate one
    if (!this.id_) {
      // Don't require the player ID function in the case of mock players
      var id = player && player.id && player.id() || 'no_player';

      this.id_ = id + '_component_' + newGUID();
    }

    this.name_ = options.name || null;

    // Create element if one wasn't provided in options
    if (options.el) {
      this.el_ = options.el;
    } else if (options.createEl !== false) {
      this.el_ = this.createEl();
    }

    // if evented is anything except false, we want to mixin in evented
    if (options.evented !== false) {
      // Make this an evented object and use `el_`, if available, as its event bus
      evented(this, { eventBusKey: this.el_ ? 'el_' : null });
    }
    stateful(this, this.constructor.defaultState);

    this.children_ = [];
    this.childIndex_ = {};
    this.childNameIndex_ = {};

    // Add any child components in options
    if (options.initChildren !== false) {
      this.initChildren();
    }

    this.ready(ready);
    // Don't want to trigger ready here or it will before init is actually
    // finished for all children that run this constructor

    if (options.reportTouchActivity !== false) {
      this.enableTouchActivity();
    }
  }

  /**
   * Dispose of the `Component` and all child components.
   *
   * @fires Component#dispose
   */


  Component.prototype.dispose = function dispose() {

    /**
     * Triggered when a `Component` is disposed.
     *
     * @event Component#dispose
     * @type {EventTarget~Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the close event does not
     *           bubble up
     */
    this.trigger({ type: 'dispose', bubbles: false });

    // Dispose all children.
    if (this.children_) {
      for (var i = this.children_.length - 1; i >= 0; i--) {
        if (this.children_[i].dispose) {
          this.children_[i].dispose();
        }
      }
    }

    // Delete child references
    this.children_ = null;
    this.childIndex_ = null;
    this.childNameIndex_ = null;

    if (this.el_) {
      // Remove element from DOM
      if (this.el_.parentNode) {
        this.el_.parentNode.removeChild(this.el_);
      }

      removeData(this.el_);
      this.el_ = null;
    }

    // remove reference to the player after disposing of the element
    this.player_ = null;
  };

  /**
   * Return the {@link Player} that the `Component` has attached to.
   *
   * @return {Player}
   *         The player that this `Component` has attached to.
   */


  Component.prototype.player = function player() {
    return this.player_;
  };

  /**
   * Deep merge of options objects with new options.
   * > Note: When both `obj` and `options` contain properties whose values are objects.
   *         The two properties get merged using {@link module:mergeOptions}
   *
   * @param {Object} obj
   *        The object that contains new options.
   *
   * @return {Object}
   *         A new object of `this.options_` and `obj` merged together.
   *
   * @deprecated since version 5
   */


  Component.prototype.options = function options(obj) {
    log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

    if (!obj) {
      return this.options_;
    }

    this.options_ = mergeOptions(this.options_, obj);
    return this.options_;
  };

  /**
   * Get the `Component`s DOM element
   *
   * @return {Element}
   *         The DOM element for this `Component`.
   */


  Component.prototype.el = function el() {
    return this.el_;
  };

  /**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tagName]
   *        Element's DOM node type. e.g. 'div'
   *
   * @param {Object} [properties]
   *        An object of properties that should be set.
   *
   * @param {Object} [attributes]
   *        An object of attributes that should be set.
   *
   * @return {Element}
   *         The element that gets created.
   */


  Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {
    return createEl(tagName, properties, attributes);
  };

  /**
   * Localize a string given the string in english.
   *
   * If tokens are provided, it'll try and run a simple token replacement on the provided string.
   * The tokens it loooks for look like `{1}` with the index being 1-indexed into the tokens array.
   *
   * If a `defaultValue` is provided, it'll use that over `string`,
   * if a value isn't found in provided language files.
   * This is useful if you want to have a descriptive key for token replacement
   * but have a succinct localized string and not require `en.json` to be included.
   *
   * Currently, it is used for the progress bar timing.
   * ```js
   * {
   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
   * }
   * ```
   * It is then used like so:
   * ```js
   * this.localize('progress bar timing: currentTime={1} duration{2}',
   *               [this.player_.currentTime(), this.player_.duration()],
   *               '{1} of {2}');
   * ```
   *
   * Which outputs something like: `01:23 of 24:56`.
   *
   *
   * @param {string} string
   *        The string to localize and the key to lookup in the language files.
   * @param {string[]} [tokens]
   *        If the current item has token replacements, provide the tokens here.
   * @param {string} [defaultValue]
   *        Defaults to `string`. Can be a default value to use for token replacement
   *        if the lookup key is needed to be separate.
   *
   * @return {string}
   *         The localized string or if no localization exists the english string.
   */


  Component.prototype.localize = function localize(string, tokens) {
    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;

    var code = this.player_.language && this.player_.language();
    var languages = this.player_.languages && this.player_.languages();
    var language = languages && languages[code];
    var primaryCode = code && code.split('-')[0];
    var primaryLang = languages && languages[primaryCode];

    var localizedString = defaultValue;

    if (language && language[string]) {
      localizedString = language[string];
    } else if (primaryLang && primaryLang[string]) {
      localizedString = primaryLang[string];
    }

    if (tokens) {
      localizedString = localizedString.replace(/\{(\d+)\}/g, function (match, index) {
        var value = tokens[index - 1];
        var ret = value;

        if (typeof value === 'undefined') {
          ret = match;
        }

        return ret;
      });
    }

    return localizedString;
  };

  /**
   * Return the `Component`s DOM element. This is where children get inserted.
   * This will usually be the the same as the element returned in {@link Component#el}.
   *
   * @return {Element}
   *         The content element for this `Component`.
   */


  Component.prototype.contentEl = function contentEl() {
    return this.contentEl_ || this.el_;
  };

  /**
   * Get this `Component`s ID
   *
   * @return {string}
   *         The id of this `Component`
   */


  Component.prototype.id = function id() {
    return this.id_;
  };

  /**
   * Get the `Component`s name. The name gets used to reference the `Component`
   * and is set during registration.
   *
   * @return {string}
   *         The name of this `Component`.
   */


  Component.prototype.name = function name() {
    return this.name_;
  };

  /**
   * Get an array of all child components
   *
   * @return {Array}
   *         The children
   */


  Component.prototype.children = function children() {
    return this.children_;
  };

  /**
   * Returns the child `Component` with the given `id`.
   *
   * @param {string} id
   *        The id of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `id` or undefined.
   */


  Component.prototype.getChildById = function getChildById(id) {
    return this.childIndex_[id];
  };

  /**
   * Returns the child `Component` with the given `name`.
   *
   * @param {string} name
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `name` or undefined.
   */


  Component.prototype.getChild = function getChild(name) {
    if (!name) {
      return;
    }

    name = toTitleCase(name);

    return this.childNameIndex_[name];
  };

  /**
   * Add a child `Component` inside the current `Component`.
   *
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @param {number} [index=this.children_.length]
   *        The index to attempt to add a child into.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   */


  Component.prototype.addChild = function addChild(child) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;

    var component = void 0;
    var componentName = void 0;

    // If child is a string, create component with options
    if (typeof child === 'string') {
      componentName = toTitleCase(child);

      var componentClassName = options.componentClass || componentName;

      // Set name through options
      options.name = componentName;

      // Create a new object & element for this controls set
      // If there's no .player_, this is a player
      var ComponentClass = Component.getComponent(componentClassName);

      if (!ComponentClass) {
        throw new Error('Component ' + componentClassName + ' does not exist');
      }

      // data stored directly on the videojs object may be
      // misidentified as a component to retain
      // backwards-compatibility with 4.x. check to make sure the
      // component class can be instantiated.
      if (typeof ComponentClass !== 'function') {
        return null;
      }

      component = new ComponentClass(this.player_ || this, options);

      // child is a component instance
    } else {
      component = child;
    }

    this.children_.splice(index, 0, component);

    if (typeof component.id === 'function') {
      this.childIndex_[component.id()] = component;
    }

    // If a name wasn't used to create the component, check if we can use the
    // name function of the component
    componentName = componentName || component.name && toTitleCase(component.name());

    if (componentName) {
      this.childNameIndex_[componentName] = component;
    }

    // Add the UI object's element to the container div (box)
    // Having an element is not required
    if (typeof component.el === 'function' && component.el()) {
      var childNodes = this.contentEl().children;
      var refNode = childNodes[index] || null;

      this.contentEl().insertBefore(component.el(), refNode);
    }

    // Return so it can stored on parent object if desired.
    return component;
  };

  /**
   * Remove a child `Component` from this `Component`s list of children. Also removes
   * the child `Component`s element from this `Component`s element.
   *
   * @param {Component} component
   *        The child `Component` to remove.
   */


  Component.prototype.removeChild = function removeChild(component) {
    if (typeof component === 'string') {
      component = this.getChild(component);
    }

    if (!component || !this.children_) {
      return;
    }

    var childFound = false;

    for (var i = this.children_.length - 1; i >= 0; i--) {
      if (this.children_[i] === component) {
        childFound = true;
        this.children_.splice(i, 1);
        break;
      }
    }

    if (!childFound) {
      return;
    }

    this.childIndex_[component.id()] = null;
    this.childNameIndex_[component.name()] = null;

    var compEl = component.el();

    if (compEl && compEl.parentNode === this.contentEl()) {
      this.contentEl().removeChild(component.el());
    }
  };

  /**
   * Add and initialize default child `Component`s based upon options.
   */


  Component.prototype.initChildren = function initChildren() {
    var _this = this;

    var children = this.options_.children;

    if (children) {
      // `this` is `parent`
      var parentOptions = this.options_;

      var handleAdd = function handleAdd(child) {
        var name = child.name;
        var opts = child.opts;

        // Allow options for children to be set at the parent options
        // e.g. videojs(id, { controlBar: false });
        // instead of videojs(id, { children: { controlBar: false });
        if (parentOptions[name] !== undefined) {
          opts = parentOptions[name];
        }

        // Allow for disabling default components
        // e.g. options['children']['posterImage'] = false
        if (opts === false) {
          return;
        }

        // Allow options to be passed as a simple boolean if no configuration
        // is necessary.
        if (opts === true) {
          opts = {};
        }

        // We also want to pass the original player options
        // to each component as well so they don't need to
        // reach back into the player for options later.
        opts.playerOptions = _this.options_.playerOptions;

        // Create and add the child component.
        // Add a direct reference to the child by name on the parent instance.
        // If two of the same component are used, different names should be supplied
        // for each
        var newChild = _this.addChild(name, opts);

        if (newChild) {
          _this[name] = newChild;
        }
      };

      // Allow for an array of children details to passed in the options
      var workingChildren = void 0;
      var Tech = Component.getComponent('Tech');

      if (Array.isArray(children)) {
        workingChildren = children;
      } else {
        workingChildren = Object.keys(children);
      }

      workingChildren
      // children that are in this.options_ but also in workingChildren  would
      // give us extra children we do not want. So, we want to filter them out.
      .concat(Object.keys(this.options_).filter(function (child) {
        return !workingChildren.some(function (wchild) {
          if (typeof wchild === 'string') {
            return child === wchild;
          }
          return child === wchild.name;
        });
      })).map(function (child) {
        var name = void 0;
        var opts = void 0;

        if (typeof child === 'string') {
          name = child;
          opts = children[name] || _this.options_[name] || {};
        } else {
          name = child.name;
          opts = child;
        }

        return { name: name, opts: opts };
      }).filter(function (child) {
        // we have to make sure that child.name isn't in the techOrder since
        // techs are registerd as Components but can't aren't compatible
        // See https://github.com/videojs/video.js/issues/2772
        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));

        return c && !Tech.isTech(c);
      }).forEach(handleAdd);
    }
  };

  /**
   * Builds the default DOM class name. Should be overriden by sub-components.
   *
   * @return {string}
   *         The DOM class name for this object.
   *
   * @abstract
   */


  Component.prototype.buildCSSClass = function buildCSSClass() {
    // Child classes can include a function that does:
    // return 'CLASS NAME' + this._super();
    return '';
  };

  /**
   * Bind a listener to the component's ready state.
   * Different from event listeners in that if the ready event has already happened
   * it will trigger the function immediately.
   *
   * @return {Component}
   *         Returns itself; method can be chained.
   */


  Component.prototype.ready = function ready(fn) {
    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!fn) {
      return;
    }

    if (!this.isReady_) {
      this.readyQueue_ = this.readyQueue_ || [];
      this.readyQueue_.push(fn);
      return;
    }

    if (sync) {
      fn.call(this);
    } else {
      // Call the function asynchronously by default for consistency
      this.setTimeout(fn, 1);
    }
  };

  /**
   * Trigger all the ready listeners for this `Component`.
   *
   * @fires Component#ready
   */


  Component.prototype.triggerReady = function triggerReady() {
    this.isReady_ = true;

    // Ensure ready is triggerd asynchronously
    this.setTimeout(function () {
      var readyQueue = this.readyQueue_;

      // Reset Ready Queue
      this.readyQueue_ = [];

      if (readyQueue && readyQueue.length > 0) {
        readyQueue.forEach(function (fn) {
          fn.call(this);
        }, this);
      }

      // Allow for using event listeners also
      /**
       * Triggered when a `Component` is ready.
       *
       * @event Component#ready
       * @type {EventTarget~Event}
       */
      this.trigger('ready');
    }, 1);
  };

  /**
   * Find a single DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelector`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {Element|null}
   *         the dom element that was found, or null
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */


  Component.prototype.$ = function $$$1(selector, context) {
    return $(selector, context || this.contentEl());
  };

  /**
   * Finds all DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelectorAll`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {NodeList}
   *         a list of dom elements that were found
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */


  Component.prototype.$$ = function $$$$1(selector, context) {
    return $$(selector, context || this.contentEl());
  };

  /**
   * Check if a component's element has a CSS class name.
   *
   * @param {string} classToCheck
   *        CSS class name to check.
   *
   * @return {boolean}
   *         - True if the `Component` has the class.
   *         - False if the `Component` does not have the class`
   */


  Component.prototype.hasClass = function hasClass$$1(classToCheck) {
    return hasClass(this.el_, classToCheck);
  };

  /**
   * Add a CSS class name to the `Component`s element.
   *
   * @param {string} classToAdd
   *        CSS class name to add
   */


  Component.prototype.addClass = function addClass$$1(classToAdd) {
    addClass(this.el_, classToAdd);
  };

  /**
   * Remove a CSS class name from the `Component`s element.
   *
   * @param {string} classToRemove
   *        CSS class name to remove
   */


  Component.prototype.removeClass = function removeClass$$1(classToRemove) {
    removeClass(this.el_, classToRemove);
  };

  /**
   * Add or remove a CSS class name from the component's element.
   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
   *
   * @param  {string} classToToggle
   *         The class to add or remove based on (@link Component#hasClass}
   *
   * @param  {boolean|Dom~predicate} [predicate]
   *         An {@link Dom~predicate} function or a boolean
   */


  Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {
    toggleClass(this.el_, classToToggle, predicate);
  };

  /**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it.
   */


  Component.prototype.show = function show() {
    this.removeClass('vjs-hidden');
  };

  /**
   * Hide the `Component`s element if it is currently showing by adding the
   * 'vjs-hidden` class name to it.
   */


  Component.prototype.hide = function hide() {
    this.addClass('vjs-hidden');
  };

  /**
   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
   * class name to it. Used during fadeIn/fadeOut.
   *
   * @private
   */


  Component.prototype.lockShowing = function lockShowing() {
    this.addClass('vjs-lock-showing');
  };

  /**
   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
   * class name from it. Used during fadeIn/fadeOut.
   *
   * @private
   */


  Component.prototype.unlockShowing = function unlockShowing() {
    this.removeClass('vjs-lock-showing');
  };

  /**
   * Get the value of an attribute on the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to get the value from.
   *
   * @return {string|null}
   *         - The value of the attribute that was asked for.
   *         - Can be an empty string on some browsers if the attribute does not exist
   *           or has no value
   *         - Most browsers will return null if the attibute does not exist or has
   *           no value.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
   */


  Component.prototype.getAttribute = function getAttribute$$1(attribute) {
    return getAttribute(this.el_, attribute);
  };

  /**
   * Set the value of an attribute on the `Component`'s element
   *
   * @param {string} attribute
   *        Name of the attribute to set.
   *
   * @param {string} value
   *        Value to set the attribute to.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
   */


  Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {
    setAttribute(this.el_, attribute, value);
  };

  /**
   * Remove an attribute from the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to remove.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
   */


  Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {
    removeAttribute(this.el_, attribute);
  };

  /**
   * Get or set the width of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The width that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|string}
   *         The width when getting, zero if there is no width. Can be a string
   *           postpixed with '%' or 'px'.
   */


  Component.prototype.width = function width(num, skipListeners) {
    return this.dimension('width', num, skipListeners);
  };

  /**
   * Get or set the height of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The height that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|string}
   *         The width when getting, zero if there is no width. Can be a string
   *         postpixed with '%' or 'px'.
   */


  Component.prototype.height = function height(num, skipListeners) {
    return this.dimension('height', num, skipListeners);
  };

  /**
   * Set both the width and height of the `Component` element at the same time.
   *
   * @param  {number|string} width
   *         Width to set the `Component`s element to.
   *
   * @param  {number|string} height
   *         Height to set the `Component`s element to.
   */


  Component.prototype.dimensions = function dimensions(width, height) {
    // Skip componentresize listeners on width for optimization
    this.width(width, true);
    this.height(height);
  };

  /**
   * Get or set width or height of the `Component` element. This is the shared code
   * for the {@link Component#width} and {@link Component#height}.
   *
   * Things to know:
   * - If the width or height in an number this will return the number postfixed with 'px'.
   * - If the width/height is a percent this will return the percent postfixed with '%'
   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
   *   for more information
   * - If you want the computed style of the component, use {@link Component#currentWidth}
   *   and {@link {Component#currentHeight}
   *
   * @fires Component#componentresize
   *
   * @param {string} widthOrHeight
   8        'width' or 'height'
   *
   * @param  {number|string} [num]
   8         New dimension
   *
   * @param  {boolean} [skipListeners]
   *         Skip componentresize event trigger
   *
   * @return {number}
   *         The dimension when getting or 0 if unset
   */


  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
    if (num !== undefined) {
      // Set to zero if null or literally NaN (NaN !== NaN)
      if (num === null || num !== num) {
        num = 0;
      }

      // Check if using css width/height (% or px) and adjust
      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
        this.el_.style[widthOrHeight] = num;
      } else if (num === 'auto') {
        this.el_.style[widthOrHeight] = '';
      } else {
        this.el_.style[widthOrHeight] = num + 'px';
      }

      // skipListeners allows us to avoid triggering the resize event when setting both width and height
      if (!skipListeners) {
        /**
         * Triggered when a component is resized.
         *
         * @event Component#componentresize
         * @type {EventTarget~Event}
         */
        this.trigger('componentresize');
      }

      return;
    }

    // Not setting a value, so getting it
    // Make sure element exists
    if (!this.el_) {
      return 0;
    }

    // Get dimension value from style
    var val = this.el_.style[widthOrHeight];
    var pxIndex = val.indexOf('px');

    if (pxIndex !== -1) {
      // Return the pixel value with no 'px'
      return parseInt(val.slice(0, pxIndex), 10);
    }

    // No px so using % or no style was set, so falling back to offsetWidth/height
    // If component has display:none, offset will return 0
    // TODO: handle display:none and no dimension style using px
    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);
  };

  /**
   * Get the width or the height of the `Component` elements computed style. Uses
   * `window.getComputedStyle`.
   *
   * @param {string} widthOrHeight
   *        A string containing 'width' or 'height'. Whichever one you want to get.
   *
   * @return {number}
   *         The dimension that gets asked for or 0 if nothing was set
   *         for that dimension.
   */


  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
    var computedWidthOrHeight = 0;

    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
      throw new Error('currentDimension only accepts width or height value');
    }

    if (typeof window.getComputedStyle === 'function') {
      var computedStyle = window.getComputedStyle(this.el_);

      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
    }

    // remove 'px' from variable and parse as integer
    computedWidthOrHeight = parseFloat(computedWidthOrHeight);

    // if the computed value is still 0, it's possible that the browser is lying
    // and we want to check the offset values.
    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.
    if (computedWidthOrHeight === 0) {
      var rule = 'offset' + toTitleCase(widthOrHeight);

      computedWidthOrHeight = this.el_[rule];
    }

    return computedWidthOrHeight;
  };

  /**
   * An object that contains width and height values of the `Component`s
   * computed style. Uses `window.getComputedStyle`.
   *
   * @typedef {Object} Component~DimensionObject
   *
   * @property {number} width
   *           The width of the `Component`s computed style.
   *
   * @property {number} height
   *           The height of the `Component`s computed style.
   */

  /**
   * Get an object that contains width and height values of the `Component`s
   * computed style.
   *
   * @return {Component~DimensionObject}
   *         The dimensions of the components element
   */


  Component.prototype.currentDimensions = function currentDimensions() {
    return {
      width: this.currentDimension('width'),
      height: this.currentDimension('height')
    };
  };

  /**
   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.
   *
   * @return {number} width
   *           The width of the `Component`s computed style.
   */


  Component.prototype.currentWidth = function currentWidth() {
    return this.currentDimension('width');
  };

  /**
   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.
   *
   * @return {number} height
   *           The height of the `Component`s computed style.
   */


  Component.prototype.currentHeight = function currentHeight() {
    return this.currentDimension('height');
  };

  /**
   * Set the focus to this component
   */


  Component.prototype.focus = function focus() {
    this.el_.focus();
  };

  /**
   * Remove the focus from this component
   */


  Component.prototype.blur = function blur() {
    this.el_.blur();
  };

  /**
   * Emit a 'tap' events when touch event support gets detected. This gets used to
   * support toggling the controls through a tap on the video. They get enabled
   * because every sub-component would have extra overhead otherwise.
   *
   * @private
   * @fires Component#tap
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchleave
   * @listens Component#touchcancel
   * @listens Component#touchend
    */


  Component.prototype.emitTapEvents = function emitTapEvents() {
    // Track the start time so we can determine how long the touch lasted
    var touchStart = 0;
    var firstTouch = null;

    // Maximum movement allowed during a touch event to still be considered a tap
    // Other popular libs use anywhere from 2 (hammer.js) to 15,
    // so 10 seems like a nice, round number.
    var tapMovementThreshold = 10;

    // The maximum length a touch can be while still being considered a tap
    var touchTimeThreshold = 200;

    var couldBeTap = void 0;

    this.on('touchstart', function (event) {
      // If more than one finger, don't consider treating this as a click
      if (event.touches.length === 1) {
        // Copy pageX/pageY from the object
        firstTouch = {
          pageX: event.touches[0].pageX,
          pageY: event.touches[0].pageY
        };
        // Record start time so we can detect a tap vs. "touch and hold"
        touchStart = new Date().getTime();
        // Reset couldBeTap tracking
        couldBeTap = true;
      }
    });

    this.on('touchmove', function (event) {
      // If more than one finger, don't consider treating this as a click
      if (event.touches.length > 1) {
        couldBeTap = false;
      } else if (firstTouch) {
        // Some devices will throw touchmoves for all but the slightest of taps.
        // So, if we moved only a small distance, this could still be a tap
        var xdiff = event.touches[0].pageX - firstTouch.pageX;
        var ydiff = event.touches[0].pageY - firstTouch.pageY;
        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

        if (touchDistance > tapMovementThreshold) {
          couldBeTap = false;
        }
      }
    });

    var noTap = function noTap() {
      couldBeTap = false;
    };

    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
    this.on('touchleave', noTap);
    this.on('touchcancel', noTap);

    // When the touch ends, measure how long it took and trigger the appropriate
    // event
    this.on('touchend', function (event) {
      firstTouch = null;
      // Proceed only if the touchmove/leave/cancel event didn't happen
      if (couldBeTap === true) {
        // Measure how long the touch lasted
        var touchTime = new Date().getTime() - touchStart;

        // Make sure the touch was less than the threshold to be considered a tap
        if (touchTime < touchTimeThreshold) {
          // Don't let browser turn this into a click
          event.preventDefault();
          /**
           * Triggered when a `Component` is tapped.
           *
           * @event Component#tap
           * @type {EventTarget~Event}
           */
          this.trigger('tap');
          // It may be good to copy the touchend event object and change the
          // type to tap, if the other event properties aren't exact after
          // Events.fixEvent runs (e.g. event.target)
        }
      }
    });
  };

  /**
   * This function reports user activity whenever touch events happen. This can get
   * turned off by any sub-components that wants touch events to act another way.
   *
   * Report user touch activity when touch events occur. User activity gets used to
   * determine when controls should show/hide. It is simple when it comes to mouse
   * events, because any mouse event should show the controls. So we capture mouse
   * events that bubble up to the player and report activity when that happens.
   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
   * controls. So touch events can't help us at the player level either.
   *
   * User activity gets checked asynchronously. So what could happen is a tap event
   * on the video turns the controls off. Then the `touchend` event bubbles up to
   * the player. Which, if it reported user activity, would turn the controls right
   * back on. We also don't want to completely block touch events from bubbling up.
   * Furthermore a `touchmove` event and anything other than a tap, should not turn
   * controls back on.
   *
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchend
   * @listens Component#touchcancel
   */


  Component.prototype.enableTouchActivity = function enableTouchActivity() {
    // Don't continue if the root player doesn't support reporting user activity
    if (!this.player() || !this.player().reportUserActivity) {
      return;
    }

    // listener for reporting that the user is active
    var report = bind(this.player(), this.player().reportUserActivity);

    var touchHolding = void 0;

    this.on('touchstart', function () {
      report();
      // For as long as the they are touching the device or have their mouse down,
      // we consider them active even if they're not moving their finger or mouse.
      // So we want to continue to update that they are active
      this.clearInterval(touchHolding);
      // report at the same interval as activityCheck
      touchHolding = this.setInterval(report, 250);
    });

    var touchEnd = function touchEnd(event) {
      report();
      // stop the interval that maintains activity if the touch is holding
      this.clearInterval(touchHolding);
    };

    this.on('touchmove', report);
    this.on('touchend', touchEnd);
    this.on('touchcancel', touchEnd);
  };

  /**
   * A callback that has no parameters and is bound into `Component`s context.
   *
   * @callback Component~GenericCallback
   * @this Component
   */

  /**
   * Creates a function that runs after an `x` millisecond timeout. This function is a
   * wrapper around `window.setTimeout`. There are a few reasons to use this one
   * instead though:
   * 1. It gets cleared via  {@link Component#clearTimeout} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
   *
   * > Note: You can use `window.clearTimeout` on the id returned by this function. This
   *         will cause its dispose listener not to get cleaned up! Please use
   *         {@link Component#clearTimeout} or {@link Component#dispose}.
   *
   * @param {Component~GenericCallback} fn
   *        The function that will be run after `timeout`.
   *
   * @param {number} timeout
   *        Timeout in milliseconds to delay before executing the specified function.
   *
   * @return {number}
   *         Returns a timeout ID that gets used to identify the timeout. It can also
   *         get used in {@link Component#clearTimeout} to clear the timeout that
   *         was set.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
   */


  Component.prototype.setTimeout = function setTimeout(fn, timeout) {
    var _this2 = this;

    fn = bind(this, fn);

    var timeoutId = window.setTimeout(fn, timeout);
    var disposeFn = function disposeFn() {
      return _this2.clearTimeout(timeoutId);
    };

    disposeFn.guid = 'vjs-timeout-' + timeoutId;

    this.on('dispose', disposeFn);

    return timeoutId;
  };

  /**
   * Clears a timeout that gets created via `window.setTimeout` or
   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
   * use this function instead of `window.clearTimout`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} timeoutId
   *        The id of the timeout to clear. The return value of
   *        {@link Component#setTimeout} or `window.setTimeout`.
   *
   * @return {number}
   *         Returns the timeout id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
   */


  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
    window.clearTimeout(timeoutId);

    var disposeFn = function disposeFn() {};

    disposeFn.guid = 'vjs-timeout-' + timeoutId;

    this.off('dispose', disposeFn);

    return timeoutId;
  };

  /**
   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
   * around `window.setInterval`. There are a few reasons to use this one instead though.
   * 1. It gets cleared via  {@link Component#clearInterval} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will be a {@link Component~GenericCallback}
   *
   * @param {Component~GenericCallback} fn
   *        The function to run every `x` seconds.
   *
   * @param {number} interval
   *        Execute the specified function every `x` milliseconds.
   *
   * @return {number}
   *         Returns an id that can be used to identify the interval. It can also be be used in
   *         {@link Component#clearInterval} to clear the interval.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
   */


  Component.prototype.setInterval = function setInterval(fn, interval) {
    var _this3 = this;

    fn = bind(this, fn);

    var intervalId = window.setInterval(fn, interval);

    var disposeFn = function disposeFn() {
      return _this3.clearInterval(intervalId);
    };

    disposeFn.guid = 'vjs-interval-' + intervalId;

    this.on('dispose', disposeFn);

    return intervalId;
  };

  /**
   * Clears an interval that gets created via `window.setInterval` or
   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
   * use this function instead of `window.clearInterval`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} intervalId
   *        The id of the interval to clear. The return value of
   *        {@link Component#setInterval} or `window.setInterval`.
   *
   * @return {number}
   *         Returns the interval id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
   */


  Component.prototype.clearInterval = function clearInterval(intervalId) {
    window.clearInterval(intervalId);

    var disposeFn = function disposeFn() {};

    disposeFn.guid = 'vjs-interval-' + intervalId;

    this.off('dispose', disposeFn);

    return intervalId;
  };

  /**
   * Queues up a callback to be passed to requestAnimationFrame (rAF), but
   * with a few extra bonuses:
   *
   * - Supports browsers that do not support rAF by falling back to
   *   {@link Component#setTimeout}.
   *
   * - The callback is turned into a {@link Component~GenericCallback} (i.e.
   *   bound to the component).
   *
   * - Automatic cancellation of the rAF callback is handled if the component
   *   is disposed before it is called.
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   *
   * @return {number}
   *         Returns an rAF ID that gets used to identify the timeout. It can
   *         also be used in {@link Component#cancelAnimationFrame} to cancel
   *         the animation frame callback.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
   */


  Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {
    var _this4 = this;

    if (this.supportsRaf_) {
      fn = bind(this, fn);

      var id = window.requestAnimationFrame(fn);
      var disposeFn = function disposeFn() {
        return _this4.cancelAnimationFrame(id);
      };

      disposeFn.guid = 'vjs-raf-' + id;
      this.on('dispose', disposeFn);

      return id;
    }

    // Fall back to using a timer.
    return this.setTimeout(fn, 1000 / 60);
  };

  /**
   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
   * (rAF).
   *
   * If you queue an rAF callback via {@link Component#requestAnimationFrame},
   * use this function instead of `window.cancelAnimationFrame`. If you don't,
   * your dispose listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} id
   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
   *
   * @return {number}
   *         Returns the rAF ID that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
   */


  Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {
    if (this.supportsRaf_) {
      window.cancelAnimationFrame(id);

      var disposeFn = function disposeFn() {};

      disposeFn.guid = 'vjs-raf-' + id;

      this.off('dispose', disposeFn);

      return id;
    }

    // Fall back to using a timer.
    return this.clearTimeout(id);
  };

  /**
   * Register a `Component` with `videojs` given the name and the component.
   *
   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
   *         should be registered using {@link Tech.registerTech} or
   *         {@link videojs:videojs.registerTech}.
   *
   * > NOTE: This function can also be seen on videojs as
   *         {@link videojs:videojs.registerComponent}.
   *
   * @param {string} name
   *        The name of the `Component` to register.
   *
   * @param {Component} ComponentToRegister
   *        The `Component` class to register.
   *
   * @return {Component}
   *         The `Component` that was registered.
   */


  Component.registerComponent = function registerComponent(name, ComponentToRegister) {
    if (typeof name !== 'string' || !name) {
      throw new Error('Illegal component name, "' + name + '"; must be a non-empty string.');
    }

    var Tech = Component.getComponent('Tech');

    // We need to make sure this check is only done if Tech has been registered.
    var isTech = Tech && Tech.isTech(ComponentToRegister);
    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);

    if (isTech || !isComp) {
      var reason = void 0;

      if (isTech) {
        reason = 'techs must be registered using Tech.registerTech()';
      } else {
        reason = 'must be a Component subclass';
      }

      throw new Error('Illegal component, "' + name + '"; ' + reason + '.');
    }

    name = toTitleCase(name);

    if (!Component.components_) {
      Component.components_ = {};
    }

    var Player = Component.getComponent('Player');

    if (name === 'Player' && Player && Player.players) {
      var players = Player.players;
      var playerNames = Object.keys(players);

      // If we have players that were disposed, then their name will still be
      // in Players.players. So, we must loop through and verify that the value
      // for each item is not null. This allows registration of the Player component
      // after all players have been disposed or before any were created.
      if (players && playerNames.length > 0 && playerNames.map(function (pname) {
        return players[pname];
      }).every(Boolean)) {
        throw new Error('Can not register Player component after player has been created.');
      }
    }

    Component.components_[name] = ComponentToRegister;

    return ComponentToRegister;
  };

  /**
   * Get a `Component` based on the name it was registered with.
   *
   * @param {string} name
   *        The Name of the component to get.
   *
   * @return {Component}
   *         The `Component` that got registered under the given name.
   *
   * @deprecated In `videojs` 6 this will not return `Component`s that were not
   *             registered using {@link Component.registerComponent}. Currently we
   *             check the global `videojs` object for a `Component` name and
   *             return that if it exists.
   */


  Component.getComponent = function getComponent(name) {
    if (!name) {
      return;
    }

    name = toTitleCase(name);

    if (Component.components_ && Component.components_[name]) {
      return Component.components_[name];
    }
  };

  return Component;
}();

/**
 * Whether or not this component supports `requestAnimationFrame`.
 *
 * This is exposed primarily for testing purposes.
 *
 * @private
 * @type {Boolean}
 */


Component.prototype.supportsRaf_ = typeof window.requestAnimationFrame === 'function' && typeof window.cancelAnimationFrame === 'function';

Component.registerComponent('Component', Component);

/**
 * @file time-ranges.js
 * @module time-ranges
 */

/**
 * Returns the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @function time-ranges:indexFunction
 *
 * @param {number} [index=0]
 *        The range number to return the time for.
 *
 * @return {number}
 *         The time that offset at the specified index.
 *
 * @depricated index must be set to a value, in the future this will throw an error.
 */

/**
 * An object that contains ranges of time for various reasons.
 *
 * @typedef {Object} TimeRange
 *
 * @property {number} length
 *           The number of time ranges represented by this Object
 *
 * @property {time-ranges:indexFunction} start
 *           Returns the time offset at which a specified time range begins.
 *
 * @property {time-ranges:indexFunction} end
 *           Returns the time offset at which a specified time range begins.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
 */

/**
 * Check if any of the time ranges are over the maximum index.
 *
 * @param {string} fnName
 *        The function name to use for logging
 *
 * @param {number} index
 *        The index to check
 *
 * @param {number} maxIndex
 *        The maximum possible index
 *
 * @throws {Error} if the timeRanges provided are over the maxIndex
 */
function rangeCheck(fnName, index, maxIndex) {
  if (typeof index !== 'number' || index < 0 || index > maxIndex) {
    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');
  }
}

/**
 * Check if any of the time ranges are over the maximum index.
 *
 * @param {string} fnName
 *        The function name to use for logging
 *
 * @param {string} valueIndex
 *        The proprety that should be used to get the time. should be 'start' or 'end'
 *
 * @param {Array} ranges
 *        An array of time ranges
 *
 * @param {Array} [rangeIndex=0]
 *        The index to start the search at
 *
 * @return {number}
 *         The time that offset at the specified index.
 *
 *
 * @depricated rangeIndex must be set to a value, in the future this will throw an error.
 * @throws {Error} if rangeIndex is more than the length of ranges
 */
function getRange(fnName, valueIndex, ranges, rangeIndex) {
  rangeCheck(fnName, rangeIndex, ranges.length - 1);
  return ranges[rangeIndex][valueIndex];
}

/**
 * Create a time range object givent ranges of time.
 *
 * @param {Array} [ranges]
 *        An array of time ranges.
 */
function createTimeRangesObj(ranges) {
  if (ranges === undefined || ranges.length === 0) {
    return {
      length: 0,
      start: function start() {
        throw new Error('This TimeRanges object is empty');
      },
      end: function end() {
        throw new Error('This TimeRanges object is empty');
      }
    };
  }
  return {
    length: ranges.length,
    start: getRange.bind(null, 'start', 0, ranges),
    end: getRange.bind(null, 'end', 1, ranges)
  };
}

/**
 * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
 *
 * @param {number|Array} start
 *        The start of a single range or an array of ranges
 *
 * @param {number} end
 *        The end of a single range.
 *
 * @private
 */
function createTimeRanges(start, end) {
  if (Array.isArray(start)) {
    return createTimeRangesObj(start);
  } else if (start === undefined || end === undefined) {
    return createTimeRangesObj();
  }
  return createTimeRangesObj([[start, end]]);
}

/**
 * @file buffer.js
 * @module buffer
 */
/**
 * Compute the percentage of the media that has been buffered.
 *
 * @param {TimeRange} buffered
 *        The current `TimeRange` object representing buffered time ranges
 *
 * @param {number} duration
 *        Total duration of the media
 *
 * @return {number}
 *         Percent buffered of the total duration in decimal form.
 */
function bufferedPercent(buffered, duration) {
  var bufferedDuration = 0;
  var start = void 0;
  var end = void 0;

  if (!duration) {
    return 0;
  }

  if (!buffered || !buffered.length) {
    buffered = createTimeRanges(0, 0);
  }

  for (var i = 0; i < buffered.length; i++) {
    start = buffered.start(i);
    end = buffered.end(i);

    // buffered end can be bigger than duration by a very small fraction
    if (end > duration) {
      end = duration;
    }

    bufferedDuration += end - start;
  }

  return bufferedDuration / duration;
}

/**
 * @file fullscreen-api.js
 * @module fullscreen-api
 * @private
 */
/**
 * Store the browser-specific methods for the fullscreen API.
 *
 * @type {Object}
 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
 */
var FullscreenApi = {};

// browser API methods
var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

var specApi = apiMap[0];
var browserApi = void 0;

// determine the supported set of functions
for (var i = 0; i < apiMap.length; i++) {
  // check for exitFullscreen function
  if (apiMap[i][1] in document) {
    browserApi = apiMap[i];
    break;
  }
}

// map the browser API names to the spec API names
if (browserApi) {
  for (var _i = 0; _i < browserApi.length; _i++) {
    FullscreenApi[specApi[_i]] = browserApi[_i];
  }
}

/**
 * @file media-error.js
 */
/**
 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
 *
 * @param {number|string|Object|MediaError} value
 *        This can be of multiple types:
 *        - number: should be a standard error code
 *        - string: an error message (the code will be 0)
 *        - Object: arbitrary properties
 *        - `MediaError` (native): used to populate a video.js `MediaError` object
 *        - `MediaError` (video.js): will return itself if it's already a
 *          video.js `MediaError` object.
 *
 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
 *
 * @class MediaError
 */
function MediaError(value) {

  // Allow redundant calls to this constructor to avoid having `instanceof`
  // checks peppered around the code.
  if (value instanceof MediaError) {
    return value;
  }

  if (typeof value === 'number') {
    this.code = value;
  } else if (typeof value === 'string') {
    // default code is zero, so this is a custom error
    this.message = value;
  } else if (isObject(value)) {

    // We assign the `code` property manually because native `MediaError` objects
    // do not expose it as an own/enumerable property of the object.
    if (typeof value.code === 'number') {
      this.code = value.code;
    }

    assign(this, value);
  }

  if (!this.message) {
    this.message = MediaError.defaultMessages[this.code] || '';
  }
}

/**
 * The error code that refers two one of the defined `MediaError` types
 *
 * @type {Number}
 */
MediaError.prototype.code = 0;

/**
 * An optional message that to show with the error. Message is not part of the HTML5
 * video spec but allows for more informative custom errors.
 *
 * @type {String}
 */
MediaError.prototype.message = '';

/**
 * An optional status code that can be set by plugins to allow even more detail about
 * the error. For example a plugin might provide a specific HTTP status code and an
 * error message for that code. Then when the plugin gets that error this class will
 * know how to display an error message for it. This allows a custom message to show
 * up on the `Player` error overlay.
 *
 * @type {Array}
 */
MediaError.prototype.status = null;

/**
 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
 * specification listed under {@link MediaError} for more information.
 *
 * @enum {array}
 * @readonly
 * @property {string} 0 - MEDIA_ERR_CUSTOM
 * @property {string} 1 - MEDIA_ERR_CUSTOM
 * @property {string} 2 - MEDIA_ERR_ABORTED
 * @property {string} 3 - MEDIA_ERR_NETWORK
 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
 */
MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

/**
 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
 *
 * @type {Array}
 * @constant
 */
MediaError.defaultMessages = {
  1: 'You aborted the media playback',
  2: 'A network error caused the media download to fail part-way.',
  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
  5: 'The media is encrypted and we do not have the keys to decrypt it.'
};

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
  MediaError[MediaError.errorTypes[errNum]] = errNum;
  // values should be accessible on both the class and instance
  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
}

/**
 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
 *
 * @param  {Object}  value
 *         An object that may or may not be `Promise`-like.
 *
 * @return {Boolean}
 *         Whether or not the object is `Promise`-like.
 */
function isPromise(value) {
  return value !== undefined && value !== null && typeof value.then === 'function';
}

/**
 * Silence a Promise-like object.
 *
 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
 * play promise" rejection error messages.
 *
 * @param  {Object} value
 *         An object that may or may not be `Promise`-like.
 */
function silencePromise(value) {
  if (isPromise(value)) {
    value.then(null, function (e) {});
  }
}

/**
 * @file text-track-list-converter.js Utilities for capturing text track state and
 * re-creating tracks based on a capture.
 *
 * @module text-track-list-converter
 */

/**
 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
 * represents the {@link TextTrack}'s state.
 *
 * @param {TextTrack} track
 *        The text track to query.
 *
 * @return {Object}
 *         A serializable javascript representation of the TextTrack.
 * @private
 */
var trackToJson_ = function trackToJson_(track) {
  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {

    if (track[prop]) {
      acc[prop] = track[prop];
    }

    return acc;
  }, {
    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
      return {
        startTime: cue.startTime,
        endTime: cue.endTime,
        text: cue.text,
        id: cue.id
      };
    })
  });

  return ret;
};

/**
 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
 * state of all {@link TextTrack}s currently configured. The return array is compatible with
 * {@link text-track-list-converter:jsonToTextTracks}.
 *
 * @param {Tech} tech
 *        The tech object to query
 *
 * @return {Array}
 *         A serializable javascript representation of the {@link Tech}s
 *         {@link TextTrackList}.
 */
var textTracksToJson = function textTracksToJson(tech) {

  var trackEls = tech.$$('track');

  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
    return t.track;
  });
  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
    var json = trackToJson_(trackEl.track);

    if (trackEl.src) {
      json.src = trackEl.src;
    }
    return json;
  });

  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
    return trackObjs.indexOf(track) === -1;
  }).map(trackToJson_));
};

/**
 * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
 * object {@link TextTrack} representations.
 *
 * @param {Array} json
 *        An array of `TextTrack` representation objects, like those that would be
 *        produced by `textTracksToJson`.
 *
 * @param {Tech} tech
 *        The `Tech` to create the `TextTrack`s on.
 */
var jsonToTextTracks = function jsonToTextTracks(json, tech) {
  json.forEach(function (track) {
    var addedTrack = tech.addRemoteTextTrack(track).track;

    if (!track.src && track.cues) {
      track.cues.forEach(function (cue) {
        return addedTrack.addCue(cue);
      });
    }
  });

  return tech.textTracks();
};

var textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };

/**
 * @file modal-dialog.js
 */
var MODAL_CLASS_NAME = 'vjs-modal-dialog';
var ESC = 27;

/**
 * The `ModalDialog` displays over the video and its controls, which blocks
 * interaction with the player until it is closed.
 *
 * Modal dialogs include a "Close" button and will close when that button
 * is activated - or when ESC is pressed anywhere.
 *
 * @extends Component
 */

var ModalDialog = function (_Component) {
  inherits(ModalDialog, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Mixed} [options.content=undefined]
   *        Provide customized content for this modal.
   *
   * @param {string} [options.description]
   *        A text description for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.fillAlways=false]
   *        Normally, modals are automatically filled only the first time
   *        they open. This tells the modal to refresh its content
   *        every time it opens.
   *
   * @param {string} [options.label]
   *        A text label for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.temporary=true]
   *        If `true`, the modal can only be opened once; it will be
   *        disposed as soon as it's closed.
   *
   * @param {boolean} [options.uncloseable=false]
   *        If `true`, the user will not be able to close the modal
   *        through the UI in the normal ways. Programmatic closing is
   *        still possible.
   */
  function ModalDialog(player, options) {
    classCallCheck(this, ModalDialog);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;

    _this.closeable(!_this.options_.uncloseable);
    _this.content(_this.options_.content);

    // Make sure the contentEl is defined AFTER any children are initialized
    // because we only want the contents of the modal in the contentEl
    // (not the UI elements like the close button).
    _this.contentEl_ = createEl('div', {
      className: MODAL_CLASS_NAME + '-content'
    }, {
      role: 'document'
    });

    _this.descEl_ = createEl('p', {
      className: MODAL_CLASS_NAME + '-description vjs-control-text',
      id: _this.el().getAttribute('aria-describedby')
    });

    textContent(_this.descEl_, _this.description());
    _this.el_.appendChild(_this.descEl_);
    _this.el_.appendChild(_this.contentEl_);
    return _this;
  }

  /**
   * Create the `ModalDialog`'s DOM element
   *
   * @return {Element}
   *         The DOM element that gets created.
   */


  ModalDialog.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: this.buildCSSClass(),
      tabIndex: -1
    }, {
      'aria-describedby': this.id() + '_description',
      'aria-hidden': 'true',
      'aria-label': this.label(),
      'role': 'dialog'
    });
  };

  ModalDialog.prototype.dispose = function dispose() {
    this.contentEl_ = null;
    this.descEl_ = null;
    this.previouslyActiveEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Handles `keydown` events on the document, looking for ESC, which closes
   * the modal.
   *
   * @param {EventTarget~Event} e
   *        The keypress that triggered this event.
   *
   * @listens keydown
   */


  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
    if (e.which === ESC && this.closeable()) {
      this.close();
    }
  };

  /**
   * Returns the label string for this modal. Primarily used for accessibility.
   *
   * @return {string}
   *         the localized or raw label of this modal.
   */


  ModalDialog.prototype.label = function label() {
    return this.localize(this.options_.label || 'Modal Window');
  };

  /**
   * Returns the description string for this modal. Primarily used for
   * accessibility.
   *
   * @return {string}
   *         The localized or raw description of this modal.
   */


  ModalDialog.prototype.description = function description() {
    var desc = this.options_.description || this.localize('This is a modal window.');

    // Append a universal closeability message if the modal is closeable.
    if (this.closeable()) {
      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
    }

    return desc;
  };

  /**
   * Opens the modal.
   *
   * @fires ModalDialog#beforemodalopen
   * @fires ModalDialog#modalopen
   */


  ModalDialog.prototype.open = function open() {
    if (!this.opened_) {
      var player = this.player();

      /**
        * Fired just before a `ModalDialog` is opened.
        *
        * @event ModalDialog#beforemodalopen
        * @type {EventTarget~Event}
        */
      this.trigger('beforemodalopen');
      this.opened_ = true;

      // Fill content if the modal has never opened before and
      // never been filled.
      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
        this.fill();
      }

      // If the player was playing, pause it and take note of its previously
      // playing state.
      this.wasPlaying_ = !player.paused();

      if (this.options_.pauseOnOpen && this.wasPlaying_) {
        player.pause();
      }

      if (this.closeable()) {
        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
      }

      // Hide controls and note if they were enabled.
      this.hadControls_ = player.controls();
      player.controls(false);

      this.show();
      this.conditionalFocus_();
      this.el().setAttribute('aria-hidden', 'false');

      /**
        * Fired just after a `ModalDialog` is opened.
        *
        * @event ModalDialog#modalopen
        * @type {EventTarget~Event}
        */
      this.trigger('modalopen');
      this.hasBeenOpened_ = true;
    }
  };

  /**
   * If the `ModalDialog` is currently open or closed.
   *
   * @param  {boolean} [value]
   *         If given, it will open (`true`) or close (`false`) the modal.
   *
   * @return {boolean}
   *         the current open state of the modaldialog
   */


  ModalDialog.prototype.opened = function opened(value) {
    if (typeof value === 'boolean') {
      this[value ? 'open' : 'close']();
    }
    return this.opened_;
  };

  /**
   * Closes the modal, does nothing if the `ModalDialog` is
   * not open.
   *
   * @fires ModalDialog#beforemodalclose
   * @fires ModalDialog#modalclose
   */


  ModalDialog.prototype.close = function close() {
    if (!this.opened_) {
      return;
    }
    var player = this.player();

    /**
      * Fired just before a `ModalDialog` is closed.
      *
      * @event ModalDialog#beforemodalclose
      * @type {EventTarget~Event}
      */
    this.trigger('beforemodalclose');
    this.opened_ = false;

    if (this.wasPlaying_ && this.options_.pauseOnOpen) {
      player.play();
    }

    if (this.closeable()) {
      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
    }

    if (this.hadControls_) {
      player.controls(true);
    }

    this.hide();
    this.el().setAttribute('aria-hidden', 'true');

    /**
      * Fired just after a `ModalDialog` is closed.
      *
      * @event ModalDialog#modalclose
      * @type {EventTarget~Event}
      */
    this.trigger('modalclose');
    this.conditionalBlur_();

    if (this.options_.temporary) {
      this.dispose();
    }
  };

  /**
   * Check to see if the `ModalDialog` is closeable via the UI.
   *
   * @param  {boolean} [value]
   *         If given as a boolean, it will set the `closeable` option.
   *
   * @return {boolean}
   *         Returns the final value of the closable option.
   */


  ModalDialog.prototype.closeable = function closeable(value) {
    if (typeof value === 'boolean') {
      var closeable = this.closeable_ = !!value;
      var close = this.getChild('closeButton');

      // If this is being made closeable and has no close button, add one.
      if (closeable && !close) {

        // The close button should be a child of the modal - not its
        // content element, so temporarily change the content element.
        var temp = this.contentEl_;

        this.contentEl_ = this.el_;
        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
        this.contentEl_ = temp;
        this.on(close, 'close', this.close);
      }

      // If this is being made uncloseable and has a close button, remove it.
      if (!closeable && close) {
        this.off(close, 'close', this.close);
        this.removeChild(close);
        close.dispose();
      }
    }
    return this.closeable_;
  };

  /**
   * Fill the modal's content element with the modal's "content" option.
   * The content element will be emptied before this change takes place.
   */


  ModalDialog.prototype.fill = function fill() {
    this.fillWith(this.content());
  };

  /**
   * Fill the modal's content element with arbitrary content.
   * The content element will be emptied before this change takes place.
   *
   * @fires ModalDialog#beforemodalfill
   * @fires ModalDialog#modalfill
   *
   * @param {Mixed} [content]
   *        The same rules apply to this as apply to the `content` option.
   */


  ModalDialog.prototype.fillWith = function fillWith(content) {
    var contentEl = this.contentEl();
    var parentEl = contentEl.parentNode;
    var nextSiblingEl = contentEl.nextSibling;

    /**
     * Fired just before a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#beforemodalfill
     * @type {EventTarget~Event}
     */
    this.trigger('beforemodalfill');
    this.hasBeenFilled_ = true;

    // Detach the content element from the DOM before performing
    // manipulation to avoid modifying the live DOM multiple times.
    parentEl.removeChild(contentEl);
    this.empty();
    insertContent(contentEl, content);
    /**
     * Fired just after a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#modalfill
     * @type {EventTarget~Event}
     */
    this.trigger('modalfill');

    // Re-inject the re-filled content element.
    if (nextSiblingEl) {
      parentEl.insertBefore(contentEl, nextSiblingEl);
    } else {
      parentEl.appendChild(contentEl);
    }

    // make sure that the close button is last in the dialog DOM
    var closeButton = this.getChild('closeButton');

    if (closeButton) {
      parentEl.appendChild(closeButton.el_);
    }
  };

  /**
   * Empties the content element. This happens anytime the modal is filled.
   *
   * @fires ModalDialog#beforemodalempty
   * @fires ModalDialog#modalempty
   */


  ModalDialog.prototype.empty = function empty() {
    /**
     * Fired just before a `ModalDialog` is emptied.
     *
     * @event ModalDialog#beforemodalempty
     * @type {EventTarget~Event}
     */
    this.trigger('beforemodalempty');
    emptyEl(this.contentEl());

    /**
     * Fired just after a `ModalDialog` is emptied.
     *
     * @event ModalDialog#modalempty
     * @type {EventTarget~Event}
     */
    this.trigger('modalempty');
  };

  /**
   * Gets or sets the modal content, which gets normalized before being
   * rendered into the DOM.
   *
   * This does not update the DOM or fill the modal, but it is called during
   * that process.
   *
   * @param  {Mixed} [value]
   *         If defined, sets the internal content value to be used on the
   *         next call(s) to `fill`. This value is normalized before being
   *         inserted. To "clear" the internal content value, pass `null`.
   *
   * @return {Mixed}
   *         The current content of the modal dialog
   */


  ModalDialog.prototype.content = function content(value) {
    if (typeof value !== 'undefined') {
      this.content_ = value;
    }
    return this.content_;
  };

  /**
   * conditionally focus the modal dialog if focus was previously on the player.
   *
   * @private
   */


  ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {
    var activeEl = document.activeElement;
    var playerEl = this.player_.el_;

    this.previouslyActiveEl_ = null;

    if (playerEl.contains(activeEl) || playerEl === activeEl) {
      this.previouslyActiveEl_ = activeEl;

      this.focus();

      this.on(document, 'keydown', this.handleKeyDown);
    }
  };

  /**
   * conditionally blur the element and refocus the last focused element
   *
   * @private
   */


  ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {
    if (this.previouslyActiveEl_) {
      this.previouslyActiveEl_.focus();
      this.previouslyActiveEl_ = null;
    }

    this.off(document, 'keydown', this.handleKeyDown);
  };

  /**
   * Keydown handler. Attached when modal is focused.
   *
   * @listens keydown
   */


  ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {
    // exit early if it isn't a tab key
    if (event.which !== 9) {
      return;
    }

    var focusableEls = this.focusableEls_();
    var activeEl = this.el_.querySelector(':focus');
    var focusIndex = void 0;

    for (var i = 0; i < focusableEls.length; i++) {
      if (activeEl === focusableEls[i]) {
        focusIndex = i;
        break;
      }
    }

    if (document.activeElement === this.el_) {
      focusIndex = 0;
    }

    if (event.shiftKey && focusIndex === 0) {
      focusableEls[focusableEls.length - 1].focus();
      event.preventDefault();
    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
      focusableEls[0].focus();
      event.preventDefault();
    }
  };

  /**
   * get all focusable elements
   *
   * @private
   */


  ModalDialog.prototype.focusableEls_ = function focusableEls_() {
    var allChildren = this.el_.querySelectorAll('*');

    return Array.prototype.filter.call(allChildren, function (child) {
      return (child instanceof window.HTMLAnchorElement || child instanceof window.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window.HTMLInputElement || child instanceof window.HTMLSelectElement || child instanceof window.HTMLTextAreaElement || child instanceof window.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window.HTMLIFrameElement || child instanceof window.HTMLObjectElement || child instanceof window.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');
    });
  };

  return ModalDialog;
}(Component);

/**
 * Default options for `ModalDialog` default options.
 *
 * @type {Object}
 * @private
 */


ModalDialog.prototype.options_ = {
  pauseOnOpen: true,
  temporary: true
};

Component.registerComponent('ModalDialog', ModalDialog);

/**
 * @file track-list.js
 */
/**
 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
 * {@link VideoTrackList}
 *
 * @extends EventTarget
 */

var TrackList = function (_EventTarget) {
  inherits(TrackList, _EventTarget);

  /**
   * Create an instance of this class
   *
   * @param {Track[]} tracks
   *        A list of tracks to initialize the list with.
   *
   * @param {Object} [list]
   *        The child object with inheritance done manually for ie8.
   *
   * @abstract
   */
  function TrackList() {
    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var _ret;

    var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    classCallCheck(this, TrackList);

    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

    if (!list) {
      list = _this; // eslint-disable-line
      if (IS_IE8) {
        list = document.createElement('custom');
        for (var prop in TrackList.prototype) {
          if (prop !== 'constructor') {
            list[prop] = TrackList.prototype[prop];
          }
        }
      }
    }

    list.tracks_ = [];

    /**
     * @memberof TrackList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */
    Object.defineProperty(list, 'length', {
      get: function get$$1() {
        return this.tracks_.length;
      }
    });

    for (var i = 0; i < tracks.length; i++) {
      list.addTrack(tracks[i]);
    }

    // must return the object, as for ie8 it will not be this
    // but a reference to a document object
    return _ret = list, possibleConstructorReturn(_this, _ret);
  }

  /**
   * Add a {@link Track} to the `TrackList`
   *
   * @param {Track} track
   *        The audio, video, or text track to add to the list.
   *
   * @fires TrackList#addtrack
   */


  TrackList.prototype.addTrack = function addTrack(track) {
    var index = this.tracks_.length;

    if (!('' + index in this)) {
      Object.defineProperty(this, index, {
        get: function get$$1() {
          return this.tracks_[index];
        }
      });
    }

    // Do not add duplicate tracks
    if (this.tracks_.indexOf(track) === -1) {
      this.tracks_.push(track);
      /**
       * Triggered when a track is added to a track list.
       *
       * @event TrackList#addtrack
       * @type {EventTarget~Event}
       * @property {Track} track
       *           A reference to track that was added.
       */
      this.trigger({
        track: track,
        type: 'addtrack'
      });
    }
  };

  /**
   * Remove a {@link Track} from the `TrackList`
   *
   * @param {Track} rtrack
   *        The audio, video, or text track to remove from the list.
   *
   * @fires TrackList#removetrack
   */


  TrackList.prototype.removeTrack = function removeTrack(rtrack) {
    var track = void 0;

    for (var i = 0, l = this.length; i < l; i++) {
      if (this[i] === rtrack) {
        track = this[i];
        if (track.off) {
          track.off();
        }

        this.tracks_.splice(i, 1);

        break;
      }
    }

    if (!track) {
      return;
    }

    /**
     * Triggered when a track is removed from track list.
     *
     * @event TrackList#removetrack
     * @type {EventTarget~Event}
     * @property {Track} track
     *           A reference to track that was removed.
     */
    this.trigger({
      track: track,
      type: 'removetrack'
    });
  };

  /**
   * Get a Track from the TrackList by a tracks id
   *
   * @param {String} id - the id of the track to get
   * @method getTrackById
   * @return {Track}
   * @private
   */


  TrackList.prototype.getTrackById = function getTrackById(id) {
    var result = null;

    for (var i = 0, l = this.length; i < l; i++) {
      var track = this[i];

      if (track.id === id) {
        result = track;
        break;
      }
    }

    return result;
  };

  return TrackList;
}(EventTarget);

/**
 * Triggered when a different track is selected/enabled.
 *
 * @event TrackList#change
 * @type {EventTarget~Event}
 */

/**
 * Events that can be called with on + eventName. See {@link EventHandler}.
 *
 * @property {Object} TrackList#allowedEvents_
 * @private
 */


TrackList.prototype.allowedEvents_ = {
  change: 'change',
  addtrack: 'addtrack',
  removetrack: 'removetrack'
};

// emulate attribute EventHandler support to allow for feature detection
for (var event in TrackList.prototype.allowedEvents_) {
  TrackList.prototype['on' + event] = null;
}

/**
 * @file audio-track-list.js
 */
/**
 * Anywhere we call this function we diverge from the spec
 * as we only support one enabled audiotrack at a time
 *
 * @param {AudioTrackList} list
 *        list to work on
 *
 * @param {AudioTrack} track
 *        The track to skip
 *
 * @private
 */
var disableOthers = function disableOthers(list, track) {
  for (var i = 0; i < list.length; i++) {
    if (!Object.keys(list[i]).length || track.id === list[i].id) {
      continue;
    }
    // another audio track is enabled, disable it
    list[i].enabled = false;
  }
};

/**
 * The current list of {@link AudioTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
 * @extends TrackList
 */

var AudioTrackList = function (_TrackList) {
  inherits(AudioTrackList, _TrackList);

  /**
   * Create an instance of this class.
   *
   * @param {AudioTrack[]} [tracks=[]]
   *        A list of `AudioTrack` to instantiate the list with.
   */
  function AudioTrackList() {
    var _this, _ret;

    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, AudioTrackList);

    var list = void 0;

    // make sure only 1 track is enabled
    // sorted from last index to first index
    for (var i = tracks.length - 1; i >= 0; i--) {
      if (tracks[i].enabled) {
        disableOthers(tracks, tracks[i]);
        break;
      }
    }

    // IE8 forces us to implement inheritance ourselves
    // as it does not support Object.defineProperty properly
    if (IS_IE8) {
      list = document.createElement('custom');
      for (var prop in TrackList.prototype) {
        if (prop !== 'constructor') {
          list[prop] = TrackList.prototype[prop];
        }
      }
      for (var _prop in AudioTrackList.prototype) {
        if (_prop !== 'constructor') {
          list[_prop] = AudioTrackList.prototype[_prop];
        }
      }
    }

    list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
    list.changing_ = false;

    return _ret = list, possibleConstructorReturn(_this, _ret);
  }

  /**
   * Add an {@link AudioTrack} to the `AudioTrackList`.
   *
   * @param {AudioTrack} track
   *        The AudioTrack to add to the list
   *
   * @fires TrackList#addtrack
   */


  AudioTrackList.prototype.addTrack = function addTrack(track) {
    var _this2 = this;

    if (track.enabled) {
      disableOthers(this, track);
    }

    _TrackList.prototype.addTrack.call(this, track);
    // native tracks don't have this
    if (!track.addEventListener) {
      return;
    }

    /**
     * @listens AudioTrack#enabledchange
     * @fires TrackList#change
     */
    track.addEventListener('enabledchange', function () {
      // when we are disabling other tracks (since we don't support
      // more than one track at a time) we will set changing_
      // to true so that we don't trigger additional change events
      if (_this2.changing_) {
        return;
      }
      _this2.changing_ = true;
      disableOthers(_this2, track);
      _this2.changing_ = false;
      _this2.trigger('change');
    });
  };

  return AudioTrackList;
}(TrackList);

/**
 * @file video-track-list.js
 */
/**
 * Un-select all other {@link VideoTrack}s that are selected.
 *
 * @param {VideoTrackList} list
 *        list to work on
 *
 * @param {VideoTrack} track
 *        The track to skip
 *
 * @private
 */
var disableOthers$1 = function disableOthers(list, track) {
  for (var i = 0; i < list.length; i++) {
    if (!Object.keys(list[i]).length || track.id === list[i].id) {
      continue;
    }
    // another video track is enabled, disable it
    list[i].selected = false;
  }
};

/**
 * The current list of {@link VideoTrack} for a video.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
 * @extends TrackList
 */

var VideoTrackList = function (_TrackList) {
  inherits(VideoTrackList, _TrackList);

  /**
   * Create an instance of this class.
   *
   * @param {VideoTrack[]} [tracks=[]]
   *        A list of `VideoTrack` to instantiate the list with.
   */
  function VideoTrackList() {
    var _this, _ret;

    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, VideoTrackList);

    var list = void 0;

    // make sure only 1 track is enabled
    // sorted from last index to first index
    for (var i = tracks.length - 1; i >= 0; i--) {
      if (tracks[i].selected) {
        disableOthers$1(tracks, tracks[i]);
        break;
      }
    }

    // IE8 forces us to implement inheritance ourselves
    // as it does not support Object.defineProperty properly
    if (IS_IE8) {
      list = document.createElement('custom');
      for (var prop in TrackList.prototype) {
        if (prop !== 'constructor') {
          list[prop] = TrackList.prototype[prop];
        }
      }
      for (var _prop in VideoTrackList.prototype) {
        if (_prop !== 'constructor') {
          list[_prop] = VideoTrackList.prototype[_prop];
        }
      }
    }

    list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
    list.changing_ = false;

    /**
     * @member {number} VideoTrackList#selectedIndex
     *         The current index of the selected {@link VideoTrack`}.
     */
    Object.defineProperty(list, 'selectedIndex', {
      get: function get$$1() {
        for (var _i = 0; _i < this.length; _i++) {
          if (this[_i].selected) {
            return _i;
          }
        }
        return -1;
      },
      set: function set$$1() {}
    });

    return _ret = list, possibleConstructorReturn(_this, _ret);
  }

  /**
   * Add a {@link VideoTrack} to the `VideoTrackList`.
   *
   * @param {VideoTrack} track
   *        The VideoTrack to add to the list
   *
   * @fires TrackList#addtrack
   */


  VideoTrackList.prototype.addTrack = function addTrack(track) {
    var _this2 = this;

    if (track.selected) {
      disableOthers$1(this, track);
    }

    _TrackList.prototype.addTrack.call(this, track);
    // native tracks don't have this
    if (!track.addEventListener) {
      return;
    }

    /**
     * @listens VideoTrack#selectedchange
     * @fires TrackList#change
     */
    track.addEventListener('selectedchange', function () {
      if (_this2.changing_) {
        return;
      }
      _this2.changing_ = true;
      disableOthers$1(_this2, track);
      _this2.changing_ = false;
      _this2.trigger('change');
    });
  };

  return VideoTrackList;
}(TrackList);

/**
 * @file text-track-list.js
 */
/**
 * The current list of {@link TextTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
 * @extends TrackList
 */

var TextTrackList = function (_TrackList) {
  inherits(TextTrackList, _TrackList);

  /**
   * Create an instance of this class.
   *
   * @param {TextTrack[]} [tracks=[]]
   *        A list of `TextTrack` to instantiate the list with.
   */
  function TextTrackList() {
    var _this, _ret;

    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, TextTrackList);

    var list = void 0;

    // IE8 forces us to implement inheritance ourselves
    // as it does not support Object.defineProperty properly
    if (IS_IE8) {
      list = document.createElement('custom');
      for (var prop in TrackList.prototype) {
        if (prop !== 'constructor') {
          list[prop] = TrackList.prototype[prop];
        }
      }
      for (var _prop in TextTrackList.prototype) {
        if (_prop !== 'constructor') {
          list[_prop] = TextTrackList.prototype[_prop];
        }
      }
    }

    list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
    return _ret = list, possibleConstructorReturn(_this, _ret);
  }

  /**
   * Add a {@link TextTrack} to the `TextTrackList`
   *
   * @param {TextTrack} track
   *        The text track to add to the list.
   *
   * @fires TrackList#addtrack
   */


  TextTrackList.prototype.addTrack = function addTrack(track) {
    _TrackList.prototype.addTrack.call(this, track);

    /**
     * @listens TextTrack#modechange
     * @fires TrackList#change
     */
    track.addEventListener('modechange', bind(this, function () {
      this.trigger('change');
    }));

    var nonLanguageTextTrackKind = ['metadata', 'chapters'];

    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
      track.addEventListener('modechange', bind(this, function () {
        this.trigger('selectedlanguagechange');
      }));
    }
  };

  return TextTrackList;
}(TrackList);

/**
 * @file html-track-element-list.js
 */

/**
 * The current list of {@link HtmlTrackElement}s.
 */

var HtmlTrackElementList = function () {

  /**
   * Create an instance of this class.
   *
   * @param {HtmlTrackElement[]} [tracks=[]]
   *        A list of `HtmlTrackElement` to instantiate the list with.
   */
  function HtmlTrackElementList() {
    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, HtmlTrackElementList);

    var list = this; // eslint-disable-line

    if (IS_IE8) {
      list = document.createElement('custom');

      for (var prop in HtmlTrackElementList.prototype) {
        if (prop !== 'constructor') {
          list[prop] = HtmlTrackElementList.prototype[prop];
        }
      }
    }

    list.trackElements_ = [];

    /**
     * @memberof HtmlTrackElementList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */
    Object.defineProperty(list, 'length', {
      get: function get$$1() {
        return this.trackElements_.length;
      }
    });

    for (var i = 0, length = trackElements.length; i < length; i++) {
      list.addTrackElement_(trackElements[i]);
    }

    if (IS_IE8) {
      return list;
    }
  }

  /**
   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to add to the list.
   *
   * @private
   */


  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
    var index = this.trackElements_.length;

    if (!('' + index in this)) {
      Object.defineProperty(this, index, {
        get: function get$$1() {
          return this.trackElements_[index];
        }
      });
    }

    // Do not add duplicate elements
    if (this.trackElements_.indexOf(trackElement) === -1) {
      this.trackElements_.push(trackElement);
    }
  };

  /**
   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
   * {@link TextTrack}.
   *
   * @param {TextTrack} track
   *        The track associated with a track element.
   *
   * @return {HtmlTrackElement|undefined}
   *         The track element that was found or undefined.
   *
   * @private
   */


  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
    var trackElement_ = void 0;

    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
      if (track === this.trackElements_[i].track) {
        trackElement_ = this.trackElements_[i];

        break;
      }
    }

    return trackElement_;
  };

  /**
   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to remove from the list.
   *
   * @private
   */


  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
      if (trackElement === this.trackElements_[i]) {
        this.trackElements_.splice(i, 1);

        break;
      }
    }
  };

  return HtmlTrackElementList;
}();

/**
 * @file text-track-cue-list.js
 */
/**
 * @typedef {Object} TextTrackCueList~TextTrackCue
 *
 * @property {string} id
 *           The unique id for this text track cue
 *
 * @property {number} startTime
 *           The start time for this text track cue
 *
 * @property {number} endTime
 *           The end time for this text track cue
 *
 * @property {boolean} pauseOnExit
 *           Pause when the end time is reached if true.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
 */

/**
 * A List of TextTrackCues.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
 */

var TextTrackCueList = function () {

  /**
   * Create an instance of this class..
   *
   * @param {Array} cues
   *        A list of cues to be initialized with
   */
  function TextTrackCueList(cues) {
    classCallCheck(this, TextTrackCueList);

    var list = this; // eslint-disable-line

    if (IS_IE8) {
      list = document.createElement('custom');

      for (var prop in TextTrackCueList.prototype) {
        if (prop !== 'constructor') {
          list[prop] = TextTrackCueList.prototype[prop];
        }
      }
    }

    TextTrackCueList.prototype.setCues_.call(list, cues);

    /**
     * @memberof TextTrackCueList
     * @member {number} length
     *         The current number of `TextTrackCue`s in the TextTrackCueList.
     * @instance
     */
    Object.defineProperty(list, 'length', {
      get: function get$$1() {
        return this.length_;
      }
    });

    if (IS_IE8) {
      return list;
    }
  }

  /**
   * A setter for cues in this list. Creates getters
   * an an index for the cues.
   *
   * @param {Array} cues
   *        An array of cues to set
   *
   * @private
   */


  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
    var oldLength = this.length || 0;
    var i = 0;
    var l = cues.length;

    this.cues_ = cues;
    this.length_ = cues.length;

    var defineProp = function defineProp(index) {
      if (!('' + index in this)) {
        Object.defineProperty(this, '' + index, {
          get: function get$$1() {
            return this.cues_[index];
          }
        });
      }
    };

    if (oldLength < l) {
      i = oldLength;

      for (; i < l; i++) {
        defineProp.call(this, i);
      }
    }
  };

  /**
   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
   *
   * @param {string} id
   *        The id of the cue that should be searched for.
   *
   * @return {TextTrackCueList~TextTrackCue|null}
   *         A single cue or null if none was found.
   */


  TextTrackCueList.prototype.getCueById = function getCueById(id) {
    var result = null;

    for (var i = 0, l = this.length; i < l; i++) {
      var cue = this[i];

      if (cue.id === id) {
        result = cue;
        break;
      }
    }

    return result;
  };

  return TextTrackCueList;
}();

/**
 * @file track-kinds.js
 */

/**
 * All possible `VideoTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
 * @typedef VideoTrack~Kind
 * @enum
 */
var VideoTrackKind = {
  alternative: 'alternative',
  captions: 'captions',
  main: 'main',
  sign: 'sign',
  subtitles: 'subtitles',
  commentary: 'commentary'
};

/**
 * All possible `AudioTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
 * @typedef AudioTrack~Kind
 * @enum
 */
var AudioTrackKind = {
  'alternative': 'alternative',
  'descriptions': 'descriptions',
  'main': 'main',
  'main-desc': 'main-desc',
  'translation': 'translation',
  'commentary': 'commentary'
};

/**
 * All possible `TextTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
 * @typedef TextTrack~Kind
 * @enum
 */
var TextTrackKind = {
  subtitles: 'subtitles',
  captions: 'captions',
  descriptions: 'descriptions',
  chapters: 'chapters',
  metadata: 'metadata'
};

/**
 * All possible `TextTrackMode`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
 * @typedef TextTrack~Mode
 * @enum
 */
var TextTrackMode = {
  disabled: 'disabled',
  hidden: 'hidden',
  showing: 'showing'
};

/**
 * @file track.js
 */
/**
 * A Track class that contains all of the common functionality for {@link AudioTrack},
 * {@link VideoTrack}, and {@link TextTrack}.
 *
 * > Note: This class should not be used directly
 *
 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
 * @extends EventTarget
 * @abstract
 */

var Track = function (_EventTarget) {
  inherits(Track, _EventTarget);

  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid kind for the track type you are creating.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @abstract
   */
  function Track() {
    var _ret;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, Track);

    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

    var track = _this; // eslint-disable-line

    if (IS_IE8) {
      track = document.createElement('custom');
      for (var prop in Track.prototype) {
        if (prop !== 'constructor') {
          track[prop] = Track.prototype[prop];
        }
      }
    }

    var trackProps = {
      id: options.id || 'vjs_track_' + newGUID(),
      kind: options.kind || '',
      label: options.label || '',
      language: options.language || ''
    };

    /**
     * @memberof Track
     * @member {string} id
     *         The id of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

    /**
     * @memberof Track
     * @member {string} kind
     *         The kind of track that this is. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

    /**
     * @memberof Track
     * @member {string} label
     *         The label of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

    /**
     * @memberof Track
     * @member {string} language
     *         The two letter language code for this track. Cannot be changed after
     *         creation.
     * @instance
     *
     * @readonly
     */

    var _loop = function _loop(key) {
      Object.defineProperty(track, key, {
        get: function get$$1() {
          return trackProps[key];
        },
        set: function set$$1() {}
      });
    };

    for (var key in trackProps) {
      _loop(key);
    }

    return _ret = track, possibleConstructorReturn(_this, _ret);
  }

  return Track;
}(EventTarget);

/**
 * @file url.js
 * @module url
 */
/**
 * @typedef {Object} url:URLObject
 *
 * @property {string} protocol
 *           The protocol of the url that was parsed.
 *
 * @property {string} hostname
 *           The hostname of the url that was parsed.
 *
 * @property {string} port
 *           The port of the url that was parsed.
 *
 * @property {string} pathname
 *           The pathname of the url that was parsed.
 *
 * @property {string} search
 *           The search query of the url that was parsed.
 *
 * @property {string} hash
 *           The hash of the url that was parsed.
 *
 * @property {string} host
 *           The host of the url that was parsed.
 */

/**
 * Resolve and parse the elements of a URL.
 *
 * @param  {String} url
 *         The url to parse
 *
 * @return {url:URLObject}
 *         An object of url details
 */
var parseUrl = function parseUrl(url) {
  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

  // add the url to an anchor and let the browser parse the URL
  var a = document.createElement('a');

  a.href = url;

  // IE8 (and 9?) Fix
  // ie8 doesn't parse the URL correctly until the anchor is actually
  // added to the body, and an innerHTML is needed to trigger the parsing
  var addToBody = a.host === '' && a.protocol !== 'file:';
  var div = void 0;

  if (addToBody) {
    div = document.createElement('div');
    div.innerHTML = '<a href="' + url + '"></a>';
    a = div.firstChild;
    // prevent the div from affecting layout
    div.setAttribute('style', 'display:none; position:absolute;');
    document.body.appendChild(div);
  }

  // Copy the specific URL properties to a new object
  // This is also needed for IE8 because the anchor loses its
  // properties when it's removed from the dom
  var details = {};

  for (var i = 0; i < props.length; i++) {
    details[props[i]] = a[props[i]];
  }

  // IE9 adds the port to the host property unlike everyone else. If
  // a port identifier is added for standard ports, strip it.
  if (details.protocol === 'http:') {
    details.host = details.host.replace(/:80$/, '');
  }

  if (details.protocol === 'https:') {
    details.host = details.host.replace(/:443$/, '');
  }

  if (!details.protocol) {
    details.protocol = window.location.protocol;
  }

  if (addToBody) {
    document.body.removeChild(div);
  }

  return details;
};

/**
 * Get absolute version of relative URL. Used to tell flash correct URL.
 *
 *
 * @param  {string} url
 *         URL to make absolute
 *
 * @return {string}
 *         Absolute URL
 *
 * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
 */
var getAbsoluteURL = function getAbsoluteURL(url) {
  // Check if absolute URL
  if (!url.match(/^https?:\/\//)) {
    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
    var div = document.createElement('div');

    div.innerHTML = '<a href="' + url + '">x</a>';
    url = div.firstChild.href;
  }

  return url;
};

/**
 * Returns the extension of the passed file name. It will return an empty string
 * if passed an invalid path.
 *
 * @param {string} path
 *        The fileName path like '/path/to/file.mp4'
 *
 * @returns {string}
 *          The extension in lower case or an empty string if no
 *          extension could be found.
 */
var getFileExtension = function getFileExtension(path) {
  if (typeof path === 'string') {
    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
    var pathParts = splitPathRe.exec(path);

    if (pathParts) {
      return pathParts.pop().toLowerCase();
    }
  }

  return '';
};

/**
 * Returns whether the url passed is a cross domain request or not.
 *
 * @param {string} url
 *        The url to check.
 *
 * @return {boolean}
 *         Whether it is a cross domain request or not.
 */
var isCrossOrigin = function isCrossOrigin(url) {
  var winLoc = window.location;
  var urlInfo = parseUrl(url);

  // IE8 protocol relative urls will return ':' for protocol
  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

  // Check if url is for another domain/origin
  // IE8 doesn't know location.origin, so we won't rely on it here
  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

  return crossOrigin;
};

var Url = (Object.freeze || Object)({
	parseUrl: parseUrl,
	getAbsoluteURL: getAbsoluteURL,
	getFileExtension: getFileExtension,
	isCrossOrigin: isCrossOrigin
});

/**
 * @file text-track.js
 */
/**
 * Takes a webvtt file contents and parses it into cues
 *
 * @param {string} srcContent
 *        webVTT file contents
 *
 * @param {TextTrack} track
 *        TextTrack to add cues to. Cues come from the srcContent.
 *
 * @private
 */
var parseCues = function parseCues(srcContent, track) {
  var parser = new window.WebVTT.Parser(window, window.vttjs, window.WebVTT.StringDecoder());
  var errors = [];

  parser.oncue = function (cue) {
    track.addCue(cue);
  };

  parser.onparsingerror = function (error) {
    errors.push(error);
  };

  parser.onflush = function () {
    track.trigger({
      type: 'loadeddata',
      target: track
    });
  };

  parser.parse(srcContent);
  if (errors.length > 0) {
    if (window.console && window.console.groupCollapsed) {
      window.console.groupCollapsed('Text Track parsing errors for ' + track.src);
    }
    errors.forEach(function (error) {
      return log$1.error(error);
    });
    if (window.console && window.console.groupEnd) {
      window.console.groupEnd();
    }
  }

  parser.flush();
};

/**
 * Load a `TextTrack` from a specifed url.
 *
 * @param {string} src
 *        Url to load track from.
 *
 * @param {TextTrack} track
 *        Track to add cues to. Comes from the content at the end of `url`.
 *
 * @private
 */
var loadTrack = function loadTrack(src, track) {
  var opts = {
    uri: src
  };
  var crossOrigin = isCrossOrigin(src);

  if (crossOrigin) {
    opts.cors = crossOrigin;
  }

  xhr(opts, bind(this, function (err, response, responseBody) {
    if (err) {
      return log$1.error(err, response);
    }

    track.loaded_ = true;

    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
    // NOTE: this is only used for the alt/video.novtt.js build
    if (typeof window.WebVTT !== 'function') {
      if (track.tech_) {
        var loadHandler = function loadHandler() {
          return parseCues(responseBody, track);
        };

        track.tech_.on('vttjsloaded', loadHandler);
        track.tech_.on('vttjserror', function () {
          log$1.error('vttjs failed to load, stopping trying to process ' + track.src);
          track.tech_.off('vttjsloaded', loadHandler);
        });
      }
    } else {
      parseCues(responseBody, track);
    }
  }));
};

/**
 * A representation of a single `TextTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
 * @extends Track
 */

var TextTrack = function (_Track) {
  inherits(TextTrack, _Track);

  /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param {Tech} options.tech
   *        A reference to the tech that owns this TextTrack.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        vesion of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */
  function TextTrack() {
    var _this, _ret;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, TextTrack);

    if (!options.tech) {
      throw new Error('A tech was not provided.');
    }

    var settings = mergeOptions(options, {
      kind: TextTrackKind[options.kind] || 'subtitles',
      language: options.language || options.srclang || ''
    });
    var mode = TextTrackMode[settings.mode] || 'disabled';
    var default_ = settings['default'];

    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
      mode = 'hidden';
    }
    // on IE8 this will be a document element
    // for every other browser this will be a normal object
    var tt = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);

    tt.tech_ = settings.tech;

    if (IS_IE8) {
      for (var prop in TextTrack.prototype) {
        if (prop !== 'constructor') {
          tt[prop] = TextTrack.prototype[prop];
        }
      }
    }

    tt.cues_ = [];
    tt.activeCues_ = [];

    var cues = new TextTrackCueList(tt.cues_);
    var activeCues = new TextTrackCueList(tt.activeCues_);
    var changed = false;
    var timeupdateHandler = bind(tt, function () {

      // Accessing this.activeCues for the side-effects of updating itself
      // due to it's nature as a getter function. Do not remove or cues will
      // stop updating!
      /* eslint-disable no-unused-expressions */
      this.activeCues;
      /* eslint-enable no-unused-expressions */
      if (changed) {
        this.trigger('cuechange');
        changed = false;
      }
    });

    if (mode !== 'disabled') {
      tt.tech_.ready(function () {
        tt.tech_.on('timeupdate', timeupdateHandler);
      }, true);
    }

    /**
     * @memberof TextTrack
     * @member {boolean} default
     *         If this track was set to be on or off by default. Cannot be changed after
     *         creation.
     * @instance
     *
     * @readonly
     */
    Object.defineProperty(tt, 'default', {
      get: function get$$1() {
        return default_;
      },
      set: function set$$1() {}
    });

    /**
     * @memberof TextTrack
     * @member {string} mode
     *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
     *         not be set if setting to an invalid mode.
     * @instance
     *
     * @fires TextTrack#modechange
     */
    Object.defineProperty(tt, 'mode', {
      get: function get$$1() {
        return mode;
      },
      set: function set$$1(newMode) {
        var _this2 = this;

        if (!TextTrackMode[newMode]) {
          return;
        }
        mode = newMode;
        if (mode === 'showing') {

          this.tech_.ready(function () {
            _this2.tech_.on('timeupdate', timeupdateHandler);
          }, true);
        }
        /**
         * An event that fires when mode changes on this track. This allows
         * the TextTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec!
         *
         * @event TextTrack#modechange
         * @type {EventTarget~Event}
         */
        this.trigger('modechange');
      }
    });

    /**
     * @memberof TextTrack
     * @member {TextTrackCueList} cues
     *         The text track cue list for this TextTrack.
     * @instance
     */
    Object.defineProperty(tt, 'cues', {
      get: function get$$1() {
        if (!this.loaded_) {
          return null;
        }

        return cues;
      },
      set: function set$$1() {}
    });

    /**
     * @memberof TextTrack
     * @member {TextTrackCueList} activeCues
     *         The list text track cues that are currently active for this TextTrack.
     * @instance
     */
    Object.defineProperty(tt, 'activeCues', {
      get: function get$$1() {
        if (!this.loaded_) {
          return null;
        }

        // nothing to do
        if (this.cues.length === 0) {
          return activeCues;
        }

        var ct = this.tech_.currentTime();
        var active = [];

        for (var i = 0, l = this.cues.length; i < l; i++) {
          var cue = this.cues[i];

          if (cue.startTime <= ct && cue.endTime >= ct) {
            active.push(cue);
          } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
            active.push(cue);
          }
        }

        changed = false;

        if (active.length !== this.activeCues_.length) {
          changed = true;
        } else {
          for (var _i = 0; _i < active.length; _i++) {
            if (this.activeCues_.indexOf(active[_i]) === -1) {
              changed = true;
            }
          }
        }

        this.activeCues_ = active;
        activeCues.setCues_(this.activeCues_);

        return activeCues;
      },
      set: function set$$1() {}
    });

    if (settings.src) {
      tt.src = settings.src;
      loadTrack(settings.src, tt);
    } else {
      tt.loaded_ = true;
    }

    return _ret = tt, possibleConstructorReturn(_this, _ret);
  }

  /**
   * Add a cue to the internal list of cues.
   *
   * @param {TextTrack~Cue} cue
   *        The cue to add to our internal list
   */


  TextTrack.prototype.addCue = function addCue(originalCue) {
    var cue = originalCue;

    if (window.vttjs && !(originalCue instanceof window.vttjs.VTTCue)) {
      cue = new window.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);

      for (var prop in originalCue) {
        if (!(prop in cue)) {
          cue[prop] = originalCue[prop];
        }
      }

      // make sure that `id` is copied over
      cue.id = originalCue.id;
      cue.originalCue_ = originalCue;
    }

    var tracks = this.tech_.textTracks();

    for (var i = 0; i < tracks.length; i++) {
      if (tracks[i] !== this) {
        tracks[i].removeCue(cue);
      }
    }

    this.cues_.push(cue);
    this.cues.setCues_(this.cues_);
  };

  /**
   * Remove a cue from our internal list
   *
   * @param {TextTrack~Cue} removeCue
   *        The cue to remove from our internal list
   */


  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
    var i = this.cues_.length;

    while (i--) {
      var cue = this.cues_[i];

      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
        this.cues_.splice(i, 1);
        this.cues.setCues_(this.cues_);
        break;
      }
    }
  };

  return TextTrack;
}(Track);

/**
 * cuechange - One or more cues in the track have become active or stopped being active.
 */


TextTrack.prototype.allowedEvents_ = {
  cuechange: 'cuechange'
};

/**
 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
 * only one `AudioTrack` in the list will be enabled at a time.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
 * @extends Track
 */

var AudioTrack = function (_Track) {
  inherits(AudioTrack, _Track);

  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {AudioTrack~Kind} [options.kind='']
   *        A valid audio track kind
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.enabled]
   *        If this track is the one that is currently playing. If this track is part of
   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
   */
  function AudioTrack() {
    var _this, _ret;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, AudioTrack);

    var settings = mergeOptions(options, {
      kind: AudioTrackKind[options.kind] || ''
    });
    // on IE8 this will be a document element
    // for every other browser this will be a normal object
    var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
    var enabled = false;

    if (IS_IE8) {
      for (var prop in AudioTrack.prototype) {
        if (prop !== 'constructor') {
          track[prop] = AudioTrack.prototype[prop];
        }
      }
    }
    /**
     * @memberof AudioTrack
     * @member {boolean} enabled
     *         If this `AudioTrack` is enabled or not. When setting this will
     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */
    Object.defineProperty(track, 'enabled', {
      get: function get$$1() {
        return enabled;
      },
      set: function set$$1(newEnabled) {
        // an invalid or unchanged value
        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
          return;
        }
        enabled = newEnabled;

        /**
         * An event that fires when enabled changes on this track. This allows
         * the AudioTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event AudioTrack#enabledchange
         * @type {EventTarget~Event}
         */
        this.trigger('enabledchange');
      }
    });

    // if the user sets this track to selected then
    // set selected to that true value otherwise
    // we keep it false
    if (settings.enabled) {
      track.enabled = settings.enabled;
    }
    track.loaded_ = true;

    return _ret = track, possibleConstructorReturn(_this, _ret);
  }

  return AudioTrack;
}(Track);

/**
 * A representation of a single `VideoTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
 * @extends Track
 */

var VideoTrack = function (_Track) {
  inherits(VideoTrack, _Track);

  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid {@link VideoTrack~Kind}
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.selected]
   *        If this track is the one that is currently playing.
   */
  function VideoTrack() {
    var _this, _ret;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, VideoTrack);

    var settings = mergeOptions(options, {
      kind: VideoTrackKind[options.kind] || ''
    });

    // on IE8 this will be a document element
    // for every other browser this will be a normal object
    var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
    var selected = false;

    if (IS_IE8) {
      for (var prop in VideoTrack.prototype) {
        if (prop !== 'constructor') {
          track[prop] = VideoTrack.prototype[prop];
        }
      }
    }

    /**
     * @memberof VideoTrack
     * @member {boolean} selected
     *         If this `VideoTrack` is selected or not. When setting this will
     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */
    Object.defineProperty(track, 'selected', {
      get: function get$$1() {
        return selected;
      },
      set: function set$$1(newSelected) {
        // an invalid or unchanged value
        if (typeof newSelected !== 'boolean' || newSelected === selected) {
          return;
        }
        selected = newSelected;

        /**
         * An event that fires when selected changes on this track. This allows
         * the VideoTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event VideoTrack#selectedchange
         * @type {EventTarget~Event}
         */
        this.trigger('selectedchange');
      }
    });

    // if the user sets this track to selected then
    // set selected to that true value otherwise
    // we keep it false
    if (settings.selected) {
      track.selected = settings.selected;
    }

    return _ret = track, possibleConstructorReturn(_this, _ret);
  }

  return VideoTrack;
}(Track);

/**
 * @file html-track-element.js
 */

/**
 * @memberof HTMLTrackElement
 * @typedef {HTMLTrackElement~ReadyState}
 * @enum {number}
 */
var NONE = 0;
var LOADING = 1;
var LOADED = 2;
var ERROR = 3;

/**
 * A single track represented in the DOM.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
 * @extends EventTarget
 */

var HTMLTrackElement = function (_EventTarget) {
  inherits(HTMLTrackElement, _EventTarget);

  /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param {Tech} options.tech
   *        A reference to the tech that owns this HTMLTrackElement.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        vesion of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */
  function HTMLTrackElement() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, HTMLTrackElement);

    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

    var readyState = void 0;
    var trackElement = _this; // eslint-disable-line

    if (IS_IE8) {
      trackElement = document.createElement('custom');

      for (var prop in HTMLTrackElement.prototype) {
        if (prop !== 'constructor') {
          trackElement[prop] = HTMLTrackElement.prototype[prop];
        }
      }
    }

    var track = new TextTrack(options);

    trackElement.kind = track.kind;
    trackElement.src = track.src;
    trackElement.srclang = track.language;
    trackElement.label = track.label;
    trackElement['default'] = track['default'];

    /**
     * @memberof HTMLTrackElement
     * @member {HTMLTrackElement~ReadyState} readyState
     *         The current ready state of the track element.
     * @instance
     */
    Object.defineProperty(trackElement, 'readyState', {
      get: function get$$1() {
        return readyState;
      }
    });

    /**
     * @memberof HTMLTrackElement
     * @member {TextTrack} track
     *         The underlying TextTrack object.
     * @instance
     *
     */
    Object.defineProperty(trackElement, 'track', {
      get: function get$$1() {
        return track;
      }
    });

    readyState = NONE;

    /**
     * @listens TextTrack#loadeddata
     * @fires HTMLTrackElement#load
     */
    track.addEventListener('loadeddata', function () {
      readyState = LOADED;

      trackElement.trigger({
        type: 'load',
        target: trackElement
      });
    });

    if (IS_IE8) {
      var _ret;

      return _ret = trackElement, possibleConstructorReturn(_this, _ret);
    }
    return _this;
  }

  return HTMLTrackElement;
}(EventTarget);

HTMLTrackElement.prototype.allowedEvents_ = {
  load: 'load'
};

HTMLTrackElement.NONE = NONE;
HTMLTrackElement.LOADING = LOADING;
HTMLTrackElement.LOADED = LOADED;
HTMLTrackElement.ERROR = ERROR;

/*
 * This file contains all track properties that are used in
 * player.js, tech.js, html5.js and possibly other techs in the future.
 */

var NORMAL = {
  audio: {
    ListClass: AudioTrackList,
    TrackClass: AudioTrack,
    capitalName: 'Audio'
  },
  video: {
    ListClass: VideoTrackList,
    TrackClass: VideoTrack,
    capitalName: 'Video'
  },
  text: {
    ListClass: TextTrackList,
    TrackClass: TextTrack,
    capitalName: 'Text'
  }
};

Object.keys(NORMAL).forEach(function (type) {
  NORMAL[type].getterName = type + 'Tracks';
  NORMAL[type].privateName = type + 'Tracks_';
});

var REMOTE = {
  remoteText: {
    ListClass: TextTrackList,
    TrackClass: TextTrack,
    capitalName: 'RemoteText',
    getterName: 'remoteTextTracks',
    privateName: 'remoteTextTracks_'
  },
  remoteTextEl: {
    ListClass: HtmlTrackElementList,
    TrackClass: HTMLTrackElement,
    capitalName: 'RemoteTextTrackEls',
    getterName: 'remoteTextTrackEls',
    privateName: 'remoteTextTrackEls_'
  }
};

var ALL = mergeOptions(NORMAL, REMOTE);

REMOTE.names = Object.keys(REMOTE);
NORMAL.names = Object.keys(NORMAL);
ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);

/**
 * @file tech.js
 */

/**
 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
 * that just contains the src url alone.
 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
   * `var SourceString = 'http://example.com/some-video.mp4';`
 *
 * @typedef {Object|string} Tech~SourceObject
 *
 * @property {string} src
 *           The url to the source
 *
 * @property {string} type
 *           The mime type of the source
 */

/**
 * A function used by {@link Tech} to create a new {@link TextTrack}.
 *
 * @private
 *
 * @param {Tech} self
 *        An instance of the Tech class.
 *
 * @param {string} kind
 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
 *
 * @param {string} [label]
 *        Label to identify the text track
 *
 * @param {string} [language]
 *        Two letter language abbreviation
 *
 * @param {Object} [options={}]
 *        An object with additional text track options
 *
 * @return {TextTrack}
 *          The text track that was created.
 */
function createTrackHelper(self, kind, label, language) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  var tracks = self.textTracks();

  options.kind = kind;

  if (label) {
    options.label = label;
  }
  if (language) {
    options.language = language;
  }
  options.tech = self;

  var track = new ALL.text.TrackClass(options);

  tracks.addTrack(track);

  return track;
}

/**
 * This is the base class for media playback technology controllers, such as
 * {@link Flash} and {@link HTML5}
 *
 * @extends Component
 */

var Tech = function (_Component) {
  inherits(Tech, _Component);

  /**
   * Create an instance of this Tech.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} ready
   *        Callback function to call when the `HTML5` Tech is ready.
   */
  function Tech() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    classCallCheck(this, Tech);

    // we don't want the tech to report user activity automatically.
    // This is done manually in addControlsListeners
    options.reportTouchActivity = false;

    // keep track of whether the current source has played at all to
    // implement a very limited played()
    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

    _this.hasStarted_ = false;
    _this.on('playing', function () {
      this.hasStarted_ = true;
    });
    _this.on('loadstart', function () {
      this.hasStarted_ = false;
    });

    ALL.names.forEach(function (name) {
      var props = ALL[name];

      if (options && options[props.getterName]) {
        _this[props.privateName] = options[props.getterName];
      }
    });

    // Manually track progress in cases where the browser/flash player doesn't report it.
    if (!_this.featuresProgressEvents) {
      _this.manualProgressOn();
    }

    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
    if (!_this.featuresTimeupdateEvents) {
      _this.manualTimeUpdatesOn();
    }

    ['Text', 'Audio', 'Video'].forEach(function (track) {
      if (options['native' + track + 'Tracks'] === false) {
        _this['featuresNative' + track + 'Tracks'] = false;
      }
    });

    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
      _this.featuresNativeTextTracks = false;
    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
      _this.featuresNativeTextTracks = true;
    }

    if (!_this.featuresNativeTextTracks) {
      _this.emulateTextTracks();
    }

    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();

    _this.initTrackListeners();

    // Turn on component tap events only if not using native controls
    if (!options.nativeControlsForTouch) {
      _this.emitTapEvents();
    }

    if (_this.constructor) {
      _this.name_ = _this.constructor.name || 'Unknown Tech';
    }
    return _this;
  }

  /* Fallbacks for unsupported event types
  ================================================================================ */

  /**
   * Polyfill the `progress` event for browsers that don't support it natively.
   *
   * @see {@link Tech#trackProgress}
   */


  Tech.prototype.manualProgressOn = function manualProgressOn() {
    this.on('durationchange', this.onDurationChange);

    this.manualProgress = true;

    // Trigger progress watching when a source begins loading
    this.one('ready', this.trackProgress);
  };

  /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   */


  Tech.prototype.manualProgressOff = function manualProgressOff() {
    this.manualProgress = false;
    this.stopTrackingProgress();

    this.off('durationchange', this.onDurationChange);
  };

  /**
   * This is used to trigger a `progress` event when the buffered percent changes. It
   * sets an interval function that will be called every 500 milliseconds to check if the
   * buffer end percent has changed.
   *
   * > This function is called by {@link Tech#manualProgressOn}
   *
   * @param {EventTarget~Event} event
   *        The `ready` event that caused this to run.
   *
   * @listens Tech#ready
   * @fires Tech#progress
   */


  Tech.prototype.trackProgress = function trackProgress(event) {
    this.stopTrackingProgress();
    this.progressInterval = this.setInterval(bind(this, function () {
      // Don't trigger unless buffered amount is greater than last time

      var numBufferedPercent = this.bufferedPercent();

      if (this.bufferedPercent_ !== numBufferedPercent) {
        /**
         * See {@link Player#progress}
         *
         * @event Tech#progress
         * @type {EventTarget~Event}
         */
        this.trigger('progress');
      }

      this.bufferedPercent_ = numBufferedPercent;

      if (numBufferedPercent === 1) {
        this.stopTrackingProgress();
      }
    }), 500);
  };

  /**
   * Update our internal duration on a `durationchange` event by calling
   * {@link Tech#duration}.
   *
   * @param {EventTarget~Event} event
   *        The `durationchange` event that caused this to run.
   *
   * @listens Tech#durationchange
   */


  Tech.prototype.onDurationChange = function onDurationChange(event) {
    this.duration_ = this.duration();
  };

  /**
   * Get and create a `TimeRange` object for buffering.
   *
   * @return {TimeRange}
   *         The time range object that was created.
   */


  Tech.prototype.buffered = function buffered() {
    return createTimeRanges(0, 0);
  };

  /**
   * Get the percentage of the current video that is currently buffered.
   *
   * @return {number}
   *         A number from 0 to 1 that represents the decimal percentage of the
   *         video that is buffered.
   *
   */


  Tech.prototype.bufferedPercent = function bufferedPercent$$1() {
    return bufferedPercent(this.buffered(), this.duration_);
  };

  /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   * Stop manually tracking progress events by clearing the interval that was set in
   * {@link Tech#trackProgress}.
   */


  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
    this.clearInterval(this.progressInterval);
  };

  /**
   * Polyfill the `timeupdate` event for browsers that don't support it.
   *
   * @see {@link Tech#trackCurrentTime}
   */


  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
    this.manualTimeUpdates = true;

    this.on('play', this.trackCurrentTime);
    this.on('pause', this.stopTrackingCurrentTime);
  };

  /**
   * Turn off the polyfill for `timeupdate` events that was created in
   * {@link Tech#manualTimeUpdatesOn}
   */


  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
    this.manualTimeUpdates = false;
    this.stopTrackingCurrentTime();
    this.off('play', this.trackCurrentTime);
    this.off('pause', this.stopTrackingCurrentTime);
  };

  /**
   * Sets up an interval function to track current time and trigger `timeupdate` every
   * 250 milliseconds.
   *
   * @listens Tech#play
   * @triggers Tech#timeupdate
   */


  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
    if (this.currentTimeInterval) {
      this.stopTrackingCurrentTime();
    }
    this.currentTimeInterval = this.setInterval(function () {
      /**
       * Triggered at an interval of 250ms to indicated that time is passing in the video.
       *
       * @event Tech#timeupdate
       * @type {EventTarget~Event}
       */
      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });

      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
    }, 250);
  };

  /**
   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
   * `timeupdate` event is no longer triggered.
   *
   * @listens {Tech#pause}
   */


  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
    this.clearInterval(this.currentTimeInterval);

    // #1002 - if the video ends right before the next timeupdate would happen,
    // the progress bar won't make it all the way to the end
    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
  };

  /**
   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
   *
   * @fires Component#dispose
   */


  Tech.prototype.dispose = function dispose() {

    // clear out all tracks because we can't reuse them between techs
    this.clearTracks(NORMAL.names);

    // Turn off any manual progress or timeupdate tracking
    if (this.manualProgress) {
      this.manualProgressOff();
    }

    if (this.manualTimeUpdates) {
      this.manualTimeUpdatesOff();
    }

    _Component.prototype.dispose.call(this);
  };

  /**
   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
   *
   * > Note: Techs without source handlers should call this between sources for `video`
   *         & `audio` tracks. You don't want to use them between tracks!
   *
   * @param {string[]|string} types
   *        TrackList names to clear, valid names are `video`, `audio`, and
   *        `text`.
   */


  Tech.prototype.clearTracks = function clearTracks(types) {
    var _this2 = this;

    types = [].concat(types);
    // clear out all tracks because we can't reuse them between techs
    types.forEach(function (type) {
      var list = _this2[type + 'Tracks']() || [];
      var i = list.length;

      while (i--) {
        var track = list[i];

        if (type === 'text') {
          _this2.removeRemoteTextTrack(track);
        }
        list.removeTrack(track);
      }
    });
  };

  /**
   * Remove any TextTracks added via addRemoteTextTrack that are
   * flagged for automatic garbage collection
   */


  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
    var list = this.autoRemoteTextTracks_ || [];
    var i = list.length;

    while (i--) {
      var track = list[i];

      this.removeRemoteTextTrack(track);
    }
  };

  /**
   * Reset the tech, which will removes all sources and reset the internal readyState.
   *
   * @abstract
   */


  Tech.prototype.reset = function reset() {};

  /**
   * Get or set an error on the Tech.
   *
   * @param {MediaError} [err]
   *        Error to set on the Tech
   *
   * @return {MediaError|null}
   *         The current error object on the tech, or null if there isn't one.
   */


  Tech.prototype.error = function error(err) {
    if (err !== undefined) {
      this.error_ = new MediaError(err);
      this.trigger('error');
    }
    return this.error_;
  };

  /**
   * Returns the `TimeRange`s that have been played through for the current source.
   *
   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
   *         It only checks wether the source has played at all or not.
   *
   * @return {TimeRange}
   *         - A single time range if this video has played
   *         - An empty set of ranges if not.
   */


  Tech.prototype.played = function played() {
    if (this.hasStarted_) {
      return createTimeRanges(0, 0);
    }
    return createTimeRanges();
  };

  /**
   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
   * previously called.
   *
   * @fires Tech#timeupdate
   */


  Tech.prototype.setCurrentTime = function setCurrentTime() {
    // improve the accuracy of manual timeupdates
    if (this.manualTimeUpdates) {
      /**
       * A manual `timeupdate` event.
       *
       * @event Tech#timeupdate
       * @type {EventTarget~Event}
       */
      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
    }
  };

  /**
   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
   * {@link TextTrackList} events.
   *
   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
   *
   * @fires Tech#audiotrackchange
   * @fires Tech#videotrackchange
   * @fires Tech#texttrackchange
   */


  Tech.prototype.initTrackListeners = function initTrackListeners() {
    var _this3 = this;

    /**
     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
     *
     * @event Tech#audiotrackchange
     * @type {EventTarget~Event}
     */

    /**
     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
     *
     * @event Tech#videotrackchange
     * @type {EventTarget~Event}
     */

    /**
     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
     *
     * @event Tech#texttrackchange
     * @type {EventTarget~Event}
     */
    NORMAL.names.forEach(function (name) {
      var props = NORMAL[name];
      var trackListChanges = function trackListChanges() {
        _this3.trigger(name + 'trackchange');
      };

      var tracks = _this3[props.getterName]();

      tracks.addEventListener('removetrack', trackListChanges);
      tracks.addEventListener('addtrack', trackListChanges);

      _this3.on('dispose', function () {
        tracks.removeEventListener('removetrack', trackListChanges);
        tracks.removeEventListener('addtrack', trackListChanges);
      });
    });
  };

  /**
   * Emulate TextTracks using vtt.js if necessary
   *
   * @fires Tech#vttjsloaded
   * @fires Tech#vttjserror
   */


  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
    var _this4 = this;

    if (window.WebVTT) {
      return;
    }

    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
    // signals that the Tech is ready at which point Tech.el_ is part of the DOM
    // before inserting the WebVTT script
    if (document.body.contains(this.el())) {

      // load via require if available and vtt.js script location was not passed in
      // as an option. novtt builds will turn the above require call into an empty object
      // which will cause this if check to always fail.
      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {
        this.trigger('vttjsloaded');
        return;
      }

      // load vtt.js via the script location option or the cdn of no location was
      // passed in
      var script = document.createElement('script');

      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.12.4/vtt.min.js';
      script.onload = function () {
        /**
         * Fired when vtt.js is loaded.
         *
         * @event Tech#vttjsloaded
         * @type {EventTarget~Event}
         */
        _this4.trigger('vttjsloaded');
      };
      script.onerror = function () {
        /**
         * Fired when vtt.js was not loaded due to an error
         *
         * @event Tech#vttjsloaded
         * @type {EventTarget~Event}
         */
        _this4.trigger('vttjserror');
      };
      this.on('dispose', function () {
        script.onload = null;
        script.onerror = null;
      });
      // but have not loaded yet and we set it to true before the inject so that
      // we don't overwrite the injected window.WebVTT if it loads right away
      window.WebVTT = true;
      this.el().parentNode.appendChild(script);
    } else {
      this.ready(this.addWebVttScript_);
    }
  };

  /**
   * Emulate texttracks
   *
   */


  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
    var _this5 = this;

    var tracks = this.textTracks();
    var remoteTracks = this.remoteTextTracks();
    var handleAddTrack = function handleAddTrack(e) {
      return tracks.addTrack(e.track);
    };
    var handleRemoveTrack = function handleRemoveTrack(e) {
      return tracks.removeTrack(e.track);
    };

    remoteTracks.on('addtrack', handleAddTrack);
    remoteTracks.on('removetrack', handleRemoveTrack);

    this.addWebVttScript_();

    var updateDisplay = function updateDisplay() {
      return _this5.trigger('texttrackchange');
    };

    var textTracksChanges = function textTracksChanges() {
      updateDisplay();

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        track.removeEventListener('cuechange', updateDisplay);
        if (track.mode === 'showing') {
          track.addEventListener('cuechange', updateDisplay);
        }
      }
    };

    textTracksChanges();
    tracks.addEventListener('change', textTracksChanges);
    tracks.addEventListener('addtrack', textTracksChanges);
    tracks.addEventListener('removetrack', textTracksChanges);

    this.on('dispose', function () {
      remoteTracks.off('addtrack', handleAddTrack);
      remoteTracks.off('removetrack', handleRemoveTrack);
      tracks.removeEventListener('change', textTracksChanges);
      tracks.removeEventListener('addtrack', textTracksChanges);
      tracks.removeEventListener('removetrack', textTracksChanges);

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        track.removeEventListener('cuechange', updateDisplay);
      }
    });
  };

  /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */


  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
    if (!kind) {
      throw new Error('TextTrack kind is required but was not provided');
    }

    return createTrackHelper(this, kind, label, language);
  };

  /**
   * Create an emulated TextTrack for use by addRemoteTextTrack
   *
   * This is intended to be overridden by classes that inherit from
   * Tech in order to create native or custom TextTracks.
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */


  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
    var track = mergeOptions(options, {
      tech: this
    });

    return new REMOTE.remoteTextEl.TrackClass(track);
  };

  /**
   * Creates a remote text track object and returns an html track element.
   *
   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   * @param {Object} options
   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
   *
   * @param {boolean} [manualCleanup=true]
   *        - When false: the TextTrack will be automatically removed from the video
   *          element whenever the source changes
   *        - When True: The TextTrack will have to be cleaned up manually
   *
   * @return {HTMLTrackElement}
   *         An Html Track Element.
   *
   * @deprecated The default functionality for this function will be equivalent
   *             to "manualCleanup=false" in the future. The manualCleanup parameter will
   *             also be removed.
   */


  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
    var _this6 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var manualCleanup = arguments[1];

    var htmlTrackElement = this.createRemoteTextTrack(options);

    if (manualCleanup !== true && manualCleanup !== false) {
      // deprecation warning
      log$1.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
      manualCleanup = true;
    }

    // store HTMLTrackElement and TextTrack to remote list
    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
    this.remoteTextTracks().addTrack(htmlTrackElement.track);

    if (manualCleanup !== true) {
      // create the TextTrackList if it doesn't exist
      this.ready(function () {
        return _this6.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
      });
    }

    return htmlTrackElement;
  };

  /**
   * Remove a remote text track from the remote `TextTrackList`.
   *
   * @param {TextTrack} track
   *        `TextTrack` to remove from the `TextTrackList`
   */


  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

    // remove HTMLTrackElement and TextTrack from remote list
    this.remoteTextTrackEls().removeTrackElement_(trackElement);
    this.remoteTextTracks().removeTrack(track);
    this.autoRemoteTextTracks_.removeTrack(track);
  };

  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   *
   * @abstract
   */


  Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
    return {};
  };

  /**
   * A method to set a poster from a `Tech`.
   *
   * @abstract
   */


  Tech.prototype.setPoster = function setPoster() {};

  /**
   * A method to check for the presence of the 'playsinine' <video> attribute.
   *
   * @abstract
   */


  Tech.prototype.playsinline = function playsinline() {};

  /**
   * A method to set or unset the 'playsinine' <video> attribute.
   *
   * @abstract
   */


  Tech.prototype.setPlaysinline = function setPlaysinline() {};

  /*
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */


  Tech.prototype.canPlayType = function canPlayType() {
    return '';
  };

  /**
   * Check if the type is supported by this tech.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param {string} type
   *        The media type to check
   * @return {string} Returns the native video element's response
   */


  Tech.canPlayType = function canPlayType() {
    return '';
  };

  /**
   * Check if the tech can support the given source
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */


  Tech.canPlaySource = function canPlaySource(srcObj, options) {
    return Tech.canPlayType(srcObj.type);
  };

  /*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */


  Tech.isTech = function isTech(component) {
    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
  };

  /**
   * Registers a `Tech` into a shared list for videojs.
   *
   * @param {string} name
   *        Name of the `Tech` to register.
   *
   * @param {Object} tech
   *        The `Tech` class to register.
   */


  Tech.registerTech = function registerTech(name, tech) {
    if (!Tech.techs_) {
      Tech.techs_ = {};
    }

    if (!Tech.isTech(tech)) {
      throw new Error('Tech ' + name + ' must be a Tech');
    }

    if (!Tech.canPlayType) {
      throw new Error('Techs must have a static canPlayType method on them');
    }
    if (!Tech.canPlaySource) {
      throw new Error('Techs must have a static canPlaySource method on them');
    }

    name = toTitleCase(name);

    Tech.techs_[name] = tech;
    if (name !== 'Tech') {
      // camel case the techName for use in techOrder
      Tech.defaultTechOrder_.push(name);
    }
    return tech;
  };

  /**
   * Get a `Tech` from the shared list by name.
   *
   * @param {string} name
   *        `camelCase` or `TitleCase` name of the Tech to get
   *
   * @return {Tech|undefined}
   *         The `Tech` or undefined if there was no tech with the name requsted.
   */


  Tech.getTech = function getTech(name) {
    if (!name) {
      return;
    }

    name = toTitleCase(name);

    if (Tech.techs_ && Tech.techs_[name]) {
      return Tech.techs_[name];
    }

    if (window && window.videojs && window.videojs[name]) {
      log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
      return window.videojs[name];
    }
  };

  return Tech;
}(Component);

/**
 * Get the {@link VideoTrackList}
 *
 * @returns {VideoTrackList}
 * @method Tech.prototype.videoTracks
 */

/**
 * Get the {@link AudioTrackList}
 *
 * @returns {AudioTrackList}
 * @method Tech.prototype.audioTracks
 */

/**
 * Get the {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.textTracks
 */

/**
 * Get the remote element {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.remoteTextTracks
 */

/**
 * Get the remote element {@link HtmlTrackElementList}
 *
 * @returns {HtmlTrackElementList}
 * @method Tech.prototype.remoteTextTrackEls
 */

ALL.names.forEach(function (name) {
  var props = ALL[name];

  Tech.prototype[props.getterName] = function () {
    this[props.privateName] = this[props.privateName] || new props.ListClass();
    return this[props.privateName];
  };
});

/**
 * List of associated text tracks
 *
 * @type {TextTrackList}
 * @private
 * @property Tech#textTracks_
 */

/**
 * List of associated audio tracks.
 *
 * @type {AudioTrackList}
 * @private
 * @property Tech#audioTracks_
 */

/**
 * List of associated video tracks.
 *
 * @type {VideoTrackList}
 * @private
 * @property Tech#videoTracks_
 */

/**
 * Boolean indicating wether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresVolumeControl = true;

/**
 * Boolean indicating wether the `Tech` support fullscreen resize control.
 * Resizing plugins using request fullscreen reloads the plugin
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresFullscreenResize = false;

/**
 * Boolean indicating wether the `Tech` supports changing the speed at which the video
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresPlaybackRate = false;

/**
 * Boolean indicating wether the `Tech` supports the `progress` event. This is currently
 * not triggered by video-js-swf. This will be used to determine if
 * {@link Tech#manualProgressOn} should be called.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresProgressEvents = false;

/**
 * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently
 * not triggered by video-js-swf. This will be used to determine if
 * {@link Tech#manualTimeUpdates} should be called.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresTimeupdateEvents = false;

/**
 * Boolean indicating wether the `Tech` supports the native `TextTrack`s.
 * This will help us integrate with native `TextTrack`s if the browser supports them.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresNativeTextTracks = false;

/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 * Source handlers are scripts for handling specific formats.
 * The source handler pattern is used for adaptive formats (HLS, DASH) that
 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
 * Example: `Tech.withSourceHandlers.call(MyTech);`
 *
 * @param {Tech} _Tech
 *        The tech to add source handler functions to.
 *
 * @mixes Tech~SourceHandlerAdditions
 */
Tech.withSourceHandlers = function (_Tech) {

  /**
   * Register a source handler
   *
   * @param {Function} handler
   *        The source handler class
   *
   * @param {number} [index]
   *        Register it at the following index
   */
  _Tech.registerSourceHandler = function (handler, index) {
    var handlers = _Tech.sourceHandlers;

    if (!handlers) {
      handlers = _Tech.sourceHandlers = [];
    }

    if (index === undefined) {
      // add to the end of the list
      index = handlers.length;
    }

    handlers.splice(index, 0, handler);
  };

  /**
   * Check if the tech can support the given type. Also checks the
   * Techs sourceHandlers.
   *
   * @param {string} type
   *         The mimetype to check.
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */
  _Tech.canPlayType = function (type) {
    var handlers = _Tech.sourceHandlers || [];
    var can = void 0;

    for (var i = 0; i < handlers.length; i++) {
      can = handlers[i].canPlayType(type);

      if (can) {
        return can;
      }
    }

    return '';
  };

  /**
   * Returns the first source handler that supports the source.
   *
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   *
   * @param {Tech~SourceObject} source
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {SourceHandler|null}
   *          The first source handler that supports the source or null if
   *          no SourceHandler supports the source
   */
  _Tech.selectSourceHandler = function (source, options) {
    var handlers = _Tech.sourceHandlers || [];
    var can = void 0;

    for (var i = 0; i < handlers.length; i++) {
      can = handlers[i].canHandleSource(source, options);

      if (can) {
        return handlers[i];
      }
    }

    return null;
  };

  /**
   * Check if the tech can support the given source.
   *
   * @param {Tech~SourceObject} srcObj
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */
  _Tech.canPlaySource = function (srcObj, options) {
    var sh = _Tech.selectSourceHandler(srcObj, options);

    if (sh) {
      return sh.canHandleSource(srcObj, options);
    }

    return '';
  };

  /**
   * When using a source handler, prefer its implementation of
   * any function normally provided by the tech.
   */
  var deferrable = ['seekable', 'duration'];

  /**
   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
   * function if it exists, with a fallback to the Techs seekable function.
   *
   * @method _Tech.seekable
   */

  /**
   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
   * function if it exists, otherwise it will fallback to the techs duration function.
   *
   * @method _Tech.duration
   */

  deferrable.forEach(function (fnName) {
    var originalFn = this[fnName];

    if (typeof originalFn !== 'function') {
      return;
    }

    this[fnName] = function () {
      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
      }
      return originalFn.apply(this, arguments);
    };
  }, _Tech.prototype);

  /**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   *
   * @param {Tech~SourceObject} source
   *        A source object with src and type keys
   */
  _Tech.prototype.setSource = function (source) {
    var sh = _Tech.selectSourceHandler(source, this.options_);

    if (!sh) {
      // Fall back to a native source hander when unsupported sources are
      // deliberately set
      if (_Tech.nativeSourceHandler) {
        sh = _Tech.nativeSourceHandler;
      } else {
        log$1.error('No source hander found for the current source.');
      }
    }

    // Dispose any existing source handler
    this.disposeSourceHandler();
    this.off('dispose', this.disposeSourceHandler);

    if (sh !== _Tech.nativeSourceHandler) {
      this.currentSource_ = source;
    }

    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
    this.on('dispose', this.disposeSourceHandler);
  };

  /**
   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
   *
   * @listens Tech#dispose
   */
  _Tech.prototype.disposeSourceHandler = function () {
    // if we have a source and get another one
    // then we are loading something new
    // than clear all of our current tracks
    if (this.currentSource_) {
      this.clearTracks(['audio', 'video']);
      this.currentSource_ = null;
    }

    // always clean up auto-text tracks
    this.cleanupAutoTextTracks();

    if (this.sourceHandler_) {

      if (this.sourceHandler_.dispose) {
        this.sourceHandler_.dispose();
      }

      this.sourceHandler_ = null;
    }
  };
};

// The base Tech class needs to be registered as a Component. It is the only
// Tech that can be registered as a Component.
Component.registerComponent('Tech', Tech);
Tech.registerTech('Tech', Tech);

/**
 * A list of techs that should be added to techOrder on Players
 *
 * @private
 */
Tech.defaultTechOrder_ = [];

var middlewares = {};
var middlewareInstances = {};

var TERMINATOR = {};

function use(type, middleware) {
  middlewares[type] = middlewares[type] || [];
  middlewares[type].push(middleware);
}



function setSource(player, src, next) {
  player.setTimeout(function () {
    return setSourceHelper(src, middlewares[src.type], next, player);
  }, 1);
}

function setTech(middleware, tech) {
  middleware.forEach(function (mw) {
    return mw.setTech && mw.setTech(tech);
  });
}

/**
 * Calls a getter on the tech first, through each middleware
 * from right to left to the player.
 */
function get$1(middleware, tech, method) {
  return middleware.reduceRight(middlewareIterator(method), tech[method]());
}

/**
 * Takes the argument given to the player and calls the setter method on each
 * middlware from left to right to the tech.
 */
function set$1(middleware, tech, method, arg) {
  return tech[method](middleware.reduce(middlewareIterator(method), arg));
}

/**
 * Takes the argument given to the player and calls the `call` version of the method
 * on each middleware from left to right.
 * Then, call the passed in method on the tech and return the result unchanged
 * back to the player, through middleware, this time from right to left.
 */
function mediate(middleware, tech, method) {
  var arg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var callMethod = 'call' + toTitleCase(method);
  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);
  var terminated = middlewareValue === TERMINATOR;
  var returnValue = terminated ? null : tech[method](middlewareValue);

  executeRight(middleware, method, returnValue, terminated);

  return returnValue;
}

var allowedGetters = {
  buffered: 1,
  currentTime: 1,
  duration: 1,
  seekable: 1,
  played: 1,
  paused: 1
};

var allowedSetters = {
  setCurrentTime: 1
};

var allowedMediators = {
  play: 1,
  pause: 1
};

function middlewareIterator(method) {
  return function (value, mw) {
    // if the previous middleware terminated, pass along the termination
    if (value === TERMINATOR) {
      return TERMINATOR;
    }

    if (mw[method]) {
      return mw[method](value);
    }

    return value;
  };
}

function executeRight(mws, method, value, terminated) {
  for (var i = mws.length - 1; i >= 0; i--) {
    var mw = mws[i];

    if (mw[method]) {
      mw[method](terminated, value);
    }
  }
}

function clearCacheForPlayer(player) {
  middlewareInstances[player.id()] = null;
}

/**
 * {
 *  [playerId]: [[mwFactory, mwInstance], ...]
 * }
 */
function getOrCreateFactory(player, mwFactory) {
  var mws = middlewareInstances[player.id()];
  var mw = null;

  if (mws === undefined || mws === null) {
    mw = mwFactory(player);
    middlewareInstances[player.id()] = [[mwFactory, mw]];
    return mw;
  }

  for (var i = 0; i < mws.length; i++) {
    var _mws$i = mws[i],
        mwf = _mws$i[0],
        mwi = _mws$i[1];


    if (mwf !== mwFactory) {
      continue;
    }

    mw = mwi;
  }

  if (mw === null) {
    mw = mwFactory(player);
    mws.push([mwFactory, mw]);
  }

  return mw;
}

function setSourceHelper() {
  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var next = arguments[2];
  var player = arguments[3];
  var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var mwFactory = middleware[0],
      mwrest = middleware.slice(1);

  // if mwFactory is a string, then we're at a fork in the road

  if (typeof mwFactory === 'string') {
    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);

    // if we have an mwFactory, call it with the player to get the mw,
    // then call the mw's setSource method
  } else if (mwFactory) {
    var mw = getOrCreateFactory(player, mwFactory);

    mw.setSource(assign({}, src), function (err, _src) {

      // something happened, try the next middleware on the current level
      // make sure to use the old src
      if (err) {
        return setSourceHelper(src, mwrest, next, player, acc, lastRun);
      }

      // we've succeeded, now we need to go deeper
      acc.push(mw);

      // if it's the same type, continue down the current chain
      // otherwise, we want to go down the new chain
      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
    });
  } else if (mwrest.length) {
    setSourceHelper(src, mwrest, next, player, acc, lastRun);
  } else if (lastRun) {
    next(src, acc);
  } else {
    setSourceHelper(src, middlewares['*'], next, player, acc, true);
  }
}

/**
 * @module filter-source
 */
/**
 * Filter out single bad source objects or multiple source objects in an
 * array. Also flattens nested source object arrays into a 1 dimensional
 * array of source objects.
 *
 * @param {Tech~SourceObject|Tech~SourceObject[]} src
 *        The src object to filter
 *
 * @return {Tech~SourceObject[]}
 *         An array of sourceobjects containing only valid sources
 *
 * @private
 */
var filterSource = function filterSource(src) {
  // traverse array
  if (Array.isArray(src)) {
    var newsrc = [];

    src.forEach(function (srcobj) {
      srcobj = filterSource(srcobj);

      if (Array.isArray(srcobj)) {
        newsrc = newsrc.concat(srcobj);
      } else if (isObject(srcobj)) {
        newsrc.push(srcobj);
      }
    });

    src = newsrc;
  } else if (typeof src === 'string' && src.trim()) {
    // convert string into object
    src = [{ src: src }];
  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
    // src is already valid
    src = [src];
  } else {
    // invalid source, turn it into an empty array
    src = [];
  }

  return src;
};

/**
 * @file loader.js
 */
/**
 * The `MediaLoader` is the `Component` that decides which playback technology to load
 * when a player is initialized.
 *
 * @extends Component
 */

var MediaLoader = function (_Component) {
  inherits(MediaLoader, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value stroe of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function that is run when this component is ready.
   */
  function MediaLoader(player, options, ready) {
    classCallCheck(this, MediaLoader);

    // MediaLoader has no element
    var options_ = mergeOptions({ createEl: false }, options);

    // If there are no sources when the player is initialized,
    // load the first supported playback technology.

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));

    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
        var techName = toTitleCase(j[i]);
        var tech = Tech.getTech(techName);

        // Support old behavior of techs being registered as components.
        // Remove once that deprecated behavior is removed.
        if (!techName) {
          tech = Component.getComponent(techName);
        }

        // Check if the browser supports this technology
        if (tech && tech.isSupported()) {
          player.loadTech_(techName);
          break;
        }
      }
    } else {
      // Loop through playback technologies (HTML5, Flash) and check for support.
      // Then load the best source.
      // A few assumptions here:
      //   All playback technologies respect preload false.
      player.src(options.playerOptions.sources);
    }
    return _this;
  }

  return MediaLoader;
}(Component);

Component.registerComponent('MediaLoader', MediaLoader);

/**
 * @file button.js
 */
/**
 * Clickable Component which is clickable or keyboard actionable,
 * but is not a native HTML button.
 *
 * @extends Component
 */

var ClickableComponent = function (_Component) {
  inherits(ClickableComponent, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  function ClickableComponent(player, options) {
    classCallCheck(this, ClickableComponent);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.emitTapEvents();

    _this.enable();
    return _this;
  }

  /**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tag=div]
   *        The element's node type.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  ClickableComponent.prototype.createEl = function createEl$$1() {
    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    props = assign({
      innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
      className: this.buildCSSClass(),
      tabIndex: 0
    }, props);

    if (tag === 'button') {
      log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
    }

    // Add ARIA attributes for clickable element which is not a native HTML button
    attributes = assign({
      'role': 'button',

      // let the screen reader user know that the text of the element may change
      'aria-live': 'polite'
    }, attributes);

    this.tabIndex_ = props.tabIndex;

    var el = _Component.prototype.createEl.call(this, tag, props, attributes);

    this.createControlTextEl(el);

    return el;
  };

  ClickableComponent.prototype.dispose = function dispose() {
    // remove controlTextEl_ on dipose
    this.controlTextEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Create a control text element on this `Component`
   *
   * @param {Element} [el]
   *        Parent element for the control text.
   *
   * @return {Element}
   *         The control text element that gets created.
   */


  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
    this.controlTextEl_ = createEl('span', {
      className: 'vjs-control-text'
    });

    if (el) {
      el.appendChild(this.controlTextEl_);
    }

    this.controlText(this.controlText_, el);

    return this.controlTextEl_;
  };

  /**
   * Get or set the localize text to use for the controls on the `Component`.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */


  ClickableComponent.prototype.controlText = function controlText(text) {
    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();

    if (text === undefined) {
      return this.controlText_ || 'Need Text';
    }

    var localizedText = this.localize(text);

    this.controlText_ = text;
    textContent(this.controlTextEl_, localizedText);
    if (!this.nonIconControl) {
      // Set title attribute if only an icon is shown
      el.setAttribute('title', localizedText);
    }
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Enable this `Component`s element.
   */


  ClickableComponent.prototype.enable = function enable() {
    if (!this.enabled_) {
      this.enabled_ = true;
      this.removeClass('vjs-disabled');
      this.el_.setAttribute('aria-disabled', 'false');
      if (typeof this.tabIndex_ !== 'undefined') {
        this.el_.setAttribute('tabIndex', this.tabIndex_);
      }
      this.on(['tap', 'click'], this.handleClick);
      this.on('focus', this.handleFocus);
      this.on('blur', this.handleBlur);
    }
  };

  /**
   * Disable this `Component`s element.
   */


  ClickableComponent.prototype.disable = function disable() {
    this.enabled_ = false;
    this.addClass('vjs-disabled');
    this.el_.setAttribute('aria-disabled', 'true');
    if (typeof this.tabIndex_ !== 'undefined') {
      this.el_.removeAttribute('tabIndex');
    }
    this.off(['tap', 'click'], this.handleClick);
    this.off('focus', this.handleFocus);
    this.off('blur', this.handleBlur);
  };

  /**
   * This gets called when a `ClickableComponent` gets:
   * - Clicked (via the `click` event, listening starts in the constructor)
   * - Tapped (via the `tap` event, listening starts in the constructor)
   * - The following things happen in order:
   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
   *      `ClickableComponent`.
   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
   *      {@link ClickableComponent#handleKeyPress}.
   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
   *      the space or enter key.
   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
   *      event as a parameter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */


  ClickableComponent.prototype.handleClick = function handleClick(event) {};

  /**
   * This gets called when a `ClickableComponent` gains focus via a `focus` event.
   * Turns on listening for `keydown` events. When they happen it
   * calls `this.handleKeyPress`.
   *
   * @param {EventTarget~Event} event
   *        The `focus` event that caused this function to be called.
   *
   * @listens focus
   */


  ClickableComponent.prototype.handleFocus = function handleFocus(event) {
    on(document, 'keydown', bind(this, this.handleKeyPress));
  };

  /**
   * Called when this ClickableComponent has focus and a key gets pressed down. By
   * default it will call `this.handleClick` when the key is space or enter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */


  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {

    // Support Space (32) or Enter (13) key operation to fire a click event
    if (event.which === 32 || event.which === 13) {
      event.preventDefault();
      this.trigger('click');
    } else if (_Component.prototype.handleKeyPress) {

      // Pass keypress handling up for unsupported keys
      _Component.prototype.handleKeyPress.call(this, event);
    }
  };

  /**
   * Called when a `ClickableComponent` loses focus. Turns off the listener for
   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */


  ClickableComponent.prototype.handleBlur = function handleBlur(event) {
    off(document, 'keydown', bind(this, this.handleKeyPress));
  };

  return ClickableComponent;
}(Component);

Component.registerComponent('ClickableComponent', ClickableComponent);

/**
 * @file poster-image.js
 */
/**
 * A `ClickableComponent` that handles showing the poster image for the player.
 *
 * @extends ClickableComponent
 */

var PosterImage = function (_ClickableComponent) {
  inherits(PosterImage, _ClickableComponent);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PosterImage(player, options) {
    classCallCheck(this, PosterImage);

    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

    _this.update();
    player.on('posterchange', bind(_this, _this.update));
    return _this;
  }

  /**
   * Clean up and dispose of the `PosterImage`.
   */


  PosterImage.prototype.dispose = function dispose() {
    this.player().off('posterchange', this.update);
    _ClickableComponent.prototype.dispose.call(this);
  };

  /**
   * Create the `PosterImage`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  PosterImage.prototype.createEl = function createEl$$1() {
    var el = createEl('div', {
      className: 'vjs-poster',

      // Don't want poster to be tabbable.
      tabIndex: -1
    });

    // To ensure the poster image resizes while maintaining its original aspect
    // ratio, use a div with `background-size` when available. For browsers that
    // do not support `background-size` (e.g. IE8), fall back on using a regular
    // img element.
    if (!BACKGROUND_SIZE_SUPPORTED) {
      this.fallbackImg_ = createEl('img');
      el.appendChild(this.fallbackImg_);
    }

    return el;
  };

  /**
   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
   *
   * @listens Player#posterchange
   *
   * @param {EventTarget~Event} [event]
   *        The `Player#posterchange` event that triggered this function.
   */


  PosterImage.prototype.update = function update(event) {
    var url = this.player().poster();

    this.setSrc(url);

    // If there's no poster source we should display:none on this component
    // so it's not still clickable or right-clickable
    if (url) {
      this.show();
    } else {
      this.hide();
    }
  };

  /**
   * Set the source of the `PosterImage` depending on the display method.
   *
   * @param {string} url
   *        The URL to the source for the `PosterImage`.
   */


  PosterImage.prototype.setSrc = function setSrc(url) {
    if (this.fallbackImg_) {
      this.fallbackImg_.src = url;
    } else {
      var backgroundImage = '';

      // Any falsey values should stay as an empty string, otherwise
      // this will throw an extra error
      if (url) {
        backgroundImage = 'url("' + url + '")';
      }

      this.el_.style.backgroundImage = backgroundImage;
    }
  };

  /**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {EventTarget~Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */


  PosterImage.prototype.handleClick = function handleClick(event) {
    // We don't want a click to trigger playback when controls are disabled
    if (!this.player_.controls()) {
      return;
    }

    if (this.player_.paused()) {
      this.player_.play();
    } else {
      this.player_.pause();
    }
  };

  return PosterImage;
}(ClickableComponent);

Component.registerComponent('PosterImage', PosterImage);

/**
 * @file text-track-display.js
 */
var darkGray = '#222';
var lightGray = '#ccc';
var fontMap = {
  monospace: 'monospace',
  sansSerif: 'sans-serif',
  serif: 'serif',
  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
  monospaceSerif: '"Courier New", monospace',
  proportionalSansSerif: 'sans-serif',
  proportionalSerif: 'serif',
  casual: '"Comic Sans MS", Impact, fantasy',
  script: '"Monotype Corsiva", cursive',
  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};

/**
 * Construct an rgba color from a given hex color code.
 *
 * @param {number} color
 *        Hex number for color, like #f0e.
 *
 * @param {number} opacity
 *        Value for opacity, 0.0 - 1.0.
 *
 * @return {string}
 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
 *
 * @private
 */
function constructColor(color, opacity) {
  return 'rgba(' +
  // color looks like "#f0e"
  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
}

/**
 * Try to update the style of a DOM element. Some style changes will throw an error,
 * particularly in IE8. Those should be noops.
 *
 * @param {Element} el
 *        The DOM element to be styled.
 *
 * @param {string} style
 *        The CSS property on the element that should be styled.
 *
 * @param {string} rule
 *        The style rule that should be applied to the property.
 *
 * @private
 */
function tryUpdateStyle(el, style, rule) {
  try {
    el.style[style] = rule;
  } catch (e) {

    // Satisfies linter.
    return;
  }
}

/**
 * The component for displaying text track cues.
 *
 * @extends Component
 */

var TextTrackDisplay = function (_Component) {
  inherits(TextTrackDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */
  function TextTrackDisplay(player, options, ready) {
    classCallCheck(this, TextTrackDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));

    player.on('loadstart', bind(_this, _this.toggleDisplay));
    player.on('texttrackchange', bind(_this, _this.updateDisplay));
    player.on('loadstart', bind(_this, _this.preselectTrack));

    // This used to be called during player init, but was causing an error
    // if a track should show by default and the display hadn't loaded yet.
    // Should probably be moved to an external track loader when we support
    // tracks that don't need a display.
    player.ready(bind(_this, function () {
      if (player.tech_ && player.tech_.featuresNativeTextTracks) {
        this.hide();
        return;
      }

      player.on('fullscreenchange', bind(this, this.updateDisplay));

      var tracks = this.options_.playerOptions.tracks || [];

      for (var i = 0; i < tracks.length; i++) {
        this.player_.addRemoteTextTrack(tracks[i], true);
      }

      this.preselectTrack();
    }));
    return _this;
  }

  /**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */


  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {
    var modes = { captions: 1, subtitles: 1 };
    var trackList = this.player_.textTracks();
    var userPref = this.player_.cache_.selectedLanguage;
    var firstDesc = void 0;
    var firstCaptions = void 0;
    var preferredTrack = void 0;

    for (var i = 0; i < trackList.length; i++) {
      var track = trackList[i];

      if (userPref && userPref.enabled && userPref.language === track.language) {
        // Always choose the track that matches both language and kind
        if (track.kind === userPref.kind) {
          preferredTrack = track;
          // or choose the first track that matches language
        } else if (!preferredTrack) {
          preferredTrack = track;
        }

        // clear everything if offTextTrackMenuItem was clicked
      } else if (userPref && !userPref.enabled) {
        preferredTrack = null;
        firstDesc = null;
        firstCaptions = null;
      } else if (track['default']) {
        if (track.kind === 'descriptions' && !firstDesc) {
          firstDesc = track;
        } else if (track.kind in modes && !firstCaptions) {
          firstCaptions = track;
        }
      }
    }

    // The preferredTrack matches the user preference and takes
    // precendence over all the other tracks.
    // So, display the preferredTrack before the first default track
    // and the subtitles/captions track before the descriptions track
    if (preferredTrack) {
      preferredTrack.mode = 'showing';
    } else if (firstCaptions) {
      firstCaptions.mode = 'showing';
    } else if (firstDesc) {
      firstDesc.mode = 'showing';
    }
  };

  /**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */


  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */


  TextTrackDisplay.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-text-track-display'
    }, {
      'aria-live': 'off',
      'aria-atomic': 'true'
    });
  };

  /**
   * Clear all displayed {@link TextTrack}s.
   */


  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
    if (typeof window.WebVTT === 'function') {
      window.WebVTT.processCues(window, [], this.el_);
    }
  };

  /**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */


  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
    var tracks = this.player_.textTracks();

    this.clearDisplay();

    // Track display prioritization model: if multiple tracks are 'showing',
    //  display the first 'subtitles' or 'captions' track which is 'showing',
    //  otherwise display the first 'descriptions' track which is 'showing'

    var descriptionsTrack = null;
    var captionsSubtitlesTrack = null;
    var i = tracks.length;

    while (i--) {
      var track = tracks[i];

      if (track.mode === 'showing') {
        if (track.kind === 'descriptions') {
          descriptionsTrack = track;
        } else {
          captionsSubtitlesTrack = track;
        }
      }
    }

    if (captionsSubtitlesTrack) {
      if (this.getAttribute('aria-live') !== 'off') {
        this.setAttribute('aria-live', 'off');
      }
      this.updateForTrack(captionsSubtitlesTrack);
    } else if (descriptionsTrack) {
      if (this.getAttribute('aria-live') !== 'assertive') {
        this.setAttribute('aria-live', 'assertive');
      }
      this.updateForTrack(descriptionsTrack);
    }
  };

  /**
   * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack} track
   *        Text track object to be added to the list.
   */


  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
    if (typeof window.WebVTT !== 'function' || !track.activeCues) {
      return;
    }

    var cues = [];

    for (var _i = 0; _i < track.activeCues.length; _i++) {
      cues.push(track.activeCues[_i]);
    }

    window.WebVTT.processCues(window, cues, this.el_);

    if (!this.player_.textTrackSettings) {
      return;
    }

    var overrides = this.player_.textTrackSettings.getValues();

    var i = cues.length;

    while (i--) {
      var cue = cues[i];

      if (!cue) {
        continue;
      }

      var cueDiv = cue.displayState;

      if (overrides.color) {
        cueDiv.firstChild.style.color = overrides.color;
      }
      if (overrides.textOpacity) {
        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
      }
      if (overrides.backgroundColor) {
        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
      }
      if (overrides.backgroundOpacity) {
        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
      }
      if (overrides.windowColor) {
        if (overrides.windowOpacity) {
          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
        } else {
          cueDiv.style.backgroundColor = overrides.windowColor;
        }
      }
      if (overrides.edgeStyle) {
        if (overrides.edgeStyle === 'dropshadow') {
          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
        } else if (overrides.edgeStyle === 'raised') {
          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
        } else if (overrides.edgeStyle === 'depressed') {
          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
        } else if (overrides.edgeStyle === 'uniform') {
          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
        }
      }
      if (overrides.fontPercent && overrides.fontPercent !== 1) {
        var fontSize = window.parseFloat(cueDiv.style.fontSize);

        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
        cueDiv.style.height = 'auto';
        cueDiv.style.top = 'auto';
        cueDiv.style.bottom = '2px';
      }
      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
        if (overrides.fontFamily === 'small-caps') {
          cueDiv.firstChild.style.fontVariant = 'small-caps';
        } else {
          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
        }
      }
    }
  };

  return TextTrackDisplay;
}(Component);

Component.registerComponent('TextTrackDisplay', TextTrackDisplay);

/**
 * @file loading-spinner.js
 */
/**
 * A loading spinner for use during waiting/loading events.
 *
 * @extends Component
 */

var LoadingSpinner = function (_Component) {
  inherits(LoadingSpinner, _Component);

  function LoadingSpinner() {
    classCallCheck(this, LoadingSpinner);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the `LoadingSpinner`s DOM element.
   *
   * @return {Element}
   *         The dom element that gets created.
   */
  LoadingSpinner.prototype.createEl = function createEl$$1() {
    var isAudio = this.player_.isAudio();
    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');
    var controlText = createEl('span', {
      className: 'vjs-control-text',
      innerHTML: this.localize('{1} is loading.', [playerType])
    });

    var el = _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-loading-spinner',
      dir: 'ltr'
    });

    el.appendChild(controlText);

    return el;
  };

  return LoadingSpinner;
}(Component);

Component.registerComponent('LoadingSpinner', LoadingSpinner);

/**
 * @file button.js
 */
/**
 * Base class for all buttons.
 *
 * @extends ClickableComponent
 */

var Button = function (_ClickableComponent) {
  inherits(Button, _ClickableComponent);

  function Button() {
    classCallCheck(this, Button);
    return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
  }

  /**
   * Create the `Button`s DOM element.
   *
   * @param {string} [tag="button"]
   *        The element's node type. This argument is IGNORED: no matter what
   *        is passed, it will always create a `button` element.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  Button.prototype.createEl = function createEl(tag) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    tag = 'button';

    props = assign({
      innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
      className: this.buildCSSClass()
    }, props);

    // Add attributes for button element
    attributes = assign({

      // Necessary since the default button type is "submit"
      'type': 'button',

      // let the screen reader user know that the text of the button may change
      'aria-live': 'polite'
    }, attributes);

    var el = Component.prototype.createEl.call(this, tag, props, attributes);

    this.createControlTextEl(el);

    return el;
  };

  /**
   * Add a child `Component` inside of this `Button`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   *
   * @deprecated since version 5
   */


  Button.prototype.addChild = function addChild(child) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var className = this.constructor.name;

    log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

    // Avoid the error message generated by ClickableComponent's addChild method
    return Component.prototype.addChild.call(this, child, options);
  };

  /**
   * Enable the `Button` element so that it can be activated or clicked. Use this with
   * {@link Button#disable}.
   */


  Button.prototype.enable = function enable() {
    _ClickableComponent.prototype.enable.call(this);
    this.el_.removeAttribute('disabled');
  };

  /**
   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
   * {@link Button#enable}.
   */


  Button.prototype.disable = function disable() {
    _ClickableComponent.prototype.disable.call(this);
    this.el_.setAttribute('disabled', 'disabled');
  };

  /**
   * This gets called when a `Button` has focus and `keydown` is triggered via a key
   * press.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to get called.
   *
   * @listens keydown
   */


  Button.prototype.handleKeyPress = function handleKeyPress(event) {

    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
    if (event.which === 32 || event.which === 13) {
      return;
    }

    // Pass keypress handling up for unsupported keys
    _ClickableComponent.prototype.handleKeyPress.call(this, event);
  };

  return Button;
}(ClickableComponent);

Component.registerComponent('Button', Button);

/**
 * @file big-play-button.js
 */
/**
 * The initial play button that shows before the video has played. The hiding of the
 * `BigPlayButton` get done via CSS and `Player` states.
 *
 * @extends Button
 */

var BigPlayButton = function (_Button) {
  inherits(BigPlayButton, _Button);

  function BigPlayButton(player, options) {
    classCallCheck(this, BigPlayButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.mouseused_ = false;

    _this.on('mousedown', _this.handleMouseDown);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
   */


  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-big-play-button';
  };

  /**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  BigPlayButton.prototype.handleClick = function handleClick(event) {
    var playPromise = this.player_.play();

    // exit early if clicked via the mouse
    if (this.mouseused_ && event.clientX && event.clientY) {
      return;
    }

    var cb = this.player_.getChild('controlBar');
    var playToggle = cb && cb.getChild('playToggle');

    if (!playToggle) {
      this.player_.focus();
      return;
    }

    var playFocus = function playFocus() {
      return playToggle.focus();
    };

    if (isPromise(playPromise)) {
      playPromise.then(playFocus, function () {});
    } else {
      this.setTimeout(playFocus, 1);
    }
  };

  BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {
    this.mouseused_ = false;

    _Button.prototype.handleKeyPress.call(this, event);
  };

  BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {
    this.mouseused_ = true;
  };

  return BigPlayButton;
}(Button);

/**
 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 */


BigPlayButton.prototype.controlText_ = 'Play Video';

Component.registerComponent('BigPlayButton', BigPlayButton);

/**
 * @file close-button.js
 */
/**
 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
 * it gets clicked.
 *
 * @extends Button
 */

var CloseButton = function (_Button) {
  inherits(CloseButton, _Button);

  /**
   * Creates an instance of the this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  function CloseButton(player, options) {
    classCallCheck(this, CloseButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.controlText(options && options.controlText || _this.localize('Close'));
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when a `CloseButton` gets clicked. See
   * {@link ClickableComponent#handleClick} for more information on when this will be
   * triggered
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @fires CloseButton#close
   */


  CloseButton.prototype.handleClick = function handleClick(event) {

    /**
     * Triggered when the a `CloseButton` is clicked.
     *
     * @event CloseButton#close
     * @type {EventTarget~Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the close event does not
     *           bubble up to parents if there is no listener
     */
    this.trigger({ type: 'close', bubbles: false });
  };

  return CloseButton;
}(Button);

Component.registerComponent('CloseButton', CloseButton);

/**
 * @file play-toggle.js
 */
/**
 * Button to toggle between play and pause.
 *
 * @extends Button
 */

var PlayToggle = function (_Button) {
  inherits(PlayToggle, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PlayToggle(player, options) {
    classCallCheck(this, PlayToggle);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.on(player, 'play', _this.handlePlay);
    _this.on(player, 'pause', _this.handlePause);
    _this.on(player, 'ended', _this.handleEnded);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when an `PlayToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  PlayToggle.prototype.handleClick = function handleClick(event) {
    if (this.player_.paused()) {
      this.player_.play();
    } else {
      this.player_.pause();
    }
  };

  /**
   * This gets called once after the video has ended and the user seeks so that
   * we can change the replay button back to a play button.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#seeked
   */


  PlayToggle.prototype.handleSeeked = function handleSeeked(event) {
    this.removeClass('vjs-ended');

    if (this.player_.paused()) {
      this.handlePause(event);
    } else {
      this.handlePlay(event);
    }
  };

  /**
   * Add the vjs-playing class to the element so it can change appearance.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#play
   */


  PlayToggle.prototype.handlePlay = function handlePlay(event) {
    this.removeClass('vjs-ended');
    this.removeClass('vjs-paused');
    this.addClass('vjs-playing');
    // change the button text to "Pause"
    this.controlText('Pause');
  };

  /**
   * Add the vjs-paused class to the element so it can change appearance.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#pause
   */


  PlayToggle.prototype.handlePause = function handlePause(event) {
    this.removeClass('vjs-playing');
    this.addClass('vjs-paused');
    // change the button text to "Play"
    this.controlText('Play');
  };

  /**
   * Add the vjs-ended class to the element so it can change appearance
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ended
   */


  PlayToggle.prototype.handleEnded = function handleEnded(event) {
    this.removeClass('vjs-playing');
    this.addClass('vjs-ended');
    // change the button text to "Replay"
    this.controlText('Replay');

    // on the next seek remove the replay button
    this.one(this.player_, 'seeked', this.handleSeeked);
  };

  return PlayToggle;
}(Button);

/**
 * The text that should display over the `PlayToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


PlayToggle.prototype.controlText_ = 'Play';

Component.registerComponent('PlayToggle', PlayToggle);

/**
 * @file format-time.js
 * @module Format-time
 */

/**
 * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
 * will force a number of leading zeros to cover the length of the guide.
 *
 * @param {number} seconds
 *        Number of seconds to be turned into a string
 *
 * @param {number} guide
 *        Number (in seconds) to model the string after
 *
 * @return {string}
 *         Time formatted as H:MM:SS or M:SS
 */
function formatTime(seconds) {
  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

  seconds = seconds < 0 ? 0 : seconds;
  var s = Math.floor(seconds % 60);
  var m = Math.floor(seconds / 60 % 60);
  var h = Math.floor(seconds / 3600);
  var gm = Math.floor(guide / 60 % 60);
  var gh = Math.floor(guide / 3600);

  // handle invalid times
  if (isNaN(seconds) || seconds === Infinity) {
    // '-' is false for all relational operators (e.g. <, >=) so this setting
    // will add the minimum number of fields specified by the guide
    h = m = s = '-';
  }

  // Check if we need to show hours
  h = h > 0 || gh > 0 ? h + ':' : '';

  // If hours are showing, we may need to add a leading zero.
  // Always show at least one digit of minutes.
  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

  // Check if leading zero is need for seconds
  s = s < 10 ? '0' + s : s;

  return h + m + s;
}

/**
 * @file time-display.js
 */
/**
 * Displays the time left in the video
 *
 * @extends Component
 */

var TimeDisplay = function (_Component) {
  inherits(TimeDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function TimeDisplay(player, options) {
    classCallCheck(this, TimeDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
    _this.on(player, 'timeupdate', _this.throttledUpdateContent);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  TimeDisplay.prototype.createEl = function createEl$$1(plainName) {
    var className = this.buildCSSClass();
    var el = _Component.prototype.createEl.call(this, 'div', {
      className: className + ' vjs-time-control vjs-control'
    });

    this.contentEl_ = createEl('div', {
      className: className + '-display'
    }, {
      // tell screen readers not to automatically read the time as it changes
      'aria-live': 'off'
    }, createEl('span', {
      className: 'vjs-control-text',
      textContent: this.localize(this.controlText_)
    }));

    this.updateTextNode_();
    el.appendChild(this.contentEl_);
    return el;
  };

  TimeDisplay.prototype.dispose = function dispose() {
    this.contentEl_ = null;
    this.textNode_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Updates the "remaining time" text node with new content using the
   * contents of the `formattedTime_` property.
   *
   * @private
   */


  TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {
    if (!this.contentEl_) {
      return;
    }

    while (this.contentEl_.firstChild) {
      this.contentEl_.removeChild(this.contentEl_.firstChild);
    }

    this.textNode_ = document.createTextNode(this.formattedTime_ || '0:00');
    this.contentEl_.appendChild(this.textNode_);
  };

  /**
   * Generates a formatted time for this component to use in display.
   *
   * @param  {number} time
   *         A numeric time, in seconds.
   *
   * @return {string}
   *         A formatted time
   *
   * @private
   */


  TimeDisplay.prototype.formatTime_ = function formatTime_(time) {
    return formatTime(time);
  };

  /**
   * Updates the time display text node if it has what was passed in changed
   * the formatted time.
   *
   * @param {number} time
   *        The time to update to
   *
   * @private
   */


  TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {
    var formattedTime = this.formatTime_(time);

    if (formattedTime === this.formattedTime_) {
      return;
    }

    this.formattedTime_ = formattedTime;
    this.requestAnimationFrame(this.updateTextNode_);
  };

  /**
   * To be filled out in the child class, should update the displayed time
   * in accordance with the fact that the current time has changed.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate`  event that caused this to run.
   *
   * @listens Player#timeupdate
   */


  TimeDisplay.prototype.updateContent = function updateContent(event) {};

  return TimeDisplay;
}(Component);

/**
 * The text that should display over the `TimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 */


TimeDisplay.prototype.controlText_ = 'Time';

Component.registerComponent('TimeDisplay', TimeDisplay);

/**
 * @file current-time-display.js
 */
/**
 * Displays the current time
 *
 * @extends Component
 */

var CurrentTimeDisplay = function (_TimeDisplay) {
  inherits(CurrentTimeDisplay, _TimeDisplay);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function CurrentTimeDisplay(player, options) {
    classCallCheck(this, CurrentTimeDisplay);

    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

    _this.on(player, 'ended', _this.handleEnded);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-current-time';
  };

  /**
   * Update current time display
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` event that caused this function to run.
   *
   * @listens Player#timeupdate
   */


  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
    // Allows for smooth scrubbing, when player can't keep up.
    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

    this.updateFormattedTime_(time);
  };

  /**
   * When the player fires ended there should be no time left. Sadly
   * this is not always the case, lets make it seem like that is the case
   * for users.
   *
   * @param {EventTarget~Event} [event]
   *        The `ended` event that caused this to run.
   *
   * @listens Player#ended
   */


  CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {
    if (!this.player_.duration()) {
      return;
    }
    this.updateFormattedTime_(this.player_.duration());
  };

  return CurrentTimeDisplay;
}(TimeDisplay);

/**
 * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 */


CurrentTimeDisplay.prototype.controlText_ = 'Current Time';

Component.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);

/**
 * @file duration-display.js
 */
/**
 * Displays the duration
 *
 * @extends Component
 */

var DurationDisplay = function (_TimeDisplay) {
  inherits(DurationDisplay, _TimeDisplay);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function DurationDisplay(player, options) {
    classCallCheck(this, DurationDisplay);

    // we do not want to/need to throttle duration changes,
    // as they should always display the changed duration as
    // it has changed
    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

    _this.on(player, 'durationchange', _this.updateContent);

    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those
    // listeners could have broken dependent applications/libraries. These
    // can likely be removed for 7.0.
    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-duration';
  };

  /**
   * Update duration time display.
   *
   * @param {EventTarget~Event} [event]
   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
   *        this function to be called.
   *
   * @listens Player#durationchange
   * @listens Player#timeupdate
   * @listens Player#loadedmetadata
   */


  DurationDisplay.prototype.updateContent = function updateContent(event) {
    var duration = this.player_.duration();

    if (duration && this.duration_ !== duration) {
      this.duration_ = duration;
      this.updateFormattedTime_(duration);
    }
  };

  return DurationDisplay;
}(TimeDisplay);

/**
 * The text that should display over the `DurationDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 */


DurationDisplay.prototype.controlText_ = 'Duration Time';

Component.registerComponent('DurationDisplay', DurationDisplay);

/**
 * @file time-divider.js
 */
/**
 * The separator between the current time and duration.
 * Can be hidden if it's not needed in the design.
 *
 * @extends Component
 */

var TimeDivider = function (_Component) {
  inherits(TimeDivider, _Component);

  function TimeDivider() {
    classCallCheck(this, TimeDivider);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the component's DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  TimeDivider.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-time-control vjs-time-divider',
      innerHTML: '<div><span>/</span></div>'
    });
  };

  return TimeDivider;
}(Component);

Component.registerComponent('TimeDivider', TimeDivider);

/**
 * @file remaining-time-display.js
 */
/**
 * Displays the time left in the video
 *
 * @extends Component
 */

var RemainingTimeDisplay = function (_TimeDisplay) {
  inherits(RemainingTimeDisplay, _TimeDisplay);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function RemainingTimeDisplay(player, options) {
    classCallCheck(this, RemainingTimeDisplay);

    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

    _this.on(player, 'durationchange', _this.throttledUpdateContent);
    _this.on(player, 'ended', _this.handleEnded);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-remaining-time';
  };

  /**
   * The remaining time display prefixes numbers with a "minus" character.
   *
   * @param  {number} time
   *         A numeric time, in seconds.
   *
   * @return {string}
   *         A formatted time
   *
   * @private
   */


  RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {
    return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);
  };

  /**
   * Update remaining time display.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `durationchange` event that caused this to run.
   *
   * @listens Player#timeupdate
   * @listens Player#durationchange
   */


  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
    if (!this.player_.duration()) {
      return;
    }

    // @deprecated We should only use remainingTimeDisplay
    // as of video.js 7
    if (this.player_.remainingTimeDisplay) {
      this.updateFormattedTime_(this.player_.remainingTimeDisplay());
    } else {
      this.updateFormattedTime_(this.player_.remainingTime());
    }
  };

  /**
   * When the player fires ended there should be no time left. Sadly
   * this is not always the case, lets make it seem like that is the case
   * for users.
   *
   * @param {EventTarget~Event} [event]
   *        The `ended` event that caused this to run.
   *
   * @listens Player#ended
   */


  RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {
    if (!this.player_.duration()) {
      return;
    }
    this.updateFormattedTime_(0);
  };

  return RemainingTimeDisplay;
}(TimeDisplay);

/**
 * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 */


RemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';

Component.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);

/**
 * @file live-display.js
 */
// TODO - Future make it click to snap to live

/**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */

var LiveDisplay = function (_Component) {
  inherits(LiveDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function LiveDisplay(player, options) {
    classCallCheck(this, LiveDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.updateShowing();
    _this.on(_this.player(), 'durationchange', _this.updateShowing);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  LiveDisplay.prototype.createEl = function createEl$$1() {
    var el = _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-live-control vjs-control'
    });

    this.contentEl_ = createEl('div', {
      className: 'vjs-live-display',
      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
    }, {
      'aria-live': 'off'
    });

    el.appendChild(this.contentEl_);
    return el;
  };

  LiveDisplay.prototype.dispose = function dispose() {
    this.contentEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
   * it accordingly
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#durationchange} event that caused this function to run.
   *
   * @listens Player#durationchange
   */


  LiveDisplay.prototype.updateShowing = function updateShowing(event) {
    if (this.player().duration() === Infinity) {
      this.show();
    } else {
      this.hide();
    }
  };

  return LiveDisplay;
}(Component);

Component.registerComponent('LiveDisplay', LiveDisplay);

/**
 * @file slider.js
 */
/**
 * The base functionality for a slider. Can be vertical or horizontal.
 * For instance the volume bar or the seek bar on a video is a slider.
 *
 * @extends Component
 */

var Slider = function (_Component) {
  inherits(Slider, _Component);

  /**
   * Create an instance of this class
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function Slider(player, options) {
    classCallCheck(this, Slider);

    // Set property names to bar to match with the child Slider class is looking for
    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.bar = _this.getChild(_this.options_.barName);

    // Set a horizontal or vertical class on the slider depending on the slider type
    _this.vertical(!!_this.options_.vertical);

    _this.enable();
    return _this;
  }

  /**
   * Are controls are currently enabled for this slider or not.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */


  Slider.prototype.enabled = function enabled() {
    return this.enabled_;
  };

  /**
   * Enable controls for this slider if they are disabled
   */


  Slider.prototype.enable = function enable() {
    if (this.enabled()) {
      return;
    }

    this.on('mousedown', this.handleMouseDown);
    this.on('touchstart', this.handleMouseDown);
    this.on('focus', this.handleFocus);
    this.on('blur', this.handleBlur);
    this.on('click', this.handleClick);

    this.on(this.player_, 'controlsvisible', this.update);

    if (this.playerEvent) {
      this.on(this.player_, this.playerEvent, this.update);
    }

    this.removeClass('disabled');
    this.setAttribute('tabindex', 0);

    this.enabled_ = true;
  };

  /**
   * Disable controls for this slider if they are enabled
   */


  Slider.prototype.disable = function disable() {
    if (!this.enabled()) {
      return;
    }
    var doc = this.bar.el_.ownerDocument;

    this.off('mousedown', this.handleMouseDown);
    this.off('touchstart', this.handleMouseDown);
    this.off('focus', this.handleFocus);
    this.off('blur', this.handleBlur);
    this.off('click', this.handleClick);
    this.off(this.player_, 'controlsvisible', this.update);
    this.off(doc, 'mousemove', this.handleMouseMove);
    this.off(doc, 'mouseup', this.handleMouseUp);
    this.off(doc, 'touchmove', this.handleMouseMove);
    this.off(doc, 'touchend', this.handleMouseUp);
    this.removeAttribute('tabindex');

    this.addClass('disabled');

    if (this.playerEvent) {
      this.off(this.player_, this.playerEvent, this.update);
    }
    this.enabled_ = false;
  };

  /**
   * Create the `Button`s DOM element.
   *
   * @param {string} type
   *        Type of element to create.
   *
   * @param {Object} [props={}]
   *        List of properties in Object form.
   *
   * @param {Object} [attributes={}]
   *        list of attributes in Object form.
   *
   * @return {Element}
   *         The element that gets created.
   */


  Slider.prototype.createEl = function createEl$$1(type) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // Add the slider element class to all sub classes
    props.className = props.className + ' vjs-slider';
    props = assign({
      tabIndex: 0
    }, props);

    attributes = assign({
      'role': 'slider',
      'aria-valuenow': 0,
      'aria-valuemin': 0,
      'aria-valuemax': 100,
      'tabIndex': 0
    }, attributes);

    return _Component.prototype.createEl.call(this, type, props, attributes);
  };

  /**
   * Handle `mousedown` or `touchstart` events on the `Slider`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   * @fires Slider#slideractive
   */


  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
    var doc = this.bar.el_.ownerDocument;

    event.preventDefault();
    blockTextSelection();

    this.addClass('vjs-sliding');
    /**
     * Triggered when the slider is in an active state
     *
     * @event Slider#slideractive
     * @type {EventTarget~Event}
     */
    this.trigger('slideractive');

    this.on(doc, 'mousemove', this.handleMouseMove);
    this.on(doc, 'mouseup', this.handleMouseUp);
    this.on(doc, 'touchmove', this.handleMouseMove);
    this.on(doc, 'touchend', this.handleMouseUp);

    this.handleMouseMove(event);
  };

  /**
   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
   * The `mousemove` and `touchmove` events will only only trigger this function during
   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
   * {@link Slider#handleMouseUp}.
   *
   * @param {EventTarget~Event} event
   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
   *        this function
   *
   * @listens mousemove
   * @listens touchmove
   */


  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};

  /**
   * Handle `mouseup` or `touchend` events on the `Slider`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   * @fires Slider#sliderinactive
   */


  Slider.prototype.handleMouseUp = function handleMouseUp() {
    var doc = this.bar.el_.ownerDocument;

    unblockTextSelection();

    this.removeClass('vjs-sliding');
    /**
     * Triggered when the slider is no longer in an active state.
     *
     * @event Slider#sliderinactive
     * @type {EventTarget~Event}
     */
    this.trigger('sliderinactive');

    this.off(doc, 'mousemove', this.handleMouseMove);
    this.off(doc, 'mouseup', this.handleMouseUp);
    this.off(doc, 'touchmove', this.handleMouseMove);
    this.off(doc, 'touchend', this.handleMouseUp);

    this.update();
  };

  /**
   * Update the progress bar of the `Slider`.
   *
   * @returns {number}
   *          The percentage of progress the progress bar represents as a
   *          number from 0 to 1.
   */


  Slider.prototype.update = function update() {

    // In VolumeBar init we have a setTimeout for update that pops and update
    // to the end of the execution stack. The player is destroyed before then
    // update will cause an error
    if (!this.el_) {
      return;
    }

    // If scrubbing, we could use a cached value to make the handle keep up
    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but
    // some flash players are slow, so we might want to utilize this later.
    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
    var progress = this.getPercent();
    var bar = this.bar;

    // If there's no bar...
    if (!bar) {
      return;
    }

    // Protect against no duration and other division issues
    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
      progress = 0;
    }

    // Convert to a percentage for setting
    var percentage = (progress * 100).toFixed(2) + '%';
    var style = bar.el().style;

    // Set the new bar width or height
    if (this.vertical()) {
      style.height = percentage;
    } else {
      style.width = percentage;
    }

    return progress;
  };

  /**
   * Calculate distance for slider
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run.
   *
   * @return {number}
   *         The current position of the Slider.
   *         - postition.x for vertical `Slider`s
   *         - postition.y for horizontal `Slider`s
   */


  Slider.prototype.calculateDistance = function calculateDistance(event) {
    var position = getPointerPosition(this.el_, event);

    if (this.vertical()) {
      return position.y;
    }
    return position.x;
  };

  /**
   * Handle a `focus` event on this `Slider`.
   *
   * @param {EventTarget~Event} event
   *        The `focus` event that caused this function to run.
   *
   * @listens focus
   */


  Slider.prototype.handleFocus = function handleFocus() {
    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
  };

  /**
   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
   * arrow keys. This function will only be called when the slider has focus. See
   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
   *
   * @param {EventTarget~Event} event
   *        the `keydown` event that caused this function to run.
   *
   * @listens keydown
   */


  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
    // Left and Down Arrows
    if (event.which === 37 || event.which === 40) {
      event.preventDefault();
      this.stepBack();

      // Up and Right Arrows
    } else if (event.which === 38 || event.which === 39) {
      event.preventDefault();
      this.stepForward();
    }
  };

  /**
   * Handle a `blur` event on this `Slider`.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to run.
   *
   * @listens blur
   */

  Slider.prototype.handleBlur = function handleBlur() {
    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
  };

  /**
   * Listener for click events on slider, used to prevent clicks
   *   from bubbling up to parent elements like button menus.
   *
   * @param {Object} event
   *        Event that caused this object to run
   */


  Slider.prototype.handleClick = function handleClick(event) {
    event.stopImmediatePropagation();
    event.preventDefault();
  };

  /**
   * Get/set if slider is horizontal for vertical
   *
   * @param {boolean} [bool]
   *        - true if slider is vertical,
   *        - false is horizontal
   *
   * @return {boolean}
   *         - true if slider is vertical, and getting
   *         - false if the slider is horizontal, and getting
   */


  Slider.prototype.vertical = function vertical(bool) {
    if (bool === undefined) {
      return this.vertical_ || false;
    }

    this.vertical_ = !!bool;

    if (this.vertical_) {
      this.addClass('vjs-slider-vertical');
    } else {
      this.addClass('vjs-slider-horizontal');
    }
  };

  return Slider;
}(Component);

Component.registerComponent('Slider', Slider);

/**
 * @file load-progress-bar.js
 */
/**
 * Shows loading progress
 *
 * @extends Component
 */

var LoadProgressBar = function (_Component) {
  inherits(LoadProgressBar, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function LoadProgressBar(player, options) {
    classCallCheck(this, LoadProgressBar);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.partEls_ = [];
    _this.on(player, 'progress', _this.update);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  LoadProgressBar.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-load-progress',
      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
    });
  };

  LoadProgressBar.prototype.dispose = function dispose() {
    this.partEls_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Update progress bar
   *
   * @param {EventTarget~Event} [event]
   *        The `progress` event that caused this function to run.
   *
   * @listens Player#progress
   */


  LoadProgressBar.prototype.update = function update(event) {
    var buffered = this.player_.buffered();
    var duration = this.player_.duration();
    var bufferedEnd = this.player_.bufferedEnd();
    var children = this.partEls_;

    // get the percent width of a time compared to the total end
    var percentify = function percentify(time, end) {
      // no NaN
      var percent = time / end || 0;

      return (percent >= 1 ? 1 : percent) * 100 + '%';
    };

    // update the width of the progress bar
    this.el_.style.width = percentify(bufferedEnd, duration);

    // add child elements to represent the individual buffered time ranges
    for (var i = 0; i < buffered.length; i++) {
      var start = buffered.start(i);
      var end = buffered.end(i);
      var part = children[i];

      if (!part) {
        part = this.el_.appendChild(createEl());
        children[i] = part;
      }

      // set the percent based on the width of the progress bar (bufferedEnd)
      part.style.left = percentify(start, bufferedEnd);
      part.style.width = percentify(end - start, bufferedEnd);
    }

    // remove unused buffered range elements
    for (var _i = children.length; _i > buffered.length; _i--) {
      this.el_.removeChild(children[_i - 1]);
    }
    children.length = buffered.length;
  };

  return LoadProgressBar;
}(Component);

Component.registerComponent('LoadProgressBar', LoadProgressBar);

/**
 * @file time-tooltip.js
 */
/**
 * Time tooltips display a time above the progress bar.
 *
 * @extends Component
 */

var TimeTooltip = function (_Component) {
  inherits(TimeTooltip, _Component);

  function TimeTooltip() {
    classCallCheck(this, TimeTooltip);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the time tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  TimeTooltip.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-time-tooltip'
    });
  };

  /**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */


  TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {
    var tooltipRect = getBoundingClientRect(this.el_);
    var playerRect = getBoundingClientRect(this.player_.el());
    var seekBarPointPx = seekBarRect.width * seekBarPoint;

    // do nothing if either rect isn't available
    // for example, if the player isn't in the DOM for testing
    if (!playerRect || !tooltipRect) {
      return;
    }

    // This is the space left of the `seekBarPoint` available within the bounds
    // of the player. We calculate any gap between the left edge of the player
    // and the left edge of the `SeekBar` and add the number of pixels in the
    // `SeekBar` before hitting the `seekBarPoint`
    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;

    // This is the space right of the `seekBarPoint` available within the bounds
    // of the player. We calculate the number of pixels from the `seekBarPoint`
    // to the right edge of the `SeekBar` and add to that any gap between the
    // right edge of the `SeekBar` and the player.
    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);

    // This is the number of pixels by which the tooltip will need to be pulled
    // further to the right to center it over the `seekBarPoint`.
    var pullTooltipBy = tooltipRect.width / 2;

    // Adjust the `pullTooltipBy` distance to the left or right depending on
    // the results of the space calculations above.
    if (spaceLeftOfPoint < pullTooltipBy) {
      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
    } else if (spaceRightOfPoint < pullTooltipBy) {
      pullTooltipBy = spaceRightOfPoint;
    }

    // Due to the imprecision of decimal/ratio based calculations and varying
    // rounding behaviors, there are cases where the spacing adjustment is off
    // by a pixel or two. This adds insurance to these calculations.
    if (pullTooltipBy < 0) {
      pullTooltipBy = 0;
    } else if (pullTooltipBy > tooltipRect.width) {
      pullTooltipBy = tooltipRect.width;
    }

    this.el_.style.right = '-' + pullTooltipBy + 'px';
    textContent(this.el_, content);
  };

  return TimeTooltip;
}(Component);

Component.registerComponent('TimeTooltip', TimeTooltip);

/**
 * @file play-progress-bar.js
 */
/**
 * Used by {@link SeekBar} to display media playback progress as part of the
 * {@link ProgressControl}.
 *
 * @extends Component
 */

var PlayProgressBar = function (_Component) {
  inherits(PlayProgressBar, _Component);

  function PlayProgressBar() {
    classCallCheck(this, PlayProgressBar);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */
  PlayProgressBar.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-play-progress vjs-slider-bar',
      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
    });
  };

  /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */


  PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {
    var _this2 = this;

    // If there is an existing rAF ID, cancel it so we don't over-queue.
    if (this.rafId_) {
      this.cancelAnimationFrame(this.rafId_);
    }

    this.rafId_ = this.requestAnimationFrame(function () {
      var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();

      var content = formatTime(time, _this2.player_.duration());
      var timeTooltip = _this2.getChild('timeTooltip');

      if (timeTooltip) {
        timeTooltip.update(seekBarRect, seekBarPoint, content);
      }
    });
  };

  return PlayProgressBar;
}(Component);

/**
 * Default options for {@link PlayProgressBar}.
 *
 * @type {Object}
 * @private
 */


PlayProgressBar.prototype.options_ = {
  children: []
};

// Time tooltips should not be added to a player on mobile devices or IE8
if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
  PlayProgressBar.prototype.options_.children.push('timeTooltip');
}

Component.registerComponent('PlayProgressBar', PlayProgressBar);

/**
 * @file mouse-time-display.js
 */
/**
 * The {@link MouseTimeDisplay} component tracks mouse movement over the
 * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
 * indicating the time which is represented by a given point in the
 * {@link ProgressControl}.
 *
 * @extends Component
 */

var MouseTimeDisplay = function (_Component) {
  inherits(MouseTimeDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function MouseTimeDisplay(player, options) {
    classCallCheck(this, MouseTimeDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.update = throttle(bind(_this, _this.update), 25);
    return _this;
  }

  /**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */


  MouseTimeDisplay.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-mouse-display'
    });
  };

  /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */


  MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {
    var _this2 = this;

    // If there is an existing rAF ID, cancel it so we don't over-queue.
    if (this.rafId_) {
      this.cancelAnimationFrame(this.rafId_);
    }

    this.rafId_ = this.requestAnimationFrame(function () {
      var duration = _this2.player_.duration();
      var content = formatTime(seekBarPoint * duration, duration);

      _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';
      _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);
    });
  };

  return MouseTimeDisplay;
}(Component);

/**
 * Default options for `MouseTimeDisplay`
 *
 * @type {Object}
 * @private
 */


MouseTimeDisplay.prototype.options_ = {
  children: ['timeTooltip']
};

Component.registerComponent('MouseTimeDisplay', MouseTimeDisplay);

/**
 * @file seek-bar.js
 */
// The number of seconds the `step*` functions move the timeline.
var STEP_SECONDS = 5;

// The interval at which the bar should update as it progresses.
var UPDATE_REFRESH_INTERVAL = 30;

/**
 * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
 * as its `bar`.
 *
 * @extends Slider
 */

var SeekBar = function (_Slider) {
  inherits(SeekBar, _Slider);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function SeekBar(player, options) {
    classCallCheck(this, SeekBar);

    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

    _this.update = throttle(bind(_this, _this.update), UPDATE_REFRESH_INTERVAL);

    _this.on(player, 'timeupdate', _this.update);
    _this.on(player, 'ended', _this.handleEnded);

    // when playing, let's ensure we smoothly update the play progress bar
    // via an interval
    _this.updateInterval = null;

    _this.on(player, ['playing'], function () {
      _this.clearInterval(_this.updateInterval);

      _this.updateInterval = _this.setInterval(function () {
        _this.requestAnimationFrame(function () {
          _this.update();
        });
      }, UPDATE_REFRESH_INTERVAL);
    });

    _this.on(player, ['ended', 'pause', 'waiting'], function () {
      _this.clearInterval(_this.updateInterval);
    });

    _this.on(player, ['timeupdate', 'ended'], _this.update);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  SeekBar.prototype.createEl = function createEl$$1() {
    return _Slider.prototype.createEl.call(this, 'div', {
      className: 'vjs-progress-holder'
    }, {
      'aria-label': this.localize('Progress Bar')
    });
  };

  /**
   * This function updates the play progress bar and accessiblity
   * attributes to whatever is passed in.
   *
   * @param {number} currentTime
   *        The currentTime value that should be used for accessiblity
   *
   * @param {number} percent
   *        The percentage as a decimal that the bar should be filled from 0-1.
   *
   * @private
   */


  SeekBar.prototype.update_ = function update_(currentTime, percent) {
    var duration = this.player_.duration();

    // machine readable value of progress bar (percentage complete)
    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));

    // human readable value of progress bar (time complete)
    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));

    // Update the `PlayProgressBar`.
    this.bar.update(getBoundingClientRect(this.el_), percent);
  };

  /**
   * Update the seek bar's UI.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#timeupdate
   *
   * @returns {number}
   *          The current percent at a number from 0-1
   */


  SeekBar.prototype.update = function update(event) {
    var percent = _Slider.prototype.update.call(this);

    this.update_(this.getCurrentTime_(), percent);
    return percent;
  };

  /**
   * Get the value of current time but allows for smooth scrubbing,
   * when player can't keep up.
   *
   * @return {number}
   *         The current time value to display
   *
   * @private
   */


  SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {
    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
  };

  /**
   * We want the seek bar to be full on ended
   * no matter what the actual internal values are. so we force it.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#ended
   */


  SeekBar.prototype.handleEnded = function handleEnded(event) {
    this.update_(this.player_.duration(), 1);
  };

  /**
   * Get the percentage of media played so far.
   *
   * @return {number}
   *         The percentage of media played so far (0 to 1).
   */


  SeekBar.prototype.getPercent = function getPercent() {
    var percent = this.getCurrentTime_() / this.player_.duration();

    return percent >= 1 ? 1 : percent;
  };

  /**
   * Handle mouse down on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */


  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    // Stop event propagation to prevent double fire in progress-control.js
    event.stopPropagation();
    this.player_.scrubbing(true);

    this.videoWasPlaying = !this.player_.paused();
    this.player_.pause();

    _Slider.prototype.handleMouseDown.call(this, event);
  };

  /**
   * Handle mouse move on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this to run.
   *
   * @listens mousemove
   */


  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    var newTime = this.calculateDistance(event) * this.player_.duration();

    // Don't let video end while scrubbing.
    if (newTime === this.player_.duration()) {
      newTime = newTime - 0.1;
    }

    // Set new time (tell player to seek to new time)
    this.player_.currentTime(newTime);
  };

  SeekBar.prototype.enable = function enable() {
    _Slider.prototype.enable.call(this);
    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

    if (!mouseTimeDisplay) {
      return;
    }

    mouseTimeDisplay.show();
  };

  SeekBar.prototype.disable = function disable() {
    _Slider.prototype.disable.call(this);
    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

    if (!mouseTimeDisplay) {
      return;
    }

    mouseTimeDisplay.hide();
  };

  /**
   * Handle mouse up on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mouseup` event that caused this to run.
   *
   * @listens mouseup
   */


  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
    _Slider.prototype.handleMouseUp.call(this, event);

    // Stop event propagation to prevent double fire in progress-control.js
    if (event) {
      event.stopPropagation();
    }
    this.player_.scrubbing(false);

    /**
     * Trigger timeupdate because we're done seeking and the time has changed.
     * This is particularly useful for if the player is paused to time the time displays.
     *
     * @event Tech#timeupdate
     * @type {EventTarget~Event}
     */
    this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
    if (this.videoWasPlaying) {
      silencePromise(this.player_.play());
    }
  };

  /**
   * Move more quickly fast forward for keyboard-only users
   */


  SeekBar.prototype.stepForward = function stepForward() {
    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);
  };

  /**
   * Move more quickly rewind for keyboard-only users
   */


  SeekBar.prototype.stepBack = function stepBack() {
    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);
  };

  /**
   * Toggles the playback state of the player
   * This gets called when enter or space is used on the seekbar
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called
   *
   */


  SeekBar.prototype.handleAction = function handleAction(event) {
    if (this.player_.paused()) {
      this.player_.play();
    } else {
      this.player_.pause();
    }
  };

  /**
   * Called when this SeekBar has focus and a key gets pressed down. By
   * default it will call `this.handleAction` when the key is space or enter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */


  SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {

    // Support Space (32) or Enter (13) key operation to fire a click event
    if (event.which === 32 || event.which === 13) {
      event.preventDefault();
      this.handleAction(event);
    } else if (_Slider.prototype.handleKeyPress) {

      // Pass keypress handling up for unsupported keys
      _Slider.prototype.handleKeyPress.call(this, event);
    }
  };

  return SeekBar;
}(Slider);

/**
 * Default options for the `SeekBar`
 *
 * @type {Object}
 * @private
 */


SeekBar.prototype.options_ = {
  children: ['loadProgressBar', 'playProgressBar'],
  barName: 'playProgressBar'
};

// MouseTimeDisplay tooltips should not be added to a player on mobile devices or IE8
if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
}

/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */
SeekBar.prototype.playerEvent = 'timeupdate';

Component.registerComponent('SeekBar', SeekBar);

/**
 * @file progress-control.js
 */
/**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress.
 *
 * @extends Component
 */

var ProgressControl = function (_Component) {
  inherits(ProgressControl, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function ProgressControl(player, options) {
    classCallCheck(this, ProgressControl);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);
    _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);

    _this.enable();
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  ProgressControl.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-progress-control vjs-control'
    });
  };

  /**
   * When the mouse moves over the `ProgressControl`, the pointer position
   * gets passed down to the `MouseTimeDisplay` component.
   *
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   */


  ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {
    var seekBar = this.getChild('seekBar');

    if (seekBar) {
      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');
      var seekBarEl = seekBar.el();
      var seekBarRect = getBoundingClientRect(seekBarEl);
      var seekBarPoint = getPointerPosition(seekBarEl, event).x;

      // The default skin has a gap on either side of the `SeekBar`. This means
      // that it's possible to trigger this behavior outside the boundaries of
      // the `SeekBar`. This ensures we stay within it at all times.
      if (seekBarPoint > 1) {
        seekBarPoint = 1;
      } else if (seekBarPoint < 0) {
        seekBarPoint = 0;
      }

      if (mouseTimeDisplay) {
        mouseTimeDisplay.update(seekBarRect, seekBarPoint);
      }
    }
  };

  /**
   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
   *
   * @method ProgressControl#throttledHandleMouseSeek
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   * @listen touchmove
   */

  /**
   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousemove
   * @listens touchmove
   */


  ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {
    var seekBar = this.getChild('seekBar');

    if (seekBar) {
      seekBar.handleMouseMove(event);
    }
  };

  /**
   * Are controls are currently enabled for this progress control.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */


  ProgressControl.prototype.enabled = function enabled() {
    return this.enabled_;
  };

  /**
   * Disable all controls on the progress control and its children
   */


  ProgressControl.prototype.disable = function disable() {
    this.children().forEach(function (child) {
      return child.disable && child.disable();
    });

    if (!this.enabled()) {
      return;
    }

    this.off(['mousedown', 'touchstart'], this.handleMouseDown);
    this.off(this.el_, 'mousemove', this.handleMouseMove);
    this.handleMouseUp();

    this.addClass('disabled');

    this.enabled_ = false;
  };

  /**
   * Enable all controls on the progress control and its children
   */


  ProgressControl.prototype.enable = function enable() {
    this.children().forEach(function (child) {
      return child.enable && child.enable();
    });

    if (this.enabled()) {
      return;
    }

    this.on(['mousedown', 'touchstart'], this.handleMouseDown);
    this.on(this.el_, 'mousemove', this.handleMouseMove);
    this.removeClass('disabled');

    this.enabled_ = true;
  };

  /**
   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */


  ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {
    var doc = this.el_.ownerDocument;
    var seekBar = this.getChild('seekBar');

    if (seekBar) {
      seekBar.handleMouseDown(event);
    }

    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);
    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);
    this.on(doc, 'mouseup', this.handleMouseUp);
    this.on(doc, 'touchend', this.handleMouseUp);
  };

  /**
   * Handle `mouseup` or `touchend` events on the `ProgressControl`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */


  ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {
    var doc = this.el_.ownerDocument;
    var seekBar = this.getChild('seekBar');

    if (seekBar) {
      seekBar.handleMouseUp(event);
    }

    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);
    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);
    this.off(doc, 'mouseup', this.handleMouseUp);
    this.off(doc, 'touchend', this.handleMouseUp);
  };

  return ProgressControl;
}(Component);

/**
 * Default options for `ProgressControl`
 *
 * @type {Object}
 * @private
 */


ProgressControl.prototype.options_ = {
  children: ['seekBar']
};

Component.registerComponent('ProgressControl', ProgressControl);

/**
 * @file fullscreen-toggle.js
 */
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var FullscreenToggle = function (_Button) {
  inherits(FullscreenToggle, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function FullscreenToggle(player, options) {
    classCallCheck(this, FullscreenToggle);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * Handles fullscreenchange on the player and change control text accordingly.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#fullscreenchange} event that caused this function to be
   *        called.
   *
   * @listens Player#fullscreenchange
   */


  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
    if (this.player_.isFullscreen()) {
      this.controlText('Non-Fullscreen');
    } else {
      this.controlText('Fullscreen');
    }
  };

  /**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  FullscreenToggle.prototype.handleClick = function handleClick(event) {
    if (!this.player_.isFullscreen()) {
      this.player_.requestFullscreen();
    } else {
      this.player_.exitFullscreen();
    }
  };

  return FullscreenToggle;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


FullscreenToggle.prototype.controlText_ = 'Fullscreen';

Component.registerComponent('FullscreenToggle', FullscreenToggle);

/**
 * Check if volume control is supported and if it isn't hide the
 * `Component` that was passed  using the `vjs-hidden` class.
 *
 * @param {Component} self
 *        The component that should be hidden if volume is unsupported
 *
 * @param {Player} player
 *        A reference to the player
 *
 * @private
 */
var checkVolumeSupport = function checkVolumeSupport(self, player) {
  // hide volume controls when they're not supported by the current tech
  if (player.tech_ && !player.tech_.featuresVolumeControl) {
    self.addClass('vjs-hidden');
  }

  self.on(player, 'loadstart', function () {
    if (!player.tech_.featuresVolumeControl) {
      self.addClass('vjs-hidden');
    } else {
      self.removeClass('vjs-hidden');
    }
  });
};

/**
 * @file volume-level.js
 */
/**
 * Shows volume level
 *
 * @extends Component
 */

var VolumeLevel = function (_Component) {
  inherits(VolumeLevel, _Component);

  function VolumeLevel() {
    classCallCheck(this, VolumeLevel);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  VolumeLevel.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-volume-level',
      innerHTML: '<span class="vjs-control-text"></span>'
    });
  };

  return VolumeLevel;
}(Component);

Component.registerComponent('VolumeLevel', VolumeLevel);

/**
 * @file volume-bar.js
 */
// Required children
/**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @extends Slider
 */

var VolumeBar = function (_Slider) {
  inherits(VolumeBar, _Slider);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function VolumeBar(player, options) {
    classCallCheck(this, VolumeBar);

    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

    _this.on('slideractive', _this.updateLastVolume_);
    _this.on(player, 'volumechange', _this.updateARIAAttributes);
    player.ready(function () {
      return _this.updateARIAAttributes();
    });
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  VolumeBar.prototype.createEl = function createEl$$1() {
    return _Slider.prototype.createEl.call(this, 'div', {
      className: 'vjs-volume-bar vjs-slider-bar'
    }, {
      'aria-label': this.localize('Volume Level'),
      'aria-live': 'polite'
    });
  };

  /**
   * Handle mouse down on volume bar
   *
   * @param {EventTarget~Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */


  VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    _Slider.prototype.handleMouseDown.call(this, event);
  };

  /**
   * Handle movement events on the {@link VolumeMenuButton}.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run.
   *
   * @listens mousemove
   */


  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    this.checkMuted();
    this.player_.volume(this.calculateDistance(event));
  };

  /**
   * If the player is muted unmute it.
   */


  VolumeBar.prototype.checkMuted = function checkMuted() {
    if (this.player_.muted()) {
      this.player_.muted(false);
    }
  };

  /**
   * Get percent of volume level
   *
   * @return {number}
   *         Volume level percent as a decimal number.
   */


  VolumeBar.prototype.getPercent = function getPercent() {
    if (this.player_.muted()) {
      return 0;
    }
    return this.player_.volume();
  };

  /**
   * Increase volume level for keyboard users
   */


  VolumeBar.prototype.stepForward = function stepForward() {
    this.checkMuted();
    this.player_.volume(this.player_.volume() + 0.1);
  };

  /**
   * Decrease volume level for keyboard users
   */


  VolumeBar.prototype.stepBack = function stepBack() {
    this.checkMuted();
    this.player_.volume(this.player_.volume() - 0.1);
  };

  /**
   * Update ARIA accessibility attributes
   *
   * @param {EventTarget~Event} [event]
   *        The `volumechange` event that caused this function to run.
   *
   * @listens Player#volumechange
   */


  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();

    this.el_.setAttribute('aria-valuenow', ariaValue);
    this.el_.setAttribute('aria-valuetext', ariaValue + '%');
  };

  /**
   * Returns the current value of the player volume as a percentage
   *
   * @private
   */


  VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {
    return Math.round(this.player_.volume() * 100);
  };

  /**
   * When user starts dragging the VolumeBar, store the volume and listen for
   * the end of the drag. When the drag ends, if the volume was set to zero,
   * set lastVolume to the stored volume.
   *
   * @listens slideractive
   * @private
   */


  VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {
    var _this2 = this;

    var volumeBeforeDrag = this.player_.volume();

    this.one('sliderinactive', function () {
      if (_this2.player_.volume() === 0) {
        _this2.player_.lastVolume_(volumeBeforeDrag);
      }
    });
  };

  return VolumeBar;
}(Slider);

/**
 * Default options for the `VolumeBar`
 *
 * @type {Object}
 * @private
 */


VolumeBar.prototype.options_ = {
  children: ['volumeLevel'],
  barName: 'volumeLevel'
};

/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */
VolumeBar.prototype.playerEvent = 'volumechange';

Component.registerComponent('VolumeBar', VolumeBar);

/**
 * @file volume-control.js
 */
// Required children
/**
 * The component for controlling the volume level
 *
 * @extends Component
 */

var VolumeControl = function (_Component) {
  inherits(VolumeControl, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function VolumeControl(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, VolumeControl);

    options.vertical = options.vertical || false;

    // Pass the vertical option down to the VolumeBar if
    // the VolumeBar is turned on.
    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {
      options.volumeBar = options.volumeBar || {};
      options.volumeBar.vertical = options.vertical;
    }

    // hide this control if volume support is missing
    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    checkVolumeSupport(_this, player);

    _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);

    _this.on('mousedown', _this.handleMouseDown);
    _this.on('touchstart', _this.handleMouseDown);

    // while the slider is active (the mouse has been pressed down and
    // is dragging) or in focus we do not want to hide the VolumeBar
    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {
      _this.volumeBar.addClass('vjs-slider-active');
      _this.addClass('vjs-slider-active');
      _this.trigger('slideractive');
    });

    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {
      _this.volumeBar.removeClass('vjs-slider-active');
      _this.removeClass('vjs-slider-active');
      _this.trigger('sliderinactive');
    });
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  VolumeControl.prototype.createEl = function createEl() {
    var orientationClass = 'vjs-volume-horizontal';

    if (this.options_.vertical) {
      orientationClass = 'vjs-volume-vertical';
    }

    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-volume-control vjs-control ' + orientationClass
    });
  };

  /**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */


  VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {
    var doc = this.el_.ownerDocument;

    this.on(doc, 'mousemove', this.throttledHandleMouseMove);
    this.on(doc, 'touchmove', this.throttledHandleMouseMove);
    this.on(doc, 'mouseup', this.handleMouseUp);
    this.on(doc, 'touchend', this.handleMouseUp);
  };

  /**
   * Handle `mouseup` or `touchend` events on the `VolumeControl`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */


  VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {
    var doc = this.el_.ownerDocument;

    this.off(doc, 'mousemove', this.throttledHandleMouseMove);
    this.off(doc, 'touchmove', this.throttledHandleMouseMove);
    this.off(doc, 'mouseup', this.handleMouseUp);
    this.off(doc, 'touchend', this.handleMouseUp);
  };

  /**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */


  VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {
    this.volumeBar.handleMouseMove(event);
  };

  return VolumeControl;
}(Component);

/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */


VolumeControl.prototype.options_ = {
  children: ['volumeBar']
};

Component.registerComponent('VolumeControl', VolumeControl);

/**
 * @file mute-toggle.js
 */
/**
 * A button component for muting the audio.
 *
 * @extends Button
 */

var MuteToggle = function (_Button) {
  inherits(MuteToggle, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function MuteToggle(player, options) {
    classCallCheck(this, MuteToggle);

    // hide this control if volume support is missing
    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    checkVolumeSupport(_this, player);

    _this.on(player, ['loadstart', 'volumechange'], _this.update);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when an `MuteToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  MuteToggle.prototype.handleClick = function handleClick(event) {
    var vol = this.player_.volume();
    var lastVolume = this.player_.lastVolume_();

    if (vol === 0) {
      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;

      this.player_.volume(volumeToSet);
      this.player_.muted(false);
    } else {
      this.player_.muted(this.player_.muted() ? false : true);
    }
  };

  /**
   * Update the `MuteToggle` button based on the state of `volume` and `muted`
   * on the player.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#loadstart} event if this function was called
   *        through an event.
   *
   * @listens Player#loadstart
   * @listens Player#volumechange
   */


  MuteToggle.prototype.update = function update(event) {
    this.updateIcon_();
    this.updateControlText_();
  };

  /**
   * Update the appearance of the `MuteToggle` icon.
   *
   * Possible states (given `level` variable below):
   * - 0: crossed out
   * - 1: zero bars of volume
   * - 2: one bar of volume
   * - 3: two bars of volume
   *
   * @private
   */


  MuteToggle.prototype.updateIcon_ = function updateIcon_() {
    var vol = this.player_.volume();
    var level = 3;

    if (vol === 0 || this.player_.muted()) {
      level = 0;
    } else if (vol < 0.33) {
      level = 1;
    } else if (vol < 0.67) {
      level = 2;
    }

    // TODO improve muted icon classes
    for (var i = 0; i < 4; i++) {
      removeClass(this.el_, 'vjs-vol-' + i);
    }
    addClass(this.el_, 'vjs-vol-' + level);
  };

  /**
   * If `muted` has changed on the player, update the control text
   * (`title` attribute on `vjs-mute-control` element and content of
   * `vjs-control-text` element).
   *
   * @private
   */


  MuteToggle.prototype.updateControlText_ = function updateControlText_() {
    var soundOff = this.player_.muted() || this.player_.volume() === 0;
    var text = soundOff ? 'Unmute' : 'Mute';

    if (this.controlText() !== text) {
      this.controlText(text);
    }
  };

  return MuteToggle;
}(Button);

/**
 * The text that should display over the `MuteToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


MuteToggle.prototype.controlText_ = 'Mute';

Component.registerComponent('MuteToggle', MuteToggle);

/**
 * @file volume-control.js
 */
// Required children
/**
 * A Component to contain the MuteToggle and VolumeControl so that
 * they can work together.
 *
 * @extends Component
 */

var VolumePanel = function (_Component) {
  inherits(VolumePanel, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function VolumePanel(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, VolumePanel);

    if (typeof options.inline !== 'undefined') {
      options.inline = options.inline;
    } else {
      options.inline = true;
    }

    // pass the inline option down to the VolumeControl as vertical if
    // the VolumeControl is on.
    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {
      options.volumeControl = options.volumeControl || {};
      options.volumeControl.vertical = !options.inline;
    }

    // hide this control if volume support is missing
    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    checkVolumeSupport(_this, player);

    // while the slider is active (the mouse has been pressed down and
    // is dragging) we do not want to hide the VolumeBar
    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);

    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);
    return _this;
  }

  /**
   * Add vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#slideractive
   * @private
   */


  VolumePanel.prototype.sliderActive_ = function sliderActive_() {
    this.addClass('vjs-slider-active');
  };

  /**
   * Removes vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#sliderinactive
   * @private
   */


  VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {
    this.removeClass('vjs-slider-active');
  };

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  VolumePanel.prototype.createEl = function createEl() {
    var orientationClass = 'vjs-volume-panel-horizontal';

    if (!this.options_.inline) {
      orientationClass = 'vjs-volume-panel-vertical';
    }

    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-volume-panel vjs-control ' + orientationClass
    });
  };

  return VolumePanel;
}(Component);

/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */


VolumePanel.prototype.options_ = {
  children: ['muteToggle', 'volumeControl']
};

Component.registerComponent('VolumePanel', VolumePanel);

/**
 * @file menu.js
 */
/**
 * The Menu component is used to build popup menus, including subtitle and
 * captions selection menus.
 *
 * @extends Component
 */

var Menu = function (_Component) {
  inherits(Menu, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        the player that this component should attach to
   *
   * @param {Object} [options]
   *        Object of option names and values
   *
   */
  function Menu(player, options) {
    classCallCheck(this, Menu);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    if (options) {
      _this.menuButton_ = options.menuButton;
    }

    _this.focusedChild_ = -1;

    _this.on('keydown', _this.handleKeyPress);
    return _this;
  }

  /**
   * Add a {@link MenuItem} to the menu.
   *
   * @param {Object|string} component
   *        The name or instance of the `MenuItem` to add.
   *
   */


  Menu.prototype.addItem = function addItem(component) {
    this.addChild(component);
    component.on('click', bind(this, function (event) {
      // Unpress the associated MenuButton, and move focus back to it
      if (this.menuButton_) {
        this.menuButton_.unpressButton();

        // don't focus menu button if item is a caption settings item
        // because focus will move elsewhere and it logs an error on IE8
        if (component.name() !== 'CaptionSettingsMenuItem') {
          this.menuButton_.focus();
        }
      }
    }));
  };

  /**
   * Create the `Menu`s DOM element.
   *
   * @return {Element}
   *         the element that was created
   */


  Menu.prototype.createEl = function createEl$$1() {
    var contentElType = this.options_.contentElType || 'ul';

    this.contentEl_ = createEl(contentElType, {
      className: 'vjs-menu-content'
    });

    this.contentEl_.setAttribute('role', 'menu');

    var el = _Component.prototype.createEl.call(this, 'div', {
      append: this.contentEl_,
      className: 'vjs-menu'
    });

    el.appendChild(this.contentEl_);

    // Prevent clicks from bubbling up. Needed for Menu Buttons,
    // where a click on the parent is significant
    on(el, 'click', function (event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    });

    return el;
  };

  Menu.prototype.dispose = function dispose() {
    this.contentEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Handle a `keydown` event on this menu. This listener is added in the constructor.
   *
   * @param {EventTarget~Event} event
   *        A `keydown` event that happened on the menu.
   *
   * @listens keydown
   */


  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
    // Left and Down Arrows
    if (event.which === 37 || event.which === 40) {
      event.preventDefault();
      this.stepForward();

      // Up and Right Arrows
    } else if (event.which === 38 || event.which === 39) {
      event.preventDefault();
      this.stepBack();
    }
  };

  /**
   * Move to next (lower) menu item for keyboard users.
   */


  Menu.prototype.stepForward = function stepForward() {
    var stepChild = 0;

    if (this.focusedChild_ !== undefined) {
      stepChild = this.focusedChild_ + 1;
    }
    this.focus(stepChild);
  };

  /**
   * Move to previous (higher) menu item for keyboard users.
   */


  Menu.prototype.stepBack = function stepBack() {
    var stepChild = 0;

    if (this.focusedChild_ !== undefined) {
      stepChild = this.focusedChild_ - 1;
    }
    this.focus(stepChild);
  };

  /**
   * Set focus on a {@link MenuItem} in the `Menu`.
   *
   * @param {Object|string} [item=0]
   *        Index of child item set focus on.
   */


  Menu.prototype.focus = function focus() {
    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var children = this.children().slice();
    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

    if (haveTitle) {
      children.shift();
    }

    if (children.length > 0) {
      if (item < 0) {
        item = 0;
      } else if (item >= children.length) {
        item = children.length - 1;
      }

      this.focusedChild_ = item;

      children[item].el_.focus();
    }
  };

  return Menu;
}(Component);

Component.registerComponent('Menu', Menu);

/**
 * @file menu-button.js
 */
/**
 * A `MenuButton` class for any popup {@link Menu}.
 *
 * @extends Component
 */

var MenuButton = function (_Component) {
  inherits(MenuButton, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function MenuButton(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, MenuButton);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.menuButton_ = new Button(player, options);

    _this.menuButton_.controlText(_this.controlText_);
    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');

    // Add buildCSSClass values to the button, not the wrapper
    var buttonClass = Button.prototype.buildCSSClass();

    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;
    _this.menuButton_.removeClass('vjs-control');

    _this.addChild(_this.menuButton_);

    _this.update();

    _this.enabled_ = true;

    _this.on(_this.menuButton_, 'tap', _this.handleClick);
    _this.on(_this.menuButton_, 'click', _this.handleClick);
    _this.on(_this.menuButton_, 'focus', _this.handleFocus);
    _this.on(_this.menuButton_, 'blur', _this.handleBlur);

    _this.on('keydown', _this.handleSubmenuKeyPress);
    return _this;
  }

  /**
   * Update the menu based on the current state of its items.
   */


  MenuButton.prototype.update = function update() {
    var menu = this.createMenu();

    if (this.menu) {
      this.menu.dispose();
      this.removeChild(this.menu);
    }

    this.menu = menu;
    this.addChild(menu);

    /**
     * Track the state of the menu button
     *
     * @type {Boolean}
     * @private
     */
    this.buttonPressed_ = false;
    this.menuButton_.el_.setAttribute('aria-expanded', 'false');

    if (this.items && this.items.length <= this.hideThreshold_) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Create the menu and add all items to it.
   *
   * @return {Menu}
   *         The constructed menu
   */


  MenuButton.prototype.createMenu = function createMenu() {
    var menu = new Menu(this.player_, { menuButton: this });

    /**
     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
     * it here because every time we run `createMenu` we need to reset the value.
     *
     * @protected
     * @type {Number}
     */
    this.hideThreshold_ = 0;

    // Add a title list item to the top
    if (this.options_.title) {
      var title = createEl('li', {
        className: 'vjs-menu-title',
        innerHTML: toTitleCase(this.options_.title),
        tabIndex: -1
      });

      this.hideThreshold_ += 1;

      menu.children_.unshift(title);
      prependTo(title, menu.contentEl());
    }

    this.items = this.createItems();

    if (this.items) {
      // Add menu items to the menu
      for (var i = 0; i < this.items.length; i++) {
        menu.addItem(this.items[i]);
      }
    }

    return menu;
  };

  /**
   * Create the list of menu items. Specific to each subclass.
   *
   * @abstract
   */


  MenuButton.prototype.createItems = function createItems() {};

  /**
   * Create the `MenuButtons`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  MenuButton.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: this.buildWrapperCSSClass()
    }, {});
  };

  /**
   * Allow sub components to stack CSS class names for the wrapper element
   *
   * @return {string}
   *         The constructed wrapper DOM `className`
   */


  MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    var menuButtonClass = 'vjs-menu-button';

    // If the inline option is passed, we want to use different styles altogether.
    if (this.options_.inline === true) {
      menuButtonClass += '-inline';
    } else {
      menuButtonClass += '-popup';
    }

    // TODO: Fix the CSS so that this isn't necessary
    var buttonClass = Button.prototype.buildCSSClass();

    return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
    var menuButtonClass = 'vjs-menu-button';

    // If the inline option is passed, we want to use different styles altogether.
    if (this.options_.inline === true) {
      menuButtonClass += '-inline';
    } else {
      menuButtonClass += '-popup';
    }

    return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */


  MenuButton.prototype.controlText = function controlText(text) {
    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();

    return this.menuButton_.controlText(text, el);
  };

  /**
   * Handle a click on a `MenuButton`.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  MenuButton.prototype.handleClick = function handleClick(event) {
    // When you click the button it adds focus, which will show the menu.
    // So we'll remove focus when the mouse leaves the button. Focus is needed
    // for tab navigation.

    this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {
      this.unpressButton();
      this.el_.blur();
    }));
    if (this.buttonPressed_) {
      this.unpressButton();
    } else {
      this.pressButton();
    }
  };

  /**
   * Set the focus to the actual button, not to this element
   */


  MenuButton.prototype.focus = function focus() {
    this.menuButton_.focus();
  };

  /**
   * Remove the focus from the actual button, not this element
   */


  MenuButton.prototype.blur = function blur() {
    this.menuButton_.blur();
  };

  /**
   * This gets called when a `MenuButton` gains focus via a `focus` event.
   * Turns on listening for `keydown` events. When they happen it
   * calls `this.handleKeyPress`.
   *
   * @param {EventTarget~Event} event
   *        The `focus` event that caused this function to be called.
   *
   * @listens focus
   */


  MenuButton.prototype.handleFocus = function handleFocus() {
    on(document, 'keydown', bind(this, this.handleKeyPress));
  };

  /**
   * Called when a `MenuButton` loses focus. Turns off the listener for
   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */


  MenuButton.prototype.handleBlur = function handleBlur() {
    off(document, 'keydown', bind(this, this.handleKeyPress));
  };

  /**
   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
   * {@link ClickableComponent#handleKeyPress} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */


  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

    // Escape (27) key or Tab (9) key unpress the 'button'
    if (event.which === 27 || event.which === 9) {
      if (this.buttonPressed_) {
        this.unpressButton();
      }
      // Don't preventDefault for Tab key - we still want to lose focus
      if (event.which !== 9) {
        event.preventDefault();
        // Set focus back to the menu button's button
        this.menuButton_.el_.focus();
      }
      // Up (38) key or Down (40) key press the 'button'
    } else if (event.which === 38 || event.which === 40) {
      if (!this.buttonPressed_) {
        this.pressButton();
        event.preventDefault();
      }
    }
  };

  /**
   * Handle a `keydown` event on a sub-menu. The listener for this is added in
   * the constructor.
   *
   * @param {EventTarget~Event} event
   *        Key press event
   *
   * @listens keydown
   */


  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

    // Escape (27) key or Tab (9) key unpress the 'button'
    if (event.which === 27 || event.which === 9) {
      if (this.buttonPressed_) {
        this.unpressButton();
      }
      // Don't preventDefault for Tab key - we still want to lose focus
      if (event.which !== 9) {
        event.preventDefault();
        // Set focus back to the menu button's button
        this.menuButton_.el_.focus();
      }
    }
  };

  /**
   * Put the current `MenuButton` into a pressed state.
   */


  MenuButton.prototype.pressButton = function pressButton() {
    if (this.enabled_) {
      this.buttonPressed_ = true;
      this.menu.lockShowing();
      this.menuButton_.el_.setAttribute('aria-expanded', 'true');

      // set the focus into the submenu, except on iOS where it is resulting in
      // undesired scrolling behavior when the player is in an iframe
      if (IS_IOS && isInFrame()) {
        // Return early so that the menu isn't focused
        return;
      }

      this.menu.focus();
    }
  };

  /**
   * Take the current `MenuButton` out of a pressed state.
   */


  MenuButton.prototype.unpressButton = function unpressButton() {
    if (this.enabled_) {
      this.buttonPressed_ = false;
      this.menu.unlockShowing();
      this.menuButton_.el_.setAttribute('aria-expanded', 'false');
    }
  };

  /**
   * Disable the `MenuButton`. Don't allow it to be clicked.
   */


  MenuButton.prototype.disable = function disable() {
    this.unpressButton();

    this.enabled_ = false;
    this.addClass('vjs-disabled');

    this.menuButton_.disable();
  };

  /**
   * Enable the `MenuButton`. Allow it to be clicked.
   */


  MenuButton.prototype.enable = function enable() {
    this.enabled_ = true;
    this.removeClass('vjs-disabled');

    this.menuButton_.enable();
  };

  return MenuButton;
}(Component);

Component.registerComponent('MenuButton', MenuButton);

/**
 * @file track-button.js
 */
/**
 * The base class for buttons that toggle specific  track types (e.g. subtitles).
 *
 * @extends MenuButton
 */

var TrackButton = function (_MenuButton) {
  inherits(TrackButton, _MenuButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function TrackButton(player, options) {
    classCallCheck(this, TrackButton);

    var tracks = options.tracks;

    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

    if (_this.items.length <= 1) {
      _this.hide();
    }

    if (!tracks) {
      return possibleConstructorReturn(_this);
    }

    var updateHandler = bind(_this, _this.update);

    tracks.addEventListener('removetrack', updateHandler);
    tracks.addEventListener('addtrack', updateHandler);
    _this.player_.on('ready', updateHandler);

    _this.player_.on('dispose', function () {
      tracks.removeEventListener('removetrack', updateHandler);
      tracks.removeEventListener('addtrack', updateHandler);
    });
    return _this;
  }

  return TrackButton;
}(MenuButton);

Component.registerComponent('TrackButton', TrackButton);

/**
 * @file menu-item.js
 */
/**
 * The component for a menu item. `<li>`
 *
 * @extends ClickableComponent
 */

var MenuItem = function (_ClickableComponent) {
  inherits(MenuItem, _ClickableComponent);

  /**
   * Creates an instance of the this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   *
   */
  function MenuItem(player, options) {
    classCallCheck(this, MenuItem);

    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

    _this.selectable = options.selectable;
    _this.isSelected_ = options.selected || false;

    _this.selected(_this.isSelected_);

    if (_this.selectable) {
      // TODO: May need to be either menuitemcheckbox or menuitemradio,
      //       and may need logical grouping of menu items.
      _this.el_.setAttribute('role', 'menuitemcheckbox');
    } else {
      _this.el_.setAttribute('role', 'menuitem');
    }
    return _this;
  }

  /**
   * Create the `MenuItem's DOM element
   *
   * @param {string} [type=li]
   *        Element's node type, not actually used, always set to `li`.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element
   *
   * @param {Object} [attrs={}]
   *        An object of attributes that should be set on the element
   *
   * @return {Element}
   *         The element that gets created.
   */


  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
    // The control is textual, not just an icon
    this.nonIconControl = true;

    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({
      className: 'vjs-menu-item',
      innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + '</span>',
      tabIndex: -1
    }, props), attrs);
  };

  /**
   * Any click on a `MenuItem` puts int into the selected state.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  MenuItem.prototype.handleClick = function handleClick(event) {
    this.selected(true);
  };

  /**
   * Set the state for this menu item as selected or not.
   *
   * @param {boolean} selected
   *        if the menu item is selected or not
   */


  MenuItem.prototype.selected = function selected(_selected) {
    if (this.selectable) {
      if (_selected) {
        this.addClass('vjs-selected');
        this.el_.setAttribute('aria-checked', 'true');
        // aria-checked isn't fully supported by browsers/screen readers,
        // so indicate selected state to screen reader in the control text.
        this.controlText(', selected');
        this.isSelected_ = true;
      } else {
        this.removeClass('vjs-selected');
        this.el_.setAttribute('aria-checked', 'false');
        // Indicate un-selected state to screen reader
        this.controlText('');
        this.isSelected_ = false;
      }
    }
  };

  return MenuItem;
}(ClickableComponent);

Component.registerComponent('MenuItem', MenuItem);

/**
 * @file text-track-menu-item.js
 */
/**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @extends MenuItem
 */

var TextTrackMenuItem = function (_MenuItem) {
  inherits(TextTrackMenuItem, _MenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function TextTrackMenuItem(player, options) {
    classCallCheck(this, TextTrackMenuItem);

    var track = options.track;
    var tracks = player.textTracks();

    // Modify options for parent MenuItem class's init.
    options.label = track.label || track.language || 'Unknown';
    options.selected = track.mode === 'showing';

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.track = track;
    var changeHandler = function changeHandler() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this.handleTracksChange.apply(_this, args);
    };
    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this.handleSelectedLanguageChange.apply(_this, args);
    };

    player.on(['loadstart', 'texttrackchange'], changeHandler);
    tracks.addEventListener('change', changeHandler);
    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
    _this.on('dispose', function () {
      player.off(['loadstart', 'texttrackchange'], changeHandler);
      tracks.removeEventListener('change', changeHandler);
      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
    });

    // iOS7 doesn't dispatch change events to TextTrackLists when an
    // associated track's mode changes. Without something like
    // Object.observe() (also not present on iOS7), it's not
    // possible to detect changes to the mode attribute and polyfill
    // the change event. As a poor substitute, we manually dispatch
    // change events whenever the controls modify the mode.
    if (tracks.onchange === undefined) {
      var event = void 0;

      _this.on(['tap', 'click'], function () {
        if (_typeof(window.Event) !== 'object') {
          // Android 2.3 throws an Illegal Constructor error for window.Event
          try {
            event = new window.Event('change');
          } catch (err) {
            // continue regardless of error
          }
        }

        if (!event) {
          event = document.createEvent('Event');
          event.initEvent('change', true, true);
        }

        tracks.dispatchEvent(event);
      });
    }

    // set the default state based on current tracks
    _this.handleTracksChange();
    return _this;
  }

  /**
   * This gets called when an `TextTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
    var kind = this.track.kind;
    var kinds = this.track.kinds;
    var tracks = this.player_.textTracks();

    if (!kinds) {
      kinds = [kind];
    }

    _MenuItem.prototype.handleClick.call(this, event);

    if (!tracks) {
      return;
    }

    for (var i = 0; i < tracks.length; i++) {
      var track = tracks[i];

      if (track === this.track && kinds.indexOf(track.kind) > -1) {
        if (track.mode !== 'showing') {
          track.mode = 'showing';
        }
      } else if (track.mode !== 'disabled') {
        track.mode = 'disabled';
      }
    }
  };

  /**
   * Handle text track list change
   *
   * @param {EventTarget~Event} event
   *        The `change` event that caused this function to be called.
   *
   * @listens TextTrackList#change
   */


  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
    var shouldBeSelected = this.track.mode === 'showing';

    // Prevent redundant selected() calls because they may cause
    // screen readers to read the appended control text unnecessarily
    if (shouldBeSelected !== this.isSelected_) {
      this.selected(shouldBeSelected);
    }
  };

  TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
    if (this.track.mode === 'showing') {
      var selectedLanguage = this.player_.cache_.selectedLanguage;

      // Don't replace the kind of track across the same language
      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
        return;
      }

      this.player_.cache_.selectedLanguage = {
        enabled: true,
        language: this.track.language,
        kind: this.track.kind
      };
    }
  };

  TextTrackMenuItem.prototype.dispose = function dispose() {
    // remove reference to track object on dispose
    this.track = null;

    _MenuItem.prototype.dispose.call(this);
  };

  return TextTrackMenuItem;
}(MenuItem);

Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);

/**
 * @file off-text-track-menu-item.js
 */
/**
 * A special menu item for turning of a specific type of text track
 *
 * @extends TextTrackMenuItem
 */

var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
  inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function OffTextTrackMenuItem(player, options) {
    classCallCheck(this, OffTextTrackMenuItem);

    // Create pseudo track info
    // Requires options['kind']
    options.track = {
      player: player,
      kind: options.kind,
      kinds: options.kinds,
      'default': false,
      mode: 'disabled'
    };

    if (!options.kinds) {
      options.kinds = [options.kind];
    }

    if (options.label) {
      options.track.label = options.label;
    } else {
      options.track.label = options.kinds.join(' and ') + ' off';
    }

    // MenuItem is selectable
    options.selectable = true;

    return possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
  }

  /**
   * Handle text track change
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run
   */


  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
    var tracks = this.player().textTracks();
    var shouldBeSelected = true;

    for (var i = 0, l = tracks.length; i < l; i++) {
      var track = tracks[i];

      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {
        shouldBeSelected = false;
        break;
      }
    }

    // Prevent redundant selected() calls because they may cause
    // screen readers to read the appended control text unnecessarily
    if (shouldBeSelected !== this.isSelected_) {
      this.selected(shouldBeSelected);
    }
  };

  OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
    var tracks = this.player().textTracks();
    var allHidden = true;

    for (var i = 0, l = tracks.length; i < l; i++) {
      var track = tracks[i];

      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {
        allHidden = false;
        break;
      }
    }

    if (allHidden) {
      this.player_.cache_.selectedLanguage = {
        enabled: false
      };
    }
  };

  return OffTextTrackMenuItem;
}(TextTrackMenuItem);

Component.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);

/**
 * @file text-track-button.js
 */
/**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @extends MenuButton
 */

var TextTrackButton = function (_TrackButton) {
  inherits(TextTrackButton, _TrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function TextTrackButton(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, TextTrackButton);

    options.tracks = player.textTracks();

    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
  }

  /**
   * Create a menu item for each text track
   *
   * @param {TextTrackMenuItem[]} [items=[]]
   *        Existing array of items to use during creation
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items that were created
   */


  TextTrackButton.prototype.createItems = function createItems() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;


    // Label is an overide for the [track] off label
    // USed to localise captions/subtitles
    var label = void 0;

    if (this.label_) {
      label = this.label_ + ' off';
    }
    // Add an OFF menu item to turn all tracks off
    items.push(new OffTextTrackMenuItem(this.player_, {
      kinds: this.kinds_,
      kind: this.kind_,
      label: label
    }));

    this.hideThreshold_ += 1;

    var tracks = this.player_.textTracks();

    if (!Array.isArray(this.kinds_)) {
      this.kinds_ = [this.kind_];
    }

    for (var i = 0; i < tracks.length; i++) {
      var track = tracks[i];

      // only add tracks that are of an appropriate kind and have a label
      if (this.kinds_.indexOf(track.kind) > -1) {

        var item = new TrackMenuItem(this.player_, {
          track: track,
          // MenuItem is selectable
          selectable: true
        });

        item.addClass('vjs-' + track.kind + '-menu-item');
        items.push(item);
      }
    }

    return items;
  };

  return TextTrackButton;
}(TrackButton);

Component.registerComponent('TextTrackButton', TextTrackButton);

/**
 * @file chapters-track-menu-item.js
 */
/**
 * The chapter track menu item
 *
 * @extends MenuItem
 */

var ChaptersTrackMenuItem = function (_MenuItem) {
  inherits(ChaptersTrackMenuItem, _MenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function ChaptersTrackMenuItem(player, options) {
    classCallCheck(this, ChaptersTrackMenuItem);

    var track = options.track;
    var cue = options.cue;
    var currentTime = player.currentTime();

    // Modify options for parent MenuItem class's init.
    options.selectable = true;
    options.label = cue.text;
    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.track = track;
    _this.cue = cue;
    track.addEventListener('cuechange', bind(_this, _this.update));
    return _this;
  }

  /**
   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
    _MenuItem.prototype.handleClick.call(this);
    this.player_.currentTime(this.cue.startTime);
    this.update(this.cue.startTime);
  };

  /**
   * Update chapter menu item
   *
   * @param {EventTarget~Event} [event]
   *        The `cuechange` event that caused this function to run.
   *
   * @listens TextTrack#cuechange
   */


  ChaptersTrackMenuItem.prototype.update = function update(event) {
    var cue = this.cue;
    var currentTime = this.player_.currentTime();

    // vjs.log(currentTime, cue.startTime);
    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
  };

  return ChaptersTrackMenuItem;
}(MenuItem);

Component.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);

/**
 * @file chapters-button.js
 */
/**
 * The button component for toggling and selecting chapters
 * Chapters act much differently than other text tracks
 * Cues are navigation vs. other tracks of alternative languages
 *
 * @extends TextTrackButton
 */

var ChaptersButton = function (_TextTrackButton) {
  inherits(ChaptersButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this function is ready.
   */
  function ChaptersButton(player, options, ready) {
    classCallCheck(this, ChaptersButton);
    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Update the menu based on the current state of its items.
   *
   * @param {EventTarget~Event} [event]
   *        An event that triggered this function to run.
   *
   * @listens TextTrackList#addtrack
   * @listens TextTrackList#removetrack
   * @listens TextTrackList#change
   */


  ChaptersButton.prototype.update = function update(event) {
    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
      this.setTrack(this.findChaptersTrack());
    }
    _TextTrackButton.prototype.update.call(this);
  };

  /**
   * Set the currently selected track for the chapters button.
   *
   * @param {TextTrack} track
   *        The new track to select. Nothing will change if this is the currently selected
   *        track.
   */


  ChaptersButton.prototype.setTrack = function setTrack(track) {
    if (this.track_ === track) {
      return;
    }

    if (!this.updateHandler_) {
      this.updateHandler_ = this.update.bind(this);
    }

    // here this.track_ refers to the old track instance
    if (this.track_) {
      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

      if (remoteTextTrackEl) {
        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
      }

      this.track_ = null;
    }

    this.track_ = track;

    // here this.track_ refers to the new track instance
    if (this.track_) {
      this.track_.mode = 'hidden';

      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

      if (_remoteTextTrackEl) {
        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
      }
    }
  };

  /**
   * Find the track object that is currently in use by this ChaptersButton
   *
   * @return {TextTrack|undefined}
   *         The current track or undefined if none was found.
   */


  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
    var tracks = this.player_.textTracks() || [];

    for (var i = tracks.length - 1; i >= 0; i--) {
      // We will always choose the last track as our chaptersTrack
      var track = tracks[i];

      if (track.kind === this.kind_) {
        return track;
      }
    }
  };

  /**
   * Get the caption for the ChaptersButton based on the track label. This will also
   * use the current tracks localized kind as a fallback if a label does not exist.
   *
   * @return {string}
   *         The tracks current label or the localized track kind.
   */


  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
    if (this.track_ && this.track_.label) {
      return this.track_.label;
    }
    return this.localize(toTitleCase(this.kind_));
  };

  /**
   * Create menu from chapter track
   *
   * @return {Menu}
   *         New menu for the chapter buttons
   */


  ChaptersButton.prototype.createMenu = function createMenu() {
    this.options_.title = this.getMenuCaption();
    return _TextTrackButton.prototype.createMenu.call(this);
  };

  /**
   * Create a menu item for each text track
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items
   */


  ChaptersButton.prototype.createItems = function createItems() {
    var items = [];

    if (!this.track_) {
      return items;
    }

    var cues = this.track_.cues;

    if (!cues) {
      return items;
    }

    for (var i = 0, l = cues.length; i < l; i++) {
      var cue = cues[i];
      var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });

      items.push(mi);
    }

    return items;
  };

  return ChaptersButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


ChaptersButton.prototype.kind_ = 'chapters';

/**
 * The text that should display over the `ChaptersButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
ChaptersButton.prototype.controlText_ = 'Chapters';

Component.registerComponent('ChaptersButton', ChaptersButton);

/**
 * @file descriptions-button.js
 */
/**
 * The button component for toggling and selecting descriptions
 *
 * @extends TextTrackButton
 */

var DescriptionsButton = function (_TextTrackButton) {
  inherits(DescriptionsButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */
  function DescriptionsButton(player, options, ready) {
    classCallCheck(this, DescriptionsButton);

    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

    var tracks = player.textTracks();
    var changeHandler = bind(_this, _this.handleTracksChange);

    tracks.addEventListener('change', changeHandler);
    _this.on('dispose', function () {
      tracks.removeEventListener('change', changeHandler);
    });
    return _this;
  }

  /**
   * Handle text track change
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run
   *
   * @listens TextTrackList#change
   */


  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
    var tracks = this.player().textTracks();
    var disabled = false;

    // Check whether a track of a different kind is showing
    for (var i = 0, l = tracks.length; i < l; i++) {
      var track = tracks[i];

      if (track.kind !== this.kind_ && track.mode === 'showing') {
        disabled = true;
        break;
      }
    }

    // If another track is showing, disable this menu button
    if (disabled) {
      this.disable();
    } else {
      this.enable();
    }
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  return DescriptionsButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


DescriptionsButton.prototype.kind_ = 'descriptions';

/**
 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
DescriptionsButton.prototype.controlText_ = 'Descriptions';

Component.registerComponent('DescriptionsButton', DescriptionsButton);

/**
 * @file subtitles-button.js
 */
/**
 * The button component for toggling and selecting subtitles
 *
 * @extends TextTrackButton
 */

var SubtitlesButton = function (_TextTrackButton) {
  inherits(SubtitlesButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */
  function SubtitlesButton(player, options, ready) {
    classCallCheck(this, SubtitlesButton);
    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  return SubtitlesButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


SubtitlesButton.prototype.kind_ = 'subtitles';

/**
 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
SubtitlesButton.prototype.controlText_ = 'Subtitles';

Component.registerComponent('SubtitlesButton', SubtitlesButton);

/**
 * @file caption-settings-menu-item.js
 */
/**
 * The menu item for caption track settings menu
 *
 * @extends TextTrackMenuItem
 */

var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
  inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function CaptionSettingsMenuItem(player, options) {
    classCallCheck(this, CaptionSettingsMenuItem);

    options.track = {
      player: player,
      kind: options.kind,
      label: options.kind + ' settings',
      selectable: false,
      'default': false,
      mode: 'disabled'
    };

    // CaptionSettingsMenuItem has no concept of 'selected'
    options.selectable = false;

    options.name = 'CaptionSettingsMenuItem';

    var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

    _this.addClass('vjs-texttrack-settings');
    _this.controlText(', opens ' + options.kind + ' settings dialog');
    return _this;
  }

  /**
   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
    this.player().getChild('textTrackSettings').open();
  };

  return CaptionSettingsMenuItem;
}(TextTrackMenuItem);

Component.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);

/**
 * @file captions-button.js
 */
/**
 * The button component for toggling and selecting captions
 *
 * @extends TextTrackButton
 */

var CaptionsButton = function (_TextTrackButton) {
  inherits(CaptionsButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */
  function CaptionsButton(player, options, ready) {
    classCallCheck(this, CaptionsButton);
    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Create caption menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */


  CaptionsButton.prototype.createItems = function createItems() {
    var items = [];

    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));

      this.hideThreshold_ += 1;
    }

    return _TextTrackButton.prototype.createItems.call(this, items);
  };

  return CaptionsButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


CaptionsButton.prototype.kind_ = 'captions';

/**
 * The text that should display over the `CaptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
CaptionsButton.prototype.controlText_ = 'Captions';

Component.registerComponent('CaptionsButton', CaptionsButton);

/**
 * @file subs-caps-menu-item.js
 */
/**
 * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
 * in the SubsCapsMenu.
 *
 * @extends TextTrackMenuItem
 */

var SubsCapsMenuItem = function (_TextTrackMenuItem) {
  inherits(SubsCapsMenuItem, _TextTrackMenuItem);

  function SubsCapsMenuItem() {
    classCallCheck(this, SubsCapsMenuItem);
    return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));
  }

  SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {
    var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);

    if (this.options_.track.kind === 'captions') {
      innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize('Captions') + '</span>\n      ';
    }

    innerHTML += '</span>';

    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({
      innerHTML: innerHTML
    }, props), attrs);

    return el;
  };

  return SubsCapsMenuItem;
}(TextTrackMenuItem);

Component.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);

/**
 * @file sub-caps-button.js
 */
/**
 * The button component for toggling and selecting captions and/or subtitles
 *
 * @extends TextTrackButton
 */

var SubsCapsButton = function (_TextTrackButton) {
  inherits(SubsCapsButton, _TextTrackButton);

  function SubsCapsButton(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, SubsCapsButton);

    // Although North America uses "captions" in most cases for
    // "captions and subtitles" other locales use "subtitles"
    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));

    _this.label_ = 'subtitles';
    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {
      _this.label_ = 'captions';
    }
    _this.menuButton_.controlText(toTitleCase(_this.label_));
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Create caption/subtitles menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */


  SubsCapsButton.prototype.createItems = function createItems() {
    var items = [];

    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));

      this.hideThreshold_ += 1;
    }

    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
    return items;
  };

  return SubsCapsButton;
}(TextTrackButton);

/**
 * `kind`s of TextTrack to look for to associate it with this menu.
 *
 * @type {array}
 * @private
 */


SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];

/**
 * The text that should display over the `SubsCapsButton`s controls.
 *
 *
 * @type {string}
 * @private
 */
SubsCapsButton.prototype.controlText_ = 'Subtitles';

Component.registerComponent('SubsCapsButton', SubsCapsButton);

/**
 * @file audio-track-menu-item.js
 */
/**
 * An {@link AudioTrack} {@link MenuItem}
 *
 * @extends MenuItem
 */

var AudioTrackMenuItem = function (_MenuItem) {
  inherits(AudioTrackMenuItem, _MenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function AudioTrackMenuItem(player, options) {
    classCallCheck(this, AudioTrackMenuItem);

    var track = options.track;
    var tracks = player.audioTracks();

    // Modify options for parent MenuItem class's init.
    options.label = track.label || track.language || 'Unknown';
    options.selected = track.enabled;

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.track = track;

    var changeHandler = function changeHandler() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this.handleTracksChange.apply(_this, args);
    };

    tracks.addEventListener('change', changeHandler);
    _this.on('dispose', function () {
      tracks.removeEventListener('change', changeHandler);
    });
    return _this;
  }

  /**
   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
    var tracks = this.player_.audioTracks();

    _MenuItem.prototype.handleClick.call(this, event);

    for (var i = 0; i < tracks.length; i++) {
      var track = tracks[i];

      track.enabled = track === this.track;
    }
  };

  /**
   * Handle any {@link AudioTrack} change.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link AudioTrackList#change} event that caused this to run.
   *
   * @listens AudioTrackList#change
   */


  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
    this.selected(this.track.enabled);
  };

  return AudioTrackMenuItem;
}(MenuItem);

Component.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);

/**
 * @file audio-track-button.js
 */
/**
 * The base class for buttons that toggle specific {@link AudioTrack} types.
 *
 * @extends TrackButton
 */

var AudioTrackButton = function (_TrackButton) {
  inherits(AudioTrackButton, _TrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function AudioTrackButton(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, AudioTrackButton);

    options.tracks = player.audioTracks();

    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
  };

  AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Create a menu item for each audio track
   *
   * @param {AudioTrackMenuItem[]} [items=[]]
   *        An array of existing menu items to use.
   *
   * @return {AudioTrackMenuItem[]}
   *         An array of menu items
   */


  AudioTrackButton.prototype.createItems = function createItems() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    // if there's only one audio track, there no point in showing it
    this.hideThreshold_ = 1;

    var tracks = this.player_.audioTracks();

    for (var i = 0; i < tracks.length; i++) {
      var track = tracks[i];

      items.push(new AudioTrackMenuItem(this.player_, {
        track: track,
        // MenuItem is selectable
        selectable: true
      }));
    }

    return items;
  };

  return AudioTrackButton;
}(TrackButton);

/**
 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


AudioTrackButton.prototype.controlText_ = 'Audio Track';
Component.registerComponent('AudioTrackButton', AudioTrackButton);

/**
 * @file playback-rate-menu-item.js
 */
/**
 * The specific menu item type for selecting a playback rate.
 *
 * @extends MenuItem
 */

var PlaybackRateMenuItem = function (_MenuItem) {
  inherits(PlaybackRateMenuItem, _MenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PlaybackRateMenuItem(player, options) {
    classCallCheck(this, PlaybackRateMenuItem);

    var label = options.rate;
    var rate = parseFloat(label, 10);

    // Modify options for parent MenuItem class's init.
    options.label = label;
    options.selected = rate === 1;
    options.selectable = true;

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.label = label;
    _this.rate = rate;

    _this.on(player, 'ratechange', _this.update);
    return _this;
  }

  /**
   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
    _MenuItem.prototype.handleClick.call(this);
    this.player().playbackRate(this.rate);
  };

  /**
   * Update the PlaybackRateMenuItem when the playbackrate changes.
   *
   * @param {EventTarget~Event} [event]
   *        The `ratechange` event that caused this function to run.
   *
   * @listens Player#ratechange
   */


  PlaybackRateMenuItem.prototype.update = function update(event) {
    this.selected(this.player().playbackRate() === this.rate);
  };

  return PlaybackRateMenuItem;
}(MenuItem);

/**
 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


PlaybackRateMenuItem.prototype.contentElType = 'button';

Component.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);

/**
 * @file playback-rate-menu-button.js
 */
/**
 * The component for controlling the playback rate.
 *
 * @extends MenuButton
 */

var PlaybackRateMenuButton = function (_MenuButton) {
  inherits(PlaybackRateMenuButton, _MenuButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PlaybackRateMenuButton(player, options) {
    classCallCheck(this, PlaybackRateMenuButton);

    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

    _this.updateVisibility();
    _this.updateLabel();

    _this.on(player, 'loadstart', _this.updateVisibility);
    _this.on(player, 'ratechange', _this.updateLabel);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {
    var el = _MenuButton.prototype.createEl.call(this);

    this.labelEl_ = createEl('div', {
      className: 'vjs-playback-rate-value',
      innerHTML: '1x'
    });

    el.appendChild(this.labelEl_);

    return el;
  };

  PlaybackRateMenuButton.prototype.dispose = function dispose() {
    this.labelEl_ = null;

    _MenuButton.prototype.dispose.call(this);
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
  };

  PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Create the playback rate menu
   *
   * @return {Menu}
   *         Menu object populated with {@link PlaybackRateMenuItem}s
   */


  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
    var menu = new Menu(this.player());
    var rates = this.playbackRates();

    if (rates) {
      for (var i = rates.length - 1; i >= 0; i--) {
        menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));
      }
    }

    return menu;
  };

  /**
   * Updates ARIA accessibility attributes
   */


  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
    // Current playback rate
    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
  };

  /**
   * This gets called when an `PlaybackRateMenuButton` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
    // select next rate option
    var currentRate = this.player().playbackRate();
    var rates = this.playbackRates();

    // this will select first one if the last one currently selected
    var newRate = rates[0];

    for (var i = 0; i < rates.length; i++) {
      if (rates[i] > currentRate) {
        newRate = rates[i];
        break;
      }
    }
    this.player().playbackRate(newRate);
  };

  /**
   * Get possible playback rates
   *
   * @return {Array}
   *         All possible playback rates
   */


  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
  };

  /**
   * Get whether playback rates is supported by the tech
   * and an array of playback rates exists
   *
   * @return {boolean}
   *         Whether changing playback rate is supported
   */


  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
  };

  /**
   * Hide playback rate controls when they're no playback rate options to select
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#loadstart
   */


  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
    if (this.playbackRateSupported()) {
      this.removeClass('vjs-hidden');
    } else {
      this.addClass('vjs-hidden');
    }
  };

  /**
   * Update button label when rate changed
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ratechange
   */


  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
    if (this.playbackRateSupported()) {
      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
    }
  };

  return PlaybackRateMenuButton;
}(MenuButton);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

Component.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);

/**
 * @file spacer.js
 */
/**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @extends Component
 */

var Spacer = function (_Component) {
  inherits(Spacer, _Component);

  function Spacer() {
    classCallCheck(this, Spacer);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  Spacer.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  Spacer.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: this.buildCSSClass()
    });
  };

  return Spacer;
}(Component);

Component.registerComponent('Spacer', Spacer);

/**
 * @file custom-control-spacer.js
 */
/**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @extends Spacer
 */

var CustomControlSpacer = function (_Spacer) {
  inherits(CustomControlSpacer, _Spacer);

  function CustomControlSpacer() {
    classCallCheck(this, CustomControlSpacer);
    return possibleConstructorReturn(this, _Spacer.apply(this, arguments));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
  };

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  CustomControlSpacer.prototype.createEl = function createEl() {
    var el = _Spacer.prototype.createEl.call(this, {
      className: this.buildCSSClass()
    });

    // No-flex/table-cell mode requires there be some content
    // in the cell to fill the remaining space of the table.
    el.innerHTML = '\xA0';
    return el;
  };

  return CustomControlSpacer;
}(Spacer);

Component.registerComponent('CustomControlSpacer', CustomControlSpacer);

/**
 * @file control-bar.js
 */
// Required children
/**
 * Container of main controls.
 *
 * @extends Component
 */

var ControlBar = function (_Component) {
  inherits(ControlBar, _Component);

  function ControlBar() {
    classCallCheck(this, ControlBar);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  ControlBar.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'vjs-control-bar',
      dir: 'ltr'
    }, {
      // The control bar is a group, but we don't aria-label it to avoid
      //  over-announcing by JAWS
      role: 'group'
    });
  };

  return ControlBar;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


ControlBar.prototype.options_ = {
  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']
};

Component.registerComponent('ControlBar', ControlBar);

/**
 * @file error-display.js
 */
/**
 * A display that indicates an error has occurred. This means that the video
 * is unplayable.
 *
 * @extends ModalDialog
 */

var ErrorDisplay = function (_ModalDialog) {
  inherits(ErrorDisplay, _ModalDialog);

  /**
   * Creates an instance of this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  function ErrorDisplay(player, options) {
    classCallCheck(this, ErrorDisplay);

    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

    _this.on(player, 'error', _this.open);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   *
   * @deprecated Since version 5.
   */


  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
  };

  /**
   * Gets the localized error message based on the `Player`s error.
   *
   * @return {string}
   *         The `Player`s error message localized or an empty string.
   */


  ErrorDisplay.prototype.content = function content() {
    var error = this.player().error();

    return error ? this.localize(error.message) : '';
  };

  return ErrorDisplay;
}(ModalDialog);

/**
 * The default options for an `ErrorDisplay`.
 *
 * @private
 */


ErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {
  pauseOnOpen: false,
  fillAlways: true,
  temporary: false,
  uncloseable: true
});

Component.registerComponent('ErrorDisplay', ErrorDisplay);

/**
 * @file text-track-settings.js
 */
var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';

var COLOR_BLACK = ['#000', 'Black'];
var COLOR_BLUE = ['#00F', 'Blue'];
var COLOR_CYAN = ['#0FF', 'Cyan'];
var COLOR_GREEN = ['#0F0', 'Green'];
var COLOR_MAGENTA = ['#F0F', 'Magenta'];
var COLOR_RED = ['#F00', 'Red'];
var COLOR_WHITE = ['#FFF', 'White'];
var COLOR_YELLOW = ['#FF0', 'Yellow'];

var OPACITY_OPAQUE = ['1', 'Opaque'];
var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
var OPACITY_TRANS = ['0', 'Transparent'];

// Configuration for the various <select> elements in the DOM of this component.
//
// Possible keys include:
//
// `default`:
//   The default option index. Only needs to be provided if not zero.
// `parser`:
//   A function which is used to parse the value from the selected option in
//   a customized way.
// `selector`:
//   The selector used to find the associated <select> element.
var selectConfigs = {
  backgroundColor: {
    selector: '.vjs-bg-color > select',
    id: 'captions-background-color-%s',
    label: 'Color',
    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
  },

  backgroundOpacity: {
    selector: '.vjs-bg-opacity > select',
    id: 'captions-background-opacity-%s',
    label: 'Transparency',
    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
  },

  color: {
    selector: '.vjs-fg-color > select',
    id: 'captions-foreground-color-%s',
    label: 'Color',
    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
  },

  edgeStyle: {
    selector: '.vjs-edge-style > select',
    id: '%s',
    label: 'Text Edge Style',
    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
  },

  fontFamily: {
    selector: '.vjs-font-family > select',
    id: 'captions-font-family-%s',
    label: 'Font Family',
    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
  },

  fontPercent: {
    selector: '.vjs-font-percent > select',
    id: 'captions-font-size-%s',
    label: 'Font Size',
    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
    'default': 2,
    parser: function parser(v) {
      return v === '1.00' ? null : Number(v);
    }
  },

  textOpacity: {
    selector: '.vjs-text-opacity > select',
    id: 'captions-foreground-opacity-%s',
    label: 'Transparency',
    options: [OPACITY_OPAQUE, OPACITY_SEMI]
  },

  // Options for this object are defined below.
  windowColor: {
    selector: '.vjs-window-color > select',
    id: 'captions-window-color-%s',
    label: 'Color'
  },

  // Options for this object are defined below.
  windowOpacity: {
    selector: '.vjs-window-opacity > select',
    id: 'captions-window-opacity-%s',
    label: 'Transparency',
    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
  }
};

selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

/**
 * Get the actual value of an option.
 *
 * @param  {string} value
 *         The value to get
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */
function parseOptionValue(value, parser) {
  if (parser) {
    value = parser(value);
  }

  if (value && value !== 'none') {
    return value;
  }
}

/**
 * Gets the value of the selected <option> element within a <select> element.
 *
 * @param  {Element} el
 *         the element to look in
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */
function getSelectedOptionValue(el, parser) {
  var value = el.options[el.options.selectedIndex].value;

  return parseOptionValue(value, parser);
}

/**
 * Sets the selected <option> element within a <select> element based on a
 * given value.
 *
 * @param {Element} el
 *        The element to look in.
 *
 * @param {string} value
 *        the property to look on.
 *
 * @param {Function} [parser]
 *        Optional function to adjust the value before comparing.
 *
 * @private
 */
function setSelectedOption(el, value, parser) {
  if (!value) {
    return;
  }

  for (var i = 0; i < el.options.length; i++) {
    if (parseOptionValue(el.options[i].value, parser) === value) {
      el.selectedIndex = i;
      break;
    }
  }
}

/**
 * Manipulate Text Tracks settings.
 *
 * @extends ModalDialog
 */

var TextTrackSettings = function (_ModalDialog) {
  inherits(TextTrackSettings, _ModalDialog);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *         The key/value store of player options.
   */
  function TextTrackSettings(player, options) {
    classCallCheck(this, TextTrackSettings);

    options.temporary = false;

    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

    _this.updateDisplay = bind(_this, _this.updateDisplay);

    // fill the modal and pretend we have opened it
    _this.fill();
    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;

    _this.endDialog = createEl('p', {
      className: 'vjs-control-text',
      textContent: _this.localize('End of dialog window.')
    });
    _this.el().appendChild(_this.endDialog);

    _this.setDefaults();

    // Grab `persistTextTrackSettings` from the player options if not passed in child options
    if (options.persistTextTrackSettings === undefined) {
      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
    }

    _this.on(_this.$('.vjs-done-button'), 'click', function () {
      _this.saveSettings();
      _this.close();
    });

    _this.on(_this.$('.vjs-default-button'), 'click', function () {
      _this.setDefaults();
      _this.updateDisplay();
    });

    each(selectConfigs, function (config) {
      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
    });

    if (_this.options_.persistTextTrackSettings) {
      _this.restoreSettings();
    }
    return _this;
  }

  TextTrackSettings.prototype.dispose = function dispose() {
    this.endDialog = null;

    _ModalDialog.prototype.dispose.call(this);
  };

  /**
   * Create a <select> element with configured options.
   *
   * @param {string} key
   *        Configuration key to use during creation.
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
    var _this2 = this;

    var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';

    var config = selectConfigs[key];
    var id = config.id.replace('%s', this.id_);

    return ['<' + type + ' id="' + id + '" class="' + (type === 'label' ? 'vjs-label' : '') + '">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby="' + (legendId !== '' ? legendId + ' ' : '') + id + '">'].concat(config.options.map(function (o) {
      var optionId = id + '-' + o[1];

      return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + (legendId !== '' ? legendId + ' ' : '') + id + ' ' + optionId + '">', _this2.localize(o[1]), '</option>'].join('');
    })).concat('</select>').join('');
  };

  /**
   * Create foreground color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
    var legendId = 'captions-text-legend-' + this.id_;

    return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
  };

  /**
   * Create background color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
    var legendId = 'captions-background-' + this.id_;

    return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
  };

  /**
   * Create window color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */


  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
    var legendId = 'captions-window-' + this.id_;

    return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
  };

  /**
   * Create color elements for the component
   *
   * @return {Element}
   *         The element that was created
   *
   * @private
   */


  TextTrackSettings.prototype.createElColors_ = function createElColors_() {
    return createEl('div', {
      className: 'vjs-track-settings-colors',
      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
    });
  };

  /**
   * Create font elements for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */


  TextTrackSettings.prototype.createElFont_ = function createElFont_() {
    return createEl('div', {
      className: 'vjs-track-settings-font',
      innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
    });
  };

  /**
   * Create controls for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */


  TextTrackSettings.prototype.createElControls_ = function createElControls_() {
    var defaultsDescription = this.localize('restore all settings to the default values');

    return createEl('div', {
      className: 'vjs-track-settings-controls',
      innerHTML: ['<button class="vjs-default-button" title="' + defaultsDescription + '">', this.localize('Reset'), '<span class="vjs-control-text"> ' + defaultsDescription + '</span>', '</button>', '<button class="vjs-done-button">' + this.localize('Done') + '</button>'].join('')
    });
  };

  TextTrackSettings.prototype.content = function content() {
    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
  };

  TextTrackSettings.prototype.label = function label() {
    return this.localize('Caption Settings Dialog');
  };

  TextTrackSettings.prototype.description = function description() {
    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
  };

  TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {
    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';
  };

  /**
   * Gets an object of text track settings (or null).
   *
   * @return {Object}
   *         An object with config values parsed from the DOM or localStorage.
   */


  TextTrackSettings.prototype.getValues = function getValues() {
    var _this3 = this;

    return reduce(selectConfigs, function (accum, config, key) {
      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

      if (value !== undefined) {
        accum[key] = value;
      }

      return accum;
    }, {});
  };

  /**
   * Sets text track settings from an object of values.
   *
   * @param {Object} values
   *        An object with config values parsed from the DOM or localStorage.
   */


  TextTrackSettings.prototype.setValues = function setValues(values) {
    var _this4 = this;

    each(selectConfigs, function (config, key) {
      setSelectedOption(_this4.$(config.selector), values[key], config.parser);
    });
  };

  /**
   * Sets all `<select>` elements to their default values.
   */


  TextTrackSettings.prototype.setDefaults = function setDefaults() {
    var _this5 = this;

    each(selectConfigs, function (config) {
      var index = config.hasOwnProperty('default') ? config['default'] : 0;

      _this5.$(config.selector).selectedIndex = index;
    });
  };

  /**
   * Restore texttrack settings from localStorage
   */


  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
    var values = void 0;

    try {
      values = JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY));
    } catch (err) {
      log$1.warn(err);
    }

    if (values) {
      this.setValues(values);
    }
  };

  /**
   * Save text track settings to localStorage
   */


  TextTrackSettings.prototype.saveSettings = function saveSettings() {
    if (!this.options_.persistTextTrackSettings) {
      return;
    }

    var values = this.getValues();

    try {
      if (Object.keys(values).length) {
        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
      } else {
        window.localStorage.removeItem(LOCAL_STORAGE_KEY);
      }
    } catch (err) {
      log$1.warn(err);
    }
  };

  /**
   * Update display of text track settings
   */


  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
    var ttDisplay = this.player_.getChild('textTrackDisplay');

    if (ttDisplay) {
      ttDisplay.updateDisplay();
    }
  };

  /**
   * conditionally blur the element and refocus the captions button
   *
   * @private
   */


  TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {
    this.previouslyActiveEl_ = null;
    this.off(document, 'keydown', this.handleKeyDown);

    var cb = this.player_.controlBar;
    var subsCapsBtn = cb && cb.subsCapsButton;
    var ccBtn = cb && cb.captionsButton;

    if (subsCapsBtn) {
      subsCapsBtn.focus();
    } else if (ccBtn) {
      ccBtn.focus();
    }
  };

  return TextTrackSettings;
}(ModalDialog);

Component.registerComponent('TextTrackSettings', TextTrackSettings);

/**
 * @file resize-manager.js
 */
/**
 * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
 *
 * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
 *
 * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
 * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
 * @example <caption>How to disable the resize manager</caption>
 * const player = videojs('#vid', {
 *   resizeManager: false
 * });
 *
 * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
 *
 * @extends Component
 */

var ResizeManager = function (_Component) {
  inherits(ResizeManager, _Component);

  /**
   * Create the ResizeManager.
   *
   * @param {Object} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of ResizeManager options.
   *
   * @param {Object} [options.ResizeObserver]
   *        A polyfill for ResizeObserver can be passed in here.
   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
   */
  function ResizeManager(player, options) {
    classCallCheck(this, ResizeManager);

    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window.ResizeObserver;

    // if `null` was passed, we want to disable the ResizeObserver
    if (options.ResizeObserver === null) {
      RESIZE_OBSERVER_AVAILABLE = false;
    }

    // Only create an element when ResizeObserver isn't available
    var options_ = mergeOptions({ createEl: !RESIZE_OBSERVER_AVAILABLE }, options);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_));

    _this.ResizeObserver = options.ResizeObserver || window.ResizeObserver;
    _this.loadListener_ = null;
    _this.resizeObserver_ = null;
    _this.debouncedHandler_ = debounce(function () {
      _this.resizeHandler();
    }, 100, false, player);

    if (RESIZE_OBSERVER_AVAILABLE) {
      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);
      _this.resizeObserver_.observe(player.el());
    } else {
      _this.loadListener_ = function () {
        if (_this.el_.contentWindow) {
          on(_this.el_.contentWindow, 'resize', _this.debouncedHandler_);
        }
        _this.off('load', _this.loadListener_);
      };

      _this.on('load', _this.loadListener_);
    }
    return _this;
  }

  ResizeManager.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'iframe', {
      className: 'vjs-resize-manager'
    });
  };

  /**
   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
   *
   * @fires Player#playerresize
   */


  ResizeManager.prototype.resizeHandler = function resizeHandler() {
    /**
     * Called when the player size has changed
     *
     * @event Player#playerresize
     * @type {EventTarget~Event}
     */
    this.player_.trigger('playerresize');
  };

  ResizeManager.prototype.dispose = function dispose() {
    if (this.resizeObserver_) {
      this.resizeObserver_.unobserve(this.player_.el());
      this.resizeObserver_.disconnect();
    }

    if (this.el_ && this.el_.contentWindow) {
      off(this.el_.contentWindow, 'resize', this.debouncedHandler_);
    }

    if (this.loadListener_) {
      this.off('load', this.loadListener_);
    }

    this.ResizeObserver = null;
    this.resizeObserver = null;
    this.debouncedHandler_ = null;
    this.loadListener_ = null;
  };

  return ResizeManager;
}(Component);

Component.registerComponent('ResizeManager', ResizeManager);

var _templateObject$2 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);

/**
 * @file html5.js
 */
/**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 *
 * @mixes Tech~SouceHandlerAdditions
 * @extends Tech
 */

var Html5 = function (_Tech) {
  inherits(Html5, _Tech);

  /**
   * Create an instance of this Tech.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} ready
   *        Callback function to call when the `HTML5` Tech is ready.
   */
  function Html5(options, ready) {
    classCallCheck(this, Html5);

    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));

    var source = options.source;
    var crossoriginTracks = false;

    // Set the source if one is provided
    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
    // anyway so the error gets fired.
    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
      _this.setSource(source);
    } else {
      _this.handleLateInit_(_this.el_);
    }

    if (_this.el_.hasChildNodes()) {

      var nodes = _this.el_.childNodes;
      var nodesLength = nodes.length;
      var removeNodes = [];

      while (nodesLength--) {
        var node = nodes[nodesLength];
        var nodeName = node.nodeName.toLowerCase();

        if (nodeName === 'track') {
          if (!_this.featuresNativeTextTracks) {
            // Empty video tag tracks so the built-in player doesn't use them also.
            // This may not be fast enough to stop HTML5 browsers from reading the tags
            // so we'll need to turn off any default tracks if we're manually doing
            // captions and subtitles. videoElement.textTracks
            removeNodes.push(node);
          } else {
            // store HTMLTrackElement and TextTrack to remote list
            _this.remoteTextTrackEls().addTrackElement_(node);
            _this.remoteTextTracks().addTrack(node.track);
            _this.textTracks().addTrack(node.track);
            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {
              crossoriginTracks = true;
            }
          }
        }
      }

      for (var i = 0; i < removeNodes.length; i++) {
        _this.el_.removeChild(removeNodes[i]);
      }
    }

    _this.proxyNativeTracks_();
    if (_this.featuresNativeTextTracks && crossoriginTracks) {
      log$1.warn(tsml(_templateObject$2));
    }

    // prevent iOS Safari from disabling metadata text tracks during native playback
    _this.restoreMetadataTracksInIOSNativePlayer_();

    // Determine if native controls should be used
    // Our goal should be to get the custom controls on mobile solid everywhere
    // so we can remove this all together. Right now this will block custom
    // controls on touch enabled laptops like the Chrome Pixel
    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
      _this.setControls(true);
    }

    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
    // into a `fullscreenchange` event
    _this.proxyWebkitFullscreen_();

    _this.triggerReady();
    return _this;
  }

  /**
   * Dispose of `HTML5` media element and remove all tracks.
   */


  Html5.prototype.dispose = function dispose() {
    Html5.disposeMediaElement(this.el_);
    this.options_ = null;

    // tech will handle clearing of the emulated track list
    _Tech.prototype.dispose.call(this);
  };

  /**
   * When a captions track is enabled in the iOS Safari native player, all other
   * tracks are disabled (including metadata tracks), which nulls all of their
   * associated cue points. This will restore metadata tracks to their pre-fullscreen
   * state in those cases so that cue points are not needlessly lost.
   *
   * @private
   */


  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {
    var textTracks = this.textTracks();
    var metadataTracksPreFullscreenState = void 0;

    // captures a snapshot of every metadata track's current state
    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {
      metadataTracksPreFullscreenState = [];

      for (var i = 0; i < textTracks.length; i++) {
        var track = textTracks[i];

        if (track.kind === 'metadata') {
          metadataTracksPreFullscreenState.push({
            track: track,
            storedMode: track.mode
          });
        }
      }
    };

    // snapshot each metadata track's initial state, and update the snapshot
    // each time there is a track 'change' event
    takeMetadataTrackSnapshot();
    textTracks.addEventListener('change', takeMetadataTrackSnapshot);

    this.on('dispose', function () {
      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
    });

    var restoreTrackMode = function restoreTrackMode() {
      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {
        var storedTrack = metadataTracksPreFullscreenState[i];

        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {
          storedTrack.track.mode = storedTrack.storedMode;
        }
      }
      // we only want this handler to be executed on the first 'change' event
      textTracks.removeEventListener('change', restoreTrackMode);
    };

    // when we enter fullscreen playback, stop updating the snapshot and
    // restore all track modes to their pre-fullscreen state
    this.on('webkitbeginfullscreen', function () {
      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);

      // remove the listener before adding it just in case it wasn't previously removed
      textTracks.removeEventListener('change', restoreTrackMode);
      textTracks.addEventListener('change', restoreTrackMode);
    });

    // start updating the snapshot again after leaving fullscreen
    this.on('webkitendfullscreen', function () {
      // remove the listener before adding it just in case it wasn't previously removed
      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
      textTracks.addEventListener('change', takeMetadataTrackSnapshot);

      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
      textTracks.removeEventListener('change', restoreTrackMode);
    });
  };

  /**
   * Proxy all native track list events to our track lists if the browser we are playing
   * in supports that type of track list.
   *
   * @private
   */


  Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {
    var _this2 = this;

    NORMAL.names.forEach(function (name) {
      var props = NORMAL[name];
      var elTracks = _this2.el()[props.getterName];
      var techTracks = _this2[props.getterName]();

      if (!_this2['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
        return;
      }
      var listeners = {
        change: function change(e) {
          techTracks.trigger({
            type: 'change',
            target: techTracks,
            currentTarget: techTracks,
            srcElement: techTracks
          });
        },
        addtrack: function addtrack(e) {
          techTracks.addTrack(e.track);
        },
        removetrack: function removetrack(e) {
          techTracks.removeTrack(e.track);
        }
      };
      var removeOldTracks = function removeOldTracks() {
        var removeTracks = [];

        for (var i = 0; i < techTracks.length; i++) {
          var found = false;

          for (var j = 0; j < elTracks.length; j++) {
            if (elTracks[j] === techTracks[i]) {
              found = true;
              break;
            }
          }

          if (!found) {
            removeTracks.push(techTracks[i]);
          }
        }

        while (removeTracks.length) {
          techTracks.removeTrack(removeTracks.shift());
        }
      };

      Object.keys(listeners).forEach(function (eventName) {
        var listener = listeners[eventName];

        elTracks.addEventListener(eventName, listener);
        _this2.on('dispose', function (e) {
          return elTracks.removeEventListener(eventName, listener);
        });
      });

      // Remove (native) tracks that are not used anymore
      _this2.on('loadstart', removeOldTracks);
      _this2.on('dispose', function (e) {
        return _this2.off('loadstart', removeOldTracks);
      });
    });
  };

  /**
   * Create the `Html5` Tech's DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  Html5.prototype.createEl = function createEl$$1() {
    var el = this.options_.tag;

    // Check if this browser supports moving the element into the box.
    // On the iPhone video will break if you move the element,
    // So we have to create a brand new element.
    // If we ingested the player div, we do not need to move the media element.
    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {

      // If the original tag is still there, clone and remove it.
      if (el) {
        var clone = el.cloneNode(true);

        if (el.parentNode) {
          el.parentNode.insertBefore(clone, el);
        }
        Html5.disposeMediaElement(el);
        el = clone;
      } else {
        el = document.createElement('video');

        // determine if native controls should be used
        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
        var attributes = mergeOptions({}, tagAttributes);

        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
          delete attributes.controls;
        }

        setAttributes(el, assign(attributes, {
          id: this.options_.techId,
          'class': 'vjs-tech'
        }));
      }

      el.playerId = this.options_.playerId;
    }

    if (typeof this.options_.preload !== 'undefined') {
      setAttribute(el, 'preload', this.options_.preload);
    }

    // Update specific tag settings, in case they were overridden
    // `autoplay` has to be *last* so that `muted` and `playsinline` are present
    // when iOS/Safari or other browsers attempt to autoplay.
    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];

    for (var i = 0; i < settingsAttrs.length; i++) {
      var attr = settingsAttrs[i];
      var value = this.options_[attr];

      if (typeof value !== 'undefined') {
        if (value) {
          setAttribute(el, attr, attr);
        } else {
          removeAttribute(el, attr);
        }
        el[attr] = value;
      }
    }

    return el;
  };

  /**
   * This will be triggered if the loadstart event has already fired, before videojs was
   * ready. Two known examples of when this can happen are:
   * 1. If we're loading the playback object after it has started loading
   * 2. The media is already playing the (often with autoplay on) then
   *
   * This function will fire another loadstart so that videojs can catchup.
   *
   * @fires Tech#loadstart
   *
   * @return {undefined}
   *         returns nothing.
   */


  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
    if (el.networkState === 0 || el.networkState === 3) {
      // The video element hasn't started loading the source yet
      // or didn't find a source
      return;
    }

    if (el.readyState === 0) {
      // NetworkState is set synchronously BUT loadstart is fired at the
      // end of the current stack, usually before setInterval(fn, 0).
      // So at this point we know loadstart may have already fired or is
      // about to fire, and either way the player hasn't seen it yet.
      // We don't want to fire loadstart prematurely here and cause a
      // double loadstart so we'll wait and see if it happens between now
      // and the next loop, and fire it if not.
      // HOWEVER, we also want to make sure it fires before loadedmetadata
      // which could also happen between now and the next loop, so we'll
      // watch for that also.
      var loadstartFired = false;
      var setLoadstartFired = function setLoadstartFired() {
        loadstartFired = true;
      };

      this.on('loadstart', setLoadstartFired);

      var triggerLoadstart = function triggerLoadstart() {
        // We did miss the original loadstart. Make sure the player
        // sees loadstart before loadedmetadata
        if (!loadstartFired) {
          this.trigger('loadstart');
        }
      };

      this.on('loadedmetadata', triggerLoadstart);

      this.ready(function () {
        this.off('loadstart', setLoadstartFired);
        this.off('loadedmetadata', triggerLoadstart);

        if (!loadstartFired) {
          // We did miss the original native loadstart. Fire it now.
          this.trigger('loadstart');
        }
      });

      return;
    }

    // From here on we know that loadstart already fired and we missed it.
    // The other readyState events aren't as much of a problem if we double
    // them, so not going to go to as much trouble as loadstart to prevent
    // that unless we find reason to.
    var eventsToTrigger = ['loadstart'];

    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
    eventsToTrigger.push('loadedmetadata');

    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
    if (el.readyState >= 2) {
      eventsToTrigger.push('loadeddata');
    }

    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
    if (el.readyState >= 3) {
      eventsToTrigger.push('canplay');
    }

    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
    if (el.readyState >= 4) {
      eventsToTrigger.push('canplaythrough');
    }

    // We still need to give the player time to add event listeners
    this.ready(function () {
      eventsToTrigger.forEach(function (type) {
        this.trigger(type);
      }, this);
    });
  };

  /**
   * Set current time for the `HTML5` tech.
   *
   * @param {number} seconds
   *        Set the current time of the media to this.
   */


  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
    try {
      this.el_.currentTime = seconds;
    } catch (e) {
      log$1(e, 'Video is not ready. (Video.js)');
      // this.warning(VideoJS.warnings.videoNotReady);
    }
  };

  /**
   * Get the current duration of the HTML5 media element.
   *
   * @return {number}
   *         The duration of the media or 0 if there is no duration.
   */


  Html5.prototype.duration = function duration() {
    var _this3 = this;

    // Android Chrome will report duration as Infinity for VOD HLS until after
    // playback has started, which triggers the live display erroneously.
    // Return NaN if playback has not started and trigger a durationupdate once
    // the duration can be reliably known.
    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
      // Wait for the first `timeupdate` with currentTime > 0 - there may be
      // several with 0
      var checkProgress = function checkProgress() {
        if (_this3.el_.currentTime > 0) {
          // Trigger durationchange for genuinely live video
          if (_this3.el_.duration === Infinity) {
            _this3.trigger('durationchange');
          }
          _this3.off('timeupdate', checkProgress);
        }
      };

      this.on('timeupdate', checkProgress);
      return NaN;
    }
    return this.el_.duration || NaN;
  };

  /**
   * Get the current width of the HTML5 media element.
   *
   * @return {number}
   *         The width of the HTML5 media element.
   */


  Html5.prototype.width = function width() {
    return this.el_.offsetWidth;
  };

  /**
   * Get the current height of the HTML5 media element.
   *
   * @return {number}
   *         The heigth of the HTML5 media element.
   */


  Html5.prototype.height = function height() {
    return this.el_.offsetHeight;
  };

  /**
   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
   * `fullscreenchange` event.
   *
   * @private
   * @fires fullscreenchange
   * @listens webkitendfullscreen
   * @listens webkitbeginfullscreen
   * @listens webkitbeginfullscreen
   */


  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
    var _this4 = this;

    if (!('webkitDisplayingFullscreen' in this.el_)) {
      return;
    }

    var endFn = function endFn() {
      this.trigger('fullscreenchange', { isFullscreen: false });
    };

    var beginFn = function beginFn() {
      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {
        this.one('webkitendfullscreen', endFn);

        this.trigger('fullscreenchange', { isFullscreen: true });
      }
    };

    this.on('webkitbeginfullscreen', beginFn);
    this.on('dispose', function () {
      _this4.off('webkitbeginfullscreen', beginFn);
      _this4.off('webkitendfullscreen', endFn);
    });
  };

  /**
   * Check if fullscreen is supported on the current playback device.
   *
   * @return {boolean}
   *         - True if fullscreen is supported.
   *         - False if fullscreen is not supported.
   */


  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
    if (typeof this.el_.webkitEnterFullScreen === 'function') {
      var userAgent = window.navigator && window.navigator.userAgent || '';

      // Seems to be broken in Chromium/Chrome && Safari in Leopard
      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
        return true;
      }
    }
    return false;
  };

  /**
   * Request that the `HTML5` Tech enter fullscreen.
   */


  Html5.prototype.enterFullScreen = function enterFullScreen() {
    var video = this.el_;

    if (video.paused && video.networkState <= video.HAVE_METADATA) {
      // attempt to prime the video element for programmatic access
      // this isn't necessary on the desktop but shouldn't hurt
      this.el_.play();

      // playing and pausing synchronously during the transition to fullscreen
      // can get iOS ~6.1 devices into a play/pause loop
      this.setTimeout(function () {
        video.pause();
        video.webkitEnterFullScreen();
      }, 0);
    } else {
      video.webkitEnterFullScreen();
    }
  };

  /**
   * Request that the `HTML5` Tech exit fullscreen.
   */


  Html5.prototype.exitFullScreen = function exitFullScreen() {
    this.el_.webkitExitFullScreen();
  };

  /**
   * A getter/setter for the `Html5` Tech's source object.
   * > Note: Please use {@link Html5#setSource}
   *
   * @param {Tech~SourceObject} [src]
   *        The source object you want to set on the `HTML5` techs element.
   *
   * @return {Tech~SourceObject|undefined}
   *         - The current source object when a source is not passed in.
   *         - undefined when setting
   *
   * @deprecated Since version 5.
   */


  Html5.prototype.src = function src(_src) {
    if (_src === undefined) {
      return this.el_.src;
    }

    // Setting src through `src` instead of `setSrc` will be deprecated
    this.setSrc(_src);
  };

  /**
   * Reset the tech by removing all sources and then calling
   * {@link Html5.resetMediaElement}.
   */


  Html5.prototype.reset = function reset() {
    Html5.resetMediaElement(this.el_);
  };

  /**
   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
   * the HTML5 media element.
   *
   * @return {Tech~SourceObject}
   *         The current source object from the HTML5 tech. With a fallback to the
   *         elements source.
   */


  Html5.prototype.currentSrc = function currentSrc() {
    if (this.currentSource_) {
      return this.currentSource_.src;
    }
    return this.el_.currentSrc;
  };

  /**
   * Set controls attribute for the HTML5 media Element.
   *
   * @param {string} val
   *        Value to set the controls attribute to
   */


  Html5.prototype.setControls = function setControls(val) {
    this.el_.controls = !!val;
  };

  /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */


  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
    if (!this.featuresNativeTextTracks) {
      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
    }

    return this.el_.addTextTrack(kind, label, language);
  };

  /**
   * Creates either native TextTrack or an emulated TextTrack depending
   * on the value of `featuresNativeTextTracks`
   *
   * @param {Object} options
   *        The object should contain the options to intialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @param {boolean} [options.default]
   *        Default this track to on.
   *
   * @param {string} [options.id]
   *        The internal id to assign this track.
   *
   * @param {string} [options.src]
   *        A source url for the track.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */


  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
    if (!this.featuresNativeTextTracks) {
      return _Tech.prototype.createRemoteTextTrack.call(this, options);
    }
    var htmlTrackElement = document.createElement('track');

    if (options.kind) {
      htmlTrackElement.kind = options.kind;
    }
    if (options.label) {
      htmlTrackElement.label = options.label;
    }
    if (options.language || options.srclang) {
      htmlTrackElement.srclang = options.language || options.srclang;
    }
    if (options['default']) {
      htmlTrackElement['default'] = options['default'];
    }
    if (options.id) {
      htmlTrackElement.id = options.id;
    }
    if (options.src) {
      htmlTrackElement.src = options.src;
    }

    return htmlTrackElement;
  };

  /**
   * Creates a remote text track object and returns an html track element.
   *
   * @param {Object} options The object should contain values for
   * kind, language, label, and src (location of the WebVTT file)
   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
   * automatically removed from the video element whenever the source changes
   * @return {HTMLTrackElement} An Html Track Element.
   * This can be an emulated {@link HTMLTrackElement} or a native one.
   * @deprecated The default value of the "manualCleanup" parameter will default
   * to "false" in upcoming versions of Video.js
   */


  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);

    if (this.featuresNativeTextTracks) {
      this.el().appendChild(htmlTrackElement);
    }

    return htmlTrackElement;
  };

  /**
   * Remove remote `TextTrack` from `TextTrackList` object
   *
   * @param {TextTrack} track
   *        `TextTrack` object to remove
   */


  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
    _Tech.prototype.removeRemoteTextTrack.call(this, track);

    if (this.featuresNativeTextTracks) {
      var tracks = this.$$('track');

      var i = tracks.length;

      while (i--) {
        if (track === tracks[i] || track === tracks[i].track) {
          this.el().removeChild(tracks[i]);
        }
      }
    }
  };

  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   */


  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
    if (typeof this.el().getVideoPlaybackQuality === 'function') {
      return this.el().getVideoPlaybackQuality();
    }

    var videoPlaybackQuality = {};

    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {
      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
    }

    if (window.performance && typeof window.performance.now === 'function') {
      videoPlaybackQuality.creationTime = window.performance.now();
    } else if (window.performance && window.performance.timing && typeof window.performance.timing.navigationStart === 'number') {
      videoPlaybackQuality.creationTime = window.Date.now() - window.performance.timing.navigationStart;
    }

    return videoPlaybackQuality;
  };

  return Html5;
}(Tech);

/* HTML5 Support Testing ---------------------------------------------------- */

if (isReal()) {

  /**
   * Element for testing browser HTML5 media capabilities
   *
   * @type {Element}
   * @constant
   * @private
   */
  Html5.TEST_VID = document.createElement('video');
  var track = document.createElement('track');

  track.kind = 'captions';
  track.srclang = 'en';
  track.label = 'English';
  Html5.TEST_VID.appendChild(track);
}

/**
 * Check if HTML5 media is supported by this browser/device.
 *
 * @return {boolean}
 *         - True if HTML5 media is supported.
 *         - False if HTML5 media is not supported.
 */
Html5.isSupported = function () {
  // IE9 with no Media Player is a LIAR! (#984)
  try {
    Html5.TEST_VID.volume = 0.5;
  } catch (e) {
    return false;
  }

  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
};

/**
 * Check if the tech can support the given type
 *
 * @param {string} type
 *        The mimetype to check
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */
Html5.canPlayType = function (type) {
  return Html5.TEST_VID.canPlayType(type);
};

/**
 * Check if the tech can support the given source
 * @param {Object} srcObj
 *        The source object
 * @param {Object} options
 *        The options passed to the tech
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */
Html5.canPlaySource = function (srcObj, options) {
  return Html5.canPlayType(srcObj.type);
};

/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 *
 * @return {boolean}
 *         - True if volume can be controlled
 *         - False otherwise
 */
Html5.canControlVolume = function () {
  // IE will error if Windows Media Player not installed #3315
  try {
    var volume = Html5.TEST_VID.volume;

    Html5.TEST_VID.volume = volume / 2 + 0.1;
    return volume !== Html5.TEST_VID.volume;
  } catch (e) {
    return false;
  }
};

/**
 * Check if the playback rate can be changed in this browser/device.
 *
 * @return {boolean}
 *         - True if playback rate can be controlled
 *         - False otherwise
 */
Html5.canControlPlaybackRate = function () {
  // Playback rate API is implemented in Android Chrome, but doesn't do anything
  // https://github.com/videojs/video.js/issues/3180
  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
    return false;
  }
  // IE will error if Windows Media Player not installed #3315
  try {
    var playbackRate = Html5.TEST_VID.playbackRate;

    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
    return playbackRate !== Html5.TEST_VID.playbackRate;
  } catch (e) {
    return false;
  }
};

/**
 * Check to see if native `TextTrack`s are supported by this browser/device.
 *
 * @return {boolean}
 *         - True if native `TextTrack`s are supported.
 *         - False otherwise
 */
Html5.supportsNativeTextTracks = function () {
  return IS_ANY_SAFARI;
};

/**
 * Check to see if native `VideoTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `VideoTrack`s are supported.
 *        - False otherwise
 */
Html5.supportsNativeVideoTracks = function () {
  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
};

/**
 * Check to see if native `AudioTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `AudioTrack`s are supported.
 *        - False otherwise
 */
Html5.supportsNativeAudioTracks = function () {
  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
};

/**
 * An array of events available on the Html5 tech.
 *
 * @private
 * @type {Array}
 */
Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];

/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default {@link Html5.canControlVolume}
 */
Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the media
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default {@link Html5.canControlPlaybackRate}
 */
Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

/**
 * Boolean indicating whether the `HTML5` tech currently supports the media element
 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
 * false there. Everywhere else this should be true.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.movingMediaElementInDOM = !IS_IOS;

// TODO: Previous comment: No longer appears to be used. Can probably be removed.
//       Is this true?
/**
 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
 * when going into fullscreen.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.featuresFullscreenResize = true;

/**
 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
 * If this is false, manual `progress` events will be triggred instead.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.featuresProgressEvents = true;

/**
 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
 * If this is false, manual `timeupdate` events will be triggred instead.
 *
 * @default
 */
Html5.prototype.featuresTimeupdateEvents = true;

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeTextTracks}
 */
Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeVideoTracks}
 */
Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeAudioTracks}
 */
Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
var mp4RE = /^video\/mp4/i;

Html5.patchCanPlayType = function () {

  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
  // Firefox and Chrome report correctly
  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {
    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mpegurlRE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };

    // Override Android 2.2 and less canPlayType method which is broken
  } else if (IS_OLD_ANDROID) {
    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mp4RE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };
  }
};

Html5.unpatchCanPlayType = function () {
  var r = Html5.TEST_VID.constructor.prototype.canPlayType;

  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
  return r;
};

// by default, patch the media element
Html5.patchCanPlayType();

Html5.disposeMediaElement = function (el) {
  if (!el) {
    return;
  }

  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }

  // remove any child track or source nodes to prevent their loading
  while (el.hasChildNodes()) {
    el.removeChild(el.firstChild);
  }

  // remove any src reference. not setting `src=''` because that causes a warning
  // in firefox
  el.removeAttribute('src');

  // force the media element to update its loading state by calling load()
  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
  if (typeof el.load === 'function') {
    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function () {
      try {
        el.load();
      } catch (e) {
        // not supported
      }
    })();
  }
};

Html5.resetMediaElement = function (el) {
  if (!el) {
    return;
  }

  var sources = el.querySelectorAll('source');
  var i = sources.length;

  while (i--) {
    el.removeChild(sources[i]);
  }

  // remove any src reference.
  // not setting `src=''` because that throws an error
  el.removeAttribute('src');

  if (typeof el.load === 'function') {
    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function () {
      try {
        el.load();
      } catch (e) {
        // satisfy linter
      }
    })();
  }
};

/* Native HTML5 element property wrapping ----------------------------------- */
// Wrap native boolean attributes with getters that check both property and attribute
// The list is as followed:
// muted, defaultMuted, autoplay, controls, loop, playsinline
[
/**
 * Get the value of `muted` from the media element. `muted` indicates
 * that the volume for the media should be set to silent. This does not actually change
 * the `volume` attribute.
 *
 * @method Html5#muted
 * @return {boolean}
 *         - True if the value of `volume` should be ignored and the audio set to silent.
 *         - False if the value of `volume` should be used.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */
'muted',

/**
 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
 * whether the media should start muted or not. Only changes the default state of the
 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
 * current state.
 *
 * @method Html5#defaultMuted
 * @return {boolean}
 *         - The value of `defaultMuted` from the media element.
 *         - True indicates that the media should start muted.
 *         - False indicates that the media should not start muted
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */
'defaultMuted',

/**
 * Get the value of `autoplay` from the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#autoplay
 * @return {boolean}
 *         - The value of `autoplay` from the media element.
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */
'autoplay',

/**
 * Get the value of `controls` from the media element. `controls` indicates
 * whether the native media controls should be shown or hidden.
 *
 * @method Html5#controls
 * @return {boolean}
 *         - The value of `controls` from the media element.
 *         - True indicates that native controls should be showing.
 *         - False indicates that native controls should be hidden.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
 */
'controls',

/**
 * Get the value of `loop` from the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#loop
 * @return {boolean}
 *         - The value of `loop` from the media element.
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */
'loop',

/**
 * Get the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#playsinline
 * @return {boolean}
 *         - The value of `playsinline` from the media element.
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */
'playsinline'].forEach(function (prop) {
  Html5.prototype[prop] = function () {
    return this.el_[prop] || this.el_.hasAttribute(prop);
  };
});

// Wrap native boolean attributes with setters that set both property and attribute
// The list is as followed:
// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
// setControls is special-cased above
[
/**
 * Set the value of `muted` on the media element. `muted` indicates that the current
 * audio level should be silent.
 *
 * @method Html5#setMuted
 * @param {boolean} muted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */
'muted',

/**
 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
 * audio level should be silent, but will only effect the muted level on intial playback..
 *
 * @method Html5.prototype.setDefaultMuted
 * @param {boolean} defaultMuted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */
'defaultMuted',

/**
 * Set the value of `autoplay` on the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#setAutoplay
 * @param {boolean} autoplay
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */
'autoplay',

/**
 * Set the value of `loop` on the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#setLoop
 * @param {boolean} loop
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */
'loop',

/**
 * Set the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#setPlaysinline
 * @param {boolean} playsinline
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */
'playsinline'].forEach(function (prop) {
  Html5.prototype['set' + toTitleCase(prop)] = function (v) {
    this.el_[prop] = v;

    if (v) {
      this.el_.setAttribute(prop, prop);
    } else {
      this.el_.removeAttribute(prop);
    }
  };
});

// Wrap native properties with a getter
// The list is as followed
// paused, currentTime, buffered, volume, poster, preload, error, seeking
// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState
// readyState, videoWidth, videoHeight
[
/**
 * Get the value of `paused` from the media element. `paused` indicates whether the media element
 * is currently paused or not.
 *
 * @method Html5#paused
 * @return {boolean}
 *         The value of `paused` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
 */
'paused',

/**
 * Get the value of `currentTime` from the media element. `currentTime` indicates
 * the current second that the media is at in playback.
 *
 * @method Html5#currentTime
 * @return {number}
 *         The value of `currentTime` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
 */
'currentTime',

/**
 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
 * object that represents the parts of the media that are already downloaded and
 * available for playback.
 *
 * @method Html5#buffered
 * @return {TimeRange}
 *         The value of `buffered` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
 */
'buffered',

/**
 * Get the value of `volume` from the media element. `volume` indicates
 * the current playback volume of audio for a media. `volume` will be a value from 0
 * (silent) to 1 (loudest and default).
 *
 * @method Html5#volume
 * @return {number}
 *         The value of `volume` from the media element. Value will be between 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */
'volume',

/**
 * Get the value of `poster` from the media element. `poster` indicates
 * that the url of an image file that can/will be shown when no media data is available.
 *
 * @method Html5#poster
 * @return {string}
 *         The value of `poster` from the media element. Value will be a url to an
 *         image.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
 */
'poster',

/**
 * Get the value of `preload` from the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#preload
 * @return {string}
 *         The value of `preload` from the media element. Will be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */
'preload',

/**
 * Get the value of the `error` from the media element. `error` indicates any
 * MediaError that may have occured during playback. If error returns null there is no
 * current error.
 *
 * @method Html5#error
 * @return {MediaError|null}
 *         The value of `error` from the media element. Will be `MediaError` if there
 *         is a current error and null otherwise.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
 */
'error',

/**
 * Get the value of `seeking` from the media element. `seeking` indicates whether the
 * media is currently seeking to a new position or not.
 *
 * @method Html5#seeking
 * @return {boolean}
 *         - The value of `seeking` from the media element.
 *         - True indicates that the media is currently seeking to a new position.
 *         - Flase indicates that the media is not seeking to a new position at this time.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
 */
'seeking',

/**
 * Get the value of `seekable` from the media element. `seekable` returns a
 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
 *
 * @method Html5#seekable
 * @return {TimeRange}
 *         The value of `seekable` from the media element. A `TimeRange` object
 *         indicating the current ranges of time that can be seeked to.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
 */
'seekable',

/**
 * Get the value of `ended` from the media element. `ended` indicates whether
 * the media has reached the end or not.
 *
 * @method Html5#ended
 * @return {boolean}
 *         - The value of `ended` from the media element.
 *         - True indicates that the media has ended.
 *         - False indicates that the media has not ended.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
 */
'ended',

/**
 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
 * the rate at which the media is currently playing back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#playbackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */
'playbackRate',

/**
 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
 * the rate at which the media is currently playing back. This value will not indicate the current
 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
 *
 * Examples:
 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.defaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */
'defaultPlaybackRate',

/**
 * Get the value of `played` from the media element. `played` returns a `TimeRange`
 * object representing points in the media timeline that have been played.
 *
 * @method Html5#played
 * @return {TimeRange}
 *         The value of `played` from the media element. A `TimeRange` object indicating
 *         the ranges of time that have been played.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
 */
'played',

/**
 * Get the value of `networkState` from the media element. `networkState` indicates
 * the current network state. It returns an enumeration from the following list:
 * - 0: NETWORK_EMPTY
 * - 1: NEWORK_IDLE
 * - 2: NETWORK_LOADING
 * - 3: NETWORK_NO_SOURCE
 *
 * @method Html5#networkState
 * @return {number}
 *         The value of `networkState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
 */
'networkState',

/**
 * Get the value of `readyState` from the media element. `readyState` indicates
 * the current state of the media element. It returns an enumeration from the
 * following list:
 * - 0: HAVE_NOTHING
 * - 1: HAVE_METADATA
 * - 2: HAVE_CURRENT_DATA
 * - 3: HAVE_FUTURE_DATA
 * - 4: HAVE_ENOUGH_DATA
 *
 * @method Html5#readyState
 * @return {number}
 *         The value of `readyState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
 */
'readyState',

/**
 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
 * the current width of the video in css pixels.
 *
 * @method Html5#videoWidth
 * @return {number}
 *         The value of `videoWidth` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */
'videoWidth',

/**
 * Get the value of `videoHeight` from the video element. `videoHeigth` indicates
 * the current height of the video in css pixels.
 *
 * @method Html5#videoHeight
 * @return {number}
 *         The value of `videoHeight` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */
'videoHeight'].forEach(function (prop) {
  Html5.prototype[prop] = function () {
    return this.el_[prop];
  };
});

// Wrap native properties with a setter in this format:
// set + toTitleCase(name)
// The list is as follows:
// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate
[
/**
 * Set the value of `volume` on the media element. `volume` indicates the current
 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
 * so on.
 *
 * @method Html5#setVolume
 * @param {number} percentAsDecimal
 *        The volume percent as a decimal. Valid range is from 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */
'volume',

/**
 * Set the value of `src` on the media element. `src` indicates the current
 * {@link Tech~SourceObject} for the media.
 *
 * @method Html5#setSrc
 * @param {Tech~SourceObject} src
 *        The source object to set as the current source.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
 */
'src',

/**
 * Set the value of `poster` on the media element. `poster` is the url to
 * an image file that can/will be shown when no media data is available.
 *
 * @method Html5#setPoster
 * @param {string} poster
 *        The url to an image that should be used as the `poster` for the media
 *        element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
 */
'poster',

/**
 * Set the value of `preload` on the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#setPreload
 * @param {string} preload
 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */
'preload',

/**
 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
 * the rate at which the media should play back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#setPlaybackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */
'playbackRate',

/**
 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
 * the rate at which the media should play back upon initial startup. Changing this value
 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
 *
 * Example Values:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.setDefaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
 */
'defaultPlaybackRate'].forEach(function (prop) {
  Html5.prototype['set' + toTitleCase(prop)] = function (v) {
    this.el_[prop] = v;
  };
});

// wrap native functions with a function
// The list is as follows:
// pause, load play
[
/**
 * A wrapper around the media elements `pause` function. This will call the `HTML5`
 * media elements `pause` function.
 *
 * @method Html5#pause
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
 */
'pause',

/**
 * A wrapper around the media elements `load` function. This will call the `HTML5`s
 * media element `load` function.
 *
 * @method Html5#load
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
 */
'load',

/**
 * A wrapper around the media elements `play` function. This will call the `HTML5`s
 * media element `play` function.
 *
 * @method Html5#play
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
 */
'play'].forEach(function (prop) {
  Html5.prototype[prop] = function () {
    return this.el_[prop]();
  };
});

Tech.withSourceHandlers(Html5);

/**
 * Native source handler for Html5, simply passes the source to the media element.
 *
 * @proprety {Tech~SourceObject} source
 *        The source object
 *
 * @proprety {Html5} tech
 *        The instance of the HTML5 tech.
 */
Html5.nativeSourceHandler = {};

/**
 * Check if the media element can play the given mime type.
 *
 * @param {string} type
 *        The mimetype to check
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string)
 */
Html5.nativeSourceHandler.canPlayType = function (type) {
  // IE9 on Windows 7 without MediaPlayer throws an error here
  // https://github.com/videojs/video.js/issues/519
  try {
    return Html5.TEST_VID.canPlayType(type);
  } catch (e) {
    return '';
  }
};

/**
 * Check if the media element can handle a source natively.
 *
 * @param {Tech~SourceObject} source
 *         The source object
 *
 * @param {Object} [options]
 *         Options to be passed to the tech.
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string).
 */
Html5.nativeSourceHandler.canHandleSource = function (source, options) {

  // If a type was provided we should rely on that
  if (source.type) {
    return Html5.nativeSourceHandler.canPlayType(source.type);

    // If no type, fall back to checking 'video/[EXTENSION]'
  } else if (source.src) {
    var ext = getFileExtension(source.src);

    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
  }

  return '';
};

/**
 * Pass the source to the native media element.
 *
 * @param {Tech~SourceObject} source
 *        The source object
 *
 * @param {Html5} tech
 *        The instance of the Html5 tech
 *
 * @param {Object} [options]
 *        The options to pass to the source
 */
Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
  tech.setSrc(source.src);
};

/**
 * A noop for the native dispose function, as cleanup is not needed.
 */
Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
Html5.registerSourceHandler(Html5.nativeSourceHandler);

Tech.registerTech('Html5', Html5);

var _templateObject$1 = taggedTemplateLiteralLoose(['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      '], ['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      ']);

/**
 * @file player.js
 */
// Subclasses Component
// The following imports are used only to ensure that the corresponding modules
// are always included in the video.js package. Importing the modules will
// execute them and they will register themselves with video.js.
// Import Html5 tech, at least for disposing the original video tag.
// The following tech events are simply re-triggered
// on the player when they happen
var TECH_EVENTS_RETRIGGER = [
/**
 * Fired while the user agent is downloading media data.
 *
 * @event Player#progress
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `progress` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechProgress_
 * @fires Player#progress
 * @listens Tech#progress
 */
'progress',

/**
 * Fires when the loading of an audio/video is aborted.
 *
 * @event Player#abort
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `abort` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechAbort_
 * @fires Player#abort
 * @listens Tech#abort
 */
'abort',

/**
 * Fires when the browser is intentionally not getting media data.
 *
 * @event Player#suspend
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechSuspend_
 * @fires Player#suspend
 * @listens Tech#suspend
 */
'suspend',

/**
 * Fires when the current playlist is empty.
 *
 * @event Player#emptied
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechEmptied_
 * @fires Player#emptied
 * @listens Tech#emptied
 */
'emptied',
/**
 * Fires when the browser is trying to get media data, but data is not available.
 *
 * @event Player#stalled
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechStalled_
 * @fires Player#stalled
 * @listens Tech#stalled
 */
'stalled',

/**
 * Fires when the browser has loaded meta data for the audio/video.
 *
 * @event Player#loadedmetadata
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoadedmetadata_
 * @fires Player#loadedmetadata
 * @listens Tech#loadedmetadata
 */
'loadedmetadata',

/**
 * Fires when the browser has loaded the current frame of the audio/video.
 *
 * @event Player#loadeddata
 * @type {event}
 */
/**
 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoaddeddata_
 * @fires Player#loadeddata
 * @listens Tech#loadeddata
 */
'loadeddata',

/**
 * Fires when the current playback position has changed.
 *
 * @event Player#timeupdate
 * @type {event}
 */
/**
 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTimeUpdate_
 * @fires Player#timeupdate
 * @listens Tech#timeupdate
 */
'timeupdate',

/**
 * Fires when the playing speed of the audio/video is changed
 *
 * @event Player#ratechange
 * @type {event}
 */
/**
 * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechRatechange_
 * @fires Player#ratechange
 * @listens Tech#ratechange
 */
'ratechange',

/**
 * Fires when the video's intrinsic dimensions change
 *
 * @event Player#resize
 * @type {event}
 */
/**
 * Retrigger the `resize` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechResize_
 * @fires Player#resize
 * @listens Tech#resize
 */
'resize',

/**
 * Fires when the volume has been changed
 *
 * @event Player#volumechange
 * @type {event}
 */
/**
 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechVolumechange_
 * @fires Player#volumechange
 * @listens Tech#volumechange
 */
'volumechange',

/**
 * Fires when the text track has been changed
 *
 * @event Player#texttrackchange
 * @type {event}
 */
/**
 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTexttrackchange_
 * @fires Player#texttrackchange
 * @listens Tech#texttrackchange
 */
'texttrackchange'];

/**
 * An instance of the `Player` class is created when any of the Video.js setup methods
 * are used to initialize a video.
 *
 * After an instance has been created it can be accessed globally in two ways:
 * 1. By calling `videojs('example_video_1');`
 * 2. By using it directly via  `videojs.players.example_video_1;`
 *
 * @extends Component
 */

var Player = function (_Component) {
  inherits(Player, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Element} tag
   *        The original video DOM element used for configuring options.
   *
   * @param {Object} [options]
   *        Object of option names and values.
   *
   * @param {Component~ReadyCallback} [ready]
   *        Ready callback function.
   */
  function Player(tag, options, ready) {
    classCallCheck(this, Player);

    // Make sure tag ID exists
    tag.id = tag.id || 'vjs_video_' + newGUID();

    // Set Options
    // The options argument overrides options set in the video tag
    // which overrides globally set options.
    // This latter part coincides with the load order
    // (tag must exist before Player)
    options = assign(Player.getTagSettings(tag), options);

    // Delay the initialization of children because we need to set up
    // player properties first, and can't use `this` before `super()`
    options.initChildren = false;

    // Same with creating the element
    options.createEl = false;

    // don't auto mixin the evented mixin
    options.evented = false;

    // we don't want the player to report touch activity on itself
    // see enableTouchActivity in Component
    options.reportTouchActivity = false;

    // If language is not set, get the closest lang attribute
    if (!options.language) {
      if (typeof tag.closest === 'function') {
        var closest = tag.closest('[lang]');

        if (closest && closest.getAttribute) {
          options.language = closest.getAttribute('lang');
        }
      } else {
        var element = tag;

        while (element && element.nodeType === 1) {
          if (getAttributes(element).hasOwnProperty('lang')) {
            options.language = element.getAttribute('lang');
            break;
          }
          element = element.parentNode;
        }
      }
    }

    // Run base component initializing with new options

    // Turn off API access because we're loading a new tech that might load asynchronously
    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

    _this.isReady_ = false;

    // Init state hasStarted_
    _this.hasStarted_ = false;

    // Init state userActive_
    _this.userActive_ = false;

    // if the global option object was accidentally blown away by
    // someone, bail early with an informative error
    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
    }

    // Store the original tag used to set options
    _this.tag = tag;

    // Store the tag attributes used to restore html5 element
    _this.tagAttributes = tag && getAttributes(tag);

    // Update current language
    _this.language(_this.options_.language);

    // Update Supported Languages
    if (options.languages) {
      // Normalise player option languages to lowercase
      var languagesToLower = {};

      Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {
        languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];
      });
      _this.languages_ = languagesToLower;
    } else {
      _this.languages_ = Player.prototype.options_.languages;
    }

    // Cache for video property values.
    _this.cache_ = {};

    // Set poster
    _this.poster_ = options.poster || '';

    // Set controls
    _this.controls_ = !!options.controls;

    // Set default values for lastVolume
    _this.cache_.lastVolume = 1;

    // Original tag settings stored in options
    // now remove immediately so native controls don't flash.
    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
    tag.controls = false;
    tag.removeAttribute('controls');

    /*
     * Store the internal state of scrubbing
     *
     * @private
     * @return {Boolean} True if the user is scrubbing
     */
    _this.scrubbing_ = false;

    _this.el_ = _this.createEl();

    // Make this an evented object and use `el_` as its event bus.
    evented(_this, { eventBusKey: 'el_' });

    // We also want to pass the original player options to each component and plugin
    // as well so they don't need to reach back into the player for options later.
    // We also need to do another copy of this.options_ so we don't end up with
    // an infinite loop.
    var playerOptionsCopy = mergeOptions(_this.options_);

    // Load plugins
    if (options.plugins) {
      var plugins = options.plugins;

      Object.keys(plugins).forEach(function (name$$1) {
        if (typeof this[name$$1] === 'function') {
          this[name$$1](plugins[name$$1]);
        } else {
          throw new Error('plugin "' + name$$1 + '" does not exist');
        }
      }, _this);
    }

    _this.options_.playerOptions = playerOptionsCopy;

    _this.middleware_ = [];

    _this.initChildren();

    // Set isAudio based on whether or not an audio tag was used
    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');

    // Update controls className. Can't do this when the controls are initially
    // set because the element doesn't exist yet.
    if (_this.controls()) {
      _this.addClass('vjs-controls-enabled');
    } else {
      _this.addClass('vjs-controls-disabled');
    }

    // Set ARIA label and region role depending on player type
    _this.el_.setAttribute('role', 'region');
    if (_this.isAudio()) {
      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));
    } else {
      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));
    }

    if (_this.isAudio()) {
      _this.addClass('vjs-audio');
    }

    if (_this.flexNotSupported_()) {
      _this.addClass('vjs-no-flex');
    }

    // TODO: Make this smarter. Toggle user state between touching/mousing
    // using events, since devices can have both touch and mouse events.
    // if (browser.TOUCH_ENABLED) {
    //   this.addClass('vjs-touch-enabled');
    // }

    // iOS Safari has broken hover handling
    if (!IS_IOS) {
      _this.addClass('vjs-workinghover');
    }

    // Make player easily findable by ID
    Player.players[_this.id_] = _this;

    // Add a major version class to aid css in plugins
    var majorVersion = version.split('.')[0];

    _this.addClass('vjs-v' + majorVersion);

    // When the player is first initialized, trigger activity so components
    // like the control bar show themselves if needed
    _this.userActive(true);
    _this.reportUserActivity();
    _this.listenForUserActivity_();

    _this.on('fullscreenchange', _this.handleFullscreenChange_);
    _this.on('stageclick', _this.handleStageClick_);

    _this.changingSrc_ = false;
    _this.playWaitingForReady_ = false;
    _this.playOnLoadstart_ = null;

    _this.forceAutoplayInChrome_();
    return _this;
  }

  /**
   * Destroys the video player and does any necessary cleanup.
   *
   * This is especially helpful if you are dynamically adding and removing videos
   * to/from the DOM.
   *
   * @fires Player#dispose
   */


  Player.prototype.dispose = function dispose() {
    /**
     * Called when the player is being disposed of.
     *
     * @event Player#dispose
     * @type {EventTarget~Event}
     */
    this.trigger('dispose');
    // prevent dispose from being called twice
    this.off('dispose');

    if (this.styleEl_ && this.styleEl_.parentNode) {
      this.styleEl_.parentNode.removeChild(this.styleEl_);
      this.styleEl_ = null;
    }

    // Kill reference to this player
    Player.players[this.id_] = null;

    if (this.tag && this.tag.player) {
      this.tag.player = null;
    }

    if (this.el_ && this.el_.player) {
      this.el_.player = null;
    }

    if (this.tech_) {
      this.tech_.dispose();
    }

    if (this.playerElIngest_) {
      this.playerElIngest_ = null;
    }

    if (this.tag) {
      this.tag = null;
    }

    clearCacheForPlayer(this);

    // the actual .el_ is removed here
    _Component.prototype.dispose.call(this);
  };

  /**
   * Create the `Player`'s DOM element.
   *
   * @return {Element}
   *         The DOM element that gets created.
   */


  Player.prototype.createEl = function createEl$$1() {
    var tag = this.tag;
    var el = void 0;
    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');
    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';

    if (playerElIngest) {
      el = this.el_ = tag.parentNode;
    } else if (!divEmbed) {
      el = this.el_ = _Component.prototype.createEl.call(this, 'div');
    }

    // Copy over all the attributes from the tag, including ID and class
    // ID will now reference player box, not the video tag
    var attrs = getAttributes(tag);

    if (divEmbed) {
      el = this.el_ = tag;
      tag = this.tag = document.createElement('video');
      while (el.children.length) {
        tag.appendChild(el.firstChild);
      }

      if (!hasClass(el, 'video-js')) {
        addClass(el, 'video-js');
      }

      el.appendChild(tag);

      playerElIngest = this.playerElIngest_ = el;
    }

    // set tabindex to -1 so we could focus on the player element
    tag.setAttribute('tabindex', '-1');

    // Remove width/height attrs from tag so CSS can make it 100% width/height
    tag.removeAttribute('width');
    tag.removeAttribute('height');

    Object.getOwnPropertyNames(attrs).forEach(function (attr) {
      // workaround so we don't totally break IE7
      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
      if (attr === 'class') {
        el.className += ' ' + attrs[attr];

        if (divEmbed) {
          tag.className += ' ' + attrs[attr];
        }
      } else {
        el.setAttribute(attr, attrs[attr]);

        if (divEmbed) {
          tag.setAttribute(attr, attrs[attr]);
        }
      }
    });

    // Update tag id/class for use as HTML5 playback tech
    // Might think we should do this after embedding in container so .vjs-tech class
    // doesn't flash 100% width/height, but class only applies with .video-js parent
    tag.playerId = tag.id;
    tag.id += '_html5_api';
    tag.className = 'vjs-tech';

    // Make player findable on elements
    tag.player = el.player = this;
    // Default state of video is paused
    this.addClass('vjs-paused');

    // Add a style element in the player that we'll use to set the width/height
    // of the player in a way that's still overrideable by CSS, just like the
    // video element
    if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
      this.styleEl_ = createStyleElement('vjs-styles-dimensions');
      var defaultsStyleEl = $('.vjs-styles-defaults');
      var head = $('head');

      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
    }

    // Pass in the width/height/aspectRatio options which will update the style el
    this.width(this.options_.width);
    this.height(this.options_.height);
    this.fluid(this.options_.fluid);
    this.aspectRatio(this.options_.aspectRatio);

    // Hide any links within the video/audio tag, because IE doesn't hide them completely.
    var links = tag.getElementsByTagName('a');

    for (var i = 0; i < links.length; i++) {
      var linkEl = links.item(i);

      addClass(linkEl, 'vjs-hidden');
      linkEl.setAttribute('hidden', 'hidden');
    }

    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
    // keep track of the original for later so we can know if the source originally failed
    tag.initNetworkState_ = tag.networkState;

    // Wrap video tag in div (el/box) container
    if (tag.parentNode && !playerElIngest) {
      tag.parentNode.insertBefore(el, tag);
    }

    // insert the tag as the first child of the player element
    // then manually add it to the children array so that this.addChild
    // will work properly for other components
    //
    // Breaks iPhone, fixed in HTML5 setup.
    prependTo(tag, el);
    this.children_.unshift(tag);

    // Set lang attr on player to ensure CSS :lang() in consistent with player
    // if it's been set to something different to the doc
    this.el_.setAttribute('lang', this.language_);

    this.el_ = el;

    return el;
  };

  /**
   * A getter/setter for the `Player`'s width. Returns the player's configured value.
   * To get the current width use `currentWidth()`.
   *
   * @param {number} [value]
   *        The value to set the `Player`'s width to.
   *
   * @return {number}
   *         The current width of the `Player` when getting.
   */


  Player.prototype.width = function width(value) {
    return this.dimension('width', value);
  };

  /**
   * A getter/setter for the `Player`'s height. Returns the player's configured value.
   * To get the current height use `currentheight()`.
   *
   * @param {number} [value]
   *        The value to set the `Player`'s heigth to.
   *
   * @return {number}
   *         The current height of the `Player` when getting.
   */


  Player.prototype.height = function height(value) {
    return this.dimension('height', value);
  };

  /**
   * A getter/setter for the `Player`'s width & height.
   *
   * @param {string} dimension
   *        This string can be:
   *        - 'width'
   *        - 'height'
   *
   * @param {number} [value]
   *        Value for dimension specified in the first argument.
   *
   * @return {number}
   *         The dimension arguments value when getting (width/height).
   */


  Player.prototype.dimension = function dimension(_dimension, value) {
    var privDimension = _dimension + '_';

    if (value === undefined) {
      return this[privDimension] || 0;
    }

    if (value === '') {
      // If an empty string is given, reset the dimension to be automatic
      this[privDimension] = undefined;
      this.updateStyleEl_();
      return;
    }

    var parsedVal = parseFloat(value);

    if (isNaN(parsedVal)) {
      log$1.error('Improper value "' + value + '" supplied for for ' + _dimension);
      return;
    }

    this[privDimension] = parsedVal;
    this.updateStyleEl_();
  };

  /**
   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will toggle the fluid class.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */


  Player.prototype.fluid = function fluid(bool) {
    if (bool === undefined) {
      return !!this.fluid_;
    }

    this.fluid_ = !!bool;

    if (bool) {
      this.addClass('vjs-fluid');
    } else {
      this.removeClass('vjs-fluid');
    }

    this.updateStyleEl_();
  };

  /**
   * Get/Set the aspect ratio
   *
   * @param {string} [ratio]
   *        Aspect ratio for player
   *
   * @return {string|undefined}
   *         returns the current aspect ratio when getting
   */

  /**
   * A getter/setter for the `Player`'s aspect ratio.
   *
   * @param {string} [ratio]
   *        The value to set the `Player's aspect ratio to.
   *
   * @return {string|undefined}
   *         - The current aspect ratio of the `Player` when getting.
   *         - undefined when setting
   */


  Player.prototype.aspectRatio = function aspectRatio(ratio) {
    if (ratio === undefined) {
      return this.aspectRatio_;
    }

    // Check for width:height format
    if (!/^\d+\:\d+$/.test(ratio)) {
      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
    }
    this.aspectRatio_ = ratio;

    // We're assuming if you set an aspect ratio you want fluid mode,
    // because in fixed mode you could calculate width and height yourself.
    this.fluid(true);

    this.updateStyleEl_();
  };

  /**
   * Update styles of the `Player` element (height, width and aspect ratio).
   *
   * @private
   * @listens Tech#loadedmetadata
   */


  Player.prototype.updateStyleEl_ = function updateStyleEl_() {
    if (window.VIDEOJS_NO_DYNAMIC_STYLE === true) {
      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
      var techEl = this.tech_ && this.tech_.el();

      if (techEl) {
        if (_width >= 0) {
          techEl.width = _width;
        }
        if (_height >= 0) {
          techEl.height = _height;
        }
      }

      return;
    }

    var width = void 0;
    var height = void 0;
    var aspectRatio = void 0;
    var idClass = void 0;

    // The aspect ratio is either used directly or to calculate width and height.
    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
      // Use any aspectRatio that's been specifically set
      aspectRatio = this.aspectRatio_;
    } else if (this.videoWidth() > 0) {
      // Otherwise try to get the aspect ratio from the video metadata
      aspectRatio = this.videoWidth() + ':' + this.videoHeight();
    } else {
      // Or use a default. The video element's is 2:1, but 16:9 is more common.
      aspectRatio = '16:9';
    }

    // Get the ratio as a decimal we can use to calculate dimensions
    var ratioParts = aspectRatio.split(':');
    var ratioMultiplier = ratioParts[1] / ratioParts[0];

    if (this.width_ !== undefined) {
      // Use any width that's been specifically set
      width = this.width_;
    } else if (this.height_ !== undefined) {
      // Or calulate the width from the aspect ratio if a height has been set
      width = this.height_ / ratioMultiplier;
    } else {
      // Or use the video's metadata, or use the video el's default of 300
      width = this.videoWidth() || 300;
    }

    if (this.height_ !== undefined) {
      // Use any height that's been specifically set
      height = this.height_;
    } else {
      // Otherwise calculate the height from the ratio and the width
      height = width * ratioMultiplier;
    }

    // Ensure the CSS class is valid by starting with an alpha character
    if (/^[^a-zA-Z]/.test(this.id())) {
      idClass = 'dimensions-' + this.id();
    } else {
      idClass = this.id() + '-dimensions';
    }

    // Ensure the right class is still on the player for the style element
    this.addClass(idClass);

    setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
  };

  /**
   * Load/Create an instance of playback {@link Tech} including element
   * and API methods. Then append the `Tech` element in `Player` as a child.
   *
   * @param {string} techName
   *        name of the playback technology
   *
   * @param {string} source
   *        video source
   *
   * @private
   */


  Player.prototype.loadTech_ = function loadTech_(techName, source) {
    var _this2 = this;

    // Pause and remove current playback technology
    if (this.tech_) {
      this.unloadTech_();
    }

    var titleTechName = toTitleCase(techName);
    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);

    // get rid of the HTML5 video tag as soon as we are using another tech
    if (titleTechName !== 'Html5' && this.tag) {
      Tech.getTech('Html5').disposeMediaElement(this.tag);
      this.tag.player = null;
      this.tag = null;
    }

    this.techName_ = titleTechName;

    // Turn off API access because we're loading a new tech that might load asynchronously
    this.isReady_ = false;

    // Grab tech-specific options from player options and add source and parent element to use.
    var techOptions = {
      source: source,
      'nativeControlsForTouch': this.options_.nativeControlsForTouch,
      'playerId': this.id(),
      'techId': this.id() + '_' + titleTechName + '_api',
      'autoplay': this.options_.autoplay,
      'playsinline': this.options_.playsinline,
      'preload': this.options_.preload,
      'loop': this.options_.loop,
      'muted': this.options_.muted,
      'poster': this.poster(),
      'language': this.language(),
      'playerElIngest': this.playerElIngest_ || false,
      'vtt.js': this.options_['vtt.js']
    };

    ALL.names.forEach(function (name$$1) {
      var props = ALL[name$$1];

      techOptions[props.getterName] = _this2[props.privateName];
    });

    assign(techOptions, this.options_[titleTechName]);
    assign(techOptions, this.options_[camelTechName]);
    assign(techOptions, this.options_[techName.toLowerCase()]);

    if (this.tag) {
      techOptions.tag = this.tag;
    }

    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
      techOptions.startTime = this.cache_.currentTime;
    }

    // Initialize tech instance
    var TechClass = Tech.getTech(techName);

    if (!TechClass) {
      throw new Error('No Tech named \'' + titleTechName + '\' exists! \'' + titleTechName + '\' should be registered using videojs.registerTech()\'');
    }

    this.tech_ = new TechClass(techOptions);

    // player.triggerReady is always async, so don't need this to be async
    this.tech_.ready(bind(this, this.handleTechReady_), true);

    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

    // Listen to all HTML5-defined events and trigger them on the player
    TECH_EVENTS_RETRIGGER.forEach(function (event) {
      _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);
    });
    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
    this.on(this.tech_, 'waiting', this.handleTechWaiting_);
    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
    this.on(this.tech_, 'playing', this.handleTechPlaying_);
    this.on(this.tech_, 'ended', this.handleTechEnded_);
    this.on(this.tech_, 'seeking', this.handleTechSeeking_);
    this.on(this.tech_, 'seeked', this.handleTechSeeked_);
    this.on(this.tech_, 'play', this.handleTechPlay_);
    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
    this.on(this.tech_, 'pause', this.handleTechPause_);
    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
    this.on(this.tech_, 'error', this.handleTechError_);
    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
    this.on(this.tech_, 'textdata', this.handleTechTextData_);

    this.usingNativeControls(this.techGet_('controls'));

    if (this.controls() && !this.usingNativeControls()) {
      this.addTechControlsListeners_();
    }

    // Add the tech element in the DOM if it was not already there
    // Make sure to not insert the original video element if using Html5
    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {
      prependTo(this.tech_.el(), this.el());
    }

    // Get rid of the original video tag reference after the first tech is loaded
    if (this.tag) {
      this.tag.player = null;
      this.tag = null;
    }
  };

  /**
   * Unload and dispose of the current playback {@link Tech}.
   *
   * @private
   */


  Player.prototype.unloadTech_ = function unloadTech_() {
    var _this3 = this;

    // Save the current text tracks so that we can reuse the same text tracks with the next tech
    ALL.names.forEach(function (name$$1) {
      var props = ALL[name$$1];

      _this3[props.privateName] = _this3[props.getterName]();
    });
    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);

    this.isReady_ = false;

    this.tech_.dispose();

    this.tech_ = false;
  };

  /**
   * Return a reference to the current {@link Tech}.
   * It will print a warning by default about the danger of using the tech directly
   * but any argument that is passed in will silence the warning.
   *
   * @param {*} [safety]
   *        Anything passed in to silence the warning
   *
   * @return {Tech}
   *         The Tech
   */


  Player.prototype.tech = function tech(safety) {
    if (safety === undefined) {
      log$1.warn(tsml(_templateObject$1));
    }

    return this.tech_;
  };

  /**
   * Set up click and touch listeners for the playback element
   *
   * - On desktops: a click on the video itself will toggle playback
   * - On mobile devices: a click on the video toggles controls
   *   which is done by toggling the user state between active and
   *   inactive
   * - A tap can signal that a user has become active or has become inactive
   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
   *   quick tap should hide them again (signaling the user is in an inactive
   *   viewing state)
   * - In addition to this, we still want the user to be considered inactive after
   *   a few seconds of inactivity.
   *
   * > Note: the only part of iOS interaction we can't mimic with this setup
   * is a touch and hold on the video element counting as activity in order to
   * keep the controls showing, but that shouldn't be an issue. A touch and hold
   * on any controls will still keep the user active
   *
   * @private
   */


  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
    // Make sure to remove all the previous listeners in case we are called multiple times.
    this.removeTechControlsListeners_();

    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
    // trigger mousedown/up.
    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
    // Any touch events are set to block the mousedown event from happening
    this.on(this.tech_, 'mousedown', this.handleTechClick_);

    // If the controls were hidden we don't want that to change without a tap event
    // so we'll check if the controls were already showing before reporting user
    // activity
    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

    // The tap listener needs to come after the touchend listener because the tap
    // listener cancels out any reportedUserActivity when setting userActive(false)
    this.on(this.tech_, 'tap', this.handleTechTap_);
  };

  /**
   * Remove the listeners used for click and tap controls. This is needed for
   * toggling to controls disabled, where a tap/touch should do nothing.
   *
   * @private
   */


  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
    // We don't want to just use `this.off()` because there might be other needed
    // listeners added by techs that extend this.
    this.off(this.tech_, 'tap', this.handleTechTap_);
    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
    this.off(this.tech_, 'mousedown', this.handleTechClick_);
  };

  /**
   * Player waits for the tech to be ready
   *
   * @private
   */


  Player.prototype.handleTechReady_ = function handleTechReady_() {
    this.triggerReady();

    // Keep the same volume as before
    if (this.cache_.volume) {
      this.techCall_('setVolume', this.cache_.volume);
    }

    // Look if the tech found a higher resolution poster while loading
    this.handleTechPosterChange_();

    // Update the duration if available
    this.handleTechDurationChange_();

    // Chrome and Safari both have issues with autoplay.
    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
    // This fixes both issues. Need to wait for API, so it updates displays correctly
    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
      try {
        // Chrome Fix. Fixed in Chrome v16.
        delete this.tag.poster;
      } catch (e) {
        log$1('deleting tag.poster throws in some browsers', e);
      }
    }
  };

  /**
   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
   * function will also trigger {@link Player#firstplay} if it is the first loadstart
   * for a video.
   *
   * @fires Player#loadstart
   * @fires Player#firstplay
   * @listens Tech#loadstart
   * @private
   */


  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
    // TODO: Update to use `emptied` event instead. See #1277.

    this.removeClass('vjs-ended');
    this.removeClass('vjs-seeking');

    // reset the error state
    this.error(null);

    // If it's already playing we want to trigger a firstplay event now.
    // The firstplay event relies on both the play and loadstart events
    // which can happen in any order for a new source
    if (!this.paused()) {
      /**
       * Fired when the user agent begins looking for media data
       *
       * @event Player#loadstart
       * @type {EventTarget~Event}
       */
      this.trigger('loadstart');
      this.trigger('firstplay');
    } else {
      // reset the hasStarted state
      this.hasStarted(false);
      this.trigger('loadstart');
    }
  };

  /**
   * Add/remove the vjs-has-started class
   *
   * @fires Player#firstplay
   *
   * @param {boolean} request
   *        - true: adds the class
   *        - false: remove the class
   *
   * @return {boolean}
   *         the boolean value of hasStarted_
   */


  Player.prototype.hasStarted = function hasStarted(request) {
    if (request === undefined) {
      // act as getter, if we have no request to change
      return this.hasStarted_;
    }

    if (request === this.hasStarted_) {
      return;
    }

    this.hasStarted_ = request;

    if (this.hasStarted_) {
      this.addClass('vjs-has-started');
      this.trigger('firstplay');
    } else {
      this.removeClass('vjs-has-started');
    }
  };

  /**
   * Fired whenever the media begins or resumes playback
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
   * @fires Player#play
   * @listens Tech#play
   * @private
   */


  Player.prototype.handleTechPlay_ = function handleTechPlay_() {
    this.removeClass('vjs-ended');
    this.removeClass('vjs-paused');
    this.addClass('vjs-playing');

    // hide the poster when the user hits play
    this.hasStarted(true);
    /**
     * Triggered whenever an {@link Tech#play} event happens. Indicates that
     * playback has started or resumed.
     *
     * @event Player#play
     * @type {EventTarget~Event}
     */
    this.trigger('play');
  };

  /**
   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
   *
   * @fires Player#waiting
   * @listens Tech#waiting
   * @private
   */


  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
    var _this4 = this;

    this.addClass('vjs-waiting');
    /**
     * A readyState change on the DOM element has caused playback to stop.
     *
     * @event Player#waiting
     * @type {EventTarget~Event}
     */
    this.trigger('waiting');
    this.one('timeupdate', function () {
      return _this4.removeClass('vjs-waiting');
    });
  };

  /**
   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
   * > Note: This is not consistent between browsers. See #1351
   *
   * @fires Player#canplay
   * @listens Tech#canplay
   * @private
   */


  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
    this.removeClass('vjs-waiting');
    /**
     * The media has a readyState of HAVE_FUTURE_DATA or greater.
     *
     * @event Player#canplay
     * @type {EventTarget~Event}
     */
    this.trigger('canplay');
  };

  /**
   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
   *
   * @fires Player#canplaythrough
   * @listens Tech#canplaythrough
   * @private
   */


  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
    this.removeClass('vjs-waiting');
    /**
     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
     * entire media file can be played without buffering.
     *
     * @event Player#canplaythrough
     * @type {EventTarget~Event}
     */
    this.trigger('canplaythrough');
  };

  /**
   * Retrigger the `playing` event that was triggered by the {@link Tech}.
   *
   * @fires Player#playing
   * @listens Tech#playing
   * @private
   */


  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
    this.removeClass('vjs-waiting');
    /**
     * The media is no longer blocked from playback, and has started playing.
     *
     * @event Player#playing
     * @type {EventTarget~Event}
     */
    this.trigger('playing');
  };

  /**
   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeking
   * @listens Tech#seeking
   * @private
   */


  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
    this.addClass('vjs-seeking');
    /**
     * Fired whenever the player is jumping to a new time
     *
     * @event Player#seeking
     * @type {EventTarget~Event}
     */
    this.trigger('seeking');
  };

  /**
   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeked
   * @listens Tech#seeked
   * @private
   */


  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
    this.removeClass('vjs-seeking');
    /**
     * Fired when the player has finished jumping to a new time
     *
     * @event Player#seeked
     * @type {EventTarget~Event}
     */
    this.trigger('seeked');
  };

  /**
   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
   *
   * @fires Player#firstplay
   * @listens Tech#firstplay
   * @deprecated As of 6.0 firstplay event is deprecated.
   * @deprecated As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
   * @private
   */


  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
    // If the first starttime attribute is specified
    // then we will start at the given offset in seconds
    if (this.options_.starttime) {
      log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');
      this.currentTime(this.options_.starttime);
    }

    this.addClass('vjs-has-started');
    /**
     * Fired the first time a video is played. Not part of the HLS spec, and this is
     * probably not the best implementation yet, so use sparingly. If you don't have a
     * reason to prevent playback, use `myPlayer.one('play');` instead.
     *
     * @event Player#firstplay
     * @deprecated As of 6.0 firstplay event is deprecated.
     * @type {EventTarget~Event}
     */
    this.trigger('firstplay');
  };

  /**
   * Retrigger the `pause` event that was triggered by the {@link Tech}.
   *
   * @fires Player#pause
   * @listens Tech#pause
   * @private
   */


  Player.prototype.handleTechPause_ = function handleTechPause_() {
    this.removeClass('vjs-playing');
    this.addClass('vjs-paused');
    /**
     * Fired whenever the media has been paused
     *
     * @event Player#pause
     * @type {EventTarget~Event}
     */
    this.trigger('pause');
  };

  /**
   * Retrigger the `ended` event that was triggered by the {@link Tech}.
   *
   * @fires Player#ended
   * @listens Tech#ended
   * @private
   */


  Player.prototype.handleTechEnded_ = function handleTechEnded_() {
    this.addClass('vjs-ended');
    if (this.options_.loop) {
      this.currentTime(0);
      this.play();
    } else if (!this.paused()) {
      this.pause();
    }

    /**
     * Fired when the end of the media resource is reached (currentTime == duration)
     *
     * @event Player#ended
     * @type {EventTarget~Event}
     */
    this.trigger('ended');
  };

  /**
   * Fired when the duration of the media resource is first known or changed
   *
   * @listens Tech#durationchange
   * @private
   */


  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
    this.duration(this.techGet_('duration'));
  };

  /**
   * Handle a click on the media element to play/pause
   *
   * @param {EventTarget~Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#mousedown
   * @private
   */


  Player.prototype.handleTechClick_ = function handleTechClick_(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    // When controls are disabled a click should not toggle playback because
    // the click is considered a control
    if (!this.controls_) {
      return;
    }

    if (this.paused()) {
      this.play();
    } else {
      this.pause();
    }
  };

  /**
   * Handle a tap on the media element. It will toggle the user
   * activity state, which hides and shows the controls.
   *
   * @listens Tech#tap
   * @private
   */


  Player.prototype.handleTechTap_ = function handleTechTap_() {
    this.userActive(!this.userActive());
  };

  /**
   * Handle touch to start
   *
   * @listens Tech#touchstart
   * @private
   */


  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
    this.userWasActive = this.userActive();
  };

  /**
   * Handle touch to move
   *
   * @listens Tech#touchmove
   * @private
   */


  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
    if (this.userWasActive) {
      this.reportUserActivity();
    }
  };

  /**
   * Handle touch to end
   *
   * @param {EventTarget~Event} event
   *        the touchend event that triggered
   *        this function
   *
   * @listens Tech#touchend
   * @private
   */


  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
    // Stop the mouse events from also happening
    event.preventDefault();
  };

  /**
   * Fired when the player switches in or out of fullscreen mode
   *
   * @private
   * @listens Player#fullscreenchange
   */


  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
    if (this.isFullscreen()) {
      this.addClass('vjs-fullscreen');
    } else {
      this.removeClass('vjs-fullscreen');
    }
  };

  /**
   * native click events on the SWF aren't triggered on IE11, Win8.1RT
   * use stageclick events triggered from inside the SWF instead
   *
   * @private
   * @listens stageclick
   */


  Player.prototype.handleStageClick_ = function handleStageClick_() {
    this.reportUserActivity();
  };

  /**
   * Handle Tech Fullscreen Change
   *
   * @param {EventTarget~Event} event
   *        the fullscreenchange event that triggered this function
   *
   * @param {Object} data
   *        the data that was sent with the event
   *
   * @private
   * @listens Tech#fullscreenchange
   * @fires Player#fullscreenchange
   */


  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
    if (data) {
      this.isFullscreen(data.isFullscreen);
    }
    /**
     * Fired when going in and out of fullscreen.
     *
     * @event Player#fullscreenchange
     * @type {EventTarget~Event}
     */
    this.trigger('fullscreenchange');
  };

  /**
   * Fires when an error occurred during the loading of an audio/video.
   *
   * @private
   * @listens Tech#error
   */


  Player.prototype.handleTechError_ = function handleTechError_() {
    var error = this.tech_.error();

    this.error(error);
  };

  /**
   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
   *
   * @fires Player#textdata
   * @listens Tech#textdata
   * @private
   */


  Player.prototype.handleTechTextData_ = function handleTechTextData_() {
    var data = null;

    if (arguments.length > 1) {
      data = arguments[1];
    }

    /**
     * Fires when we get a textdata event from tech
     *
     * @event Player#textdata
     * @type {EventTarget~Event}
     */
    this.trigger('textdata', data);
  };

  /**
   * Get object for cached values.
   *
   * @return {Object}
   *         get the current object cache
   */


  Player.prototype.getCache = function getCache() {
    return this.cache_;
  };

  /**
   * Pass values to the playback tech
   *
   * @param {string} [method]
   *        the method to call
   *
   * @param {Object} arg
   *        the argument to pass
   *
   * @private
   */


  Player.prototype.techCall_ = function techCall_(method, arg) {
    // If it's not ready yet, call method when it is

    this.ready(function () {
      if (method in allowedSetters) {
        return set$1(this.middleware_, this.tech_, method, arg);
      } else if (method in allowedMediators) {
        return mediate(this.middleware_, this.tech_, method, arg);
      }

      try {
        if (this.tech_) {
          this.tech_[method](arg);
        }
      } catch (e) {
        log$1(e);
        throw e;
      }
    }, true);
  };

  /**
   * Get calls can't wait for the tech, and sometimes don't need to.
   *
   * @param {string} method
   *        Tech method
   *
   * @return {Function|undefined}
   *         the method or undefined
   *
   * @private
   */


  Player.prototype.techGet_ = function techGet_(method) {
    if (!this.tech_ || !this.tech_.isReady_) {
      return;
    }

    if (method in allowedGetters) {
      return get$1(this.middleware_, this.tech_, method);
    } else if (method in allowedMediators) {
      return mediate(this.middleware_, this.tech_, method);
    }

    // Flash likes to die and reload when you hide or reposition it.
    // In these cases the object methods go away and we get errors.
    // When that happens we'll catch the errors and inform tech that it's not ready any more.
    try {
      return this.tech_[method]();
    } catch (e) {

      // When building additional tech libs, an expected method may not be defined yet
      if (this.tech_[method] === undefined) {
        log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
        throw e;
      }

      // When a method isn't available on the object it throws a TypeError
      if (e.name === 'TypeError') {
        log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
        this.tech_.isReady_ = false;
        throw e;
      }

      // If error unknown, just log and throw
      log$1(e);
      throw e;
    }
  };

  /**
   * Attempt to begin playback at the first opportunity.
   *
   * @return {Promise|undefined}
   *         Returns a `Promise` only if the browser returns one and the player
   *         is ready to begin playback. For some browsers and all non-ready
   *         situations, this will return `undefined`.
   */


  Player.prototype.play = function play() {
    var _this5 = this;

    // If this is called while we have a play queued up on a loadstart, remove
    // that listener to avoid getting in a potentially bad state.
    if (this.playOnLoadstart_) {
      this.off('loadstart', this.playOnLoadstart_);
    }

    // If the player/tech is not ready, queue up another call to `play()` for
    // when it is. This will loop back into this method for another attempt at
    // playback when the tech is ready.
    if (!this.isReady_) {

      // Bail out if we're already waiting for `ready`!
      if (this.playWaitingForReady_) {
        return;
      }

      this.playWaitingForReady_ = true;
      this.ready(function () {
        _this5.playWaitingForReady_ = false;
        silencePromise(_this5.play());
      });

      // If the player/tech is ready and we have a source, we can attempt playback.
    } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {
      return this.techGet_('play');

      // If the tech is ready, but we do not have a source, we'll need to wait
      // for both the `ready` and a `loadstart` when the source is finally
      // resolved by middleware and set on the player.
      //
      // This can happen if `play()` is called while changing sources or before
      // one has been set on the player.
    } else {

      this.playOnLoadstart_ = function () {
        _this5.playOnLoadstart_ = null;
        silencePromise(_this5.play());
      };

      this.one('loadstart', this.playOnLoadstart_);
    }
  };

  /**
   * Pause the video playback
   *
   * @return {Player}
   *         A reference to the player object this function was called on
   */


  Player.prototype.pause = function pause() {
    this.techCall_('pause');
  };

  /**
   * Check if the player is paused or has yet to play
   *
   * @return {boolean}
   *         - false: if the media is currently playing
   *         - true: if media is not currently playing
   */


  Player.prototype.paused = function paused() {
    // The initial state of paused should be true (in Safari it's actually false)
    return this.techGet_('paused') === false ? false : true;
  };

  /**
   * Get a TimeRange object representing the current ranges of time that the user
   * has played.
   *
   * @return {TimeRange}
   *         A time range object that represents all the increments of time that have
   *         been played.
   */


  Player.prototype.played = function played() {
    return this.techGet_('played') || createTimeRanges(0, 0);
  };

  /**
   * Returns whether or not the user is "scrubbing". Scrubbing is
   * when the user has clicked the progress bar handle and is
   * dragging it along the progress bar.
   *
   * @param {boolean} [isScrubbing]
   *        wether the user is or is not scrubbing
   *
   * @return {boolean}
   *         The value of scrubbing when getting
   */


  Player.prototype.scrubbing = function scrubbing(isScrubbing) {
    if (typeof isScrubbing === 'undefined') {
      return this.scrubbing_;
    }
    this.scrubbing_ = !!isScrubbing;

    if (isScrubbing) {
      this.addClass('vjs-scrubbing');
    } else {
      this.removeClass('vjs-scrubbing');
    }
  };

  /**
   * Get or set the current time (in seconds)
   *
   * @param {number|string} [seconds]
   *        The time to seek to in seconds
   *
   * @return {number}
   *         - the current time in seconds when getting
   */


  Player.prototype.currentTime = function currentTime(seconds) {
    if (typeof seconds !== 'undefined') {
      if (seconds < 0) {
        seconds = 0;
      }
      this.techCall_('setCurrentTime', seconds);
      return;
    }

    // cache last currentTime and return. default to 0 seconds
    //
    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
    // currentTime when scrubbing, but may not provide much performance benefit afterall.
    // Should be tested. Also something has to read the actual current time or the cache will
    // never get updated.
    this.cache_.currentTime = this.techGet_('currentTime') || 0;
    return this.cache_.currentTime;
  };

  /**
   * Normally gets the length in time of the video in seconds;
   * in all but the rarest use cases an argument will NOT be passed to the method
   *
   * > **NOTE**: The video must have started loading before the duration can be
   * known, and in the case of Flash, may not be known until the video starts
   * playing.
   *
   * @fires Player#durationchange
   *
   * @param {number} [seconds]
   *        The duration of the video to set in seconds
   *
   * @return {number}
   *         - The duration of the video in seconds when getting
   */


  Player.prototype.duration = function duration(seconds) {
    if (seconds === undefined) {
      // return NaN if the duration is not known
      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
    }

    seconds = parseFloat(seconds);

    // Standardize on Inifity for signaling video is live
    if (seconds < 0) {
      seconds = Infinity;
    }

    if (seconds !== this.cache_.duration) {
      // Cache the last set value for optimized scrubbing (esp. Flash)
      this.cache_.duration = seconds;

      if (seconds === Infinity) {
        this.addClass('vjs-live');
      } else {
        this.removeClass('vjs-live');
      }
      /**
       * @event Player#durationchange
       * @type {EventTarget~Event}
       */
      this.trigger('durationchange');
    }
  };

  /**
   * Calculates how much time is left in the video. Not part
   * of the native video API.
   *
   * @return {number}
   *         The time remaining in seconds
   */


  Player.prototype.remainingTime = function remainingTime() {
    return this.duration() - this.currentTime();
  };

  /**
   * A remaining time function that is intented to be used when
   * the time is to be displayed directly to the user.
   *
   * @return {number}
   *         The rounded time remaining in seconds
   */


  Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {
    return Math.floor(this.duration()) - Math.floor(this.currentTime());
  };

  //
  // Kind of like an array of portions of the video that have been downloaded.

  /**
   * Get a TimeRange object with an array of the times of the video
   * that have been downloaded. If you just want the percent of the
   * video that's been downloaded, use bufferedPercent.
   *
   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
   *
   * @return {TimeRange}
   *         A mock TimeRange object (following HTML spec)
   */


  Player.prototype.buffered = function buffered() {
    var buffered = this.techGet_('buffered');

    if (!buffered || !buffered.length) {
      buffered = createTimeRanges(0, 0);
    }

    return buffered;
  };

  /**
   * Get the percent (as a decimal) of the video that's been downloaded.
   * This method is not a part of the native HTML video API.
   *
   * @return {number}
   *         A decimal between 0 and 1 representing the percent
   *         that is bufferred 0 being 0% and 1 being 100%
   */


  Player.prototype.bufferedPercent = function bufferedPercent$$1() {
    return bufferedPercent(this.buffered(), this.duration());
  };

  /**
   * Get the ending time of the last buffered time range
   * This is used in the progress bar to encapsulate all time ranges.
   *
   * @return {number}
   *         The end of the last buffered time range
   */


  Player.prototype.bufferedEnd = function bufferedEnd() {
    var buffered = this.buffered();
    var duration = this.duration();
    var end = buffered.end(buffered.length - 1);

    if (end > duration) {
      end = duration;
    }

    return end;
  };

  /**
   * Get or set the current volume of the media
   *
   * @param  {number} [percentAsDecimal]
   *         The new volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number}
   *         The current volume as a percent when getting
   */


  Player.prototype.volume = function volume(percentAsDecimal) {
    var vol = void 0;

    if (percentAsDecimal !== undefined) {
      // Force value to between 0 and 1
      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
      this.cache_.volume = vol;
      this.techCall_('setVolume', vol);

      if (vol > 0) {
        this.lastVolume_(vol);
      }

      return;
    }

    // Default to 1 when returning current volume.
    vol = parseFloat(this.techGet_('volume'));
    return isNaN(vol) ? 1 : vol;
  };

  /**
   * Get the current muted state, or turn mute on or off
   *
   * @param {boolean} [muted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean}
   *         - true if mute is on and getting
   *         - false if mute is off and getting
   */


  Player.prototype.muted = function muted(_muted) {
    if (_muted !== undefined) {
      this.techCall_('setMuted', _muted);
      return;
    }
    return this.techGet_('muted') || false;
  };

  /**
   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
   * indicates the state of muted on intial playback.
   *
   * ```js
   *   var myPlayer = videojs('some-player-id');
   *
   *   myPlayer.src("http://www.example.com/path/to/video.mp4");
   *
   *   // get, should be false
   *   console.log(myPlayer.defaultMuted());
   *   // set to true
   *   myPlayer.defaultMuted(true);
   *   // get should be true
   *   console.log(myPlayer.defaultMuted());
   * ```
   *
   * @param {boolean} [defaultMuted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|Player}
   *         - true if defaultMuted is on and getting
   *         - false if defaultMuted is off and getting
   *         - A reference to the current player when setting
   */


  Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {
    if (_defaultMuted !== undefined) {
      return this.techCall_('setDefaultMuted', _defaultMuted);
    }
    return this.techGet_('defaultMuted') || false;
  };

  /**
   * Get the last volume, or set it
   *
   * @param  {number} [percentAsDecimal]
   *         The new last volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number}
   *         the current value of lastVolume as a percent when getting
   *
   * @private
   */


  Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {
    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
      this.cache_.lastVolume = percentAsDecimal;
      return;
    }
    return this.cache_.lastVolume;
  };

  /**
   * Check if current tech can support native fullscreen
   * (e.g. with built in controls like iOS, so not our flash swf)
   *
   * @return {boolean}
   *         if native fullscreen is supported
   */


  Player.prototype.supportsFullScreen = function supportsFullScreen() {
    return this.techGet_('supportsFullScreen') || false;
  };

  /**
   * Check if the player is in fullscreen mode or tell the player that it
   * is or is not in fullscreen mode.
   *
   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
   * property and instead document.fullscreenElement is used. But isFullscreen is
   * still a valuable property for internal player workings.
   *
   * @param  {boolean} [isFS]
   *         Set the players current fullscreen state
   *
   * @return {boolean}
   *         - true if fullscreen is on and getting
   *         - false if fullscreen is off and getting
   */


  Player.prototype.isFullscreen = function isFullscreen(isFS) {
    if (isFS !== undefined) {
      this.isFullscreen_ = !!isFS;
      return;
    }
    return !!this.isFullscreen_;
  };

  /**
   * Increase the size of the video to full screen
   * In some browsers, full screen is not supported natively, so it enters
   * "full window mode", where the video fills the browser window.
   * In browsers and devices that support native full screen, sometimes the
   * browser's default controls will be shown, and not the Video.js custom skin.
   * This includes most mobile devices (iOS, Android) and older versions of
   * Safari.
   *
   * @fires Player#fullscreenchange
   */


  Player.prototype.requestFullscreen = function requestFullscreen() {
    var fsApi = FullscreenApi;

    this.isFullscreen(true);

    if (fsApi.requestFullscreen) {
      // the browser supports going fullscreen at the element level so we can
      // take the controls fullscreen as well as the video

      // Trigger fullscreenchange event after change
      // We have to specifically add this each time, and remove
      // when canceling fullscreen. Otherwise if there's multiple
      // players on a page, they would all be reacting to the same fullscreen
      // events
      on(document, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {
        this.isFullscreen(document[fsApi.fullscreenElement]);

        // If cancelling fullscreen, remove event listener.
        if (this.isFullscreen() === false) {
          off(document, fsApi.fullscreenchange, documentFullscreenChange);
        }
        /**
         * @event Player#fullscreenchange
         * @type {EventTarget~Event}
         */
        this.trigger('fullscreenchange');
      }));

      this.el_[fsApi.requestFullscreen]();
    } else if (this.tech_.supportsFullScreen()) {
      // we can't take the video.js controls fullscreen but we can go fullscreen
      // with native controls
      this.techCall_('enterFullScreen');
    } else {
      // fullscreen isn't supported so we'll just stretch the video element to
      // fill the viewport
      this.enterFullWindow();
      /**
       * @event Player#fullscreenchange
       * @type {EventTarget~Event}
       */
      this.trigger('fullscreenchange');
    }
  };

  /**
   * Return the video to its normal size after having been in full screen mode
   *
   * @fires Player#fullscreenchange
   */


  Player.prototype.exitFullscreen = function exitFullscreen() {
    var fsApi = FullscreenApi;

    this.isFullscreen(false);

    // Check for browser element fullscreen support
    if (fsApi.requestFullscreen) {
      document[fsApi.exitFullscreen]();
    } else if (this.tech_.supportsFullScreen()) {
      this.techCall_('exitFullScreen');
    } else {
      this.exitFullWindow();
      /**
       * @event Player#fullscreenchange
       * @type {EventTarget~Event}
       */
      this.trigger('fullscreenchange');
    }
  };

  /**
   * When fullscreen isn't supported we can stretch the
   * video container to as wide as the browser will let us.
   *
   * @fires Player#enterFullWindow
   */


  Player.prototype.enterFullWindow = function enterFullWindow() {
    this.isFullWindow = true;

    // Storing original doc overflow value to return to when fullscreen is off
    this.docOrigOverflow = document.documentElement.style.overflow;

    // Add listener for esc key to exit fullscreen
    on(document, 'keydown', bind(this, this.fullWindowOnEscKey));

    // Hide any scroll bars
    document.documentElement.style.overflow = 'hidden';

    // Apply fullscreen styles
    addClass(document.body, 'vjs-full-window');

    /**
     * @event Player#enterFullWindow
     * @type {EventTarget~Event}
     */
    this.trigger('enterFullWindow');
  };

  /**
   * Check for call to either exit full window or
   * full screen on ESC key
   *
   * @param {string} event
   *        Event to check for key press
   */


  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
    if (event.keyCode === 27) {
      if (this.isFullscreen() === true) {
        this.exitFullscreen();
      } else {
        this.exitFullWindow();
      }
    }
  };

  /**
   * Exit full window
   *
   * @fires Player#exitFullWindow
   */


  Player.prototype.exitFullWindow = function exitFullWindow() {
    this.isFullWindow = false;
    off(document, 'keydown', this.fullWindowOnEscKey);

    // Unhide scroll bars.
    document.documentElement.style.overflow = this.docOrigOverflow;

    // Remove fullscreen styles
    removeClass(document.body, 'vjs-full-window');

    // Resize the box, controller, and poster to original sizes
    // this.positionAll();
    /**
     * @event Player#exitFullWindow
     * @type {EventTarget~Event}
     */
    this.trigger('exitFullWindow');
  };

  /**
   * Check whether the player can play a given mimetype
   *
   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
   *
   * @param {string} type
   *        The mimetype to check
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */


  Player.prototype.canPlayType = function canPlayType(type) {
    var can = void 0;

    // Loop through each playback technology in the options order
    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
      var techName = j[i];
      var tech = Tech.getTech(techName);

      // Support old behavior of techs being registered as components.
      // Remove once that deprecated behavior is removed.
      if (!tech) {
        tech = Component.getComponent(techName);
      }

      // Check if the current tech is defined before continuing
      if (!tech) {
        log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
        continue;
      }

      // Check if the browser supports this technology
      if (tech.isSupported()) {
        can = tech.canPlayType(type);

        if (can) {
          return can;
        }
      }
    }

    return '';
  };

  /**
   * Select source based on tech-order or source-order
   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
   * defaults to tech-order selection
   *
   * @param {Array} sources
   *        The sources for a media asset
   *
   * @return {Object|boolean}
   *         Object of source and tech order or false
   */


  Player.prototype.selectSource = function selectSource(sources) {
    var _this6 = this;

    // Get only the techs specified in `techOrder` that exist and are supported by the
    // current platform
    var techs = this.options_.techOrder.map(function (techName) {
      return [techName, Tech.getTech(techName)];
    }).filter(function (_ref) {
      var techName = _ref[0],
          tech = _ref[1];

      // Check if the current tech is defined before continuing
      if (tech) {
        // Check if the browser supports this technology
        return tech.isSupported();
      }

      log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
      return false;
    });

    // Iterate over each `innerArray` element once per `outerArray` element and execute
    // `tester` with both. If `tester` returns a non-falsy value, exit early and return
    // that value.
    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
      var found = void 0;

      outerArray.some(function (outerChoice) {
        return innerArray.some(function (innerChoice) {
          found = tester(outerChoice, innerChoice);

          if (found) {
            return true;
          }
        });
      });

      return found;
    };

    var foundSourceAndTech = void 0;
    var flip = function flip(fn) {
      return function (a, b) {
        return fn(b, a);
      };
    };
    var finder = function finder(_ref2, source) {
      var techName = _ref2[0],
          tech = _ref2[1];

      if (tech.canPlaySource(source, _this6.options_[techName.toLowerCase()])) {
        return { source: source, tech: techName };
      }
    };

    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
    // to select from them based on their priority.
    if (this.options_.sourceOrder) {
      // Source-first ordering
      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
    } else {
      // Tech-first ordering
      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
    }

    return foundSourceAndTech || false;
  };

  /**
   * Get or set the video source.
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */


  Player.prototype.src = function src(source) {
    var _this7 = this;

    // getter usage
    if (typeof source === 'undefined') {
      return this.cache_.src || '';
    }
    // filter out invalid sources and turn our source into
    // an array of source objects
    var sources = filterSource(source);

    // if a source was passed in then it is invalid because
    // it was filtered to a zero length Array. So we have to
    // show an error
    if (!sources.length) {
      this.setTimeout(function () {
        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
      }, 0);
      return;
    }

    // intial sources
    this.cache_.sources = sources;
    this.changingSrc_ = true;

    // intial source
    this.cache_.source = sources[0];

    // middlewareSource is the source after it has been changed by middleware
    setSource(this, sources[0], function (middlewareSource, mws) {
      _this7.middleware_ = mws;

      var err = _this7.src_(middlewareSource);

      if (err) {
        if (sources.length > 1) {
          return _this7.src(sources.slice(1));
        }

        // We need to wrap this in a timeout to give folks a chance to add error event handlers
        _this7.setTimeout(function () {
          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
        }, 0);

        // we could not find an appropriate tech, but let's still notify the delegate that this is it
        // this needs a better comment about why this is needed
        _this7.triggerReady();

        return;
      }

      _this7.changingSrc_ = false;
      // video element listed source
      _this7.cache_.src = middlewareSource.src;

      setTech(mws, _this7.tech_);
    });
  };

  /**
   * Set the source object on the tech, returns a boolean that indicates wether
   * there is a tech that can play the source or not
   *
   * @param {Tech~SourceObject} source
   *        The source object to set on the Tech
   *
   * @return {Boolean}
   *         - True if there is no Tech to playback this source
   *         - False otherwise
   *
   * @private
   */


  Player.prototype.src_ = function src_(source) {
    var sourceTech = this.selectSource([source]);

    if (!sourceTech) {
      return true;
    }

    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
      this.changingSrc_ = true;

      // load this technology with the chosen source
      this.loadTech_(sourceTech.tech, sourceTech.source);
      return false;
    }

    // wait until the tech is ready to set the source
    this.ready(function () {

      // The setSource tech method was added with source handlers
      // so older techs won't support it
      // We need to check the direct prototype for the case where subclasses
      // of the tech do not support source handlers
      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {
        this.techCall_('setSource', source);
      } else {
        this.techCall_('src', source.src);
      }

      if (this.options_.preload === 'auto') {
        this.load();
      }

      // Set the source synchronously if possible (#2326)
    }, true);

    return false;
  };

  /**
   * Begin loading the src data.
   */


  Player.prototype.load = function load() {
    this.techCall_('load');
  };

  /**
   * Reset the player. Loads the first tech in the techOrder,
   * and calls `reset` on the tech`.
   */


  Player.prototype.reset = function reset() {
    this.loadTech_(this.options_.techOrder[0], null);
    this.techCall_('reset');
  };

  /**
   * Returns all of the current source objects.
   *
   * @return {Tech~SourceObject[]}
   *         The current source objects
   */


  Player.prototype.currentSources = function currentSources() {
    var source = this.currentSource();
    var sources = [];

    // assume `{}` or `{ src }`
    if (Object.keys(source).length !== 0) {
      sources.push(source);
    }

    return this.cache_.sources || sources;
  };

  /**
   * Returns the current source object.
   *
   * @return {Tech~SourceObject}
   *         The current source object
   */


  Player.prototype.currentSource = function currentSource() {
    return this.cache_.source || {};
  };

  /**
   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
   *
   * @return {string}
   *         The current source
   */


  Player.prototype.currentSrc = function currentSrc() {
    return this.currentSource() && this.currentSource().src || '';
  };

  /**
   * Get the current source type e.g. video/mp4
   * This can allow you rebuild the current source object so that you could load the same
   * source and tech later
   *
   * @return {string}
   *         The source MIME type
   */


  Player.prototype.currentType = function currentType() {
    return this.currentSource() && this.currentSource().type || '';
  };

  /**
   * Get or set the preload attribute
   *
   * @param {boolean} [value]
   *        - true means that we should preload
   *        - false maens that we should not preload
   *
   * @return {string}
   *         The preload attribute value when getting
   */


  Player.prototype.preload = function preload(value) {
    if (value !== undefined) {
      this.techCall_('setPreload', value);
      this.options_.preload = value;
      return;
    }
    return this.techGet_('preload');
  };

  /**
   * Get or set the autoplay attribute.
   *
   * @param {boolean} [value]
   *        - true means that we should autoplay
   *        - false means that we should not autoplay
   *
   * @return {string}
   *         The current value of autoplay when getting
   */


  Player.prototype.autoplay = function autoplay(value) {
    if (value !== undefined) {
      this.techCall_('setAutoplay', value);
      this.options_.autoplay = value;
      this.ready(this.forceAutoplayInChrome_);
      return;
    }
    return this.techGet_('autoplay', value);
  };

  /**
   * chrome started pausing the video when moving in the DOM
   * causing autoplay to not continue due to how Video.js functions.
   * See #4720 for more info.
   *
   * @private
   */


  Player.prototype.forceAutoplayInChrome_ = function forceAutoplayInChrome_() {
    if (this.paused() && (
    // read from the video element or options
    this.autoplay() || this.options_.autoplay) &&
    // only target desktop chrome
    IS_CHROME && !IS_ANDROID) {
      this.play();
    }
  };

  /**
   * Set or unset the playsinline attribute.
   * Playsinline tells the browser that non-fullscreen playback is preferred.
   *
   * @param {boolean} [value]
   *        - true means that we should try to play inline by default
   *        - false means that we should use the browser's default playback mode,
   *          which in most cases is inline. iOS Safari is a notable exception
   *          and plays fullscreen by default.
   *
   * @return {string|Player}
   *         - the current value of playsinline
   *         - the player when setting
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */


  Player.prototype.playsinline = function playsinline(value) {
    if (value !== undefined) {
      this.techCall_('setPlaysinline', value);
      this.options_.playsinline = value;
      return this;
    }
    return this.techGet_('playsinline');
  };

  /**
   * Get or set the loop attribute on the video element.
   *
   * @param {boolean} [value]
   *        - true means that we should loop the video
   *        - false means that we should not loop the video
   *
   * @return {string}
   *         The current value of loop when getting
   */


  Player.prototype.loop = function loop(value) {
    if (value !== undefined) {
      this.techCall_('setLoop', value);
      this.options_.loop = value;
      return;
    }
    return this.techGet_('loop');
  };

  /**
   * Get or set the poster image source url
   *
   * @fires Player#posterchange
   *
   * @param {string} [src]
   *        Poster image source URL
   *
   * @return {string}
   *         The current value of poster when getting
   */


  Player.prototype.poster = function poster(src) {
    if (src === undefined) {
      return this.poster_;
    }

    // The correct way to remove a poster is to set as an empty string
    // other falsey values will throw errors
    if (!src) {
      src = '';
    }

    // update the internal poster variable
    this.poster_ = src;

    // update the tech's poster
    this.techCall_('setPoster', src);

    // alert components that the poster has been set
    /**
     * This event fires when the poster image is changed on the player.
     *
     * @event Player#posterchange
     * @type {EventTarget~Event}
     */
    this.trigger('posterchange');
  };

  /**
   * Some techs (e.g. YouTube) can provide a poster source in an
   * asynchronous way. We want the poster component to use this
   * poster source so that it covers up the tech's controls.
   * (YouTube's play button). However we only want to use this
   * source if the player user hasn't set a poster through
   * the normal APIs.
   *
   * @fires Player#posterchange
   * @listens Tech#posterchange
   * @private
   */


  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
    if (!this.poster_ && this.tech_ && this.tech_.poster) {
      this.poster_ = this.tech_.poster() || '';

      // Let components know the poster has changed
      this.trigger('posterchange');
    }
  };

  /**
   * Get or set whether or not the controls are showing.
   *
   * @fires Player#controlsenabled
   *
   * @param {boolean} [bool]
   *        - true to turn controls on
   *        - false to turn controls off
   *
   * @return {boolean}
   *         The current value of controls when getting
   */


  Player.prototype.controls = function controls(bool) {
    if (bool === undefined) {
      return !!this.controls_;
    }

    bool = !!bool;

    // Don't trigger a change event unless it actually changed
    if (this.controls_ === bool) {
      return;
    }

    this.controls_ = bool;

    if (this.usingNativeControls()) {
      this.techCall_('setControls', bool);
    }

    if (this.controls_) {
      this.removeClass('vjs-controls-disabled');
      this.addClass('vjs-controls-enabled');
      /**
       * @event Player#controlsenabled
       * @type {EventTarget~Event}
       */
      this.trigger('controlsenabled');
      if (!this.usingNativeControls()) {
        this.addTechControlsListeners_();
      }
    } else {
      this.removeClass('vjs-controls-enabled');
      this.addClass('vjs-controls-disabled');
      /**
       * @event Player#controlsdisabled
       * @type {EventTarget~Event}
       */
      this.trigger('controlsdisabled');
      if (!this.usingNativeControls()) {
        this.removeTechControlsListeners_();
      }
    }
  };

  /**
   * Toggle native controls on/off. Native controls are the controls built into
   * devices (e.g. default iPhone controls), Flash, or other techs
   * (e.g. Vimeo Controls)
   * **This should only be set by the current tech, because only the tech knows
   * if it can support native controls**
   *
   * @fires Player#usingnativecontrols
   * @fires Player#usingcustomcontrols
   *
   * @param {boolean} [bool]
   *        - true to turn native controls on
   *        - false to turn native controls off
   *
   * @return {boolean}
   *         The current value of native controls when getting
   */


  Player.prototype.usingNativeControls = function usingNativeControls(bool) {
    if (bool === undefined) {
      return !!this.usingNativeControls_;
    }

    bool = !!bool;

    // Don't trigger a change event unless it actually changed
    if (this.usingNativeControls_ === bool) {
      return;
    }

    this.usingNativeControls_ = bool;

    if (this.usingNativeControls_) {
      this.addClass('vjs-using-native-controls');

      /**
       * player is using the native device controls
       *
       * @event Player#usingnativecontrols
       * @type {EventTarget~Event}
       */
      this.trigger('usingnativecontrols');
    } else {
      this.removeClass('vjs-using-native-controls');

      /**
       * player is using the custom HTML controls
       *
       * @event Player#usingcustomcontrols
       * @type {EventTarget~Event}
       */
      this.trigger('usingcustomcontrols');
    }
  };

  /**
   * Set or get the current MediaError
   *
   * @fires Player#error
   *
   * @param  {MediaError|string|number} [err]
   *         A MediaError or a string/number to be turned
   *         into a MediaError
   *
   * @return {MediaError|null}
   *         The current MediaError when getting (or null)
   */


  Player.prototype.error = function error(err) {
    if (err === undefined) {
      return this.error_ || null;
    }

    // restoring to default
    if (err === null) {
      this.error_ = err;
      this.removeClass('vjs-error');
      if (this.errorDisplay) {
        this.errorDisplay.close();
      }
      return;
    }

    this.error_ = new MediaError(err);

    // add the vjs-error classname to the player
    this.addClass('vjs-error');

    // log the name of the error type and any message
    // ie8 just logs "[object object]" if you just log the error object
    log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

    /**
     * @event Player#error
     * @type {EventTarget~Event}
     */
    this.trigger('error');

    return;
  };

  /**
   * Report user activity
   *
   * @param {Object} event
   *        Event object
   */


  Player.prototype.reportUserActivity = function reportUserActivity(event) {
    this.userActivity_ = true;
  };

  /**
   * Get/set if user is active
   *
   * @fires Player#useractive
   * @fires Player#userinactive
   *
   * @param {boolean} [bool]
   *        - true if the user is active
   *        - false if the user is inactive
   *
   * @return {boolean}
   *         The current value of userActive when getting
   */


  Player.prototype.userActive = function userActive(bool) {
    if (bool === undefined) {
      return this.userActive_;
    }

    bool = !!bool;

    if (bool === this.userActive_) {
      return;
    }

    this.userActive_ = bool;

    if (this.userActive_) {
      this.userActivity_ = true;
      this.removeClass('vjs-user-inactive');
      this.addClass('vjs-user-active');
      /**
       * @event Player#useractive
       * @type {EventTarget~Event}
       */
      this.trigger('useractive');
      return;
    }

    // Chrome/Safari/IE have bugs where when you change the cursor it can
    // trigger a mousemove event. This causes an issue when you're hiding
    // the cursor when the user is inactive, and a mousemove signals user
    // activity. Making it impossible to go into inactive mode. Specifically
    // this happens in fullscreen when we really need to hide the cursor.
    //
    // When this gets resolved in ALL browsers it can be removed
    // https://code.google.com/p/chromium/issues/detail?id=103041
    if (this.tech_) {
      this.tech_.one('mousemove', function (e) {
        e.stopPropagation();
        e.preventDefault();
      });
    }

    this.userActivity_ = false;
    this.removeClass('vjs-user-active');
    this.addClass('vjs-user-inactive');
    /**
     * @event Player#userinactive
     * @type {EventTarget~Event}
     */
    this.trigger('userinactive');
  };

  /**
   * Listen for user activity based on timeout value
   *
   * @private
   */


  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
    var mouseInProgress = void 0;
    var lastMoveX = void 0;
    var lastMoveY = void 0;
    var handleActivity = bind(this, this.reportUserActivity);

    var handleMouseMove = function handleMouseMove(e) {
      // #1068 - Prevent mousemove spamming
      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
        lastMoveX = e.screenX;
        lastMoveY = e.screenY;
        handleActivity();
      }
    };

    var handleMouseDown = function handleMouseDown() {
      handleActivity();
      // For as long as the they are touching the device or have their mouse down,
      // we consider them active even if they're not moving their finger or mouse.
      // So we want to continue to update that they are active
      this.clearInterval(mouseInProgress);
      // Setting userActivity=true now and setting the interval to the same time
      // as the activityCheck interval (250) should ensure we never miss the
      // next activityCheck
      mouseInProgress = this.setInterval(handleActivity, 250);
    };

    var handleMouseUp = function handleMouseUp(event) {
      handleActivity();
      // Stop the interval that maintains activity if the mouse/touch is down
      this.clearInterval(mouseInProgress);
    };

    // Any mouse movement will be considered user activity
    this.on('mousedown', handleMouseDown);
    this.on('mousemove', handleMouseMove);
    this.on('mouseup', handleMouseUp);

    // Listen for keyboard navigation
    // Shouldn't need to use inProgress interval because of key repeat
    this.on('keydown', handleActivity);
    this.on('keyup', handleActivity);

    // Run an interval every 250 milliseconds instead of stuffing everything into
    // the mousemove/touchmove function itself, to prevent performance degradation.
    // `this.reportUserActivity` simply sets this.userActivity_ to true, which
    // then gets picked up by this loop
    // http://ejohn.org/blog/learning-from-twitter/
    var inactivityTimeout = void 0;

    this.setInterval(function () {
      // Check to see if mouse/touch activity has happened
      if (!this.userActivity_) {
        return;
      }

      // Reset the activity tracker
      this.userActivity_ = false;

      // If the user state was inactive, set the state to active
      this.userActive(true);

      // Clear any existing inactivity timeout to start the timer over
      this.clearTimeout(inactivityTimeout);

      var timeout = this.options_.inactivityTimeout;

      if (timeout <= 0) {
        return;
      }

      // In <timeout> milliseconds, if no more activity has occurred the
      // user will be considered inactive
      inactivityTimeout = this.setTimeout(function () {
        // Protect against the case where the inactivityTimeout can trigger just
        // before the next user activity is picked up by the activity check loop
        // causing a flicker
        if (!this.userActivity_) {
          this.userActive(false);
        }
      }, timeout);
    }, 250);
  };

  /**
   * Gets or sets the current playback rate. A playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed
   * playback, for instance.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
   *
   * @param {number} [rate]
   *       New playback rate to set.
   *
   * @return {number}
   *         The current playback rate when getting or 1.0
   */


  Player.prototype.playbackRate = function playbackRate(rate) {
    if (rate !== undefined) {
      this.techCall_('setPlaybackRate', rate);
      return;
    }

    if (this.tech_ && this.tech_.featuresPlaybackRate) {
      return this.techGet_('playbackRate');
    }
    return 1.0;
  };

  /**
   * Gets or sets the current default playback rate. A default playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
   * defaultPlaybackRate will only represent what the intial playbackRate of a video was, not
   * not the current playbackRate.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
   *
   * @param {number} [rate]
   *       New default playback rate to set.
   *
   * @return {number|Player}
   *         - The default playback rate when getting or 1.0
   *         - the player when setting
   */


  Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {
    if (rate !== undefined) {
      return this.techCall_('setDefaultPlaybackRate', rate);
    }

    if (this.tech_ && this.tech_.featuresPlaybackRate) {
      return this.techGet_('defaultPlaybackRate');
    }
    return 1.0;
  };

  /**
   * Gets or sets the audio flag
   *
   * @param {boolean} bool
   *        - true signals that this is an audio player
   *        - false signals that this is not an audio player
   *
   * @return {boolean}
   *         The current value of isAudio when getting
   */


  Player.prototype.isAudio = function isAudio(bool) {
    if (bool !== undefined) {
      this.isAudio_ = !!bool;
      return;
    }

    return !!this.isAudio_;
  };

  /**
   * A helper method for adding a {@link TextTrack} to our
   * {@link TextTrackList}.
   *
   * In addition to the W3C settings we allow adding additional info through options.
   *
   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
   *
   * @param {string} [kind]
   *        the kind of TextTrack you are adding
   *
   * @param {string} [label]
   *        the label to give the TextTrack label
   *
   * @param {string} [language]
   *        the language to set on the TextTrack
   *
   * @return {TextTrack|undefined}
   *         the TextTrack that was added or undefined
   *         if there is no tech
   */


  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
    if (this.tech_) {
      return this.tech_.addTextTrack(kind, label, language);
    }
  };

  /**
   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
   * automatically removed from the video element whenever the source changes, unless
   * manualCleanup is set to false.
   *
   * @param {Object} options
   *        Options to pass to {@link HTMLTrackElement} during creation. See
   *        {@link HTMLTrackElement} for object properties that you should use.
   *
   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
   *
   * @return {HtmlTrackElement}
   *         the HTMLTrackElement that was created and added
   *         to the HtmlTrackElementList and the remote
   *         TextTrackList
   *
   * @deprecated The default value of the "manualCleanup" parameter will default
   *             to "false" in upcoming versions of Video.js
   */


  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
    if (this.tech_) {
      return this.tech_.addRemoteTextTrack(options, manualCleanup);
    }
  };

  /**
   * Remove a remote {@link TextTrack} from the respective
   * {@link TextTrackList} and {@link HtmlTrackElementList}.
   *
   * @param {Object} track
   *        Remote {@link TextTrack} to remove
   *
   * @return {undefined}
   *         does not return anything
   */


  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$track = _ref3.track,
        track = _ref3$track === undefined ? arguments[0] : _ref3$track;

    // destructure the input into an object with a track argument, defaulting to arguments[0]
    // default the whole argument to an empty object if nothing was passed in

    if (this.tech_) {
      return this.tech_.removeRemoteTextTrack(track);
    }
  };

  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object|undefined}
   *         An object with supported media playback quality metrics or undefined if there
   *         is no tech or the tech does not support it.
   */


  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
    return this.techGet_('getVideoPlaybackQuality');
  };

  /**
   * Get video width
   *
   * @return {number}
   *         current video width
   */


  Player.prototype.videoWidth = function videoWidth() {
    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
  };

  /**
   * Get video height
   *
   * @return {number}
   *         current video height
   */


  Player.prototype.videoHeight = function videoHeight() {
    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
  };

  /**
   * The player's language code
   * NOTE: The language should be set in the player options if you want the
   * the controls to be built with a specific language. Changing the lanugage
   * later will not update controls text.
   *
   * @param {string} [code]
   *        the language code to set the player to
   *
   * @return {string}
   *         The current language code when getting
   */


  Player.prototype.language = function language(code) {
    if (code === undefined) {
      return this.language_;
    }

    this.language_ = String(code).toLowerCase();
  };

  /**
   * Get the player's language dictionary
   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
   * Languages specified directly in the player options have precedence
   *
   * @return {Array}
   *         An array of of supported languages
   */


  Player.prototype.languages = function languages() {
    return mergeOptions(Player.prototype.options_.languages, this.languages_);
  };

  /**
   * returns a JavaScript object reperesenting the current track
   * information. **DOES not return it as JSON**
   *
   * @return {Object}
   *         Object representing the current of track info
   */


  Player.prototype.toJSON = function toJSON() {
    var options = mergeOptions(this.options_);
    var tracks = options.tracks;

    options.tracks = [];

    for (var i = 0; i < tracks.length; i++) {
      var track = tracks[i];

      // deep merge tracks and null out player so no circular references
      track = mergeOptions(track);
      track.player = undefined;
      options.tracks[i] = track;
    }

    return options;
  };

  /**
   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
   * component) that immediately overlays the player with arbitrary
   * content and removes itself when closed.
   *
   * @param {string|Function|Element|Array|null} content
   *        Same as {@link ModalDialog#content}'s param of the same name.
   *        The most straight-forward usage is to provide a string or DOM
   *        element.
   *
   * @param {Object} [options]
   *        Extra options which will be passed on to the {@link ModalDialog}.
   *
   * @return {ModalDialog}
   *         the {@link ModalDialog} that was created
   */


  Player.prototype.createModal = function createModal(content, options) {
    var _this8 = this;

    options = options || {};
    options.content = content || '';

    var modal = new ModalDialog(this, options);

    this.addChild(modal);
    modal.on('dispose', function () {
      _this8.removeChild(modal);
    });

    modal.open();
    return modal;
  };

  /**
   * Gets tag settings
   *
   * @param {Element} tag
   *        The player tag
   *
   * @return {Object}
   *         An object containing all of the settings
   *         for a player tag
   */


  Player.getTagSettings = function getTagSettings(tag) {
    var baseOptions = {
      sources: [],
      tracks: []
    };

    var tagOptions = getAttributes(tag);
    var dataSetup = tagOptions['data-setup'];

    if (hasClass(tag, 'vjs-fluid')) {
      tagOptions.fluid = true;
    }

    // Check if data-setup attr exists.
    if (dataSetup !== null) {
      // Parse options JSON
      // If empty string, make it a parsable json object.
      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),
          err = _safeParseTuple[0],
          data = _safeParseTuple[1];

      if (err) {
        log$1.error(err);
      }
      assign(tagOptions, data);
    }

    assign(baseOptions, tagOptions);

    // Get tag children settings
    if (tag.hasChildNodes()) {
      var children = tag.childNodes;

      for (var i = 0, j = children.length; i < j; i++) {
        var child = children[i];
        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
        var childName = child.nodeName.toLowerCase();

        if (childName === 'source') {
          baseOptions.sources.push(getAttributes(child));
        } else if (childName === 'track') {
          baseOptions.tracks.push(getAttributes(child));
        }
      }
    }

    return baseOptions;
  };

  /**
   * Determine wether or not flexbox is supported
   *
   * @return {boolean}
   *         - true if flexbox is supported
   *         - false if flexbox is not supported
   */


  Player.prototype.flexNotSupported_ = function flexNotSupported_() {
    var elem = document.createElement('i');

    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
    // common flex features that we can rely on when checking for flex support.
    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
    // IE10-specific (2012 flex spec)
    'msFlexOrder' in elem.style);
  };

  return Player;
}(Component);

/**
 * Get the {@link VideoTrackList}
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
 *
 * @return {VideoTrackList}
 *         the current video track list
 *
 * @method Player.prototype.videoTracks
 */

/**
 * Get the {@link AudioTrackList}
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
 *
 * @return {AudioTrackList}
 *         the current audio track list
 *
 * @method Player.prototype.audioTracks
 */

/**
 * Get the {@link TextTrackList}
 *
 * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
 *
 * @return {TextTrackList}
 *         the current text track list
 *
 * @method Player.prototype.textTracks
 */

/**
 * Get the remote {@link TextTrackList}
 *
 * @return {TextTrackList}
 *         The current remote text track list
 *
 * @method Player.prototype.remoteTextTracks
 */

/**
 * Get the remote {@link HtmlTrackElementList} tracks.
 *
 * @return {HtmlTrackElementList}
 *         The current remote text track element list
 *
 * @method Player.prototype.remoteTextTrackEls
 */

ALL.names.forEach(function (name$$1) {
  var props = ALL[name$$1];

  Player.prototype[props.getterName] = function () {
    if (this.tech_) {
      return this.tech_[props.getterName]();
    }

    // if we have not yet loadTech_, we create {video,audio,text}Tracks_
    // these will be passed to the tech during loading
    this[props.privateName] = this[props.privateName] || new props.ListClass();
    return this[props.privateName];
  };
});

/**
 * Global player list
 *
 * @type {Object}
 */
Player.players = {};

var navigator = window.navigator;

/*
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 *
 * @type {Object}
 * @private
 */
Player.prototype.options_ = {
  // Default order of fallback technology
  techOrder: Tech.defaultTechOrder_,

  html5: {},
  flash: {},

  // default inactivity timeout
  inactivityTimeout: 2000,

  // default playback rates
  playbackRates: [],
  // Add playback rate selection by adding rates
  // 'playbackRates': [0.5, 1, 1.5, 2],

  // Included control sets
  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',

  // locales and their language translations
  languages: {},

  // Default message to show when a video cannot be played.
  notSupportedMessage: 'No compatible source was found for this media.'
};

if (!IS_IE8) {
  Player.prototype.options_.children.push('resizeManager');
}

[
/**
 * Returns whether or not the player is in the "ended" state.
 *
 * @return {Boolean} True if the player is in the ended state, false if not.
 * @method Player#ended
 */
'ended',
/**
 * Returns whether or not the player is in the "seeking" state.
 *
 * @return {Boolean} True if the player is in the seeking state, false if not.
 * @method Player#seeking
 */
'seeking',
/**
 * Returns the TimeRanges of the media that are currently available
 * for seeking to.
 *
 * @return {TimeRanges} the seekable intervals of the media timeline
 * @method Player#seekable
 */
'seekable',
/**
 * Returns the current state of network activity for the element, from
 * the codes in the list below.
 * - NETWORK_EMPTY (numeric value 0)
 *   The element has not yet been initialised. All attributes are in
 *   their initial states.
 * - NETWORK_IDLE (numeric value 1)
 *   The element's resource selection algorithm is active and has
 *   selected a resource, but it is not actually using the network at
 *   this time.
 * - NETWORK_LOADING (numeric value 2)
 *   The user agent is actively trying to download data.
 * - NETWORK_NO_SOURCE (numeric value 3)
 *   The element's resource selection algorithm is active, but it has
 *   not yet found a resource to use.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
 * @return {number} the current network activity state
 * @method Player#networkState
 */
'networkState',
/**
 * Returns a value that expresses the current state of the element
 * with respect to rendering the current playback position, from the
 * codes in the list below.
 * - HAVE_NOTHING (numeric value 0)
 *   No information regarding the media resource is available.
 * - HAVE_METADATA (numeric value 1)
 *   Enough of the resource has been obtained that the duration of the
 *   resource is available.
 * - HAVE_CURRENT_DATA (numeric value 2)
 *   Data for the immediate current playback position is available.
 * - HAVE_FUTURE_DATA (numeric value 3)
 *   Data for the immediate current playback position is available, as
 *   well as enough data for the user agent to advance the current
 *   playback position in the direction of playback.
 * - HAVE_ENOUGH_DATA (numeric value 4)
 *   The user agent estimates that enough data is available for
 *   playback to proceed uninterrupted.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
 * @return {number} the current playback rendering state
 * @method Player#readyState
 */
'readyState'].forEach(function (fn) {
  Player.prototype[fn] = function () {
    return this.techGet_(fn);
  };
});

TECH_EVENTS_RETRIGGER.forEach(function (event) {
  Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {
    return this.trigger(event);
  };
});

/**
 * Fired when the player has initial duration and dimension information
 *
 * @event Player#loadedmetadata
 * @type {EventTarget~Event}
 */

/**
 * Fired when the player has downloaded data at the current playback position
 *
 * @event Player#loadeddata
 * @type {EventTarget~Event}
 */

/**
 * Fired when the current playback position has changed *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 *
 * @event Player#timeupdate
 * @type {EventTarget~Event}
 */

/**
 * Fired when the volume changes
 *
 * @event Player#volumechange
 * @type {EventTarget~Event}
 */

/**
 * Reports whether or not a player has a plugin available.
 *
 * This does not report whether or not the plugin has ever been initialized
 * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
 *
 * @method Player#hasPlugin
 * @param  {string}  name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player has the requested plugin available.
 */

/**
 * Reports whether or not a player is using a plugin by name.
 *
 * For basic plugins, this only reports whether the plugin has _ever_ been
 * initialized on this player.
 *
 * @method Player#usingPlugin
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player is using the requested plugin.
 */

Component.registerComponent('Player', Player);

/**
 * @file plugin.js
 */
/**
 * The base plugin name.
 *
 * @private
 * @constant
 * @type {string}
 */
var BASE_PLUGIN_NAME = 'plugin';

/**
 * The key on which a player's active plugins cache is stored.
 *
 * @private
 * @constant
 * @type     {string}
 */
var PLUGIN_CACHE_KEY = 'activePlugins_';

/**
 * Stores registered plugins in a private space.
 *
 * @private
 * @type    {Object}
 */
var pluginStorage = {};

/**
 * Reports whether or not a plugin has been registered.
 *
 * @private
 * @param   {string} name
 *          The name of a plugin.
 *
 * @returns {boolean}
 *          Whether or not the plugin has been registered.
 */
var pluginExists = function pluginExists(name) {
  return pluginStorage.hasOwnProperty(name);
};

/**
 * Get a single registered plugin by name.
 *
 * @private
 * @param   {string} name
 *          The name of a plugin.
 *
 * @returns {Function|undefined}
 *          The plugin (or undefined).
 */
var getPlugin = function getPlugin(name) {
  return pluginExists(name) ? pluginStorage[name] : undefined;
};

/**
 * Marks a plugin as "active" on a player.
 *
 * Also, ensures that the player has an object for tracking active plugins.
 *
 * @private
 * @param   {Player} player
 *          A Video.js player instance.
 *
 * @param   {string} name
 *          The name of a plugin.
 */
var markPluginAsActive = function markPluginAsActive(player, name) {
  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
  player[PLUGIN_CACHE_KEY][name] = true;
};

/**
 * Triggers a pair of plugin setup events.
 *
 * @private
 * @param  {Player} player
 *         A Video.js player instance.
 *
 * @param  {Plugin~PluginEventHash} hash
 *         A plugin event hash.
 *
 * @param  {Boolean} [before]
 *         If true, prefixes the event name with "before". In other words,
 *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
 */
var triggerSetupEvent = function triggerSetupEvent(player, hash, before) {
  var eventName = (before ? 'before' : '') + 'pluginsetup';

  player.trigger(eventName, hash);
  player.trigger(eventName + ':' + hash.name, hash);
};

/**
 * Takes a basic plugin function and returns a wrapper function which marks
 * on the player that the plugin has been activated.
 *
 * @private
 * @param   {string} name
 *          The name of the plugin.
 *
 * @param   {Function} plugin
 *          The basic plugin.
 *
 * @returns {Function}
 *          A wrapper function for the given plugin.
 */
var createBasicPlugin = function createBasicPlugin(name, plugin) {
  var basicPluginWrapper = function basicPluginWrapper() {

    // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
    // regardless, but we want the hash to be consistent with the hash provided
    // for advanced plugins.
    //
    // The only potentially counter-intuitive thing here is the `instance` in
    // the "pluginsetup" event is the value returned by the `plugin` function.
    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);

    var instance = plugin.apply(this, arguments);

    markPluginAsActive(this, name);
    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });

    return instance;
  };

  Object.keys(plugin).forEach(function (prop) {
    basicPluginWrapper[prop] = plugin[prop];
  });

  return basicPluginWrapper;
};

/**
 * Takes a plugin sub-class and returns a factory function for generating
 * instances of it.
 *
 * This factory function will replace itself with an instance of the requested
 * sub-class of Plugin.
 *
 * @private
 * @param   {string} name
 *          The name of the plugin.
 *
 * @param   {Plugin} PluginSubClass
 *          The advanced plugin.
 *
 * @returns {Function}
 */
var createPluginFactory = function createPluginFactory(name, PluginSubClass) {

  // Add a `name` property to the plugin prototype so that each plugin can
  // refer to itself by name.
  PluginSubClass.prototype.name = name;

  return function () {
    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();

    // The plugin is replaced by a function that returns the current instance.
    this[name] = function () {
      return instance;
    };

    triggerSetupEvent(this, instance.getEventHash());

    return instance;
  };
};

/**
 * Parent class for all advanced plugins.
 *
 * @mixes   module:evented~EventedMixin
 * @mixes   module:stateful~StatefulMixin
 * @fires   Player#beforepluginsetup
 * @fires   Player#beforepluginsetup:$name
 * @fires   Player#pluginsetup
 * @fires   Player#pluginsetup:$name
 * @listens Player#dispose
 * @throws  {Error}
 *          If attempting to instantiate the base {@link Plugin} class
 *          directly instead of via a sub-class.
 */

var Plugin = function () {

  /**
   * Creates an instance of this class.
   *
   * Sub-classes should call `super` to ensure plugins are properly initialized.
   *
   * @param {Player} player
   *        A Video.js player instance.
   */
  function Plugin(player) {
    classCallCheck(this, Plugin);

    if (this.constructor === Plugin) {
      throw new Error('Plugin must be sub-classed; not directly instantiated.');
    }

    this.player = player;

    // Make this object evented, but remove the added `trigger` method so we
    // use the prototype version instead.
    evented(this);
    delete this.trigger;

    stateful(this, this.constructor.defaultState);
    markPluginAsActive(player, this.name);

    // Auto-bind the dispose method so we can use it as a listener and unbind
    // it later easily.
    this.dispose = bind(this, this.dispose);

    // If the player is disposed, dispose the plugin.
    player.on('dispose', this.dispose);
  }

  /**
   * Get the version of the plugin that was set on <pluginName>.VERSION
   */


  Plugin.prototype.version = function version() {
    return this.constructor.VERSION;
  };

  /**
   * Each event triggered by plugins includes a hash of additional data with
   * conventional properties.
   *
   * This returns that object or mutates an existing hash.
   *
   * @param   {Object} [hash={}]
   *          An object to be used as event an event hash.
   *
   * @returns {Plugin~PluginEventHash}
   *          An event hash object with provided properties mixed-in.
   */


  Plugin.prototype.getEventHash = function getEventHash() {
    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    hash.name = this.name;
    hash.plugin = this.constructor;
    hash.instance = this;
    return hash;
  };

  /**
   * Triggers an event on the plugin object and overrides
   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash={}]
   *          Additional data hash to merge with a
   *          {@link Plugin~PluginEventHash|PluginEventHash}.
   *
   * @returns {boolean}
   *          Whether or not default was prevented.
   */


  Plugin.prototype.trigger = function trigger$$1(event) {
    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return trigger(this.eventBusEl_, event, this.getEventHash(hash));
  };

  /**
   * Handles "statechanged" events on the plugin. No-op by default, override by
   * subclassing.
   *
   * @abstract
   * @param    {Event} e
   *           An event object provided by a "statechanged" event.
   *
   * @param    {Object} e.changes
   *           An object describing changes that occurred with the "statechanged"
   *           event.
   */


  Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};

  /**
   * Disposes a plugin.
   *
   * Subclasses can override this if they want, but for the sake of safety,
   * it's probably best to subscribe the "dispose" event.
   *
   * @fires Plugin#dispose
   */


  Plugin.prototype.dispose = function dispose() {
    var name = this.name,
        player = this.player;

    /**
     * Signals that a advanced plugin is about to be disposed.
     *
     * @event Plugin#dispose
     * @type  {EventTarget~Event}
     */

    this.trigger('dispose');
    this.off();
    player.off('dispose', this.dispose);

    // Eliminate any possible sources of leaking memory by clearing up
    // references between the player and the plugin instance and nulling out
    // the plugin's state and replacing methods with a function that throws.
    player[PLUGIN_CACHE_KEY][name] = false;
    this.player = this.state = null;

    // Finally, replace the plugin name on the player with a new factory
    // function, so that the plugin is ready to be set up again.
    player[name] = createPluginFactory(name, pluginStorage[name]);
  };

  /**
   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
   *
   * @param   {string|Function} plugin
   *          If a string, matches the name of a plugin. If a function, will be
   *          tested directly.
   *
   * @returns {boolean}
   *          Whether or not a plugin is a basic plugin.
   */


  Plugin.isBasic = function isBasic(plugin) {
    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;

    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);
  };

  /**
   * Register a Video.js plugin.
   *
   * @param   {string} name
   *          The name of the plugin to be registered. Must be a string and
   *          must not match an existing plugin or a method on the `Player`
   *          prototype.
   *
   * @param   {Function} plugin
   *          A sub-class of `Plugin` or a function for basic plugins.
   *
   * @returns {Function}
   *          For advanced plugins, a factory function for that plugin. For
   *          basic plugins, a wrapper function that initializes the plugin.
   */


  Plugin.registerPlugin = function registerPlugin(name, plugin) {
    if (typeof name !== 'string') {
      throw new Error('Illegal plugin name, "' + name + '", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');
    }

    if (pluginExists(name)) {
      log$1.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
    } else if (Player.prototype.hasOwnProperty(name)) {
      throw new Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
    }

    if (typeof plugin !== 'function') {
      throw new Error('Illegal plugin for "' + name + '", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');
    }

    pluginStorage[name] = plugin;

    // Add a player prototype method for all sub-classed plugins (but not for
    // the base Plugin class).
    if (name !== BASE_PLUGIN_NAME) {
      if (Plugin.isBasic(plugin)) {
        Player.prototype[name] = createBasicPlugin(name, plugin);
      } else {
        Player.prototype[name] = createPluginFactory(name, plugin);
      }
    }

    return plugin;
  };

  /**
   * De-register a Video.js plugin.
   *
   * @param {string} name
   *        The name of the plugin to be deregistered.
   */


  Plugin.deregisterPlugin = function deregisterPlugin(name) {
    if (name === BASE_PLUGIN_NAME) {
      throw new Error('Cannot de-register base plugin.');
    }
    if (pluginExists(name)) {
      delete pluginStorage[name];
      delete Player.prototype[name];
    }
  };

  /**
   * Gets an object containing multiple Video.js plugins.
   *
   * @param   {Array} [names]
   *          If provided, should be an array of plugin names. Defaults to _all_
   *          plugin names.
   *
   * @returns {Object|undefined}
   *          An object containing plugin(s) associated with their name(s) or
   *          `undefined` if no matching plugins exist).
   */


  Plugin.getPlugins = function getPlugins() {
    var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);

    var result = void 0;

    names.forEach(function (name) {
      var plugin = getPlugin(name);

      if (plugin) {
        result = result || {};
        result[name] = plugin;
      }
    });

    return result;
  };

  /**
   * Gets a plugin's version, if available
   *
   * @param   {string} name
   *          The name of a plugin.
   *
   * @returns {string}
   *          The plugin's version or an empty string.
   */


  Plugin.getPluginVersion = function getPluginVersion(name) {
    var plugin = getPlugin(name);

    return plugin && plugin.VERSION || '';
  };

  return Plugin;
}();

/**
 * Gets a plugin by name if it exists.
 *
 * @static
 * @method   getPlugin
 * @memberOf Plugin
 * @param    {string} name
 *           The name of a plugin.
 *
 * @returns  {Function|undefined}
 *           The plugin (or `undefined`).
 */


Plugin.getPlugin = getPlugin;

/**
 * The name of the base plugin class as it is registered.
 *
 * @type {string}
 */
Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;

Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);

/**
 * Documented in player.js
 *
 * @ignore
 */
Player.prototype.usingPlugin = function (name) {
  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
};

/**
 * Documented in player.js
 *
 * @ignore
 */
Player.prototype.hasPlugin = function (name) {
  return !!pluginExists(name);
};

/**
 * Signals that a plugin is about to be set up on a player.
 *
 * @event    Player#beforepluginsetup
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Signals that a plugin is about to be set up on a player - by name. The name
 * is the name of the plugin.
 *
 * @event    Player#beforepluginsetup:$name
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Signals that a plugin has just been set up on a player.
 *
 * @event    Player#pluginsetup
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Signals that a plugin has just been set up on a player - by name. The name
 * is the name of the plugin.
 *
 * @event    Player#pluginsetup:$name
 * @type     {Plugin~PluginEventHash}
 */

/**
 * @typedef  {Object} Plugin~PluginEventHash
 *
 * @property {string} instance
 *           For basic plugins, the return value of the plugin function. For
 *           advanced plugins, the plugin instance on which the event is fired.
 *
 * @property {string} name
 *           The name of the plugin.
 *
 * @property {string} plugin
 *           For basic plugins, the plugin function. For advanced plugins, the
 *           plugin class/constructor.
 */

/**
 * @file extend.js
 * @module extend
 */

/**
 * A combination of node inherits and babel's inherits (after transpile).
 * Both work the same but node adds `super_` to the subClass
 * and Bable adds the superClass as __proto__. Both seem useful.
 *
 * @param {Object} subClass
 *        The class to inherit to
 *
 * @param {Object} superClass
 *        The class to inherit from
 *
 * @private
 */
var _inherits = function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (superClass) {
    // node
    subClass.super_ = superClass;
  }
};

/**
 * Function for subclassing using the same inheritance that
 * videojs uses internally
 *
 * @static
 * @const
 *
 * @param {Object} superClass
 *        The class to inherit from
 *
 * @param {Object} [subClassMethods={}]
 *        The class to inherit to
 *
 * @return {Object}
 *         The new object with subClassMethods that inherited superClass.
 */
var extendFn = function extendFn(superClass) {
  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var subClass = function subClass() {
    superClass.apply(this, arguments);
  };

  var methods = {};

  if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {
    if (subClassMethods.constructor !== Object.prototype.constructor) {
      subClass = subClassMethods.constructor;
    }
    methods = subClassMethods;
  } else if (typeof subClassMethods === 'function') {
    subClass = subClassMethods;
  }

  _inherits(subClass, superClass);

  // Extend subObj's prototype with functions and other properties from props
  for (var name in methods) {
    if (methods.hasOwnProperty(name)) {
      subClass.prototype[name] = methods[name];
    }
  }

  return subClass;
};

/**
 * @file video.js
 * @module videojs
 */
// Include the built-in techs
// HTML5 Element Shim for IE8
if (typeof HTMLVideoElement === 'undefined' && isReal()) {
  document.createElement('video');
  document.createElement('audio');
  document.createElement('track');
  document.createElement('video-js');
}

/**
 * Normalize an `id` value by trimming off a leading `#`
 *
 * @param   {string} id
 *          A string, maybe with a leading `#`.
 *
 * @returns {string}
 *          The string, without any leading `#`.
 */
var normalizeId = function normalizeId(id) {
  return id.indexOf('#') === 0 ? id.slice(1) : id;
};

/**
 * Doubles as the main function for users to create a player instance and also
 * the main library object.
 * The `videojs` function can be used to initialize or retrieve a player.
  *
 * @param {string|Element} id
 *        Video element or video element ID
 *
 * @param {Object} [options]
 *        Optional options object for config/settings
 *
 * @param {Component~ReadyCallback} [ready]
 *        Optional ready callback
 *
 * @return {Player}
 *         A player instance
 */
function videojs(id, options, ready) {
  var player = videojs.getPlayer(id);

  if (player) {
    if (options) {
      log$1.warn('Player "' + id + '" is already initialised. Options will not be applied.');
    }
    if (ready) {
      player.ready(ready);
    }
    return player;
  }

  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;

  if (!isEl(el)) {
    throw new TypeError('The element or ID supplied is not valid. (videojs)');
  }

  if (!document.body.contains(el)) {
    log$1.warn('The element supplied is not included in the DOM');
  }

  options = options || {};

  videojs.hooks('beforesetup').forEach(function (hookFunction) {
    var opts = hookFunction(el, mergeOptions(options));

    if (!isObject(opts) || Array.isArray(opts)) {
      log$1.error('please return an object in beforesetup hooks');
      return;
    }

    options = mergeOptions(options, opts);
  });

  // We get the current "Player" component here in case an integration has
  // replaced it with a custom player.
  var PlayerComponent = Component.getComponent('Player');

  player = new PlayerComponent(el, options, ready);

  videojs.hooks('setup').forEach(function (hookFunction) {
    return hookFunction(player);
  });

  return player;
}

/**
 * An Object that contains lifecycle hooks as keys which point to an array
 * of functions that are run when a lifecycle is triggered
 */
videojs.hooks_ = {};

/**
 * Get a list of hooks for a specific lifecycle
 * @function videojs.hooks
 *
 * @param {string} type
 *        the lifecyle to get hooks from
 *
 * @param {Function|Function[]} [fn]
 *        Optionally add a hook (or hooks) to the lifecycle that your are getting.
 *
 * @return {Array}
 *         an array of hooks, or an empty array if there are none.
 */
videojs.hooks = function (type, fn) {
  videojs.hooks_[type] = videojs.hooks_[type] || [];
  if (fn) {
    videojs.hooks_[type] = videojs.hooks_[type].concat(fn);
  }
  return videojs.hooks_[type];
};

/**
 * Add a function hook to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]}
 *        The function or array of functions to attach.
 */
videojs.hook = function (type, fn) {
  videojs.hooks(type, fn);
};

/**
 * Add a function hook that will only run once to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]}
 *        The function or array of functions to attach.
 */
videojs.hookOnce = function (type, fn) {
  videojs.hooks(type, [].concat(fn).map(function (original) {
    var wrapper = function wrapper() {
      videojs.removeHook(type, wrapper);
      return original.apply(undefined, arguments);
    };

    return wrapper;
  }));
};

/**
 * Remove a hook from a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle that the function hooked to
 *
 * @param {Function} fn
 *        The hooked function to remove
 *
 * @return {boolean}
 *         The function that was removed or undef
 */
videojs.removeHook = function (type, fn) {
  var index = videojs.hooks(type).indexOf(fn);

  if (index <= -1) {
    return false;
  }

  videojs.hooks_[type] = videojs.hooks_[type].slice();
  videojs.hooks_[type].splice(index, 1);

  return true;
};

// Add default styles
if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
  var style = $('.vjs-styles-defaults');

  if (!style) {
    style = createStyleElement('vjs-styles-defaults');
    var head = $('head');

    if (head) {
      head.insertBefore(style, head.firstChild);
    }
    setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
  }
}

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your
// video in the DOM (weird behavior only with minified version)
autoSetupTimeout(1, videojs);

/**
 * Current software version. Follows semver.
 *
 * @type {string}
 */
videojs.VERSION = version;

/**
 * The global options object. These are the settings that take effect
 * if no overrides are specified when the player is created.
 *
 * @type {Object}
 */
videojs.options = Player.prototype.options_;

/**
 * Get an object with the currently created players, keyed by player ID
 *
 * @return {Object}
 *         The created players
 */
videojs.getPlayers = function () {
  return Player.players;
};

/**
 * Get a single player based on an ID or DOM element.
 *
 * This is useful if you want to check if an element or ID has an associated
 * Video.js player, but not create one if it doesn't.
 *
 * @param   {string|Element} id
 *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
 *          or a string matching the `id` of such an element.
 *
 * @returns {Player|undefined}
 *          A player instance or `undefined` if there is no player instance
 *          matching the argument.
 */
videojs.getPlayer = function (id) {
  var players = Player.players;
  var tag = void 0;

  if (typeof id === 'string') {
    var nId = normalizeId(id);
    var player = players[nId];

    if (player) {
      return player;
    }

    tag = $('#' + nId);
  } else {
    tag = id;
  }

  if (isEl(tag)) {
    var _tag = tag,
        _player = _tag.player,
        playerId = _tag.playerId;

    // Element may have a `player` property referring to an already created
    // player instance. If so, return that.

    if (_player || players[playerId]) {
      return _player || players[playerId];
    }
  }
};

/**
 * Returns an array of all current players.
 *
 * @return {Array}
 *         An array of all players. The array will be in the order that
 *         `Object.keys` provides, which could potentially vary between
 *         JavaScript engines.
 *
 */
videojs.getAllPlayers = function () {
  return (

    // Disposed players leave a key with a `null` value, so we need to make sure
    // we filter those out.
    Object.keys(Player.players).map(function (k) {
      return Player.players[k];
    }).filter(Boolean)
  );
};

/**
 * Expose players object.
 *
 * @memberOf videojs
 * @property {Object} players
 */
videojs.players = Player.players;

/**
 * Get a component class object by name
 *
 * @borrows Component.getComponent as videojs.getComponent
 */
videojs.getComponent = Component.getComponent;

/**
 * Register a component so it can referred to by name. Used when adding to other
 * components, either through addChild `component.addChild('myComponent')` or through
 * default children options  `{ children: ['myComponent'] }`.
 *
 * > NOTE: You could also just initialize the component before adding.
 * `component.addChild(new MyComponent());`
 *
 * @param {string} name
 *        The class name of the component
 *
 * @param {Component} comp
 *        The component class
 *
 * @return {Component}
 *         The newly registered component
 */
videojs.registerComponent = function (name$$1, comp) {
  if (Tech.isTech(comp)) {
    log$1.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
  }

  Component.registerComponent.call(Component, name$$1, comp);
};

/**
 * Get a Tech class object by name
 *
 * @borrows Tech.getTech as videojs.getTech
 */
videojs.getTech = Tech.getTech;

/**
 * Register a Tech so it can referred to by name.
 * This is used in the tech order for the player.
 *
 * @borrows Tech.registerTech as videojs.registerTech
 */
videojs.registerTech = Tech.registerTech;

/**
 * Register a middleware to a source type.
 *
 * @param {String} type A string representing a MIME type.
 * @param {function(player):object} middleware A middleware factory that takes a player.
 */
videojs.use = use;

/**
 * An object that can be returned by a middleware to signify
 * that the middleware is being terminated.
 *
 * @type {object}
 * @memberOf {videojs}
 * @property {object} middleware.TERMINATOR
 */
// Object.defineProperty is not available in IE8
if (!IS_IE8 && Object.defineProperty) {
  Object.defineProperty(videojs, 'middleware', {
    value: {},
    writeable: false,
    enumerable: true
  });

  Object.defineProperty(videojs.middleware, 'TERMINATOR', {
    value: TERMINATOR,
    writeable: false,
    enumerable: true
  });
} else {
  videojs.middleware = { TERMINATOR: TERMINATOR };
}

/**
 * A suite of browser and device tests from {@link browser}.
 *
 * @type {Object}
 * @private
 */
videojs.browser = browser;

/**
 * Whether or not the browser supports touch events. Included for backward
 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
 * instead going forward.
 *
 * @deprecated since version 5.0
 * @type {boolean}
 */
videojs.TOUCH_ENABLED = TOUCH_ENABLED;

/**
 * Subclass an existing class
 * Mimics ES6 subclassing with the `extend` keyword
 *
 * @borrows extend:extendFn as videojs.extend
 */
videojs.extend = extendFn;

/**
 * Merge two options objects recursively
 * Performs a deep merge like lodash.merge but **only merges plain objects**
 * (not arrays, elements, anything else)
 * Other values will be copied directly from the second object.
 *
 * @borrows merge-options:mergeOptions as videojs.mergeOptions
 */
videojs.mergeOptions = mergeOptions;

/**
 * Change the context (this) of a function
 *
 * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
 * `function() {}.bind(newContext);` instead of this.
 *
 * @borrows fn:bind as videojs.bind
 */
videojs.bind = bind;

/**
 * Register a Video.js plugin.
 *
 * @borrows plugin:registerPlugin as videojs.registerPlugin
 * @method registerPlugin
 *
 * @param  {string} name
 *         The name of the plugin to be registered. Must be a string and
 *         must not match an existing plugin or a method on the `Player`
 *         prototype.
 *
 * @param  {Function} plugin
 *         A sub-class of `Plugin` or a function for basic plugins.
 *
 * @return {Function}
 *         For advanced plugins, a factory function for that plugin. For
 *         basic plugins, a wrapper function that initializes the plugin.
 */
videojs.registerPlugin = Plugin.registerPlugin;

/**
 * Deprecated method to register a plugin with Video.js
 *
 * @deprecated
 *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead
 *
 * @param {string} name
 *        The plugin name
 *
 * @param {Plugin|Function} plugin
 *         The plugin sub-class or function
 */
videojs.plugin = function (name$$1, plugin) {
  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');
  return Plugin.registerPlugin(name$$1, plugin);
};

/**
 * Gets an object containing multiple Video.js plugins.
 *
 * @param  {Array} [names]
 *         If provided, should be an array of plugin names. Defaults to _all_
 *         plugin names.
 *
 * @return {Object|undefined}
 *         An object containing plugin(s) associated with their name(s) or
 *         `undefined` if no matching plugins exist).
 */
videojs.getPlugins = Plugin.getPlugins;

/**
 * Gets a plugin by name if it exists.
 *
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {Function|undefined}
 *         The plugin (or `undefined`).
 */
videojs.getPlugin = Plugin.getPlugin;

/**
 * Gets a plugin's version, if available
 *
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {string}
 *         The plugin's version or an empty string.
 */
videojs.getPluginVersion = Plugin.getPluginVersion;

/**
 * Adding languages so that they're available to all players.
 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
 *
 * @param {string} code
 *        The language code or dictionary property
 *
 * @param {Object} data
 *        The data values to be translated
 *
 * @return {Object}
 *         The resulting language dictionary object
 */
videojs.addLanguage = function (code, data) {
  var _mergeOptions;

  code = ('' + code).toLowerCase();

  videojs.options.languages = mergeOptions(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));

  return videojs.options.languages[code];
};

/**
 * Log messages
 *
 * @borrows log:log as videojs.log
 */
videojs.log = log$1;

/**
 * Creates an emulated TimeRange object.
 *
 * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
 */
/**
 * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
 */
videojs.createTimeRange = videojs.createTimeRanges = createTimeRanges;

/**
 * Format seconds as a time string, H:MM:SS or M:SS
 * Supplying a guide (in seconds) will force a number of leading zeros
 * to cover the length of the guide
 *
 * @borrows format-time:formatTime as videojs.formatTime
 */
videojs.formatTime = formatTime;

/**
 * Resolve and parse the elements of a URL
 *
 * @borrows url:parseUrl as videojs.parseUrl
 */
videojs.parseUrl = parseUrl;

/**
 * Returns whether the url passed is a cross domain request or not.
 *
 * @borrows url:isCrossOrigin as videojs.isCrossOrigin
 */
videojs.isCrossOrigin = isCrossOrigin;

/**
 * Event target class.
 *
 * @borrows EventTarget as videojs.EventTarget
 */
videojs.EventTarget = EventTarget;

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @borrows events:on as videojs.on
 */
videojs.on = on;

/**
 * Trigger a listener only once for an event
 *
 * @borrows events:one as videojs.one
 */
videojs.one = one;

/**
 * Removes event listeners from an element
 *
 * @borrows events:off as videojs.off
 */
videojs.off = off;

/**
 * Trigger an event for an element
 *
 * @borrows events:trigger as videojs.trigger
 */
videojs.trigger = trigger;

/**
 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
 *
 * @param {Object} options
 *        settings for the request.
 *
 * @return {XMLHttpRequest|XDomainRequest}
 *         The request object.
 *
 * @see https://github.com/Raynos/xhr
 */
videojs.xhr = xhr;

/**
 * TextTrack class
 *
 * @borrows TextTrack as videojs.TextTrack
 */
videojs.TextTrack = TextTrack;

/**
 * export the AudioTrack class so that source handlers can create
 * AudioTracks and then add them to the players AudioTrackList
 *
 * @borrows AudioTrack as videojs.AudioTrack
 */
videojs.AudioTrack = AudioTrack;

/**
 * export the VideoTrack class so that source handlers can create
 * VideoTracks and then add them to the players VideoTrackList
 *
 * @borrows VideoTrack as videojs.VideoTrack
 */
videojs.VideoTrack = VideoTrack;

/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @borrows dom:isEl as videojs.isEl
 * @deprecated Use videojs.dom.isEl() instead
 */

/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @borrows dom:isTextNode as videojs.isTextNode
 * @deprecated Use videojs.dom.isTextNode() instead
 */

/**
 * Creates an element and applies properties.
 *
 * @borrows dom:createEl as videojs.createEl
 * @deprecated Use videojs.dom.createEl() instead
 */

/**
 * Check if an element has a CSS class
 *
 * @borrows dom:hasElClass as videojs.hasClass
 * @deprecated Use videojs.dom.hasClass() instead
 */

/**
 * Add a CSS class name to an element
 *
 * @borrows dom:addElClass as videojs.addClass
 * @deprecated Use videojs.dom.addClass() instead
 */

/**
 * Remove a CSS class name from an element
 *
 * @borrows dom:removeElClass as videojs.removeClass
 * @deprecated Use videojs.dom.removeClass() instead
 */

/**
 * Adds or removes a CSS class name on an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @borrows dom:toggleElClass as videojs.toggleClass
 * @deprecated Use videojs.dom.toggleClass() instead
 */

/**
 * Apply attributes to an HTML element.
 *
 * @borrows dom:setElAttributes as videojs.setAttribute
 * @deprecated Use videojs.dom.setAttributes() instead
 */

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 *
 * @borrows dom:getElAttributes as videojs.getAttributes
 * @deprecated Use videojs.dom.getAttributes() instead
 */

/**
 * Empties the contents of an element.
 *
 * @borrows dom:emptyEl as videojs.emptyEl
 * @deprecated Use videojs.dom.emptyEl() instead
 */

/**
 * Normalizes and appends content to an element.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * - String
 *   Normalized into a text node.
 *
 * - Element, TextNode
 *   Passed through.
 *
 * - Array
 *   A one-dimensional array of strings, elements, nodes, or functions (which
 *   return single strings, elements, or nodes).
 *
 * - Function
 *   If the sole argument, is expected to produce a string, element,
 *   node, or array.
 *
 * @borrows dom:appendContents as videojs.appendContet
 * @deprecated Use videojs.dom.appendContent() instead
 */

/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * - String
 *   Normalized into a text node.
 *
 * - Element, TextNode
 *   Passed through.
 *
 * - Array
 *   A one-dimensional array of strings, elements, nodes, or functions (which
 *   return single strings, elements, or nodes).
 *
 * - Function
 *   If the sole argument, is expected to produce a string, element,
 *   node, or array.
 *
 * @borrows dom:insertContent as videojs.insertContent
 * @deprecated Use videojs.dom.insertContent() instead
 */
['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {
  videojs[k] = function () {
    log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');
    return Dom[k].apply(null, arguments);
  };
});

/**
 * A safe getComputedStyle with an IE8 fallback.
 *
 * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
 * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
 * that the player doesn't break in these cases.
 * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
 *
 * @borrows computed-style:computedStyle as videojs.computedStyle
 */
videojs.computedStyle = computedStyle;

/**
 * Export the Dom utilities for use in external plugins
 * and Tech's
 */
videojs.dom = Dom;

/**
 * Export the Url utilities for use in external plugins
 * and Tech's
 */
videojs.url = Url;

module.exports = videojs;

},{"global/document":4,"global/window":5,"safe-json-parse/tuple":9,"tsml":10,"videojs-vtt.js":11,"xhr":15}],9:[function(_dereq_,module,exports){
module.exports = SafeParseTuple

function SafeParseTuple(obj, reviver) {
    var json
    var error = null

    try {
        json = JSON.parse(obj, reviver)
    } catch (err) {
        error = err
    }

    return [error, json]
}

},{}],10:[function(_dereq_,module,exports){
function clean (s) {
  return s.replace(/\n\r?\s*/g, '')
}


module.exports = function tsml (sa) {
  var s = ''
    , i = 0

  for (; i < arguments.length; i++)
    s += clean(sa[i]) + (arguments[i + 1] || '')

  return s
}
},{}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Default exports for Node. Export the extended versions of VTTCue and
// VTTRegion in Node since we likely want the capability to convert back and
// forth between JSON. If we don't then it's not that big of a deal since we're
// off browser.

var window = _dereq_('global/window');

var vttjs = module.exports = {
  WebVTT: _dereq_("./vtt.js"),
  VTTCue: _dereq_("./vttcue.js"),
  VTTRegion: _dereq_("./vttregion.js")
};

window.vttjs = vttjs;
window.WebVTT = vttjs.WebVTT;

var cueShim = vttjs.VTTCue;
var regionShim = vttjs.VTTRegion;
var nativeVTTCue = window.VTTCue;
var nativeVTTRegion = window.VTTRegion;

vttjs.shim = function() {
  window.VTTCue = cueShim;
  window.VTTRegion = regionShim;
};

vttjs.restore = function() {
  window.VTTCue = nativeVTTCue;
  window.VTTRegion = nativeVTTRegion;
};

if (!window.VTTCue) {
  vttjs.shim();
}

},{"./vtt.js":12,"./vttcue.js":13,"./vttregion.js":14,"global/window":5}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
var _objCreate = Object.create || (function() {
  function F() {}
  return function(o) {
    if (arguments.length !== 1) {
      throw new Error('Object.create shim only accepts one parameter.');
    }
    F.prototype = o;
    return new F();
  };
})();

// Creates a new ParserError object from an errorData object. The errorData
// object should have default code and message properties. The default message
// property can be overriden by passing in a message parameter.
// See ParsingError.Errors below for acceptable errors.
function ParsingError(errorData, message) {
  this.name = "ParsingError";
  this.code = errorData.code;
  this.message = message || errorData.message;
}
ParsingError.prototype = _objCreate(Error.prototype);
ParsingError.prototype.constructor = ParsingError;

// ParsingError metadata for acceptable ParsingErrors.
ParsingError.Errors = {
  BadSignature: {
    code: 0,
    message: "Malformed WebVTT signature."
  },
  BadTimeStamp: {
    code: 1,
    message: "Malformed time stamp."
  }
};

// Try to parse input as a time stamp.
function parseTimeStamp(input) {

  function computeSeconds(h, m, s, f) {
    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
  }

  var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
  if (!m) {
    return null;
  }

  if (m[3]) {
    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
    return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
  } else if (m[1] > 59) {
    // Timestamp takes the form of [hours]:[minutes].[milliseconds]
    // First position is hours as it's over 59.
    return computeSeconds(m[1], m[2], 0,  m[4]);
  } else {
    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
    return computeSeconds(0, m[1], m[2], m[4]);
  }
}

// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
function Settings() {
  this.values = _objCreate(null);
}

Settings.prototype = {
  // Only accept the first assignment to any key.
  set: function(k, v) {
    if (!this.get(k) && v !== "") {
      this.values[k] = v;
    }
  },
  // Return the value for a key, or a default value.
  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
  // a number of possible default values as properties where 'defaultKey' is
  // the key of the property that will be chosen; otherwise it's assumed to be
  // a single value.
  get: function(k, dflt, defaultKey) {
    if (defaultKey) {
      return this.has(k) ? this.values[k] : dflt[defaultKey];
    }
    return this.has(k) ? this.values[k] : dflt;
  },
  // Check whether we have a value for a key.
  has: function(k) {
    return k in this.values;
  },
  // Accept a setting if its one of the given alternatives.
  alt: function(k, v, a) {
    for (var n = 0; n < a.length; ++n) {
      if (v === a[n]) {
        this.set(k, v);
        break;
      }
    }
  },
  // Accept a setting if its a valid (signed) integer.
  integer: function(k, v) {
    if (/^-?\d+$/.test(v)) { // integer
      this.set(k, parseInt(v, 10));
    }
  },
  // Accept a setting if its a valid percentage.
  percent: function(k, v) {
    var m;
    if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
      v = parseFloat(v);
      if (v >= 0 && v <= 100) {
        this.set(k, v);
        return true;
      }
    }
    return false;
  }
};

// Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.
function parseOptions(input, callback, keyValueDelim, groupDelim) {
  var groups = groupDelim ? input.split(groupDelim) : [input];
  for (var i in groups) {
    if (typeof groups[i] !== "string") {
      continue;
    }
    var kv = groups[i].split(keyValueDelim);
    if (kv.length !== 2) {
      continue;
    }
    var k = kv[0];
    var v = kv[1];
    callback(k, v);
  }
}

function parseCue(input, cue, regionList) {
  // Remember the original input if we need to throw an error.
  var oInput = input;
  // 4.1 WebVTT timestamp
  function consumeTimeStamp() {
    var ts = parseTimeStamp(input);
    if (ts === null) {
      throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                            "Malformed timestamp: " + oInput);
    }
    // Remove time stamp from input.
    input = input.replace(/^[^\sa-zA-Z-]+/, "");
    return ts;
  }

  // 4.4.2 WebVTT cue settings
  function consumeCueSettings(input, cue) {
    var settings = new Settings();

    parseOptions(input, function (k, v) {
      switch (k) {
      case "region":
        // Find the last region we parsed with the same region id.
        for (var i = regionList.length - 1; i >= 0; i--) {
          if (regionList[i].id === v) {
            settings.set(k, regionList[i].region);
            break;
          }
        }
        break;
      case "vertical":
        settings.alt(k, v, ["rl", "lr"]);
        break;
      case "line":
        var vals = v.split(","),
            vals0 = vals[0];
        settings.integer(k, vals0);
        settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
        settings.alt(k, vals0, ["auto"]);
        if (vals.length === 2) {
          settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
        }
        break;
      case "position":
        vals = v.split(",");
        settings.percent(k, vals[0]);
        if (vals.length === 2) {
          settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
        }
        break;
      case "size":
        settings.percent(k, v);
        break;
      case "align":
        settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
        break;
      }
    }, /:/, /\s/);

    // Apply default values for any missing fields.
    cue.region = settings.get("region", null);
    cue.vertical = settings.get("vertical", "");
    cue.line = settings.get("line", "auto");
    cue.lineAlign = settings.get("lineAlign", "start");
    cue.snapToLines = settings.get("snapToLines", true);
    cue.size = settings.get("size", 100);
    cue.align = settings.get("align", "middle");
    cue.position = settings.get("position", {
      start: 0,
      left: 0,
      middle: 50,
      end: 100,
      right: 100
    }, cue.align);
    cue.positionAlign = settings.get("positionAlign", {
      start: "start",
      left: "start",
      middle: "middle",
      end: "end",
      right: "end"
    }, cue.align);
  }

  function skipWhitespace() {
    input = input.replace(/^\s+/, "");
  }

  // 4.1 WebVTT cue timings.
  skipWhitespace();
  cue.startTime = consumeTimeStamp();   // (1) collect cue start time
  skipWhitespace();
  if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
    throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                           "Malformed time stamp (time stamps must be separated by '-->'): " +
                           oInput);
  }
  input = input.substr(3);
  skipWhitespace();
  cue.endTime = consumeTimeStamp();     // (5) collect cue end time

  // 4.1 WebVTT cue settings list.
  skipWhitespace();
  consumeCueSettings(input, cue);
}

var ESCAPE = {
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">",
  "&lrm;": "\u200e",
  "&rlm;": "\u200f",
  "&nbsp;": "\u00a0"
};

var TAG_NAME = {
  c: "span",
  i: "i",
  b: "b",
  u: "u",
  ruby: "ruby",
  rt: "rt",
  v: "span",
  lang: "span"
};

var TAG_ANNOTATION = {
  v: "title",
  lang: "lang"
};

var NEEDS_PARENT = {
  rt: "ruby"
};

// Parse content into a document fragment.
function parseContent(window, input) {
  function nextToken() {
    // Check for end-of-string.
    if (!input) {
      return null;
    }

    // Consume 'n' characters from the input.
    function consume(result) {
      input = input.substr(result.length);
      return result;
    }

    var m = input.match(/^([^<]*)(<[^>]*>?)?/);
    // If there is some text before the next tag, return it, otherwise return
    // the tag.
    return consume(m[1] ? m[1] : m[2]);
  }

  // Unescape a string 's'.
  function unescape1(e) {
    return ESCAPE[e];
  }
  function unescape(s) {
    while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
      s = s.replace(m[0], unescape1);
    }
    return s;
  }

  function shouldAdd(current, element) {
    return !NEEDS_PARENT[element.localName] ||
           NEEDS_PARENT[element.localName] === current.localName;
  }

  // Create an element for this tag.
  function createElement(type, annotation) {
    var tagName = TAG_NAME[type];
    if (!tagName) {
      return null;
    }
    var element = window.document.createElement(tagName);
    element.localName = tagName;
    var name = TAG_ANNOTATION[type];
    if (name && annotation) {
      element[name] = annotation.trim();
    }
    return element;
  }

  var rootDiv = window.document.createElement("div"),
      current = rootDiv,
      t,
      tagStack = [];

  while ((t = nextToken()) !== null) {
    if (t[0] === '<') {
      if (t[1] === "/") {
        // If the closing tag matches, move back up to the parent node.
        if (tagStack.length &&
            tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
          tagStack.pop();
          current = current.parentNode;
        }
        // Otherwise just ignore the end tag.
        continue;
      }
      var ts = parseTimeStamp(t.substr(1, t.length - 2));
      var node;
      if (ts) {
        // Timestamps are lead nodes as well.
        node = window.document.createProcessingInstruction("timestamp", ts);
        current.appendChild(node);
        continue;
      }
      var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
      // If we can't parse the tag, skip to the next tag.
      if (!m) {
        continue;
      }
      // Try to construct an element, and ignore the tag if we couldn't.
      node = createElement(m[1], m[3]);
      if (!node) {
        continue;
      }
      // Determine if the tag should be added based on the context of where it
      // is placed in the cuetext.
      if (!shouldAdd(current, node)) {
        continue;
      }
      // Set the class list (as a list of classes, separated by space).
      if (m[2]) {
        node.className = m[2].substr(1).replace('.', ' ');
      }
      // Append the node to the current node, and enter the scope of the new
      // node.
      tagStack.push(m[1]);
      current.appendChild(node);
      current = node;
      continue;
    }

    // Text nodes are leaf nodes.
    current.appendChild(window.document.createTextNode(unescape(t)));
  }

  return rootDiv;
}

// This is a list of all the Unicode characters that have a strong
// right-to-left category. What this means is that these characters are
// written right-to-left for sure. It was generated by pulling all the strong
// right-to-left characters out of the Unicode data table. That table can
// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],
 [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],
 [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],
 [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],
 [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],
 [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],
 [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],
 [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],
 [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],
 [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],
 [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],
 [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],
 [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],
 [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],
 [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],
 [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],
 [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],
 [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],
 [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],
 [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],
 [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],
 [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],
 [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],
 [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],
 [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];

function isStrongRTLChar(charCode) {
  for (var i = 0; i < strongRTLRanges.length; i++) {
    var currentRange = strongRTLRanges[i];
    if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
      return true;
    }
  }

  return false;
}

function determineBidi(cueDiv) {
  var nodeStack = [],
      text = "",
      charCode;

  if (!cueDiv || !cueDiv.childNodes) {
    return "ltr";
  }

  function pushNodes(nodeStack, node) {
    for (var i = node.childNodes.length - 1; i >= 0; i--) {
      nodeStack.push(node.childNodes[i]);
    }
  }

  function nextTextNode(nodeStack) {
    if (!nodeStack || !nodeStack.length) {
      return null;
    }

    var node = nodeStack.pop(),
        text = node.textContent || node.innerText;
    if (text) {
      // TODO: This should match all unicode type B characters (paragraph
      // separator characters). See issue #115.
      var m = text.match(/^.*(\n|\r)/);
      if (m) {
        nodeStack.length = 0;
        return m[0];
      }
      return text;
    }
    if (node.tagName === "ruby") {
      return nextTextNode(nodeStack);
    }
    if (node.childNodes) {
      pushNodes(nodeStack, node);
      return nextTextNode(nodeStack);
    }
  }

  pushNodes(nodeStack, cueDiv);
  while ((text = nextTextNode(nodeStack))) {
    for (var i = 0; i < text.length; i++) {
      charCode = text.charCodeAt(i);
      if (isStrongRTLChar(charCode)) {
        return "rtl";
      }
    }
  }
  return "ltr";
}

function computeLinePos(cue) {
  if (typeof cue.line === "number" &&
      (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
    return cue.line;
  }
  if (!cue.track || !cue.track.textTrackList ||
      !cue.track.textTrackList.mediaElement) {
    return -1;
  }
  var track = cue.track,
      trackList = track.textTrackList,
      count = 0;
  for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
    if (trackList[i].mode === "showing") {
      count++;
    }
  }
  return ++count * -1;
}

function StyleBox() {
}

// Apply styles to a div. If there is no div passed then it defaults to the
// div on 'this'.
StyleBox.prototype.applyStyles = function(styles, div) {
  div = div || this.div;
  for (var prop in styles) {
    if (styles.hasOwnProperty(prop)) {
      div.style[prop] = styles[prop];
    }
  }
};

StyleBox.prototype.formatStyle = function(val, unit) {
  return val === 0 ? 0 : val + unit;
};

// Constructs the computed display state of the cue (a div). Places the div
// into the overlay which should be a block level element (usually a div).
function CueStyleBox(window, cue, styleOptions) {
  var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
  var color = "rgba(255, 255, 255, 1)";
  var backgroundColor = "rgba(0, 0, 0, 0.8)";

  if (isIE8) {
    color = "rgb(255, 255, 255)";
    backgroundColor = "rgb(0, 0, 0)";
  }

  StyleBox.call(this);
  this.cue = cue;

  // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
  // have inline positioning and will function as the cue background box.
  this.cueDiv = parseContent(window, cue.text);
  var styles = {
    color: color,
    backgroundColor: backgroundColor,
    position: "relative",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    display: "inline"
  };

  if (!isIE8) {
    styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                                             : cue.vertical === "lr" ? "vertical-lr"
                                                                     : "vertical-rl";
    styles.unicodeBidi = "plaintext";
  }
  this.applyStyles(styles, this.cueDiv);

  // Create an absolutely positioned div that will be used to position the cue
  // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
  // mirrors of them except "middle" which is "center" in CSS.
  this.div = window.document.createElement("div");
  styles = {
    textAlign: cue.align === "middle" ? "center" : cue.align,
    font: styleOptions.font,
    whiteSpace: "pre-line",
    position: "absolute"
  };

  if (!isIE8) {
    styles.direction = determineBidi(this.cueDiv);
    styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                                             : cue.vertical === "lr" ? "vertical-lr"
                                                                     : "vertical-rl".
    stylesunicodeBidi =  "plaintext";
  }

  this.applyStyles(styles);

  this.div.appendChild(this.cueDiv);

  // Calculate the distance from the reference edge of the viewport to the text
  // position of the cue box. The reference edge will be resolved later when
  // the box orientation styles are applied.
  var textPos = 0;
  switch (cue.positionAlign) {
  case "start":
    textPos = cue.position;
    break;
  case "middle":
    textPos = cue.position - (cue.size / 2);
    break;
  case "end":
    textPos = cue.position - cue.size;
    break;
  }

  // Horizontal box orientation; textPos is the distance from the left edge of the
  // area to the left edge of the box and cue.size is the distance extending to
  // the right from there.
  if (cue.vertical === "") {
    this.applyStyles({
      left:  this.formatStyle(textPos, "%"),
      width: this.formatStyle(cue.size, "%")
    });
  // Vertical box orientation; textPos is the distance from the top edge of the
  // area to the top edge of the box and cue.size is the height extending
  // downwards from there.
  } else {
    this.applyStyles({
      top: this.formatStyle(textPos, "%"),
      height: this.formatStyle(cue.size, "%")
    });
  }

  this.move = function(box) {
    this.applyStyles({
      top: this.formatStyle(box.top, "px"),
      bottom: this.formatStyle(box.bottom, "px"),
      left: this.formatStyle(box.left, "px"),
      right: this.formatStyle(box.right, "px"),
      height: this.formatStyle(box.height, "px"),
      width: this.formatStyle(box.width, "px")
    });
  };
}
CueStyleBox.prototype = _objCreate(StyleBox.prototype);
CueStyleBox.prototype.constructor = CueStyleBox;

// Represents the co-ordinates of an Element in a way that we can easily
// compute things with such as if it overlaps or intersects with another Element.
// Can initialize it with either a StyleBox or another BoxPosition.
function BoxPosition(obj) {
  var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

  // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
  // was passed in and we need to copy the results of 'getBoundingClientRect'
  // as the object returned is readonly. All co-ordinate values are in reference
  // to the viewport origin (top left).
  var lh, height, width, top;
  if (obj.div) {
    height = obj.div.offsetHeight;
    width = obj.div.offsetWidth;
    top = obj.div.offsetTop;

    var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
                rects.getClientRects && rects.getClientRects();
    obj = obj.div.getBoundingClientRect();
    // In certain cases the outter div will be slightly larger then the sum of
    // the inner div's lines. This could be due to bold text, etc, on some platforms.
    // In this case we should get the average line height and use that. This will
    // result in the desired behaviour.
    lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
               : 0;

  }
  this.left = obj.left;
  this.right = obj.right;
  this.top = obj.top || top;
  this.height = obj.height || height;
  this.bottom = obj.bottom || (top + (obj.height || height));
  this.width = obj.width || width;
  this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

  if (isIE8 && !this.lineHeight) {
    this.lineHeight = 13;
  }
}

// Move the box along a particular axis. Optionally pass in an amount to move
// the box. If no amount is passed then the default is the line height of the
// box.
BoxPosition.prototype.move = function(axis, toMove) {
  toMove = toMove !== undefined ? toMove : this.lineHeight;
  switch (axis) {
  case "+x":
    this.left += toMove;
    this.right += toMove;
    break;
  case "-x":
    this.left -= toMove;
    this.right -= toMove;
    break;
  case "+y":
    this.top += toMove;
    this.bottom += toMove;
    break;
  case "-y":
    this.top -= toMove;
    this.bottom -= toMove;
    break;
  }
};

// Check if this box overlaps another box, b2.
BoxPosition.prototype.overlaps = function(b2) {
  return this.left < b2.right &&
         this.right > b2.left &&
         this.top < b2.bottom &&
         this.bottom > b2.top;
};

// Check if this box overlaps any other boxes in boxes.
BoxPosition.prototype.overlapsAny = function(boxes) {
  for (var i = 0; i < boxes.length; i++) {
    if (this.overlaps(boxes[i])) {
      return true;
    }
  }
  return false;
};

// Check if this box is within another box.
BoxPosition.prototype.within = function(container) {
  return this.top >= container.top &&
         this.bottom <= container.bottom &&
         this.left >= container.left &&
         this.right <= container.right;
};

// Check if this box is entirely within the container or it is overlapping
// on the edge opposite of the axis direction passed. For example, if "+x" is
// passed and the box is overlapping on the left edge of the container, then
// return true.
BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
  switch (axis) {
  case "+x":
    return this.left < container.left;
  case "-x":
    return this.right > container.right;
  case "+y":
    return this.top < container.top;
  case "-y":
    return this.bottom > container.bottom;
  }
};

// Find the percentage of the area that this box is overlapping with another
// box.
BoxPosition.prototype.intersectPercentage = function(b2) {
  var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
      intersectArea = x * y;
  return intersectArea / (this.height * this.width);
};

// Convert the positions from this box to CSS compatible positions using
// the reference container's positions. This has to be done because this
// box's positions are in reference to the viewport origin, whereas, CSS
// values are in referecne to their respective edges.
BoxPosition.prototype.toCSSCompatValues = function(reference) {
  return {
    top: this.top - reference.top,
    bottom: reference.bottom - this.bottom,
    left: this.left - reference.left,
    right: reference.right - this.right,
    height: this.height,
    width: this.width
  };
};

// Get an object that represents the box's position without anything extra.
// Can pass a StyleBox, HTMLElement, or another BoxPositon.
BoxPosition.getSimpleBoxPosition = function(obj) {
  var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
  var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
  var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

  obj = obj.div ? obj.div.getBoundingClientRect() :
                obj.tagName ? obj.getBoundingClientRect() : obj;
  var ret = {
    left: obj.left,
    right: obj.right,
    top: obj.top || top,
    height: obj.height || height,
    bottom: obj.bottom || (top + (obj.height || height)),
    width: obj.width || width
  };
  return ret;
};

// Move a StyleBox to its specified, or next best, position. The containerBox
// is the box that contains the StyleBox, such as a div. boxPositions are
// a list of other boxes that the styleBox can't overlap with.
function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

  // Find the best position for a cue box, b, on the video. The axis parameter
  // is a list of axis, the order of which, it will move the box along. For example:
  // Passing ["+x", "-x"] will move the box first along the x axis in the positive
  // direction. If it doesn't find a good position for it there it will then move
  // it along the x axis in the negative direction.
  function findBestPosition(b, axis) {
    var bestPosition,
        specifiedPosition = new BoxPosition(b),
        percentage = 1; // Highest possible so the first thing we get is better.

    for (var i = 0; i < axis.length; i++) {
      while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
             (b.within(containerBox) && b.overlapsAny(boxPositions))) {
        b.move(axis[i]);
      }
      // We found a spot where we aren't overlapping anything. This is our
      // best position.
      if (b.within(containerBox)) {
        return b;
      }
      var p = b.intersectPercentage(containerBox);
      // If we're outside the container box less then we were on our last try
      // then remember this position as the best position.
      if (percentage > p) {
        bestPosition = new BoxPosition(b);
        percentage = p;
      }
      // Reset the box position to the specified position.
      b = new BoxPosition(specifiedPosition);
    }
    return bestPosition || specifiedPosition;
  }

  var boxPosition = new BoxPosition(styleBox),
      cue = styleBox.cue,
      linePos = computeLinePos(cue),
      axis = [];

  // If we have a line number to align the cue to.
  if (cue.snapToLines) {
    var size;
    switch (cue.vertical) {
    case "":
      axis = [ "+y", "-y" ];
      size = "height";
      break;
    case "rl":
      axis = [ "+x", "-x" ];
      size = "width";
      break;
    case "lr":
      axis = [ "-x", "+x" ];
      size = "width";
      break;
    }

    var step = boxPosition.lineHeight,
        position = step * Math.round(linePos),
        maxPosition = containerBox[size] + step,
        initialAxis = axis[0];

    // If the specified intial position is greater then the max position then
    // clamp the box to the amount of steps it would take for the box to
    // reach the max position.
    if (Math.abs(position) > maxPosition) {
      position = position < 0 ? -1 : 1;
      position *= Math.ceil(maxPosition / step) * step;
    }

    // If computed line position returns negative then line numbers are
    // relative to the bottom of the video instead of the top. Therefore, we
    // need to increase our initial position by the length or width of the
    // video, depending on the writing direction, and reverse our axis directions.
    if (linePos < 0) {
      position += cue.vertical === "" ? containerBox.height : containerBox.width;
      axis = axis.reverse();
    }

    // Move the box to the specified position. This may not be its best
    // position.
    boxPosition.move(initialAxis, position);

  } else {
    // If we have a percentage line value for the cue.
    var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

    switch (cue.lineAlign) {
    case "middle":
      linePos -= (calculatedPercentage / 2);
      break;
    case "end":
      linePos -= calculatedPercentage;
      break;
    }

    // Apply initial line position to the cue box.
    switch (cue.vertical) {
    case "":
      styleBox.applyStyles({
        top: styleBox.formatStyle(linePos, "%")
      });
      break;
    case "rl":
      styleBox.applyStyles({
        left: styleBox.formatStyle(linePos, "%")
      });
      break;
    case "lr":
      styleBox.applyStyles({
        right: styleBox.formatStyle(linePos, "%")
      });
      break;
    }

    axis = [ "+y", "-x", "+x", "-y" ];

    // Get the box position again after we've applied the specified positioning
    // to it.
    boxPosition = new BoxPosition(styleBox);
  }

  var bestPosition = findBestPosition(boxPosition, axis);
  styleBox.move(bestPosition.toCSSCompatValues(containerBox));
}

function WebVTT() {
  // Nothing
}

// Helper to allow strings to be decoded instead of the default binary utf8 data.
WebVTT.StringDecoder = function() {
  return {
    decode: function(data) {
      if (!data) {
        return "";
      }
      if (typeof data !== "string") {
        throw new Error("Error - expected string data.");
      }
      return decodeURIComponent(encodeURIComponent(data));
    }
  };
};

WebVTT.convertCueToDOMTree = function(window, cuetext) {
  if (!window || !cuetext) {
    return null;
  }
  return parseContent(window, cuetext);
};

var FONT_SIZE_PERCENT = 0.05;
var FONT_STYLE = "sans-serif";
var CUE_BACKGROUND_PADDING = "1.5%";

// Runs the processing model over the cues and regions passed to it.
// @param overlay A block level element (usually a div) that the computed cues
//                and regions will be placed into.
WebVTT.processCues = function(window, cues, overlay) {
  if (!window || !cues || !overlay) {
    return null;
  }

  // Remove all previous children.
  while (overlay.firstChild) {
    overlay.removeChild(overlay.firstChild);
  }

  var paddedOverlay = window.document.createElement("div");
  paddedOverlay.style.position = "absolute";
  paddedOverlay.style.left = "0";
  paddedOverlay.style.right = "0";
  paddedOverlay.style.top = "0";
  paddedOverlay.style.bottom = "0";
  paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
  overlay.appendChild(paddedOverlay);

  // Determine if we need to compute the display states of the cues. This could
  // be the case if a cue's state has been changed since the last computation or
  // if it has not been computed yet.
  function shouldCompute(cues) {
    for (var i = 0; i < cues.length; i++) {
      if (cues[i].hasBeenReset || !cues[i].displayState) {
        return true;
      }
    }
    return false;
  }

  // We don't need to recompute the cues' display states. Just reuse them.
  if (!shouldCompute(cues)) {
    for (var i = 0; i < cues.length; i++) {
      paddedOverlay.appendChild(cues[i].displayState);
    }
    return;
  }

  var boxPositions = [],
      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
  var styleOptions = {
    font: fontSize + "px " + FONT_STYLE
  };

  (function() {
    var styleBox, cue;

    for (var i = 0; i < cues.length; i++) {
      cue = cues[i];

      // Compute the intial position and styles of the cue div.
      styleBox = new CueStyleBox(window, cue, styleOptions);
      paddedOverlay.appendChild(styleBox.div);

      // Move the cue div to it's correct line position.
      moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

      // Remember the computed div so that we don't have to recompute it later
      // if we don't have too.
      cue.displayState = styleBox.div;

      boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
    }
  })();
};

WebVTT.Parser = function(window, vttjs, decoder) {
  if (!decoder) {
    decoder = vttjs;
    vttjs = {};
  }
  if (!vttjs) {
    vttjs = {};
  }

  this.window = window;
  this.vttjs = vttjs;
  this.state = "INITIAL";
  this.buffer = "";
  this.decoder = decoder || new TextDecoder("utf8");
  this.regionList = [];
};

WebVTT.Parser.prototype = {
  // If the error is a ParsingError then report it to the consumer if
  // possible. If it's not a ParsingError then throw it like normal.
  reportOrThrowError: function(e) {
    if (e instanceof ParsingError) {
      this.onparsingerror && this.onparsingerror(e);
    } else {
      throw e;
    }
  },
  parse: function (data) {
    var self = this;

    // If there is no data then we won't decode it, but will just try to parse
    // whatever is in buffer already. This may occur in circumstances, for
    // example when flush() is called.
    if (data) {
      // Try to decode the data that we received.
      self.buffer += self.decoder.decode(data, {stream: true});
    }

    function collectNextLine() {
      var buffer = self.buffer;
      var pos = 0;
      while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
        ++pos;
      }
      var line = buffer.substr(0, pos);
      // Advance the buffer early in case we fail below.
      if (buffer[pos] === '\r') {
        ++pos;
      }
      if (buffer[pos] === '\n') {
        ++pos;
      }
      self.buffer = buffer.substr(pos);
      return line;
    }

    // 3.4 WebVTT region and WebVTT region settings syntax
    function parseRegion(input) {
      var settings = new Settings();

      parseOptions(input, function (k, v) {
        switch (k) {
        case "id":
          settings.set(k, v);
          break;
        case "width":
          settings.percent(k, v);
          break;
        case "lines":
          settings.integer(k, v);
          break;
        case "regionanchor":
        case "viewportanchor":
          var xy = v.split(',');
          if (xy.length !== 2) {
            break;
          }
          // We have to make sure both x and y parse, so use a temporary
          // settings object here.
          var anchor = new Settings();
          anchor.percent("x", xy[0]);
          anchor.percent("y", xy[1]);
          if (!anchor.has("x") || !anchor.has("y")) {
            break;
          }
          settings.set(k + "X", anchor.get("x"));
          settings.set(k + "Y", anchor.get("y"));
          break;
        case "scroll":
          settings.alt(k, v, ["up"]);
          break;
        }
      }, /=/, /\s/);

      // Create the region, using default values for any values that were not
      // specified.
      if (settings.has("id")) {
        var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
        region.width = settings.get("width", 100);
        region.lines = settings.get("lines", 3);
        region.regionAnchorX = settings.get("regionanchorX", 0);
        region.regionAnchorY = settings.get("regionanchorY", 100);
        region.viewportAnchorX = settings.get("viewportanchorX", 0);
        region.viewportAnchorY = settings.get("viewportanchorY", 100);
        region.scroll = settings.get("scroll", "");
        // Register the region.
        self.onregion && self.onregion(region);
        // Remember the VTTRegion for later in case we parse any VTTCues that
        // reference it.
        self.regionList.push({
          id: settings.get("id"),
          region: region
        });
      }
    }

    // draft-pantos-http-live-streaming-20
    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5
    // 3.5 WebVTT
    function parseTimestampMap(input) {
      var settings = new Settings();

      parseOptions(input, function(k, v) {
        switch(k) {
        case "MPEGT":
          settings.integer(k + 'S', v);
          break;
        case "LOCA":
          settings.set(k + 'L', parseTimeStamp(v));
          break;
        }
      }, /[^\d]:/, /,/);

      self.ontimestampmap && self.ontimestampmap({
        "MPEGTS": settings.get("MPEGTS"),
        "LOCAL": settings.get("LOCAL")
      });
    }

    // 3.2 WebVTT metadata header syntax
    function parseHeader(input) {
      if (input.match(/X-TIMESTAMP-MAP/)) {
        // This line contains HLS X-TIMESTAMP-MAP metadata
        parseOptions(input, function(k, v) {
          switch(k) {
          case "X-TIMESTAMP-MAP":
            parseTimestampMap(v);
            break;
          }
        }, /=/);
      } else {
        parseOptions(input, function (k, v) {
          switch (k) {
          case "Region":
            // 3.3 WebVTT region metadata header syntax
            parseRegion(v);
            break;
          }
        }, /:/);
      }

    }

    // 5.1 WebVTT file parsing.
    try {
      var line;
      if (self.state === "INITIAL") {
        // We can't start parsing until we have the first line.
        if (!/\r\n|\n/.test(self.buffer)) {
          return this;
        }

        line = collectNextLine();

        var m = line.match(/^WEBVTT([ \t].*)?$/);
        if (!m || !m[0]) {
          throw new ParsingError(ParsingError.Errors.BadSignature);
        }

        self.state = "HEADER";
      }

      var alreadyCollectedLine = false;
      while (self.buffer) {
        // We can't parse a line until we have the full line.
        if (!/\r\n|\n/.test(self.buffer)) {
          return this;
        }

        if (!alreadyCollectedLine) {
          line = collectNextLine();
        } else {
          alreadyCollectedLine = false;
        }

        switch (self.state) {
        case "HEADER":
          // 13-18 - Allow a header (metadata) under the WEBVTT line.
          if (/:/.test(line)) {
            parseHeader(line);
          } else if (!line) {
            // An empty line terminates the header and starts the body (cues).
            self.state = "ID";
          }
          continue;
        case "NOTE":
          // Ignore NOTE blocks.
          if (!line) {
            self.state = "ID";
          }
          continue;
        case "ID":
          // Check for the start of NOTE blocks.
          if (/^NOTE($|[ \t])/.test(line)) {
            self.state = "NOTE";
            break;
          }
          // 19-29 - Allow any number of line terminators, then initialize new cue values.
          if (!line) {
            continue;
          }
          self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
          self.state = "CUE";
          // 30-39 - Check if self line contains an optional identifier or timing data.
          if (line.indexOf("-->") === -1) {
            self.cue.id = line;
            continue;
          }
          // Process line as start of a cue.
          /*falls through*/
        case "CUE":
          // 40 - Collect cue timings and settings.
          try {
            parseCue(line, self.cue, self.regionList);
          } catch (e) {
            self.reportOrThrowError(e);
            // In case of an error ignore rest of the cue.
            self.cue = null;
            self.state = "BADCUE";
            continue;
          }
          self.state = "CUETEXT";
          continue;
        case "CUETEXT":
          var hasSubstring = line.indexOf("-->") !== -1;
          // 34 - If we have an empty line then report the cue.
          // 35 - If we have the special substring '-->' then report the cue,
          // but do not collect the line as we need to process the current
          // one as a new cue.
          if (!line || hasSubstring && (alreadyCollectedLine = true)) {
            // We are done parsing self cue.
            self.oncue && self.oncue(self.cue);
            self.cue = null;
            self.state = "ID";
            continue;
          }
          if (self.cue.text) {
            self.cue.text += "\n";
          }
          self.cue.text += line;
          continue;
        case "BADCUE": // BADCUE
          // 54-62 - Collect and discard the remaining cue.
          if (!line) {
            self.state = "ID";
          }
          continue;
        }
      }
    } catch (e) {
      self.reportOrThrowError(e);

      // If we are currently parsing a cue, report what we have.
      if (self.state === "CUETEXT" && self.cue && self.oncue) {
        self.oncue(self.cue);
      }
      self.cue = null;
      // Enter BADWEBVTT state if header was not parsed correctly otherwise
      // another exception occurred so enter BADCUE state.
      self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
    }
    return this;
  },
  flush: function () {
    var self = this;
    try {
      // Finish decoding the stream.
      self.buffer += self.decoder.decode();
      // Synthesize the end of the current cue or region.
      if (self.cue || self.state === "HEADER") {
        self.buffer += "\n\n";
        self.parse();
      }
      // If we've flushed, parsed, and we're still on the INITIAL state then
      // that means we don't have enough of the stream to parse the first
      // line.
      if (self.state === "INITIAL") {
        throw new ParsingError(ParsingError.Errors.BadSignature);
      }
    } catch(e) {
      self.reportOrThrowError(e);
    }
    self.onflush && self.onflush();
    return this;
  }
};

module.exports = WebVTT;

},{}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var autoKeyword = "auto";
var directionSetting = {
  "": true,
  "lr": true,
  "rl": true
};
var alignSetting = {
  "start": true,
  "middle": true,
  "end": true,
  "left": true,
  "right": true
};

function findDirectionSetting(value) {
  if (typeof value !== "string") {
    return false;
  }
  var dir = directionSetting[value.toLowerCase()];
  return dir ? value.toLowerCase() : false;
}

function findAlignSetting(value) {
  if (typeof value !== "string") {
    return false;
  }
  var align = alignSetting[value.toLowerCase()];
  return align ? value.toLowerCase() : false;
}

function extend(obj) {
  var i = 1;
  for (; i < arguments.length; i++) {
    var cobj = arguments[i];
    for (var p in cobj) {
      obj[p] = cobj[p];
    }
  }

  return obj;
}

function VTTCue(startTime, endTime, text) {
  var cue = this;
  var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
  var baseObj = {};

  if (isIE8) {
    cue = document.createElement('custom');
  } else {
    baseObj.enumerable = true;
  }

  /**
   * Shim implementation specific properties. These properties are not in
   * the spec.
   */

  // Lets us know when the VTTCue's data has changed in such a way that we need
  // to recompute its display state. This lets us compute its display state
  // lazily.
  cue.hasBeenReset = false;

  /**
   * VTTCue and TextTrackCue properties
   * http://dev.w3.org/html5/webvtt/#vttcue-interface
   */

  var _id = "";
  var _pauseOnExit = false;
  var _startTime = startTime;
  var _endTime = endTime;
  var _text = text;
  var _region = null;
  var _vertical = "";
  var _snapToLines = true;
  var _line = "auto";
  var _lineAlign = "start";
  var _position = 50;
  var _positionAlign = "middle";
  var _size = 50;
  var _align = "middle";

  Object.defineProperty(cue,
    "id", extend({}, baseObj, {
      get: function() {
        return _id;
      },
      set: function(value) {
        _id = "" + value;
      }
    }));

  Object.defineProperty(cue,
    "pauseOnExit", extend({}, baseObj, {
      get: function() {
        return _pauseOnExit;
      },
      set: function(value) {
        _pauseOnExit = !!value;
      }
    }));

  Object.defineProperty(cue,
    "startTime", extend({}, baseObj, {
      get: function() {
        return _startTime;
      },
      set: function(value) {
        if (typeof value !== "number") {
          throw new TypeError("Start time must be set to a number.");
        }
        _startTime = value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "endTime", extend({}, baseObj, {
      get: function() {
        return _endTime;
      },
      set: function(value) {
        if (typeof value !== "number") {
          throw new TypeError("End time must be set to a number.");
        }
        _endTime = value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "text", extend({}, baseObj, {
      get: function() {
        return _text;
      },
      set: function(value) {
        _text = "" + value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "region", extend({}, baseObj, {
      get: function() {
        return _region;
      },
      set: function(value) {
        _region = value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "vertical", extend({}, baseObj, {
      get: function() {
        return _vertical;
      },
      set: function(value) {
        var setting = findDirectionSetting(value);
        // Have to check for false because the setting an be an empty string.
        if (setting === false) {
          throw new SyntaxError("An invalid or illegal string was specified.");
        }
        _vertical = setting;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "snapToLines", extend({}, baseObj, {
      get: function() {
        return _snapToLines;
      },
      set: function(value) {
        _snapToLines = !!value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "line", extend({}, baseObj, {
      get: function() {
        return _line;
      },
      set: function(value) {
        if (typeof value !== "number" && value !== autoKeyword) {
          throw new SyntaxError("An invalid number or illegal string was specified.");
        }
        _line = value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "lineAlign", extend({}, baseObj, {
      get: function() {
        return _lineAlign;
      },
      set: function(value) {
        var setting = findAlignSetting(value);
        if (!setting) {
          throw new SyntaxError("An invalid or illegal string was specified.");
        }
        _lineAlign = setting;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "position", extend({}, baseObj, {
      get: function() {
        return _position;
      },
      set: function(value) {
        if (value < 0 || value > 100) {
          throw new Error("Position must be between 0 and 100.");
        }
        _position = value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "positionAlign", extend({}, baseObj, {
      get: function() {
        return _positionAlign;
      },
      set: function(value) {
        var setting = findAlignSetting(value);
        if (!setting) {
          throw new SyntaxError("An invalid or illegal string was specified.");
        }
        _positionAlign = setting;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "size", extend({}, baseObj, {
      get: function() {
        return _size;
      },
      set: function(value) {
        if (value < 0 || value > 100) {
          throw new Error("Size must be between 0 and 100.");
        }
        _size = value;
        this.hasBeenReset = true;
      }
    }));

  Object.defineProperty(cue,
    "align", extend({}, baseObj, {
      get: function() {
        return _align;
      },
      set: function(value) {
        var setting = findAlignSetting(value);
        if (!setting) {
          throw new SyntaxError("An invalid or illegal string was specified.");
        }
        _align = setting;
        this.hasBeenReset = true;
      }
    }));

  /**
   * Other <track> spec defined properties
   */

  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
  cue.displayState = undefined;

  if (isIE8) {
    return cue;
  }
}

/**
 * VTTCue methods
 */

VTTCue.prototype.getCueAsHTML = function() {
  // Assume WebVTT.convertCueToDOMTree is on the global.
  return WebVTT.convertCueToDOMTree(window, this.text);
};

module.exports = VTTCue;

},{}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var scrollSetting = {
  "": true,
  "up": true
};

function findScrollSetting(value) {
  if (typeof value !== "string") {
    return false;
  }
  var scroll = scrollSetting[value.toLowerCase()];
  return scroll ? value.toLowerCase() : false;
}

function isValidPercentValue(value) {
  return typeof value === "number" && (value >= 0 && value <= 100);
}

// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
function VTTRegion() {
  var _width = 100;
  var _lines = 3;
  var _regionAnchorX = 0;
  var _regionAnchorY = 100;
  var _viewportAnchorX = 0;
  var _viewportAnchorY = 100;
  var _scroll = "";

  Object.defineProperties(this, {
    "width": {
      enumerable: true,
      get: function() {
        return _width;
      },
      set: function(value) {
        if (!isValidPercentValue(value)) {
          throw new Error("Width must be between 0 and 100.");
        }
        _width = value;
      }
    },
    "lines": {
      enumerable: true,
      get: function() {
        return _lines;
      },
      set: function(value) {
        if (typeof value !== "number") {
          throw new TypeError("Lines must be set to a number.");
        }
        _lines = value;
      }
    },
    "regionAnchorY": {
      enumerable: true,
      get: function() {
        return _regionAnchorY;
      },
      set: function(value) {
        if (!isValidPercentValue(value)) {
          throw new Error("RegionAnchorX must be between 0 and 100.");
        }
        _regionAnchorY = value;
      }
    },
    "regionAnchorX": {
      enumerable: true,
      get: function() {
        return _regionAnchorX;
      },
      set: function(value) {
        if(!isValidPercentValue(value)) {
          throw new Error("RegionAnchorY must be between 0 and 100.");
        }
        _regionAnchorX = value;
      }
    },
    "viewportAnchorY": {
      enumerable: true,
      get: function() {
        return _viewportAnchorY;
      },
      set: function(value) {
        if (!isValidPercentValue(value)) {
          throw new Error("ViewportAnchorY must be between 0 and 100.");
        }
        _viewportAnchorY = value;
      }
    },
    "viewportAnchorX": {
      enumerable: true,
      get: function() {
        return _viewportAnchorX;
      },
      set: function(value) {
        if (!isValidPercentValue(value)) {
          throw new Error("ViewportAnchorX must be between 0 and 100.");
        }
        _viewportAnchorX = value;
      }
    },
    "scroll": {
      enumerable: true,
      get: function() {
        return _scroll;
      },
      set: function(value) {
        var setting = findScrollSetting(value);
        // Have to check for false as an empty string is a legal value.
        if (setting === false) {
          throw new SyntaxError("An invalid or illegal string was specified.");
        }
        _scroll = setting;
      }
    }
  });
}

module.exports = VTTRegion;

},{}],15:[function(_dereq_,module,exports){
"use strict";
var window = _dereq_("global/window")
var isFunction = _dereq_("is-function")
var parseHeaders = _dereq_("parse-headers")
var xtend = _dereq_("xtend")

module.exports = createXHR
createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
        options = initParams(uri, options, callback)
        options.method = method.toUpperCase()
        return _createXHR(options)
    }
})

function forEachArray(array, iterator) {
    for (var i = 0; i < array.length; i++) {
        iterator(array[i])
    }
}

function isEmpty(obj){
    for(var i in obj){
        if(obj.hasOwnProperty(i)) return false
    }
    return true
}

function initParams(uri, options, callback) {
    var params = uri

    if (isFunction(options)) {
        callback = options
        if (typeof uri === "string") {
            params = {uri:uri}
        }
    } else {
        params = xtend(options, {uri: uri})
    }

    params.callback = callback
    return params
}

function createXHR(uri, options, callback) {
    options = initParams(uri, options, callback)
    return _createXHR(options)
}

function _createXHR(options) {
    if(typeof options.callback === "undefined"){
        throw new Error("callback argument missing")
    }

    var called = false
    var callback = function cbOnce(err, response, body){
        if(!called){
            called = true
            options.callback(err, response, body)
        }
    }

    function readystatechange() {
        if (xhr.readyState === 4) {
            setTimeout(loadFunc, 0)
        }
    }

    function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = undefined

        if (xhr.response) {
            body = xhr.response
        } else {
            body = xhr.responseText || getXml(xhr)
        }

        if (isJson) {
            try {
                body = JSON.parse(body)
            } catch (e) {}
        }

        return body
    }

    function errorFunc(evt) {
        clearTimeout(timeoutTimer)
        if(!(evt instanceof Error)){
            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
        }
        evt.statusCode = 0
        return callback(evt, failureResponse)
    }

    // will load the data & process the response in a special response object
    function loadFunc() {
        if (aborted) return
        var status
        clearTimeout(timeoutTimer)
        if(options.useXDR && xhr.status===undefined) {
            //IE8 CORS GET successful response doesn't have a status field, but body is fine
            status = 200
        } else {
            status = (xhr.status === 1223 ? 204 : xhr.status)
        }
        var response = failureResponse
        var err = null

        if (status !== 0){
            response = {
                body: getBody(),
                statusCode: status,
                method: method,
                headers: {},
                url: uri,
                rawRequest: xhr
            }
            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                response.headers = parseHeaders(xhr.getAllResponseHeaders())
            }
        } else {
            err = new Error("Internal XMLHttpRequest Error")
        }
        return callback(err, response, response.body)
    }

    var xhr = options.xhr || null

    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new createXHR.XDomainRequest()
        }else{
            xhr = new createXHR.XMLHttpRequest()
        }
    }

    var key
    var aborted
    var uri = xhr.url = options.uri || options.url
    var method = xhr.method = options.method || "GET"
    var body = options.body || options.data
    var headers = xhr.headers = options.headers || {}
    var sync = !!options.sync
    var isJson = false
    var timeoutTimer
    var failureResponse = {
        body: undefined,
        headers: {},
        statusCode: 0,
        method: method,
        url: uri,
        rawRequest: xhr
    }

    if ("json" in options && options.json !== false) {
        isJson = true
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
        if (method !== "GET" && method !== "HEAD") {
            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
            body = JSON.stringify(options.json === true ? body : options.json)
        }
    }

    xhr.onreadystatechange = readystatechange
    xhr.onload = loadFunc
    xhr.onerror = errorFunc
    // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function () {
        // IE must die
    }
    xhr.onabort = function(){
        aborted = true;
    }
    xhr.ontimeout = errorFunc
    xhr.open(method, uri, !sync, options.username, options.password)
    //has to be after open
    if(!sync) {
        xhr.withCredentials = !!options.withCredentials
    }
    // Cannot set timeout with sync request
    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
    if (!sync && options.timeout > 0 ) {
        timeoutTimer = setTimeout(function(){
            if (aborted) return
            aborted = true//IE9 may still call readystatechange
            xhr.abort("timeout")
            var e = new Error("XMLHttpRequest timeout")
            e.code = "ETIMEDOUT"
            errorFunc(e)
        }, options.timeout )
    }

    if (xhr.setRequestHeader) {
        for(key in headers){
            if(headers.hasOwnProperty(key)){
                xhr.setRequestHeader(key, headers[key])
            }
        }
    } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object")
    }

    if ("responseType" in options) {
        xhr.responseType = options.responseType
    }

    if ("beforeSend" in options &&
        typeof options.beforeSend === "function"
    ) {
        options.beforeSend(xhr)
    }

    // Microsoft Edge browser sends "undefined" when send is called with undefined value.
    // XMLHttpRequest spec says to pass null as body to indicate no body
    // See https://github.com/naugtur/xhr/issues/100.
    xhr.send(body || null)

    return xhr


}

function getXml(xhr) {
    if (xhr.responseType === "document") {
        return xhr.responseXML
    }
    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
        return xhr.responseXML
    }

    return null
}

function noop() {}

},{"global/window":5,"is-function":16,"parse-headers":19,"xtend":20}],16:[function(_dereq_,module,exports){
module.exports = isFunction

var toString = Object.prototype.toString

function isFunction (fn) {
  var string = toString.call(fn)
  return string === '[object Function]' ||
    (typeof fn === 'function' && string !== '[object RegExp]') ||
    (typeof window !== 'undefined' &&
     // IE8 and below
     (fn === window.setTimeout ||
      fn === window.alert ||
      fn === window.confirm ||
      fn === window.prompt))
};

},{}],17:[function(_dereq_,module,exports){
var isFunction = _dereq_('is-function')

module.exports = forEach

var toString = Object.prototype.toString
var hasOwnProperty = Object.prototype.hasOwnProperty

function forEach(list, iterator, context) {
    if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
    }

    if (arguments.length < 3) {
        context = this
    }
    
    if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context)
    else if (typeof list === 'string')
        forEachString(list, iterator, context)
    else
        forEachObject(list, iterator, context)
}

function forEachArray(array, iterator, context) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            iterator.call(context, array[i], i, array)
        }
    }
}

function forEachString(string, iterator, context) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
    }
}

function forEachObject(object, iterator, context) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            iterator.call(context, object[k], k, object)
        }
    }
}

},{"is-function":16}],18:[function(_dereq_,module,exports){

exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};

},{}],19:[function(_dereq_,module,exports){
var trim = _dereq_('trim')
  , forEach = _dereq_('for-each')
  , isArray = function(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    }

module.exports = function (headers) {
  if (!headers)
    return {}

  var result = {}

  forEach(
      trim(headers).split('\n')
    , function (row) {
        var index = row.indexOf(':')
          , key = trim(row.slice(0, index)).toLowerCase()
          , value = trim(row.slice(index + 1))

        if (typeof(result[key]) === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [ result[key], value ]
        }
      }
  )

  return result
}
},{"for-each":17,"trim":18}],20:[function(_dereq_,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],21:[function(_dereq_,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _receiverPlayButtonJs = _dereq_('./receiver-play-button.js');

var _receiverPlayButtonJs2 = _interopRequireDefault(_receiverPlayButtonJs);

var videojs = _globalWindow2['default'].videojs;

var ControlBar = videojs.getComponent('ControlBar');
var ReceiverPlayButton = videojs.getComponent('ReceiverPlayButton');
var Component = videojs.getComponent('Component');

/**
 * Container of main controls
 *
 * @extends ControlBar
 * @class ControlBar
 */

var ReceiverControlBar = (function (_ControlBar) {
  _inherits(ReceiverControlBar, _ControlBar);

  function ReceiverControlBar() {
    _classCallCheck(this, ReceiverControlBar);

    _ControlBar.apply(this, arguments);
  }

  return ReceiverControlBar;
})(ControlBar);

ReceiverControlBar.prototype.options_ = {
  loadEvent: 'play',
  children: ['receiverPlayButton', 'currentTimeDisplay', 'progressControl', 'remainingTimeDisplay']
};

// loadProgressBar > seekBar > mouseTimeDisplay uses a reference to 'controlbar' so we need to override the name for compatibility with our own controlbar
Component.registerComponent('ControlBar', ReceiverControlBar);
exports['default'] = ReceiverControlBar;
module.exports = exports['default'];

},{"./receiver-play-button.js":22,"global/window":5}],22:[function(_dereq_,module,exports){
/**
 * @file receiver-play-button.js
 *
 */
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var videojs = _globalWindow2['default'].videojs;
var Component = videojs.getComponent('Component');

/**
 * Play button which show's the current state (play/pauze) instead of the state after clicking it
 *
 * @extends Component
 * @class ReceiverPlayButton
 */

var ReceiverPlayButton = (function (_Component) {
  _inherits(ReceiverPlayButton, _Component);

  function ReceiverPlayButton(player, options) {
    _classCallCheck(this, ReceiverPlayButton);

    _Component.call(this, player, options);
  }

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */

  ReceiverPlayButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'receiver-play-control';
  };

  /**
   * Create the component's DOM element
   *
   * @return {Element}
   * @method createEl
   */

  ReceiverPlayButton.prototype.createEl = function createEl() {
    var properties = {
      className: this.buildCSSClass()
    };

    var el = _Component.prototype.createEl.call(this, undefined, properties, undefined);
    return el;
  };

  return ReceiverPlayButton;
})(Component);

Component.registerComponent('ReceiverPlayButton', ReceiverPlayButton);
exports['default'] = ReceiverPlayButton;
module.exports = exports['default'];

},{"global/window":5}],23:[function(_dereq_,module,exports){
/**
* EmpReceiverEvents - Holds receiver events
* METADATA_UPDATED, STATE_CHANGED, RESOLUTION_CHANGED
* @class EmpReceiverEvents
*/
'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var EmpReceiverEvents = function EmpReceiverEvents() {
  _classCallCheck(this, EmpReceiverEvents);

  /**
  * Fired when asset metadata has been updated
  * @event METADATA_UPDATED
  */
  this.METADATA_UPDATED = 'metadataupdate';

  /**
  * Fired when receiver state has changed
  * @event STATE_CHANGED
  */
  this.STATE_CHANGED = 'statechanged';

  /**
  * Fired when receiver 'resolution has changed - resolution parameter (if null, app should hide UI display element)
  * @event RESOLUTION_CHANGED
  */
  this.RESOLUTION_CHANGED = 'resolutionchanged';
};

var empReceiverEvents = new EmpReceiverEvents();
exports['default'] = empReceiverEvents;
module.exports = exports['default'];

},{}],24:[function(_dereq_,module,exports){
'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var _events = _dereq_('events');

var _events2 = _interopRequireDefault(_events);

var _es6Mixins = _dereq_('es6-mixins');

var _es6Mixins2 = _interopRequireDefault(_es6Mixins);

var _externalJs = _dereq_('./external.js');

var _empReceiverEventsJs = _dereq_('./emp-receiver-events.js');

var _empReceiverEventsJs2 = _interopRequireDefault(_empReceiverEventsJs);

// 5 minutes

var _controlsReceiverControlBarJs = _dereq_('./controls/receiver-control-bar.js');

var _controlsReceiverControlBarJs2 = _interopRequireDefault(_controlsReceiverControlBarJs);

/* global cast: true */
/** 
 * empReceiver - Interacts with chromecast and senders
 *
 * @param {String} element HTML video element id
 * @param {Object=} options receiver options such as: playerOptions, statusText, controls, debug, messageUrn
 * @param {Callback=} ready callback to be called when the receiver is reader
 * @class empReceiver
 */

var Events = _externalJs.empPlayer.Events;

var State = {
  LAUNCHING: 'launching',
  LOADING: 'loading',
  BUFFERING: 'buffering',
  SEEKING: 'seeking',
  PLAYING: 'playing',
  PAUSED: 'paused',
  DONE: 'done',
  IDLE: 'idle'
};

var IdleTimeout = {
  LAUNCHING: 1000 * 60 * 5, // 5 minutes
  LOADING: 1000 * 60 * 5, // 5 minutes
  PAUSED: 1000 * 60 * 20, // 20 minutes
  IDLE: 1000 * 60 * 5, // 5 minutes
  DONE: 1000 * 60 * 5 };

var empReceiver = (function () {
  function empReceiver(element, options) {
    var _this = this;

    var ready = arguments.length <= 2 || arguments[2] === undefined ? function () {} : arguments[2];

    _classCallCheck(this, empReceiver);

    _es6Mixins2['default'](_events2['default'], this);

    _externalJs.empPlayer.log('Created');
    this.options_ = Object.assign({
      debug: false,
      messageUrn: 'urn:x-cast:com.ericsson.cast.receiver',
      playerOptions: {}
    }, options);

    this.debug_ = options.debug;
    this.element_ = element;
    this.assetMetadata_ = { title: '', subtitle: '', images: [] };
    this.mediaManager_ = null;
    this.loadingState_ = false;
    this.shutdownWhenLastSenderDisconnect_ = true;

    this.isConnected_ = false;
    this.isChromecast_ = _globalWindow2['default'].navigator.userAgent.indexOf('CrKey') >= 0;

    this.onCastStatusChanged_(State.LAUNCHING);

    this.castReceiverManager_ = cast.receiver.CastReceiverManager.getInstance();
    this.castReceiverManager_.onSystemVolumeChanged = this.onSystemVolumeChanged_.bind(this);
    this.castReceiverManager_.onShutdown = this.onShutdown_.bind(this);
    this.castReceiverManager_.onSenderConnected = this.onSenderConnected_.bind(this);
    this.castReceiverManager_.onSenderDisconnected = this.onSenderDisconnected_.bind(this);
    this.castReceiverManager_.onSenderConnected = this.onSendersChanged_.bind(this);

    this.messageBus_ = this.castReceiverManager_.getCastMessageBus(this.options_.messageUrn);
    this.messageBus_.addEventListener('message', this.onMessage.bind(this));

    this.createPlayer(function () {
      if (_this.isChromecast_) {
        // Setup MediaManager
        // We need to provide the <video /> element to the mediaManager. so we need to access the tech for it.
        _this.mediaManager_ = new cast.receiver.MediaManager(_this.player_.tech({ IWillNotUseThisInPlugins: true }).el_);
        //,cast.receiver.media.Command.PAUSE | cast.receiver.media.Command.STREAM_VOLUME | cast.receiver.media.Command.STREAM_MUTE);

        _this.onLoadOrig_ = _this.mediaManager_.onLoad.bind(_this.mediaManager_);
        _this.mediaManager_.onLoad = _this.onLoad_.bind(_this);

        _this.onMetadataLoadedOrig_ = _this.mediaManager_.onMetadataLoaded.bind(_this.mediaManager_);
        _this.mediaManager_.onMetadataLoaded = _this.onMetadataLoaded_.bind(_this);

        _this.onLoadMetadataErrorOrig_ = _this.mediaManager_.onLoadMetadataError.bind(_this.mediaManager_);
        _this.mediaManager_.onLoadMetadataError = _this.onLoadMetadataError_.bind(_this);

        _this.onErrorOrig_ = _this.mediaManager_.onError.bind(_this.mediaManager_);
        _this.mediaManager_.onError = _this.onError_.bind(_this);

        _this.onPlayOrig_ = _this.mediaManager_.onPlay.bind(_this.mediaManager_);
        _this.mediaManager_.onPlay = _this.onPlay_.bind(_this);

        _this.onPauseOrig_ = _this.mediaManager_.onPause.bind(_this.mediaManager_);
        _this.mediaManager_.onPause = _this.onPause_.bind(_this);

        _this.onEndedOrig_ = _this.mediaManager_.onEnded.bind(_this.mediaManager_);
        _this.mediaManager_.onEnded = _this.onEnded_.bind(_this);

        _this.onStopOrig_ = _this.mediaManager_.onStop.bind(_this.mediaManager_);
        _this.mediaManager_.onStop = _this.onStop_.bind(_this);

        _this.onSetVolumeOrig_ = _this.mediaManager_.onSetVolume.bind(_this.mediaManager_);
        _this.mediaManager_.onSetVolume = _this.onSetVolume_.bind(_this);

        _this.onSeekOrig_ = _this.mediaManager_.onSeek.bind(_this.mediaManager_);
        _this.mediaManager_.onSeek = _this.onSeek_.bind(_this);

        _this.mediaManager_.customizedStatusCallback = function (mediaStatus) {
          if (_this.player_) {
            mediaStatus.currentTime = _this.player_.currentTime();
            mediaStatus = _this.updateMediaInfo_(mediaStatus);
          }
          _externalJs.empPlayer.log('mediaStatus', mediaStatus);
          return mediaStatus;
        };
      } else {
        // debugging the receiver UI in Chrome.
        _this.onLoadOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onMetadataLoadedOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onLoadMetadataErrorOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onErrorOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onPlayOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onPauseOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onEndedOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onStopOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onSetVolumeOrig_ = _this.mockMediaManagerEvent_.bind(_this);
        _this.onSeekOrig_ = _this.mockMediaManagerEvent_.bind(_this);
      }

      if (_this.debug_) {
        cast.receiver.logger.setLevelValue(cast.receiver.LoggerLevel.DEBUG);
        cast.player.api.setLoggerLevel(cast.player.api.LoggerLevel.DEBUG);
      } else {
        cast.receiver.logger.setLevelValue(cast.receiver.LoggerLevel.ERROR);
        cast.player.api.setLoggerLevel(cast.player.api.LoggerLevel.NONE);
      }

      var appConfig = new cast.receiver.CastReceiverManager.Config();
      appConfig.statusText = _this.options_.statusText || 'Casting EMP';
      if (_this.isChromecast_) {
        _this.castReceiverManager_.start(appConfig);
        _this.onCastStatusChanged_(State.IDLE);
      } else {
        _this.onCastStatusChanged_(State.IDLE);
        _this.loadDebug_();
      }

      ready();
    });
  }

  /**
  * Add current program/asset/source to empPayload and customData
  * and set the contentId of mediaInfo object.
  *
  * @param {MediaInformation} mediaInfo
  * @returns {MediaInformation} mediaInfo
  * @private
  */

  empReceiver.prototype.updateMediaInfo_ = function updateMediaInfo_(mediaInfo) {
    if (mediaInfo.media) {
      this.setStreamType_(mediaInfo.media);

      var program = this.player_.getProgramDetails();
      var asset = this.player_.currentAsset();
      if (program) {
        mediaInfo.contentId = program.assetId;
        //We have to use both empPayload and customData there are bugs in some senders that remove customData
        //when connect a sender, and some senders can only use customData
        mediaInfo.media.empPayload = {
          'assetId': program.assetId,
          'programId': program.programId,
          'channelId': program.channelId
        };
        mediaInfo.media.customData = mediaInfo.media.empPayload;
      } else if (asset) {
        mediaInfo.contentId = asset.programId ? asset.programId : asset.assetId;
        mediaInfo.media.empPayload = {
          'assetId': asset.assetId,
          'programId': asset.programId,
          'channelId': asset.channelId
        };
        mediaInfo.media.customData = mediaInfo.media.empPayload;
      }
      //Casting external dash/mp4 streams
      else {
          mediaInfo.contentId = this.player_.currentSrc();
          mediaInfo.media.empPayload = {
            'source': this.player_.currentSource()
          };
          mediaInfo.media.customData = mediaInfo.media.empPayload;
        }
    }
    return mediaInfo;
  };

  /**
  * Set the streamtime to Media Object
  * Note: StreamType will be BUFFERED even for live streams,
  *  to make live streams working with CC build-in controls, if timeshift is disabled it will be "LIVE" to hide progress bar.
  * @ StreamType will be BUFFERED even for live streams, to make live streams
  *
  * @param {Media} media
  * @private
  */

  empReceiver.prototype.setStreamType_ = function setStreamType_(media) {
    if (!this.player_.timeShiftEnabled() && this.player_.isLive()) {
      media.duration = Infinity;
      media.streamType = 'LIVE';
    } else {
      media.duration = this.player_.duration();
      media.streamType = 'BUFFERED';
    }
  };

  /**
  * mockMediaManagerEvent_ for debugging the receiver UI in Chrome Browser.
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.mockMediaManagerEvent_ = function mockMediaManagerEvent_(event) {
    _externalJs.empPlayer.log('mockMediaManagerEvent_', event);
    this.emit('mediamanagerevent', event);
  };

  /**
  * Handle custom message from senders
  *
  * @param {cast.receiver.CastMessageBus.Event} event  { data:{ type:'', data:{} } }
  *
  * @export
  */

  empReceiver.prototype.onMessage = function onMessage(event) {
    var message = JSON.parse(event.data);
    _externalJs.empPlayer.log('onMessage', event.data, message);
    switch (message.type) {
      case 'showtexttrack':
        this.player_.selectTextTrack(message.data.language, message.data.kind);
        break;
      case 'hidetexttrack':
        this.player_.selectTextTrack(null);
        break;
      case 'selectaudiotrack':
        this.player_.selectAudioTrack(message.data.language, message.data.kind);
        break;
      case 'refreshcontrols': //Deprecated
      case 'pull':
        this.pullResponse_();
        break;
      case 'setabsolutetime':
        //Deprecated use playheadTime
        this.player_.setAbsoluteTime(new Date(message.data.datetime));
        break;
      //New API
      case 'playheadtime':
        this.player_.playheadTime(message.data);
        break;
      case 'playnextprogram':
        this.player_.playNextProgram();
        break;
      case 'playpreviousprogram':
        var end = message.data ? message.data.end : undefined;
        this.player_.playPreviousProgram(end);
        break;
      case 'gotolive':
        this.player_.gotoLive();
        break;
      case 'texttrackstyle':
        this.player_.setTextTrackStyle(message.data);
        break;
      case 'loadnextsource':
        this.player_.autoplay();
        this.player_.loadNextSource();
        break;
      case 'lineupsource':
        this.player_.lineupSource(message.data);
        break;

    }
  };

  /**
  *  Error handler for empPlayer Errors.
  *  Broadcast error message to all connected senders.
  * @param {string|object} error error message to broadcast
  */

  empReceiver.prototype.onEmpError = function onEmpError(error) {
    try {
      this.onCastStatusChanged_(State.IDLE);
      if (!error) {
        error = {};
      }
      _externalJs.empPlayer.log.error(error);
      if (this.player_.analytics) {
        this.player_.analytics.onWindowUnload();
      }

      var message = error.message;
      if (message) {
        message = message.replace('Tech: EmpShaka', 'Tech: Chromecast');
      }
      var customData = { type: 'ERROR', code: error.code, message: message };
      //Resets Media Element to IDLE state. After this call the mediaElement properties will change, paused will be true, currentTime will be zero and the src attribute will be empty.
      if (this.mediaManager_) {
        this.mediaManager_.resetMediaElement(cast.receiver.media.IdleReason.ERROR, true, null, customData);
        if (this.loadingState_) {
          this.mediaManager_.sendLoadError(cast.receiver.media.ErrorType.LOAD_FAILED, customData); //try sendLoadError it will not be sended if we are not in load state
        }
      }
      this.sendMessage({
        'type': 'error',
        'data': customData
      });
      if (this.player_) {
        this.player_.stop();
      }
    } catch (err) {
      _externalJs.empPlayer.log.error(err);
    }
  };

  /**
  * emits RESOLUTION_CHANGED event
  *
  * @private 
  */

  empReceiver.prototype.hideMediaResolution_ = function hideMediaResolution_() {
    this.emit(_empReceiverEventsJs2['default'].RESOLUTION_CHANGED);
  };

  /**
  * gets current resolution and emits RESOLUTION_CHANGED event with resolution as argument
  *
  * @private
  */

  empReceiver.prototype.raiseResolutionChangedEvent_ = function raiseResolutionChangedEvent_() {
    if (!this.player_) {
      return;
    }
    var resolutionWidth = this.player_.videoWidth();
    var resolution = undefined;
    if (resolutionWidth > 0 && resolutionWidth < 1280) {
      resolution = 'SD';
    } else if (resolutionWidth >= 1280 && resolutionWidth < 2048) {
      resolution = 'HD';
    } else if (resolutionWidth === 2048) {
      resolution = '2K';
    } else if (resolutionWidth >= 3840 && resolutionWidth <= 4096) {
      resolution = '4K';
    }
    this.emit(_empReceiverEventsJs2['default'].RESOLUTION_CHANGED, resolution);
  };

  /**
  * debugging the receiver UI in Chrome.
  *
  * @private
  */

  empReceiver.prototype.loadDebug_ = function loadDebug_() {
    if (this.isChromecast_) return;
    _externalJs.empPlayer.log('Debugging the receiver UI in Chrome');
    var data = _globalWindow2['default'].localStorage.getItem('CC_loadRequest');
    if (data) {
      var loadRequest = JSON.parse(data);
      _externalJs.empPlayer.log('loadRequest in localStorage', loadRequest);
      this.onLoad_({ 'data': loadRequest });
    } else {
      _externalJs.empPlayer.log.error('No loadRequest in localStorage');
    }
  };

  /**
  * Main load start for casting
  *
  * @param {Event} event Initialising data from sender
  * @private
  */

  empReceiver.prototype.onLoad_ = function onLoad_(event) {
    var _this2 = this;

    _externalJs.empPlayer.log('onLoad', event);

    var data = event.data;
    this.hasReceivedPlayingEvent_ = false;
    this.assetMetadata_ = data.media.metadata || { title: '', subtitle: '', images: [] };
    this.emit(_empReceiverEventsJs2['default'].METADATA_UPDATED, this.assetMetadata_);
    this.onCastStatusChanged_(State.LOADING);
    this.hideMediaResolution_();

    // already loading an event, block this for now
    if (this.loading) {
      _externalJs.empPlayer.log('onLoad blocking', event);
      // saves the last event that comes in
      this.loadNext = event;
      return;
    }

    // Block load calls for 10 seconds, after that load the last event
    this.loading = setTimeout(function () {
      _this2.loading = null;
      if (_this2.loadNext) {
        // Call this method
        _this2.onLoad_(_this2.loadNext);
      }
    }, 10000); // 10 seconds
    this.loadNext = null;

    _externalJs.empPlayer.log('onLoad OK');
    this.loadingState_ = true;

    var options = data.customData;
    if (!options) {
      this.onEmpError({ message: 'No customData in the load request' });
      return;
    }
    if (data.currentTime > 0) {
      options.startTime = data.currentTime;
    }
    options.startTime = options.absoluteStartTime ? 0 : options.startTime;

    if (!options.analytics) {
      options.analytics = {};
    }
    options.analytics.deviceInfo = this.getAnalyticsDeviceInfo_();

    if (data && data.autoplay !== undefined) {
      this.player_.autoplay(data.autoplay);
    }

    this.player_.options(options);

    this.player_.disableTimeShift(options.timeShiftDisabled);

    this.player_.one('canplay', function () {
      _externalJs.empPlayer.log('loadAsset', 'canplay', data.media);
      _this2.raiseResolutionChangedEvent_();
      if (_this2.isConnected_) {
        _this2.setStreamType_(data.media);
        _this2.mediaManager_.setMediaInformation(data.media);
      }
    });

    this.player_.one('playing', function () {
      _this2.hasReceivedPlayingEvent_ = true;
      _this2.sendStatus();
      _this2.sendTracks_();
    });

    this.player_.one('loadeddata', function () {
      if (data.autoplay === false) {
        _this2.onCastStatusChanged_(State.PAUSED);
      }
    });

    this.player_.on(Events.LOADED_DATA, function () {
      if (_this2.isConnected_ && _this2.mediaManager_) {
        var mediaInformation = _this2.getMediaInformation();
        mediaInformation = _this2.updateMediaInfo_(mediaInformation);
        var source = _this2.player_.currentSource();
        if (source.options && source.options.empcast) {
          var sourceMetadata = _this2.extractSourceMetadata_(source.options.empcast);
          _this2.updateMediaInfo_rmation_(sourceMetadata);
        }

        _this2.mediaManager_.setMediaInformation(mediaInformation, true);
      }
    });

    if (this.isConnected_) {
      this.player_.on('ready', function () {
        _externalJs.empPlayer.log('ready');
        //Videojs switch videoEl when switch techs
        var videoEl = _this2.player_.tech({ IWillNotUseThisInPlugins: true }).el_;
        _externalJs.empPlayer.log('setMediaElement', _this2.player_.getCurrentTechName(), videoEl.id);
        _this2.mediaManager_.setMediaElement(videoEl);
      });
    }

    //Casting external dash/mp4 streams
    if (options.sources && options.sources.length > 0) {
      _externalJs.empPlayer.log('player_.src', this.player_.options_);
      this.player_.src(options.sources);
      return;
    }
    //Casting sources list of source emp streams too
    else if (options.source && options.source.src) {
        this.player_.src(options.source);
        return;
      }

    var playbackProperties = {};
    if (options.playbackProperties) {
      //From sender
      playbackProperties = options.playbackProperties;
    } else {
      if (options.absoluteStartTime) {
        playbackProperties.startTime = options.absoluteStartTime;
        playbackProperties.playFrom = 'startTime';
      } else if (options.useLastViewedOffset) {
        playbackProperties.playFrom = 'bookmark';
      } else {
        playbackProperties.playFrom = 'defaultBehaviour';
        playbackProperties.startOffset = options.startTime ? options.startTime * 1000 : undefined;
      }
    }

    this.player_.startPlayback(options.assetId, options.channelId, options.programId, playbackProperties);
  };

  /**
  * broadcasts tracks to the senders
  * @private
  *
  */

  empReceiver.prototype.sendTracks_ = function sendTracks_() {
    _externalJs.empPlayer.log('broadcasting embedded tracks');
    var y = 0;
    var activeTrackIds = [];
    var tracks = [];

    var selectedTextTrack = this.player_.getSelectedTextTrack();
    var textTracks = this.player_.textTracks();
    for (var i = 0; i < textTracks.length; i++, y++) {
      var textTrack = textTracks[i];
      if (selectedTextTrack && textTrack.language === selectedTextTrack) {
        activeTrackIds.push(y);
      }

      var track = {
        label: textTrack.label,
        language: textTrack.language,
        type: 'text',
        id: y,
        kind: textTrack.kind
      };
      tracks.push(track);
    }

    var audioTracks = this.player_.audioTracks();
    for (var i = 0; i < audioTracks.length; i++, y++) {
      var audioTrack = audioTracks[i];
      if (audioTrack.enabled === true) {
        activeTrackIds.push(y);
      }

      var track = {
        label: audioTrack.label,
        language: audioTrack.language,
        type: 'audio',
        id: y,
        kind: audioTrack.kind
      };
      tracks.push(track);
    }

    var tracksInfo = {
      tracks: tracks,
      activeTrackIds: activeTrackIds
    };

    var message = {
      type: 'tracksupdated',
      data: {
        tracksInfo: tracksInfo
      }
    };
    this.sendMessage(message);
  };

  empReceiver.prototype.onMetadataLoaded_ = function onMetadataLoaded_(info) {
    _externalJs.empPlayer.log('onMetadataLoaded', info);
    if (info && info.message && info.message.media) {
      info.message.media.metadata = this.assetMetadata_;
      this.setStreamType_(info.message.media);
    }
    this.onMetadataLoadedOrig_(info);
    this.loadingState_ = false;
  };

  empReceiver.prototype.onLoadMetadataError_ = function onLoadMetadataError_(event) {
    this.onCastStatusChanged_(State.IDLE);
    _externalJs.empPlayer.log.error('onLoadMetadataError', event);
    if (this.player_.analytics) {
      this.player_.analytics.onWindowUnload();
    }
    this.onLoadMetadataErrorOrig_(event);
  };

  empReceiver.prototype.onError_ = function onError_(error) {
    try {
      this.onCastStatusChanged_(State.IDLE);
      _externalJs.empPlayer.log.error(error);
      if (this.player_.analytics) {
        this.player_.analytics.onWindowUnload();
      }
      this.sendMessage({
        'type': 'error',
        'data': error
      });
      this.onErrorOrig_(error);
    } catch (err) {
      _externalJs.empPlayer.log.error(err);
    }
  };

  empReceiver.prototype.onPlay_ = function onPlay_(event) {
    _externalJs.empPlayer.log('play', event);
    this.onPlayOrig_(event);
  };

  empReceiver.prototype.onPause_ = function onPause_(event) {
    _externalJs.empPlayer.log('pause', event);
    if (!this.player_.timeShiftEnabled() && this.player_.isLive()) {
      this.sendStatus(event.senderId, event.data.requestId);
      return;
    } else {
      this.onPauseOrig_(event);
    }
  };

  empReceiver.prototype.onSetVolume_ = function onSetVolume_(event) {
    _externalJs.empPlayer.log('setVolume', event);
    var senderId = event.data.customData ? event.data.customData.id : null;
    this.sendMessage({
      'type': Events.VOLUME_CHANGE,
      'data': {
        'volume': event.data.volume.level,
        'muted': event.data.volume.muted,
        'senderId': senderId
      }
    });
    this.onSetVolumeOrig_(event);
  };

  /**
  * By sending the pull message to the Receiver, it will reply with current state, media and asset data.
  *
  * @private
  */

  empReceiver.prototype.pullResponse_ = function pullResponse_() {
    _externalJs.empPlayer.log('pull request');

    this.sendMessage({
      'type': Events.VOLUME_CHANGE,
      'data': {
        'volume': this.player_.volume(),
        'muted': this.player_.muted()
      }
    });
    this.sendMessage({
      'type': 'timeShiftEnabled',
      'data': this.player_.timeShiftEnabled()
    });
    this.sendMessage({
      'type': 'autoplay',
      'data': this.player_.autoplay()
    });
    this.sendMessage({
      'type': 'isLive',
      'data': this.player_.isLive()
    });

    var program = this.player_.getProgramDetails();
    var startTimeLive = this.player_.startTimeLive();
    if (program) {
      startTimeLive = program.start.getTime();
    }
    this.sendMessage({
      'type': 'startTimeLive',
      'data': startTimeLive
    });

    if (program) {
      program = Object.assign({}, program);
      program.start = undefined;
      program.end = undefined;
      this.sendMessage({
        'type': Events.PROGRAM_CHANGED,
        'data': { 'program': program }
      });
    }

    var asset = this.player_.getAssetDetails();
    if (asset) {
      this.sendMessage({
        'type': Events.ASSET_CHANGED,
        'data': { 'asset': asset }
      });
    }

    var entitlement = this.player_.entitlement;
    if (entitlement) {
      this.sendMessage({
        'type': Events.ENTITLEMENT_CHANGE,
        'data': { 'entitlement': entitlement }
      });
    }

    this.sendTracks_();
  };

  /**
  * Handle Shutdown event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onShutdown_ = function onShutdown_(event) {
    _externalJs.empPlayer.log('shutdown', event);
  };

  /**
  * Handle SendersChanged event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onSendersChanged_ = function onSendersChanged_() {
    this.isConnected_ = this.castReceiverManager_.getSenders().length !== 0;
  };

  /**
  * Handle SenderConnected event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onSenderConnected_ = function onSenderConnected_(event) {
    _externalJs.empPlayer.log('SenderConnected', event.senderId, event.userAgent);
    var senders = this.castReceiverManager_.getSenders();
    var sendersCount = senders ? senders.length : 0;
    _externalJs.empPlayer.log('senders', senders, sendersCount);
  };

  /**
  * Handle SenderDisconnected event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onSenderDisconnected_ = function onSenderDisconnected_(event) {
    _externalJs.empPlayer.log('SenderDisconnected', event.senderId, event.userAgent, event.reason);
    var senders = this.castReceiverManager_.getSenders();
    var sendersCount = senders ? senders.length : 0;
    _externalJs.empPlayer.log('senders', senders, sendersCount);
    //Stop casting if last sender disconnect, important: We only do this if REQUESTED_BY_SENDER
    if (event.reason === cast.receiver.system.DisconnectReason.REQUESTED_BY_SENDER) {
      if (sendersCount === 0 && this.shutdownWhenLastSenderDisconnect_) {
        _externalJs.empPlayer.log('shutdown no senders');
        this.castReceiverManager_.stop();
        if (this.player_.analytics) {
          this.player_.analytics.onWindowUnload();
        }
      }
    }
  };

  /**
  * Handle SystemVolumeChanged event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onSystemVolumeChanged_ = function onSystemVolumeChanged_(event) {
    _externalJs.empPlayer.log('systemVolumeChanged', event);
    this.sendMessage({
      'type': Events.VOLUME_CHANGE,
      'data': {
        'volume': event.data.level,
        'muted': event.data.muted
      }
    });
  };

  /**
  * Handle Seek event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onSeek_ = function onSeek_(event) {
    _externalJs.empPlayer.log('seek', event);
    var currentTime = event.data.currentTime;
    if (this.player_.canSeekTo(currentTime)) {
      this.seekEvent_ = event;
      this.player_.currentTime(currentTime);
    }
    this.sendStatus(event.senderId, event.data.requestId);
  };

  /**
  * Handle ended event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onEnded_ = function onEnded_(event) {
    var _this3 = this;

    //Wait for next source in sources list to load
    _externalJs.empPlayer.log('onStop_', event);
    setTimeout(function () {
      if (_this3.player_.ended()) {
        _this3.onCastStatusChanged_(State.IDLE);
        _this3.onEndedOrig_(event);
      }
    }, 3000);
  };

  /**
  * Handle Stop event
  *
  * @param {Event} event
  * @private
  */

  empReceiver.prototype.onStop_ = function onStop_(event) {
    _externalJs.empPlayer.log('onStop_', event);
    if (this.player_) {
      this.player_.stop();
    }
    this.onCastStatusChanged_(State.IDLE);
    this.onStopOrig_(event);
  };

  /**
  * Provides information about the media currently loaded.
  * 
  * @return {cast.receiver.media.MediaInformation} 
  * {@link https://developers.google.com/cast/docs/reference/receiver/cast.receiver.media.MediaInformation Google Cast MediaInformation}.
  */

  empReceiver.prototype.getMediaInformation = function getMediaInformation() {
    return this.mediaManager_ && this.mediaManager_.getMediaInformation() ? this.mediaManager_.getMediaInformation() : {};
  };

  /**
  *  Current receiver state. ['launching', 'loading','buffering', 'seeking', 'playing', 'paused', 'done', 'idle']
  *
  * @return {string} empReceiver.ReceiverStates ['launching', 'loading','buffering', 'seeking', 'playing', 'paused', 'done', 'idle']
  */

  /**
   * Get current media manager instance
   * The MediaManager is used to send/receive media messages/events
     * It will print a warning by default about the danger of using the MediaManager directly
   * but any argument that is passed in will silence the warning.
   * @param {any} safety Anything passed in to silence the warning
   * @return {cast.receiver.MediaManager}
   * {@link https://developers.google.com/cast/docs/reference/receiver/cast.receiver.MediaManager Google Cast MediaManager}.
   */

  empReceiver.prototype.getMediaManager = function getMediaManager(safety) {
    if (safety === undefined) {
      _externalJs.empPlayer.warn('Using the MediaManager directly can be dangerous. I hope you know what you\'re doing.');
    }
    return this.mediaManager_;
  };

  /**
  * Get current cast receiver manager instance
  * The receiver manager allows communication with the platform and is used to send/receive system messages/events.
  * 
  * It will print a warning by default about the danger of using the CastReceiverManager directly
  * but any argument that is passed in will silence the warning.
  * @param {any} safety Anything passed in to silence the warning
  * @return {cast.receiver.CastReceiverManager}
  * {@link https://developers.google.com/cast/docs/reference/receiver/cast.receiver.CastReceiverManager Google Cast ReceiverManager}.
  */

  empReceiver.prototype.getCastReceiverManager = function getCastReceiverManager(safety) {
    if (safety === undefined) {
      _externalJs.empPlayer.warn('Using the CastReceiverManager directly can be dangerous. I hope you know what you\'re doing.');
    }
    return this.castReceiverManager_;
  };

  /**
  * Get current Video Element
  *
  * It will print a warning by default about the danger of using the Video Element directly
  * but any argument that is passed in will silence the warning.
  * @param {any} safety Anything passed in to silence the warning
  * @returns {Element} The Video Element
  */

  empReceiver.prototype.getVideoElement = function getVideoElement(safety) {
    if (safety === undefined) {
      _externalJs.empPlayer.warn('Using the Video Element directly can be dangerous. I hope you know what you\'re doing.');
    }
    return this.player_.tech({ IWillNotUseThisInPlugins: true }).el_;
  };

  /**
  * Check if running on Chromecast device.
  *
  * @return {bool} True if running on Chromecast device.
  */

  /**
  * Handle CastStatusChanged event
  *
  * @param state
  * @private
  */

  empReceiver.prototype.onCastStatusChanged_ = function onCastStatusChanged_(state) {
    _externalJs.empPlayer.log('onCastStatusChanged_: ' + state);
    this.state_ = state;
    this.setIdleTimeout_(IdleTimeout[state.toUpperCase()]);
    this.emit(_empReceiverEventsJs2['default'].STATE_CHANGED, state);
  };

  /**
  * Sets the amount of time before the player is considered idle.
  *
  * @param {number} time the time in milliseconds before the player goes idle
  * @private
  */

  empReceiver.prototype.setIdleTimeout_ = function setIdleTimeout_(time) {
    var _this4 = this;

    _externalJs.empPlayer.log('setIdleTimeout_: ' + time);
    clearTimeout(this.idleTimeout_);

    if (time) {
      (function () {
        var self = _this4;
        _this4.idleTimeout_ = setTimeout(function () {
          self.castReceiverManager_.stop();
        }, time);
      })();
    }
  };

  /**
   * EMPReceiver version
   *
   * @return {string} The EMPReceiver version
   */

  /**
  * get analytics deviceInfo, which includes emp-chromecast-receiver version
  *
  * @export
  * @private
  */

  empReceiver.prototype.getAnalyticsDeviceInfo_ = function getAnalyticsDeviceInfo_() {
    return {
      'deviceModel': 'Chromecast',
      'deviceManufacturer': 'Google',
      'deviceAppInfo': 'emp-chromecast-receiver v' + this.version
    };
  };

  /**
  * Returns the underlying EmpPlayer version 2 
  * EmpPlayer API: https://www.npmjs.com/package/empplayer2
  * @return {EmpPlayer}
  * @export
  */

  /**
  * set shutdown When Last Sender Disconnect
  *
  * @private
  */

  empReceiver.prototype.shutdownWhenLastSenderDisconnect = function shutdownWhenLastSenderDisconnect(value) {
    if (value === undefined) {
      return this.shutdownWhenLastSenderDisconnect_;
    } else {
      this.shutdownWhenLastSenderDisconnect_ = value;
    }
  };

  /**
  * Handle initialization of a player when a new video is cast
  *
  * @param {Callback=} ready callback to be called when the receiver is reader
  * @private
  */

  empReceiver.prototype.createPlayer = function createPlayer(ready) {
    var _this5 = this;

    _externalJs.empPlayer.log('Create player');
    var options = this.options_.playerOptions;
    options.techOrder = ['EmpShaka', 'Html5'];

    options.controls = true;
    if (this.options_ && this.options_.controls) {
      options.children = this.options_.controls;
    } else {
      options.children = {
        'controlBar': {},
        'mediaLoader': {},
        'posterImage': {},
        'textTrackDisplay': {},
        'errorDisplay': {},
        'textTrackSettings': {}
      };
    }
    options.analytics = {};
    options.analytics.deviceInfo = this.getAnalyticsDeviceInfo_();
    options.persistTextTrackSettings = false;

    // Setup EmpPlayer
    this.player_ = new _externalJs.empPlayer(this.element_, options, ready);

    this.player_.on(Events.ERROR, function (event, err) {
      if ('error' === event.type) {
        _this5.onEmpError(_this5.player_.getError() || { 'message': err });
      }
    });

    this.player_.on(Events.SEGMENT_MISSING, function () {
      _externalJs.empPlayer.log('SEGMENT_MISSING');
      var position = -1;
      if (_this5.seekEvent_) {
        position = _this5.seekEvent_.data.currentTime;
        _this5.sendStatus(_this5.seekEvent_.senderId, _this5.seekEvent_.data.requestId);
        _this5.seekEvent_ = null;
      }
      _this5.sendMessage({ type: Events.SEGMENT_MISSING, data: position });
    });

    this.player_.on(Events.SEEKED, function () {
      _externalJs.empPlayer.log('SEEKED');
      if (_this5.seekEvent_) {
        _this5.sendStatus(_this5.seekEvent_.senderId, _this5.seekEvent_.data.requestId);
        _this5.seekEvent_ = null;
      }
    });

    this.player_.on(Events.DURATION_CHANGE, function () {
      if (_this5.state_ !== State.IDLE) {
        if (_this5.player_.isProgramLive()) {
          _this5.sendStatus();
        }
      }
    });
    this.player_.on(Events.BITRATE_CHANGED, function () {
      return _this5.raiseResolutionChangedEvent_();
    });
    this.player_.on(Events.TRACK_CHANGE, function () {
      _this5.sendTracks_();
    });

    this.player_.one(Events.CAN_PLAY, function () {
      var timeShiftEnabled = _this5.player_.timeShiftEnabled();
      _this5.sendMessage({ type: 'timeShiftEnabled', data: timeShiftEnabled });
    });

    this.player_.on(Events.PROGRAM_CHANGED, function (event, data) {
      var programId = data && data.program ? data.program.programId : null;
      if (programId) {
        _this5.sendMessage({
          'type': 'startTimeLive',
          'data': data.program.start.getTime()
        });
        var program = Object.assign({}, data.program);
        program.start = undefined;
        program.end = undefined;
        var assetMetadata = _this5.extractMetadata_(program.asset);
        _this5.updateMediaInformation_(assetMetadata, data);
      }
    });

    this.player_.on(Events.ASSET_CHANGED, function (event, data) {
      if (data && data.asset) {
        var assetMetadata = _this5.extractMetadata_(data.asset);
        _this5.updateMediaInformation_(assetMetadata, data);
      }
    });

    this.player_.on(Events.ENTITLEMENT_CHANGE, function (event, data) {
      var entitlement = data && data.entitlement;
      if (entitlement) {
        _this5.sendMessage({ type: Events.ENTITLEMENT_CHANGE, data: { 'entitlement': entitlement } });
      }
    });

    this.player_.on('playing', function () {
      //Clear errors
      _this5.player_.error(null);
      _this5.onCastStatusChanged_(State.PLAYING);
    });
    this.player_.on('pause', function () {
      if (_this5.player_.isPlaying() && _this5.hasReceivedPlayingEvent_) {
        _this5.onCastStatusChanged_(State.PAUSED);
      }
    });
    this.player_.on('waiting', function () {
      if (_this5.state_ !== State.IDLE) {
        _this5.onCastStatusChanged_(State.BUFFERING);
      }
    });
    this.player_.on('seeking', function () {
      _this5.onCastStatusChanged_(State.SEEKING);
    });
    this.player_.on('abort', function () {
      if (_this5.hasReceivedPlayingEvent_ === true && (_this5.state_ !== State.LOADING || _this5.state_ !== State.IDLE)) {
        _this5.onCastStatusChanged_(State.IDLE);
      }
    });
  };

  /**
  * Extract title, subtitle and images from asset
  *
  * @param {object} asset
  * @returns {object} title, subtitle and images
  * @private
  */

  empReceiver.prototype.extractMetadata_ = function extractMetadata_(asset) {
    _externalJs.empPlayer.log('extractMetadata', asset);
    var title = null;
    var subtitle = null;
    var images = null;
    if (asset && asset.localized && asset.localized.length > 0) {
      if (asset.localized[0].title) {
        title = asset.localized[0].title;
      }
      if (asset.localized[0].shortDescription) {
        subtitle = asset.localized[0].shortDescription;
      }
      if (asset.localized[0].images && asset.localized[0].images.length > 0 && asset.localized[0].images[0].url) {
        images = asset.localized[0].images;
      }
    }
    return {
      'title': title ? title : '',
      'subtitle': subtitle ? subtitle : '',
      'images': images ? images : []
    };
  };

  /**
  * Extract title, subtitle and images from video source options
  *
  * @param {object} data source options
  * @returns {object} title, subtitle and images
  * @private
  */

  empReceiver.prototype.extractSourceMetadata_ = function extractSourceMetadata_(data) {
    _externalJs.empPlayer.log('extractSourceMetadata', data);
    return {
      'title': data.title ? data.title : '',
      'subtitle': data.subtitle ? data.subtitle : '',
      'images': data.image ? [data.image] : []
    };
  };

  /**
  * update the internal MediaInformation with metadata and empPayload and customData and contentId
  *
  * @param {object} assetMetadata
  * @param {?object} data
  * @private
  */

  empReceiver.prototype.updateMediaInformation_ = function updateMediaInformation_(assetMetadata, data) {
    var _this6 = this;

    _externalJs.empPlayer.log('updateMediaInformation', assetMetadata, data);

    // Cuts log spam when debugging the receiver UI in Chrome.
    if (this.isConnected_ && this.mediaManager_) {

      var mediaInformation = this.getMediaInformation();
      this.setStreamType_(mediaInformation);

      mediaInformation.metadata = mediaInformation.metadata || { title: '', subtitle: '', images: [] };
      mediaInformation.metadata.title = assetMetadata.title ? assetMetadata.title : '';
      mediaInformation.metadata.subtitle = assetMetadata.subtitle ? assetMetadata.subtitle : '';
      mediaInformation.metadata.images = assetMetadata.images ? assetMetadata.images : [];

      if (data && data.program) {
        mediaInformation.contentId = data.program.assetId;
        mediaInformation.empPayload = {
          'assetId': data.program.assetId,
          'programId': data.program.programId,
          'channelId': data.program.channelId
        };
        mediaInformation.customData = mediaInformation.empPayload;
      } else if (data && data.asset) {
        mediaInformation.contentId = data.asset.assetId;
        mediaInformation.empPayload = {
          'assetId': data.asset.assetId
        };
        mediaInformation.customData = mediaInformation.empPayload;
      }

      this.assetMetadata_ = mediaInformation.metadata;
      _externalJs.empPlayer.log('updateMediaInformation', mediaInformation);
      this.emit(_empReceiverEventsJs2['default'].METADATA_UPDATED, this.assetMetadata_);
      this.mediaManager_.setMediaInformation(mediaInformation, true);
    }

    if (data && data.program) {
      this.sendMessage({
        'type': Events.PROGRAM_CHANGED,
        'data': data
      });
    } else if (data && data.asset) {
      this.sendMessage({
        'type': Events.ASSET_CHANGED,
        'data': data
      });
    }

    //Need to wait
    setTimeout(function () {
      _this6.sendStatus();
    }, 1000);
  };

  /**
  * Sends a custom message to a specific sender or
  * broadcast custom message to all connected senders.
  * It can be dangerous to send message directly from ReceiverApp, but if you know what you're doing it's public.
  * @param {object} message object with message details
  * @param {string} opt_senderId optional set if you want to send message to just one specific sender
  * @export
  */

  empReceiver.prototype.sendMessage = function sendMessage(message, opt_senderId) {
    _externalJs.empPlayer.log('sendMessage', message, opt_senderId);

    // Cuts log spam when debugging the receiver UI in Chrome.
    if (!this.isConnected_ || !this.messageBus_) {
      this.emit('sendmessage', message);
      return;
    }

    if (opt_senderId) {
      this.messageBus_.getCastChannel(opt_senderId).send(JSON.stringify(message));
    } else {
      this.messageBus_.broadcast(JSON.stringify(message));
    }
  };

  /**
   * Sends media status to a specific sender or
   * broadcast media status to all connected senders.
   *
   * @param {?string} opt_senderId optional sender id
   * @param {?number} opt_requestId optional request id
   * @export
   */

  empReceiver.prototype.sendStatus = function sendStatus(opt_senderId, opt_requestId) {
    _externalJs.empPlayer.log('sendStatus', opt_senderId, opt_requestId);

    // Cuts log spam when debugging the receiver UI in Chrome.
    if (!this.isConnected_ || !this.messageBus_) return;

    if (opt_senderId) {
      this.mediaManager_.sendStatus(opt_senderId, opt_requestId, true);
    } else {
      this.mediaManager_.broadcastStatus(true);
    }
  };

  _createClass(empReceiver, [{
    key: 'state',
    get: function get() {
      return this.state_;
    }
  }, {
    key: 'isChromecast',
    get: function get() {
      return this.isChromecast_;
    }
  }, {
    key: 'version',
    get: function get() {
      return '2.0.79-31';
    }
  }, {
    key: 'player',
    get: function get() {
      return this.player_;
    }
  }]);

  return empReceiver;
})();

empReceiver.Events = _empReceiverEventsJs2['default'];
empReceiver.ReceiverStates = State;
empReceiver.empPlayer = _externalJs.empPlayer;

if (typeof define === 'function' && define['amd']) {
  define('empReceiver', [], function () {
    return empReceiver;
  });
  // checking that module is an object too because of umdjs/umd#35
} else if (typeof exports === 'object' && typeof module === 'object') {
    module['exports'] = empReceiver;
  }

exports['default'] = empReceiver;
module.exports = exports['default'];

},{"./controls/receiver-control-bar.js":21,"./emp-receiver-events.js":23,"./external.js":25,"es6-mixins":3,"events":7,"global/window":5}],25:[function(_dereq_,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _globalWindow = _dereq_('global/window');

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var videojsTmp = undefined,
    empPlayerTmp = undefined,
    empShakaTmp = undefined;

if (_globalWindow2['default'].EMP_DEBUG_LOG) {
  videojsTmp = _globalWindow2['default'].videojs;
  empPlayerTmp = _globalWindow2['default'].empPlayer;
  empShakaTmp = _globalWindow2['default'].empShaka;
} else {
  videojsTmp = _dereq_('video.js');
  _globalWindow2['default'].videojs = videojsTmp;
  empPlayerTmp = _dereq_('empplayer2-dev/dist/js/emp-player.js');
  _globalWindow2['default'].empPlayer = empPlayerTmp;
  empShakaTmp = _dereq_('empplayer2-dev/dist/js/emp-shaka.js');
}

var videojs = videojsTmp;
exports.videojs = videojs;
var empPlayer = empPlayerTmp;
exports.empPlayer = empPlayer;
var empShaka = empShakaTmp;
exports.empShaka = empShaka;

},{"empplayer2-dev/dist/js/emp-player.js":1,"empplayer2-dev/dist/js/emp-shaka.js":2,"global/window":5,"video.js":8}]},{},[24])(24)
});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(_dereq_,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = _dereq_('min-document');

var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

module.exports = doccy;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":5}],4:[function(_dereq_,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(_dereq_,module,exports){

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
